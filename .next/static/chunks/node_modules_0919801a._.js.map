{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"file":"pairwise.js","sourceRoot":"","sources":["../../../../src/internal/operators/pairwise.ts"],"names":[],"mappings":";;;AACA,OAAO,EAAE,OAAO,EAAE,MAAM,cAAc,CAAC;AACvC,OAAO,EAAE,wBAAwB,EAAE,MAAM,sBAAsB,CAAC;;;AA6C1D,SAAU,QAAQ;IACtB,+KAAO,UAAA,AAAO,EAAC,SAAC,MAAM,EAAE,UAAU;QAChC,IAAI,IAAO,CAAC;QACZ,IAAI,OAAO,GAAG,KAAK,CAAC;QACpB,MAAM,CAAC,SAAS,4LACd,2BAAA,AAAwB,EAAC,UAAU,EAAE,SAAC,KAAK;YACzC,IAAM,CAAC,GAAG,IAAI,CAAC;YACf,IAAI,GAAG,KAAK,CAAC;YACb,OAAO,IAAI,UAAU,CAAC,IAAI,CAAC;gBAAC,CAAC;gBAAE,KAAK;aAAC,CAAC,CAAC;YACvC,OAAO,GAAG,IAAI,CAAC;QACjB,CAAC,CAAC,CACH,CAAC;IACJ,CAAC,CAAC,CAAC;AACL,CAAC","debugId":null}},
    {"offset": {"line": 35, "column": 0}, "map": {"version":3,"file":"index3.mjs","sources":["file:///Users/isseemii/app/letterseed/node_modules/sanity/src/structure/structureResolvers/PaneResolutionError.ts","file:///Users/isseemii/app/letterseed/node_modules/sanity/src/structure/structureResolvers/assignId.ts","file:///Users/isseemii/app/letterseed/node_modules/sanity/src/structure/structureResolvers/createPaneResolver.ts","file:///Users/isseemii/app/letterseed/node_modules/sanity/src/structure/structureResolvers/memoBind.ts","file:///Users/isseemii/app/letterseed/node_modules/sanity/src/structure/structureResolvers/resolveIntent.ts","file:///Users/isseemii/app/letterseed/node_modules/sanity/src/structure/structureResolvers/createResolvedPaneNodeStream.ts","file:///Users/isseemii/app/letterseed/node_modules/sanity/src/structure/structureResolvers/useResolvedPanes.ts","file:///Users/isseemii/app/letterseed/node_modules/sanity/src/structure/components/structureTool/intentResolver/utils.ts","file:///Users/isseemii/app/letterseed/node_modules/sanity/src/structure/components/structureTool/intentResolver/IntentResolver.tsx","file:///Users/isseemii/app/letterseed/node_modules/sanity/src/structure/components/structureTool/StructureError.tsx","file:///Users/isseemii/app/letterseed/node_modules/sanity/src/structure/components/structureTool/NoDocumentTypesScreen.tsx","file:///Users/isseemii/app/letterseed/node_modules/sanity/src/structure/components/structureTool/StructureTitle.tsx","file:///Users/isseemii/app/letterseed/node_modules/sanity/src/structure/components/structureTool/StructureTool.tsx","file:///Users/isseemii/app/letterseed/node_modules/sanity/src/structure/components/structureTool/StructureToolBoundary.tsx"],"sourcesContent":["import {type RouterPaneSiblingContext} from '../types'\n\nexport interface PaneResolutionErrorOptions {\n  message: string\n  context?: RouterPaneSiblingContext\n  helpId?: string\n  cause?: Error\n}\n\n/**\n * An error thrown during pane resolving. This error is meant to be bubbled up\n * through react and handled in an error boundary. It includes a `cause`\n * property which is the original error caught\n */\nexport class PaneResolutionError extends Error {\n  cause: Error | undefined\n  context: RouterPaneSiblingContext | undefined\n  helpId: string | undefined\n\n  constructor({message, context, helpId, cause}: PaneResolutionErrorOptions) {\n    super(message)\n    this.name = 'PaneResolutionError'\n    this.context = context\n    this.helpId = helpId\n    this.cause = cause\n  }\n}\n","import {nanoid} from 'nanoid'\n\n// `WeakMap`s require the first type param to extend `object`\nconst randomIdCache = new WeakMap<object, string>()\n\n/**\n * given an object, this function randomly generates an ID and returns it. this\n * result is then saved in a WeakMap so subsequent requests for the same object\n * will receive the same ID\n */\nexport function assignId(obj: object): string {\n  const cachedValue = randomIdCache.get(obj)\n  if (cachedValue) return cachedValue\n\n  const id = nanoid()\n  randomIdCache.set(obj, id)\n  return id\n}\n","import {from, isObservable, type Observable, of as observableOf} from 'rxjs'\nimport {publishReplay, refCount, switchMap} from 'rxjs/operators'\nimport {isRecord} from 'sanity'\n\nimport {type PaneNode, type RouterPaneSiblingContext, type UnresolvedPaneNode} from '../types'\nimport {PaneResolutionError} from './PaneResolutionError'\n\ninterface Serializable {\n  serialize: (...args: never[]) => unknown\n}\n\nconst isPromise = (thing: any): thing is PromiseLike<unknown> => {\n  return !!thing && typeof thing?.then === 'function'\n}\nconst isSerializable = (thing: unknown): thing is Serializable => {\n  if (!isRecord(thing)) return false\n  return typeof thing.serialize === 'function'\n}\n\n/**\n * The signature of the function used to take an `UnresolvedPaneNode` and turn\n * it into an `Observable<PaneNode>`.\n */\nexport type PaneResolver = (\n  unresolvedPane: UnresolvedPaneNode | undefined,\n  context: RouterPaneSiblingContext,\n  flatIndex: number,\n) => Observable<PaneNode>\n\nexport type PaneResolverMiddleware = (paneResolveFn: PaneResolver) => PaneResolver\n\nconst rethrowWithPaneResolutionErrors: PaneResolverMiddleware =\n  (next) => (unresolvedPane, context, flatIndex) => {\n    try {\n      return next(unresolvedPane, context, flatIndex)\n    } catch (e) {\n      // re-throw errors that are already `PaneResolutionError`s\n      if (e instanceof PaneResolutionError) {\n        throw e\n      }\n\n      // anything else, wrap with `PaneResolutionError` and set the underlying\n      // error as a the `cause`\n      throw new PaneResolutionError({\n        message: typeof e?.message === 'string' ? e.message : '',\n        context,\n        cause: e,\n      })\n    }\n  }\n\nconst wrapWithPublishReplay: PaneResolverMiddleware =\n  (next) =>\n  (...args) => {\n    return next(...args).pipe(\n      // need to add publishReplay + refCount to ensure new subscribers always\n      // get an emission. without this, memoized observables may get stuck\n      // waiting for their first emissions resulting in a loading pane\n      publishReplay(1),\n      refCount(),\n    )\n  }\n\nexport function createPaneResolver(middleware: PaneResolverMiddleware): PaneResolver {\n  // note: this API includes a middleware/wrapper function because the function\n  // is recursive. we want to call the wrapped version of the function always\n  // (even inside of nested calls) so the identifier invoked for the recursion\n  // should be the wrapped version\n  const resolvePane = rethrowWithPaneResolutionErrors(\n    wrapWithPublishReplay(\n      middleware((unresolvedPane, context, flatIndex) => {\n        if (!unresolvedPane) {\n          throw new PaneResolutionError({\n            message: 'Pane returned no child',\n            context,\n            helpId: 'structure-item-returned-no-child',\n          })\n        }\n\n        if (isPromise(unresolvedPane) || isObservable(unresolvedPane)) {\n          return from(unresolvedPane).pipe(\n            switchMap((result) => resolvePane(result, context, flatIndex)),\n          )\n        }\n\n        if (isSerializable(unresolvedPane)) {\n          return resolvePane(unresolvedPane.serialize(context), context, flatIndex)\n        }\n\n        if (typeof unresolvedPane === 'function') {\n          return resolvePane(unresolvedPane(context.id, context), context, flatIndex)\n        }\n\n        return observableOf(unresolvedPane)\n      }),\n    ),\n  )\n\n  return resolvePane\n}\n","/* eslint-disable @typescript-eslint/no-unsafe-function-type */\n\n// `WeakMap`s require the first type param to extend `object`\nconst bindCache = new WeakMap<object, Map<string, Function>>()\n\n/**\n * An alternative to `obj.method.bind(obj)` that utilizes a weakmap to return\n * the same memory reference for sequent binds.\n */\nexport function memoBind<\n  T extends object,\n  K extends keyof {[P in keyof T]: T[P] extends Function ? T[P] : never},\n>(obj: T, methodKey: K): T[K]\nexport function memoBind(obj: Record<string, unknown>, methodKey: string): Function {\n  const boundMethods = bindCache.get(obj) || new Map<string, Function>()\n  if (boundMethods) {\n    const bound = boundMethods.get(methodKey)\n    if (bound) return bound\n  }\n\n  const method = obj[methodKey]\n\n  if (typeof method !== 'function') {\n    throw new Error(\n      `Expected property \\`${methodKey}\\` to be a function but got ${typeof method} instead.`,\n    )\n  }\n\n  const bound = method.bind(obj)\n  boundMethods.set(methodKey, bound)\n  bindCache.set(obj, boundMethods)\n\n  return bound\n}\n","import {omit} from 'lodash'\nimport {firstValueFrom, type Observable} from 'rxjs'\n\nimport {type StructureContext} from '../structureBuilder'\nimport {\n  type PaneNode,\n  type RouterPanes,\n  type RouterPaneSiblingContext,\n  type UnresolvedPaneNode,\n} from '../types'\nimport {assignId} from './assignId'\nimport {createPaneResolver, type PaneResolverMiddleware} from './createPaneResolver'\nimport {memoBind} from './memoBind'\n\ninterface TraverseOptions {\n  unresolvedPane: UnresolvedPaneNode | undefined\n  intent: string\n  params: {type: string; id: string; [key: string]: string | undefined}\n  payload: unknown\n  parent: PaneNode | null\n  path: string[]\n  currentId: string\n  flatIndex: number\n  levelIndex: number\n  structureContext: StructureContext\n}\n\nexport interface ResolveIntentOptions {\n  rootPaneNode?: UnresolvedPaneNode\n  intent: string\n  params: {type: string; id: string; [key: string]: string | undefined}\n  payload: unknown\n  structureContext: StructureContext\n}\n\n/**\n * Resolves an intent request using breadth first search. If a match is not\n * found, the intent will resolve to the fallback editor.\n *\n * A match is found if:\n * 1. the `PaneNode` is of type `document` and the its ID matches the intent ID\n * 2. the `PaneNode` is of type `documentList` and the `schemaTypeName` matches\n * 3. the `PaneNode`'s `canHandleIntent` method returns true\n *\n * If a `PaneNode` of type `list` is found, it will be searched for a match.\n *\n * @see PaneNode\n */\nexport async function resolveIntent(options: ResolveIntentOptions): Promise<RouterPanes> {\n  const resolvedPaneCache = new Map<string, Observable<PaneNode>>()\n\n  // this is a simple version of the memoizer in `createResolvedPaneNodeStream`\n  const memoize: PaneResolverMiddleware = (nextFn) => (unresolvedPane, context, flatIndex) => {\n    const key = unresolvedPane && `${assignId(unresolvedPane)}-${context.path.join('__')}`\n    const cachedResolvedPane = key && resolvedPaneCache.get(key)\n    if (cachedResolvedPane) return cachedResolvedPane\n\n    const result = nextFn(unresolvedPane, context, flatIndex)\n    if (key) resolvedPaneCache.set(key, result)\n    return result\n  }\n\n  const resolvePane = createPaneResolver(memoize)\n\n  const fallbackEditorPanes: RouterPanes = [\n    [\n      {\n        id: `__edit__${options.params.id}`,\n        params: {...omit(options.params, ['id']), type: options.params.type},\n        payload: options.payload,\n      },\n    ],\n  ]\n\n  async function traverse({\n    currentId,\n    flatIndex,\n    intent,\n    params,\n    parent,\n    path,\n    payload,\n    unresolvedPane,\n    levelIndex,\n    structureContext,\n  }: TraverseOptions): Promise<\n    Array<{panes: RouterPanes; depthIndex: number; levelIndex: number}>\n  > {\n    if (!unresolvedPane) return []\n\n    const {id: targetId, type: schemaTypeName, ...otherParams} = params\n    const context: RouterPaneSiblingContext = {\n      id: currentId,\n      splitIndex: 0,\n      parent,\n      path,\n      index: flatIndex,\n      params: {},\n      payload: undefined,\n      structureContext,\n    }\n    const resolvedPane = await firstValueFrom(resolvePane(unresolvedPane, context, flatIndex))\n\n    // if the resolved pane is a document pane and the pane's ID matches then\n    // resolve the intent to the current path\n    if (resolvedPane.type === 'document' && resolvedPane.id === targetId) {\n      return [\n        {\n          panes: [\n            ...path.slice(0, path.length - 1).map((i) => [{id: i}]),\n            [{id: targetId, params: otherParams, payload}],\n          ],\n          depthIndex: path.length,\n          levelIndex,\n        },\n      ]\n    }\n\n    // NOTE: if you update this logic, please also update the similar handler in\n    // `getIntentState.ts`\n    if (\n      // if the resolve pane's `canHandleIntent` returns true, then resolve\n      resolvedPane.canHandleIntent?.(intent, params, {\n        pane: resolvedPane,\n        index: flatIndex,\n      }) ||\n      // if the pane's `canHandleIntent` did not return true, then match against\n      // this default case. we will resolve the intent if:\n      (resolvedPane.type === 'documentList' &&\n        // 1. the schema type matches (this required for the document to render)\n        resolvedPane.schemaTypeName === schemaTypeName &&\n        // 2. the filter is the default filter.\n        //\n        // NOTE: this case is to prevent false positive matches where the user\n        // has configured a more specific filter for a particular type. In that\n        // case, the user can implement their own `canHandleIntent` function\n        resolvedPane.options.filter === '_type == $type')\n    ) {\n      return [\n        {\n          panes: [\n            // map the current path to router panes\n            ...path.map((id) => [{id}]),\n            // then augment with the intents IDs and params\n            [{id: params.id, params: otherParams, payload}],\n          ],\n          depthIndex: path.length,\n          levelIndex,\n        },\n      ]\n    }\n\n    if (resolvedPane.type === 'list' && resolvedPane.child && resolvedPane.items) {\n      return (\n        await Promise.all(\n          resolvedPane.items.map((item, nextLevelIndex) => {\n            if (item.type === 'divider') return Promise.resolve([])\n\n            return traverse({\n              currentId: item._id || item.id,\n              flatIndex: flatIndex + 1,\n              intent,\n              params,\n              parent: resolvedPane,\n              path: [...path, item.id],\n              payload,\n              unresolvedPane:\n                typeof resolvedPane.child === 'function'\n                  ? memoBind(resolvedPane, 'child')\n                  : resolvedPane.child,\n              levelIndex: nextLevelIndex,\n              structureContext,\n            })\n          }),\n        )\n      ).flat()\n    }\n\n    return []\n  }\n\n  const matchingPanes = await traverse({\n    currentId: 'root',\n    flatIndex: 0,\n    levelIndex: 0,\n    intent: options.intent,\n    params: options.params,\n    parent: null,\n    path: [],\n    payload: options.payload,\n    unresolvedPane: options.rootPaneNode,\n    structureContext: options.structureContext,\n  })\n\n  const closestPaneToRoot = matchingPanes.sort((a, b) => {\n    // break ties with the level index\n    if (a.depthIndex === b.depthIndex) return a.levelIndex - b.levelIndex\n    return a.depthIndex - b.depthIndex\n  })[0]\n\n  if (closestPaneToRoot) {\n    return closestPaneToRoot.panes\n  }\n\n  return fallbackEditorPanes\n}\n","import {generateHelpUrl} from '@sanity/generate-help-url'\nimport {isEqual} from 'lodash'\nimport {concat, NEVER, type Observable, of as observableOf} from 'rxjs'\nimport {distinctUntilChanged, map, pairwise, scan, startWith, switchMap} from 'rxjs/operators'\n\nimport {type StructureContext} from '../structureBuilder'\nimport {\n  type DocumentPaneNode,\n  type PaneNode,\n  type PaneNodeResolver,\n  type RouterPanes,\n  type RouterPaneSibling,\n  type RouterPaneSiblingContext,\n  type UnresolvedPaneNode,\n} from '../types'\nimport {assignId} from './assignId'\nimport {\n  createPaneResolver,\n  type PaneResolver,\n  type PaneResolverMiddleware,\n} from './createPaneResolver'\nimport {memoBind} from './memoBind'\nimport {PaneResolutionError} from './PaneResolutionError'\n\n/**\n * the fallback editor child that is implicitly inserted into the structure tree\n * if the id starts with `__edit__`\n */\nconst fallbackEditorChild: PaneNodeResolver = (nodeId, context): DocumentPaneNode => {\n  const id = nodeId.replace(/^__edit__/, '')\n  const {\n    params,\n    payload,\n    structureContext: {resolveDocumentNode},\n  } = context\n  const {type, template} = params\n\n  if (!type) {\n    throw new Error(\n      `Document type for document with ID ${id} was not provided in the router params.`,\n    )\n  }\n\n  let defaultDocumentBuilder = resolveDocumentNode({schemaType: type, documentId: id}).id('editor')\n\n  if (template) {\n    defaultDocumentBuilder = defaultDocumentBuilder.initialValueTemplate(\n      template,\n      payload as {[key: string]: unknown},\n    )\n  }\n\n  return defaultDocumentBuilder.serialize() as DocumentPaneNode\n}\n\n/**\n * takes in a `RouterPaneSiblingContext` and returns a normalized string\n * representation that can be used for comparisons\n */\nfunction hashContext(context: RouterPaneSiblingContext): string {\n  return `contextHash(${JSON.stringify({\n    id: context.id,\n    parentId: parent && assignId(parent),\n    path: context.path,\n    index: context.index,\n    splitIndex: context.splitIndex,\n    serializeOptionsIndex: context.serializeOptions?.index,\n    serializeOptionsPath: context.serializeOptions?.path,\n  })})`\n}\n\n/**\n * takes in `ResolvedPaneMeta` and returns a normalized string representation\n * that can be used for comparisons\n */\nconst hashResolvedPaneMeta = (meta: ResolvedPaneMeta): string => {\n  const normalized = {\n    type: meta.type,\n    id: meta.routerPaneSibling.id,\n    params: meta.routerPaneSibling.params || {},\n    payload: meta.routerPaneSibling.payload || null,\n    flatIndex: meta.flatIndex,\n    groupIndex: meta.groupIndex,\n    siblingIndex: meta.siblingIndex,\n    path: meta.path,\n    paneNode: meta.type === 'resolvedMeta' ? assignId(meta.paneNode) : null,\n  }\n\n  return `metaHash(${JSON.stringify(normalized)})`\n}\n\n/**\n * Represents one flattened \"router pane\", including the source group and\n * sibling indexes.\n *\n * @see RouterPanes\n */\ninterface FlattenedRouterPane {\n  routerPaneSibling: RouterPaneSibling\n  flatIndex: number\n  groupIndex: number\n  siblingIndex: number\n}\n\n/**\n * The state of the accumulator used to store and manage memo cache state\n */\ninterface CacheState {\n  /**\n   * Holds the memoization results keyed by a combination of `assignId` and a\n   * context hash.\n   */\n  resolvedPaneCache: Map<string, Observable<PaneNode>>\n  /**\n   * Acts as a dictionary that stores cache keys by their flat index. This is\n   * used to clean up the cache between different branches in the pane\n   * structure.\n   *\n   * @see createResolvedPaneNodeStream look inside the `scan` where `wrapFn` is\n   * defined\n   */\n  cacheKeysByFlatIndex: Array<Set<string>>\n  /**\n   * The resulting memoized `PaneResolver` function. This function closes over\n   * the `resolvedPaneCache`.\n   */\n  resolvePane: PaneResolver\n  flattenedRouterPanes: FlattenedRouterPane[]\n}\n\nexport interface CreateResolvedPaneNodeStreamOptions {\n  /**\n   * an input stream of `RouterPanes`\n   * @see RouterPanes\n   */\n  routerPanesStream: Observable<RouterPanes>\n  /**\n   * any `UnresolvedPaneNode` (could be an observable, promise, pane resolver etc)\n   */\n  rootPaneNode: UnresolvedPaneNode\n  /** used primarily for testing */\n  initialCacheState?: CacheState\n\n  structureContext: StructureContext\n}\n\n/**\n * The result of pane resolving\n */\nexport type ResolvedPaneMeta = {\n  groupIndex: number\n  siblingIndex: number\n  flatIndex: number\n  routerPaneSibling: RouterPaneSibling\n  path: string[]\n} & ({type: 'loading'; paneNode: null} | {type: 'resolvedMeta'; paneNode: PaneNode})\n\ninterface ResolvePaneTreeOptions {\n  resolvePane: PaneResolver\n  flattenedRouterPanes: FlattenedRouterPane[]\n  unresolvedPane: UnresolvedPaneNode | undefined\n  parent: PaneNode | null\n  path: string[]\n  structureContext: StructureContext\n}\n\n/**\n * A recursive pane resolving function. Starts at one unresolved pane node and\n * continues until there is no more flattened router panes that can be used as\n * input to the unresolved panes.\n */\nfunction resolvePaneTree({\n  unresolvedPane,\n  flattenedRouterPanes,\n  parent,\n  path,\n  resolvePane,\n  structureContext,\n}: ResolvePaneTreeOptions): Observable<ResolvedPaneMeta[]> {\n  const [current, ...rest] = flattenedRouterPanes\n  const next = rest[0] as FlattenedRouterPane | undefined\n\n  const context: RouterPaneSiblingContext = {\n    id: current.routerPaneSibling.id,\n    splitIndex: current.siblingIndex,\n    parent,\n    path: [...path, current.routerPaneSibling.id],\n    index: current.flatIndex,\n    params: current.routerPaneSibling.params || {},\n    payload: current.routerPaneSibling.payload,\n    structureContext,\n  }\n\n  try {\n    return resolvePane(unresolvedPane, context, current.flatIndex).pipe(\n      // this switch map receives a resolved pane\n      switchMap((paneNode) => {\n        // we can create a `resolvedMeta` type using it\n        const resolvedPaneMeta: ResolvedPaneMeta = {\n          type: 'resolvedMeta',\n          ...current,\n          paneNode: paneNode,\n          path: context.path,\n        }\n\n        // for the other unresolved panes, we can create \"loading panes\"\n        const loadingPanes = rest.map((i, restIndex) => {\n          const loadingPanePath = [\n            ...context.path,\n            ...rest.slice(restIndex).map((_, currentIndex) => `[${i.flatIndex + currentIndex}]`),\n          ]\n\n          const loadingPane: ResolvedPaneMeta = {\n            type: 'loading',\n            path: loadingPanePath,\n            paneNode: null,\n            ...i,\n          }\n\n          return loadingPane\n        })\n\n        if (!rest.length) {\n          return observableOf([resolvedPaneMeta])\n        }\n\n        let nextStream\n\n        if (\n          // the fallback editor case\n          next?.routerPaneSibling.id.startsWith('__edit__')\n        ) {\n          nextStream = resolvePaneTree({\n            unresolvedPane: fallbackEditorChild,\n            flattenedRouterPanes: rest,\n            parent,\n            path: context.path,\n            resolvePane,\n            structureContext,\n          })\n        } else if (current.groupIndex === next?.groupIndex) {\n          // if the next flattened router pane has the same group index as the\n          // current flattened router pane, then the next flattened router pane\n          // belongs to the same group (i.e. it is a split pane)\n          nextStream = resolvePaneTree({\n            unresolvedPane,\n            flattenedRouterPanes: rest,\n            parent,\n            path,\n            resolvePane,\n            structureContext,\n          })\n        } else {\n          // normal children resolving\n          nextStream = resolvePaneTree({\n            unresolvedPane:\n              typeof paneNode.child === 'function'\n                ? (memoBind(paneNode, 'child') as PaneNodeResolver)\n                : paneNode.child,\n            flattenedRouterPanes: rest,\n            parent: paneNode,\n            path: context.path,\n            resolvePane,\n            structureContext,\n          })\n        }\n\n        return concat(\n          // we emit the loading panes first in a concat (this emits immediately)\n          observableOf([resolvedPaneMeta, ...loadingPanes]),\n          // then whenever the next stream is done, the results will be combined.\n          nextStream.pipe(map((nextResolvedPanes) => [resolvedPaneMeta, ...nextResolvedPanes])),\n        )\n      }),\n    )\n  } catch (e) {\n    if (e instanceof PaneResolutionError) {\n      if (e.context) {\n        console.warn(\n          `Pane resolution error at index ${e.context.index}${\n            e.context.splitIndex > 0 ? ` for split pane index ${e.context.splitIndex}` : ''\n          }: ${e.message}${e.helpId ? ` - see ${generateHelpUrl(e.helpId)}` : ''}`,\n          e,\n        )\n      }\n\n      if (e.helpId === 'structure-item-returned-no-child') {\n        // returning an observable of an empty array will remove loading panes\n        // note: this one intentionally does not throw\n        return observableOf([])\n      }\n    }\n\n    throw e\n  }\n}\n\n/**\n * Takes in a stream of `RouterPanes` and an unresolved root pane and returns\n * a stream of `ResolvedPaneMeta`\n */\nexport function createResolvedPaneNodeStream({\n  routerPanesStream,\n  rootPaneNode,\n  initialCacheState = {\n    cacheKeysByFlatIndex: [],\n    flattenedRouterPanes: [],\n    resolvedPaneCache: new Map(),\n    resolvePane: () => NEVER,\n  },\n  structureContext,\n}: CreateResolvedPaneNodeStreamOptions): Observable<ResolvedPaneMeta[]> {\n  const resolvedPanes$ = routerPanesStream.pipe(\n    // add in implicit \"root\" router pane\n    map((rawRouterPanes) => [[{id: 'root'}], ...rawRouterPanes]),\n    // create flattened router panes\n    map((routerPanes) => {\n      const flattenedRouterPanes: FlattenedRouterPane[] = routerPanes\n        .flatMap((routerPaneGroup, groupIndex) =>\n          routerPaneGroup.map((routerPaneSibling, siblingIndex) => ({\n            routerPaneSibling,\n            groupIndex,\n            siblingIndex,\n          })),\n        )\n        // add in the flat index\n        .map((i, index) => ({...i, flatIndex: index}))\n\n      return flattenedRouterPanes\n    }),\n    // calculate a \"diffIndex\" used for clearing the memo cache\n    startWith([] as FlattenedRouterPane[]),\n    pairwise(),\n    map(([prev, curr]) => {\n      for (let i = 0; i < curr.length; i++) {\n        const prevValue = prev[i]\n        const currValue = curr[i]\n\n        if (!isEqual(prevValue, currValue)) {\n          return {\n            flattenedRouterPanes: curr,\n            diffIndex: i,\n          }\n        }\n      }\n\n      return {\n        flattenedRouterPanes: curr,\n        diffIndex: curr.length,\n      }\n    }),\n    // create the memoized `resolvePane` function and manage the memo cache\n    scan((acc, next) => {\n      const {cacheKeysByFlatIndex, resolvedPaneCache} = acc\n      const {flattenedRouterPanes, diffIndex} = next\n\n      // use the `cacheKeysByFlatIndex` like a dictionary to find cache keys to\n      // and cache keys to delete\n      const beforeDiffIndex = cacheKeysByFlatIndex.slice(0, diffIndex + 1)\n      const afterDiffIndex = cacheKeysByFlatIndex.slice(diffIndex + 1)\n\n      const keysToKeep = new Set(beforeDiffIndex.flatMap((keySet) => Array.from(keySet)))\n      const keysToDelete = afterDiffIndex\n        .flatMap((keySet) => Array.from(keySet))\n        .filter((key) => !keysToKeep.has(key))\n\n      for (const key of keysToDelete) {\n        resolvedPaneCache.delete(key)\n      }\n\n      // create a memoizing pane resolver middleware that utilizes the cache\n      // maintained above. this keeps the cache from growing indefinitely\n      const memoize: PaneResolverMiddleware = (nextFn) => (unresolvedPane, context, flatIndex) => {\n        const key = unresolvedPane && `${assignId(unresolvedPane)}-${hashContext(context)}`\n        const cachedResolvedPane = key && resolvedPaneCache.get(key)\n        if (cachedResolvedPane) return cachedResolvedPane\n\n        const result = nextFn(unresolvedPane, context, flatIndex)\n        if (!key) return result\n\n        const cacheKeySet = cacheKeysByFlatIndex[flatIndex] || new Set()\n        cacheKeySet.add(key)\n        cacheKeysByFlatIndex[flatIndex] = cacheKeySet\n        resolvedPaneCache.set(key, result)\n        return result\n      }\n\n      return {\n        flattenedRouterPanes,\n        cacheKeysByFlatIndex,\n        resolvedPaneCache,\n        resolvePane: createPaneResolver(memoize),\n      }\n    }, initialCacheState),\n    // run the memoized, recursive resolving\n    switchMap(({flattenedRouterPanes, resolvePane}) =>\n      resolvePaneTree({\n        unresolvedPane: rootPaneNode,\n        flattenedRouterPanes,\n        parent: null,\n        path: [],\n        resolvePane,\n        structureContext,\n      }),\n    ),\n  )\n\n  // after we've created a stream of `ResolvedPaneMeta[]`, we need to clean up\n  // the results to remove unwanted loading panes and prevent unnecessary\n  // emissions\n  return resolvedPanes$.pipe(\n    // this diffs the previous emission with the current one. if there is a new\n    // loading pane at the same position where a previous pane already had a\n    // resolved value (looking at the IDs to compare), then return the previous\n    // pane instead of the loading pane\n    scan(\n      (prev, next) =>\n        next.map((nextPane, index) => {\n          const prevPane = prev[index] as ResolvedPaneMeta | undefined\n          if (!prevPane) return nextPane\n          if (nextPane.type !== 'loading') return nextPane\n\n          if (prevPane.routerPaneSibling.id === nextPane.routerPaneSibling.id) {\n            return prevPane\n          }\n          return nextPane\n        }),\n      [] as ResolvedPaneMeta[],\n    ),\n    // this prevents duplicate emissions\n    distinctUntilChanged((prev, next) => {\n      if (prev.length !== next.length) return false\n\n      for (let i = 0; i < next.length; i++) {\n        const prevValue = prev[i]\n        const nextValue = next[i]\n        if (hashResolvedPaneMeta(prevValue) !== hashResolvedPaneMeta(nextValue)) {\n          return false\n        }\n      }\n\n      return true\n    }),\n  )\n}\n","import {useEffect, useMemo, useState} from 'react'\nimport {ReplaySubject} from 'rxjs'\nimport {map} from 'rxjs/operators'\nimport {type RouterState, useRouter} from 'sanity/router'\n\nimport {LOADING_PANE} from '../constants'\nimport {type PaneNode, type RouterPaneGroup, type RouterPanes} from '../types'\nimport {useStructureTool} from '../useStructureTool'\nimport {createResolvedPaneNodeStream} from './createResolvedPaneNodeStream'\n\ninterface PaneData {\n  active: boolean\n  childItemId: string | null\n  groupIndex: number\n  index: number\n  itemId: string\n  key: string\n  pane: PaneNode | typeof LOADING_PANE\n  params: Record<string, string | undefined> & {perspective?: string}\n  path: string\n  payload: unknown\n  selected: boolean\n  siblingIndex: number\n}\n\nexport interface Panes {\n  paneDataItems: PaneData[]\n  routerPanes: RouterPanes\n  resolvedPanes: (PaneNode | typeof LOADING_PANE)[]\n}\n\nfunction useRouterPanesStream() {\n  const [routerStateSubject] = useState(() => new ReplaySubject<RouterState>(1))\n  const routerPanes$ = useMemo(\n    () =>\n      routerStateSubject\n        .asObservable()\n        .pipe(map((_routerState) => (_routerState?.panes || []) as RouterPanes)),\n    [routerStateSubject],\n  )\n  const {state: routerState} = useRouter()\n  useEffect(() => {\n    routerStateSubject.next(routerState)\n  }, [routerState, routerStateSubject])\n\n  return routerPanes$\n}\n\nexport function useResolvedPanes(): Panes {\n  // used to propagate errors from async effect. throwing inside of the render\n  // will bubble the error to react where it can be picked up by standard error\n  // boundaries\n  const [error, setError] = useState<unknown>()\n  if (error) throw error\n\n  const {structureContext, rootPaneNode} = useStructureTool()\n\n  const [data, setData] = useState<Panes>({\n    paneDataItems: [],\n    resolvedPanes: [],\n    routerPanes: [],\n  })\n\n  const routerPanesStream = useRouterPanesStream()\n\n  useEffect(() => {\n    const resolvedPanes$ = createResolvedPaneNodeStream({\n      rootPaneNode,\n      routerPanesStream,\n      structureContext,\n    }).pipe(\n      map((resolvedPanes) => {\n        const routerPanes = resolvedPanes.reduce<RouterPanes>((acc, next) => {\n          const currentGroup = acc[next.groupIndex] || []\n          currentGroup[next.siblingIndex] = next.routerPaneSibling\n          acc[next.groupIndex] = currentGroup\n          return acc\n        }, [])\n\n        const groupsLen = routerPanes.length\n\n        const paneDataItems = resolvedPanes.map((pane) => {\n          const {groupIndex, flatIndex, siblingIndex, routerPaneSibling, path} = pane\n          const itemId = routerPaneSibling.id\n          const nextGroup = routerPanes[groupIndex + 1] as RouterPaneGroup | undefined\n\n          const paneDataItem: PaneData = {\n            active: groupIndex === groupsLen - 2,\n            childItemId: nextGroup?.[0].id ?? null,\n            index: flatIndex,\n            itemId: routerPaneSibling.id,\n            groupIndex,\n            key: `${\n              pane.type === 'loading' ? 'unknown' : pane.paneNode.id\n            }-${itemId}-${siblingIndex}`,\n            pane: pane.type === 'loading' ? LOADING_PANE : pane.paneNode,\n            params: routerPaneSibling.params || {},\n            path: path.join(';'),\n            payload: routerPaneSibling.payload,\n            selected: flatIndex === resolvedPanes.length - 1,\n            siblingIndex,\n          }\n\n          return paneDataItem\n        })\n\n        return {\n          paneDataItems,\n          routerPanes,\n          resolvedPanes: paneDataItems.map((pane) => pane.pane),\n        }\n      }),\n    )\n\n    const subscription = resolvedPanes$.subscribe({\n      next: (result) => setData(result),\n      error: (e) => setError(e),\n    })\n\n    return () => subscription.unsubscribe()\n  }, [rootPaneNode, routerPanesStream, structureContext])\n\n  return data\n}\n","import {uuid} from '@sanity/uuid'\nimport {firstValueFrom, type Observable} from 'rxjs'\nimport {type DocumentStore, getPublishedId} from 'sanity'\n\nimport {PaneResolutionError} from '../../../structureResolvers'\n\nexport function removeDraftPrefix(documentId: string): string {\n  const publishedId = getPublishedId(documentId)\n\n  if (publishedId !== documentId) {\n    console.warn(\n      'Removed unexpected draft id in document link: All links to documents should have the ' +\n        '`drafts.`-prefix removed and something appears to have made an intent link to `%s`',\n      documentId,\n    )\n  }\n\n  return publishedId\n}\n\nexport async function ensureDocumentIdAndType(\n  documentStore: DocumentStore,\n  id: string | undefined,\n  type: string | undefined,\n): Promise<{id: string; type: string}> {\n  if (id && type) return {id, type}\n  if (!id && type) return {id: uuid(), type}\n  if (id && !type) {\n    const resolvedType = await firstValueFrom(\n      documentStore.resolveTypeForDocument(id) as Observable<string>,\n    )\n\n    return {id, type: resolvedType}\n  }\n\n  throw new PaneResolutionError({\n    message: 'Neither document `id` or `type` was provided when trying to resolve intent.',\n  })\n}\n","import {memo, useCallback, useEffect, useState} from 'react'\nimport {isRecord, useDocumentStore} from 'sanity'\nimport {useRouter, useRouterState} from 'sanity/router'\n\nimport {resolveIntent} from '../../../structureResolvers'\nimport {useStructureTool} from '../../../useStructureTool'\nimport {ensureDocumentIdAndType} from './utils'\n\nconst EMPTY_RECORD: Record<string, unknown> = {}\n\n/**\n * A component that receives an intent from props and redirects to the resolved\n * intent location (while showing a loading spinner during the process)\n */\nexport const IntentResolver = memo(function IntentResolver() {\n  const {navigate} = useRouter()\n  const maybeIntent = useRouterState(\n    useCallback((routerState) => {\n      const intentName = typeof routerState.intent === 'string' ? routerState.intent : undefined\n      return intentName\n        ? {\n            intent: intentName,\n            params: isRecord(routerState.params) ? routerState.params : EMPTY_RECORD,\n            payload: routerState.payload,\n          }\n        : undefined\n    }, []),\n  )\n  const {rootPaneNode, structureContext} = useStructureTool()\n  const documentStore = useDocumentStore()\n  const [error, setError] = useState<unknown>(null)\n\n  // this re-throws errors so that parent ErrorBoundary's can handle them properly\n  if (error) throw error\n\n  // eslint-disable-next-line consistent-return\n  useEffect(() => {\n    if (maybeIntent) {\n      const {intent, params, payload} = maybeIntent\n\n      let cancelled = false\n      async function effect() {\n        const {id, type} = await ensureDocumentIdAndType(\n          documentStore,\n          typeof params.id === 'string' ? params.id : undefined,\n          typeof params.type === 'string' ? params.type : undefined,\n        )\n\n        if (cancelled) return\n\n        const panes = await resolveIntent({\n          intent,\n          params: {...params, id, type},\n          payload,\n          rootPaneNode,\n          structureContext,\n        })\n\n        if (cancelled) return\n\n        navigate({panes}, {replace: true})\n      }\n\n      effect().catch(setError)\n\n      return () => {\n        cancelled = true\n      }\n    }\n  }, [documentStore, maybeIntent, navigate, rootPaneNode, structureContext])\n\n  return null\n})\n","import {generateHelpUrl} from '@sanity/generate-help-url'\nimport {SyncIcon} from '@sanity/icons'\nimport {Box, Card, Code, Container, Heading, Stack, Text} from '@sanity/ui'\nimport {useCallback} from 'react'\nimport {useTranslation} from 'sanity'\nimport {styled} from 'styled-components'\n\nimport {Button} from '../../../ui-components'\nimport {structureLocaleNamespace} from '../../i18n'\nimport {SerializeError} from '../../structureBuilder'\nimport {PaneResolutionError} from '../../structureResolvers'\n\nconst PathSegment = styled.span`\n  &:not(:last-child)::after {\n    content: ' ➝ ';\n    opacity: 0.5;\n  }\n`\n\nfunction formatStack(stack: string) {\n  return (\n    stack\n      // Prettify builder functions\n      .replace(/\\(\\.\\.\\.\\)\\./g, '(...)\\n  .')\n      // Remove webpack cruft from function names\n      .replace(/__WEBPACK_IMPORTED_MODULE_\\d+_+/g, '')\n      // Remove default export postfix from function names\n      .replace(/___default\\./g, '.')\n      // Replace full host path, leave only path to JS-file\n      .replace(new RegExp(` \\\\(https?:\\\\/\\\\/${window.location.host}`, 'g'), ' (')\n  )\n}\n\ninterface StructureErrorProps {\n  error: unknown\n}\n\nexport function StructureError({error}: StructureErrorProps) {\n  if (!(error instanceof PaneResolutionError)) {\n    throw error\n  }\n  const {cause} = error\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  // Serialize errors are well-formatted and should be readable, in these cases a stack trace is\n  // usually not helpful. Build errors in dev (with HMR) usually also contains a bunch of garbage\n  // instead of an actual error message, so make sure we show the message in these cases as well\n  const stack = cause?.stack || error.stack\n  const showStack =\n    stack && !(cause instanceof SerializeError) && !error.message.includes('Module build failed:')\n\n  const path = cause instanceof SerializeError ? cause.path : []\n  const helpId = (cause instanceof SerializeError && cause.helpId) || error.helpId\n\n  const handleReload = useCallback(() => {\n    window.location.reload()\n  }, [])\n\n  return (\n    <Card height=\"fill\" overflow=\"auto\" padding={4} sizing=\"border\" tone=\"critical\">\n      <Container>\n        <Heading as=\"h2\">{t('structure-error.header.text')}</Heading>\n\n        <Card marginTop={4} padding={4} radius={2} overflow=\"auto\" shadow={1} tone=\"inherit\">\n          {path.length > 0 && (\n            <Stack space={2}>\n              <Text size={1} weight=\"medium\">\n                {t('structure-error.structure-path.label')}\n              </Text>\n              <Code>\n                {/* TODO: it seems like the path is off by one and includes */}\n                {/* `root` twice  */}\n                {path.slice(1).map((segment, i) => (\n                  <PathSegment key={`${segment}-${i}`}>{segment}</PathSegment>\n                ))}\n              </Code>\n            </Stack>\n          )}\n\n          <Stack marginTop={4} space={2}>\n            <Text size={1} weight=\"medium\">\n              {t('structure-error.error.label')}\n            </Text>\n            <Code>{showStack ? formatStack(stack) : error.message}</Code>\n          </Stack>\n\n          {helpId && (\n            <Box marginTop={4}>\n              <Text>\n                <a href={generateHelpUrl(helpId)} rel=\"noopener noreferrer\" target=\"_blank\">\n                  {t('structure-error.docs-link.text')}\n                </a>\n              </Text>\n            </Box>\n          )}\n\n          <Box marginTop={4}>\n            <Button\n              text={t('structure-error.reload-button.text')}\n              icon={SyncIcon}\n              tone=\"primary\"\n              onClick={handleReload}\n            />\n          </Box>\n        </Card>\n      </Container>\n    </Card>\n  )\n}\n","import {WarningOutlineIcon} from '@sanity/icons'\nimport {Box, Card, Container, Flex, Stack, Text} from '@sanity/ui'\nimport {useTranslation} from 'sanity'\n\nimport {structureLocaleNamespace} from '../../i18n'\n\nexport function NoDocumentTypesScreen() {\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  return (\n    <Card height=\"fill\">\n      <Flex align=\"center\" height=\"fill\" justify=\"center\" padding={4} sizing=\"border\">\n        <Container width={0}>\n          <Card padding={4} radius={2} shadow={1} tone=\"caution\">\n            <Flex>\n              <Box>\n                <Text size={1}>\n                  <WarningOutlineIcon />\n                </Text>\n              </Box>\n              <Stack flex={1} marginLeft={3} space={3}>\n                <Text as=\"h1\" size={1} weight=\"medium\">\n                  {t('no-document-types-screen.title')}\n                </Text>\n                <Text as=\"p\" muted size={1}>\n                  {t('no-document-types-screen.subtitle')}\n                </Text>\n                <Text as=\"p\" muted size={1}>\n                  <a\n                    href=\"https://www.sanity.io/docs/create-a-schema-and-configure-sanity-studio\"\n                    target=\"_blank\"\n                    rel=\"noreferrer\"\n                  >\n                    {t('no-document-types-screen.link-text')}\n                  </a>\n                </Text>\n              </Stack>\n            </Flex>\n          </Card>\n        </Container>\n      </Flex>\n    </Card>\n  )\n}\n","import {type ObjectSchemaType} from '@sanity/types'\nimport {useEffect} from 'react'\nimport {\n  unstable_useValuePreview as useValuePreview,\n  useEditState,\n  usePerspective,\n  useSchema,\n  useTranslation,\n} from 'sanity'\n\nimport {LOADING_PANE} from '../../constants'\nimport {useDocumentLastRev} from '../../hooks/useDocumentLastRev'\nimport {structureLocaleNamespace} from '../../i18n'\nimport {type Panes} from '../../structureResolvers'\nimport {type DocumentPaneNode} from '../../types'\nimport {useStructureTool} from '../../useStructureTool'\n\ninterface StructureTitleProps {\n  resolvedPanes: Panes['resolvedPanes']\n}\n\n// TODO: Fix state jank when editing different versions inside panes.\nconst DocumentTitle = (props: {documentId: string; documentType: string}) => {\n  const {documentId, documentType} = props\n  const {selectedReleaseId} = usePerspective()\n\n  const editState = useEditState(documentId, documentType, 'default', selectedReleaseId)\n  const schema = useSchema()\n  const {t} = useTranslation(structureLocaleNamespace)\n  const isNewDocument = !editState?.published && !editState?.draft\n  const documentValue = editState?.version || editState?.draft || editState?.published\n  const schemaType = schema.get(documentType) as ObjectSchemaType | undefined\n\n  const {value, isLoading: previewValueIsLoading} = useValuePreview({\n    enabled: !!documentValue,\n    schemaType,\n    value: documentValue,\n  })\n\n  const {lastRevisionDocument} = useDocumentLastRev(documentId, documentType)\n  const isDeleted = lastRevisionDocument && !documentValue\n\n  // if the document is deleted, we don't want to show the title\n  const documentTitle = isDeleted\n    ? ''\n    : isNewDocument\n      ? t('browser-document-title.new-document', {\n          schemaType: schemaType?.title || schemaType?.name,\n        })\n      : value?.title || t('browser-document-title.untitled-document')\n\n  const settled = editState.ready && !previewValueIsLoading\n  const newTitle = useConstructDocumentTitle(documentTitle)\n  useEffect(() => {\n    if (!settled) return\n    // Set the title as the document title\n    document.title = newTitle\n  }, [documentTitle, settled, newTitle])\n\n  return null\n}\n\nconst PassthroughTitle = (props: {title?: string}) => {\n  const {title} = props\n  const newTitle = useConstructDocumentTitle(title)\n  useEffect(() => {\n    // Set the title as the document title\n    document.title = newTitle\n  }, [newTitle, title])\n  return null\n}\n\nexport const StructureTitle = (props: StructureTitleProps) => {\n  const {resolvedPanes} = props\n\n  if (!resolvedPanes?.length) return null\n\n  const lastPane = resolvedPanes[resolvedPanes.length - 1]\n\n  // If the last pane is loading, display the structure tool title only\n  if (isLoadingPane(lastPane)) {\n    return <PassthroughTitle />\n  }\n\n  // If the last pane is a document\n  if (isDocumentPane(lastPane)) {\n    // Passthrough the document pane's title, which may be defined in structure builder\n    if (lastPane?.title) {\n      return <PassthroughTitle title={lastPane.title} />\n    }\n\n    // Otherwise, display a `document.title` containing the resolved Sanity document title\n    return <DocumentTitle documentId={lastPane.options.id} documentType={lastPane.options.type} />\n  }\n\n  // Otherwise, display the last pane's title (if present)\n  return <PassthroughTitle title={lastPane?.title} />\n}\n\n/**\n * Construct a pipe delimited title containing `activeTitle` (if applicable) and the base structure title.\n *\n * @param activeTitle - Title of the first segment\n *\n * @returns A pipe delimited title in the format `${activeTitle} | %BASE_STRUCTURE_TITLE%`\n * or simply `%BASE_STRUCTURE_TITLE` if `activeTitle` is undefined.\n */\nfunction useConstructDocumentTitle(activeTitle?: string) {\n  const structureToolBaseTitle = useStructureTool().structureContext.title\n  return [activeTitle, structureToolBaseTitle].filter((title) => title).join(' | ')\n}\n\n// Type guards\nfunction isDocumentPane(pane: Panes['resolvedPanes'][number]): pane is DocumentPaneNode {\n  return pane !== LOADING_PANE && pane.type === 'document'\n}\n\nfunction isLoadingPane(pane: Panes['resolvedPanes'][number]): pane is typeof LOADING_PANE {\n  return pane === LOADING_PANE\n}\n","import {PortalProvider, useTheme, useToast} from '@sanity/ui'\nimport {isHotkey} from 'is-hotkey-esm'\nimport {Fragment, memo, useCallback, useEffect, useState} from 'react'\nimport {_isCustomDocumentTypeDefinition, useSchema} from 'sanity'\nimport {useRouterState} from 'sanity/router'\nimport {styled} from 'styled-components'\n\nimport {LOADING_PANE} from '../../constants'\nimport {LoadingPane, StructureToolPane} from '../../panes'\nimport {useResolvedPanes} from '../../structureResolvers'\nimport {type PaneNode} from '../../types'\nimport {useStructureTool} from '../../useStructureTool'\nimport {PaneLayout} from '../pane'\nimport {NoDocumentTypesScreen} from './NoDocumentTypesScreen'\nimport {StructureTitle} from './StructureTitle'\n\ninterface StructureToolProps {\n  onPaneChange: (panes: Array<PaneNode | typeof LOADING_PANE>) => void\n}\n\nconst StyledPaneLayout = styled(PaneLayout)`\n  min-height: 100%;\n  min-width: 320px;\n`\n\nconst isSaveHotkey = isHotkey('mod+s')\n\n/**\n * @internal\n */\nexport const StructureTool = memo(function StructureTool({onPaneChange}: StructureToolProps) {\n  const {push: pushToast} = useToast()\n  const schema = useSchema()\n  const {layoutCollapsed, setLayoutCollapsed} = useStructureTool()\n  const {paneDataItems, resolvedPanes} = useResolvedPanes()\n  // Intent resolving is processed by the sibling `<IntentResolver />` but it doesn't have a UI for indicating progress.\n  // We handle that here, so if there are only 1 pane (the root structure), and there's an intent state in the router, we need to show a placeholder LoadingPane until\n  // the structure is resolved and we know what panes to load/display\n  const isResolvingIntent = useRouterState(\n    useCallback((routerState) => typeof routerState.intent === 'string', []),\n  )\n  const {\n    sanity: {media},\n  } = useTheme()\n\n  const [portalElement, setPortalElement] = useState<HTMLDivElement | null>(null)\n\n  const handleRootCollapse = useCallback(() => setLayoutCollapsed(true), [setLayoutCollapsed])\n  const handleRootExpand = useCallback(() => setLayoutCollapsed(false), [setLayoutCollapsed])\n\n  useEffect(() => {\n    // we check for length before emitting here to skip the initial empty array\n    // state from the `useResolvedPanes` hook. there should always be a root\n    // pane emitted on subsequent emissions\n    if (resolvedPanes.length) {\n      onPaneChange(resolvedPanes)\n    }\n  }, [onPaneChange, resolvedPanes])\n\n  useEffect(() => {\n    const handleGlobalKeyDown = (event: KeyboardEvent) => {\n      // Prevent `Cmd+S`\n      if (isSaveHotkey(event)) {\n        event.preventDefault()\n\n        pushToast({\n          closable: true,\n          id: 'auto-save-message',\n          status: 'info',\n          title: 'Your work is automatically saved!',\n          duration: 4000,\n        })\n      }\n    }\n\n    window.addEventListener('keydown', handleGlobalKeyDown)\n    return () => window.removeEventListener('keydown', handleGlobalKeyDown)\n  }, [pushToast])\n\n  const hasDefinedDocumentTypes = schema._original?.types.some(_isCustomDocumentTypeDefinition)\n\n  if (!hasDefinedDocumentTypes) {\n    return <NoDocumentTypesScreen />\n  }\n\n  return (\n    <PortalProvider element={portalElement || null}>\n      <StyledPaneLayout\n        flex={1}\n        height={layoutCollapsed ? undefined : 'fill'}\n        minWidth={media[1]}\n        onCollapse={handleRootCollapse}\n        onExpand={handleRootExpand}\n      >\n        {paneDataItems.map(\n          ({\n            active,\n            childItemId,\n            groupIndex,\n            itemId,\n            key: paneKey,\n            pane,\n            index: paneIndex,\n            params: paneParams,\n            path,\n            payload,\n            siblingIndex,\n            selected,\n          }) => (\n            <Fragment key={`${pane === LOADING_PANE ? 'loading' : pane.type}-${paneIndex}`}>\n              {pane === LOADING_PANE ? (\n                <LoadingPane paneKey={paneKey} path={path} selected={selected} />\n              ) : (\n                <StructureToolPane\n                  active={active}\n                  groupIndex={groupIndex}\n                  index={paneIndex}\n                  pane={pane}\n                  childItemId={childItemId}\n                  itemId={itemId}\n                  paneKey={paneKey}\n                  params={paneParams}\n                  payload={payload}\n                  path={path}\n                  selected={selected}\n                  siblingIndex={siblingIndex}\n                />\n              )}\n            </Fragment>\n          ),\n        )}\n        {/* If there's just 1 pane (the root), or less, and we're resolving an intent then it's necessary to show */}\n        {/* a loading indicator as the intent resolving is async, could take a while and can also be interrupted/redirected */}\n        {paneDataItems.length <= 1 && isResolvingIntent && (\n          <LoadingPane paneKey=\"intent-resolver\" />\n        )}\n      </StyledPaneLayout>\n      <StructureTitle resolvedPanes={resolvedPanes} />\n      <div data-portal=\"\" ref={setPortalElement} />\n    </PortalProvider>\n  )\n})\n","import {useEffect, useState} from 'react'\nimport {SourceProvider, type Tool, useWorkspace} from 'sanity'\n\nimport {ErrorBoundary} from '../../../ui-components/errorBoundary'\nimport {setActivePanes} from '../../getIntentState'\nimport {StructureToolProvider} from '../../StructureToolProvider'\nimport {type StructureToolOptions} from '../../types'\nimport {IntentResolver} from './intentResolver'\nimport {StructureError} from './StructureError'\nimport {StructureTool} from './StructureTool'\n\ninterface StructureToolBoundaryProps {\n  tool: Tool<StructureToolOptions>\n}\n\nexport function StructureToolBoundary({tool: {options}}: StructureToolBoundaryProps) {\n  const {unstable_sources: sources} = useWorkspace()\n  const [firstSource] = sources\n  const {source, defaultDocumentNode, structure} = options || {}\n\n  // Set active panes to blank on mount and unmount\n  useEffect(() => {\n    setActivePanes([])\n    return () => setActivePanes([])\n  }, [])\n\n  const [{error}, setError] = useState<{error: unknown}>({error: null})\n\n  // this re-throws if the error it catches is not a PaneResolutionError\n  if (error) return <StructureError error={error} />\n\n  return (\n    <ErrorBoundary onCatch={setError}>\n      <SourceProvider name={source || firstSource.name}>\n        <StructureToolProvider defaultDocumentNode={defaultDocumentNode} structure={structure}>\n          <StructureTool onPaneChange={setActivePanes} />\n          <IntentResolver />\n        </StructureToolProvider>\n      </SourceProvider>\n    </ErrorBoundary>\n  )\n}\n"],"names":["PaneResolutionError","Error","constructor","message","context","helpId","cause","name","randomIdCache","WeakMap","assignId","obj","cachedValue","get","id","nanoid","set","isPromise","thing","then","isSerializable","isRecord","serialize","rethrowWithPaneResolutionErrors","next","unresolvedPane","flatIndex","e","wrapWithPublishReplay","args","pipe","publishReplay","refCount","createPaneResolver","middleware","resolvePane","isObservable","from","switchMap","result","observableOf","bindCache","memoBind","methodKey","boundMethods","Map","bound","method","bind","resolveIntent","options","resolvedPaneCache","nextFn","key","path","join","cachedResolvedPane","fallbackEditorPanes","params","omit","type","payload","traverse","currentId","intent","parent","levelIndex","structureContext","targetId","schemaTypeName","otherParams","resolvedPane","firstValueFrom","splitIndex","index","undefined","panes","slice","length","map","i","depthIndex","canHandleIntent","pane","filter","child","items","Promise","all","item","nextLevelIndex","resolve","_id","flat","closestPaneToRoot","rootPaneNode","sort","a","b","fallbackEditorChild","nodeId","replace","resolveDocumentNode","template","defaultDocumentBuilder","schemaType","documentId","initialValueTemplate","hashContext","JSON","stringify","parentId","serializeOptionsIndex","serializeOptions","serializeOptionsPath","hashResolvedPaneMeta","meta","normalized","routerPaneSibling","groupIndex","siblingIndex","paneNode","resolvePaneTree","flattenedRouterPanes","current","rest","resolvedPaneMeta","loadingPanes","restIndex","_","currentIndex","nextStream","startsWith","concat","nextResolvedPanes","console","warn","generateHelpUrl","createResolvedPaneNodeStream","routerPanesStream","initialCacheState","cacheKeysByFlatIndex","NEVER","rawRouterPanes","routerPanes","flatMap","routerPaneGroup","startWith","pairwise","prev","curr","prevValue","currValue","isEqual","diffIndex","scan","acc","beforeDiffIndex","afterDiffIndex","keysToKeep","Set","keySet","Array","keysToDelete","has","delete","cacheKeySet","add","nextPane","prevPane","distinctUntilChanged","nextValue","useRouterPanesStream","$","_c","routerStateSubject","useState","_temp","t0","asObservable","_temp2","routerPanes$","state","routerState","useRouter","t1","t2","useEffect","_routerState","ReplaySubject","useResolvedPanes","error","setError","useStructureTool","Symbol","for","paneDataItems","resolvedPanes","data","setData","subscription","_temp5","subscribe","unsubscribe","reduce","_temp3","groupsLen","itemId","nextGroup","active","childItemId","LOADING_PANE","selected","_temp4","pane_0","currentGroup","ensureDocumentIdAndType","documentStore","uuid","resolvedType","resolveTypeForDocument","EMPTY_RECORD","IntentResolver","memo","navigate","maybeIntent","useRouterState","useDocumentStore","cancelled","effect","catch","intentName","PathSegment","styled","span","formatStack","stack","RegExp","window","location","host","StructureError","t","useTranslation","structureLocaleNamespace","SerializeError","includes","showStack","T0","T1","T2","handleReload","t10","t11","t12","t13","t14","t3","t4","t5","t6","t7","t8","t9","Card","Container","t15","t16","t17","t18","t19","t20","t21","t22","SyncIcon","t23","t24","t25","segment","reload","NoDocumentTypesScreen","DocumentTitle","props","documentType","selectedReleaseId","usePerspective","editState","useEditState","schema","useSchema","isNewDocument","published","draft","documentValue","version","value","isLoading","previewValueIsLoading","useValuePreview","enabled","lastRevisionDocument","useDocumentLastRev","documentTitle","title","settled","ready","newTitle","useConstructDocumentTitle","document","PassthroughTitle","StructureTitle","lastPane","isLoadingPane","isDocumentPane","activeTitle","structureToolBaseTitle","StyledPaneLayout","PaneLayout","isSaveHotkey","isHotkey","StructureTool","onPaneChange","push","pushToast","useToast","layoutCollapsed","setLayoutCollapsed","isResolvingIntent","sanity","useTheme","media","portalElement","setPortalElement","handleRootCollapse","handleRootExpand","handleGlobalKeyDown","event","preventDefault","closable","status","duration","addEventListener","removeEventListener","_original","types","some","_isCustomDocumentTypeDefinition","paneKey","paneIndex","paneParams","StructureToolBoundary","tool","unstable_sources","sources","useWorkspace","firstSource","source","defaultDocumentNode","structure","setActivePanes"],"mappings":"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","ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13],"debugId":null}}]
}