{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"file":"use-editor.js","sources":["file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/internal-utils/global-scope.ts","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/internal-utils/globally-scoped-context.ts","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/editor/editor-context.tsx","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/editor/use-editor.ts"],"sourcesContent":["/**\n * Gets the global scope instance in a given environment.\n *\n * The strategy is to return the most modern, and if not, the most common:\n * - The `globalThis` variable is the modern approach to accessing the global scope\n * - The `window` variable is the global scope in a web browser\n * - The `self` variable is the global scope in workers and others\n * - The `global` variable is the global scope in Node.js\n */\nfunction getGlobalScope() {\n  if (typeof globalThis !== 'undefined') return globalThis\n  if (typeof window !== 'undefined') return window\n  if (typeof self !== 'undefined') return self\n  if (typeof global !== 'undefined') return global\n\n  throw new Error('@portabletext/editor: could not locate global scope')\n}\n\nexport const globalScope = getGlobalScope() as any\n","import {createContext, type Context} from 'react'\nimport {globalScope} from './global-scope'\n\n/**\n * As `@portabletext/editor` is declared as a dependency, and may be\n * duplicated, sometimes across major versions it's critical that vital\n * React Contexts are shared even when there is a duplicate.\n *\n * We have to support a Sanity Plugin being able to call hooks like\n * `useEditor`, and then read the context setup by `sanity`, which calls\n * `EditorProvider`, even if the provider and hook are different instances in\n * memory.\n *\n * For this reason it's vital that all changes to globally scoped providers\n * remain fully backwards compatible.\n */\nexport function createGloballyScopedContext<\n  ContextType,\n  const T extends ContextType = ContextType,\n>(\n  /**\n   * Enforce that all Symbol.for keys used for globally scoped contexts have a predictable prefix\n   */\n  key: `@portabletext/editor/context/${string}`,\n  defaultValue: T,\n): Context<ContextType> {\n  const symbol = Symbol.for(key)\n\n  /**\n   * Prevent errors about re-renders on React SSR on Next.js App Router\n   */\n  if (typeof document === 'undefined') {\n    return createContext<ContextType>(defaultValue)\n  }\n\n  globalScope[symbol] = globalScope[symbol] ?? createContext<T>(defaultValue)\n\n  return globalScope[symbol]\n}\n","import type {Editor} from '../editor'\nimport {createGloballyScopedContext} from '../internal-utils/globally-scoped-context'\n\nexport const EditorContext = createGloballyScopedContext<Editor | null>(\n  '@portabletext/editor/context/editor',\n  null,\n)\n","import React from 'react'\nimport {EditorContext} from './editor-context'\n\n/**\n * @public\n * Get the current editor context from the `EditorProvider`.\n * Must be used inside the `EditorProvider` component.\n * @returns The current editor object.\n * @example\n * ```tsx\n * import { useEditor } from '@portabletext/editor'\n *\n * function MyComponent() {\n *  const editor = useEditor()\n * }\n * ```\n * @group Hooks\n */\nexport function useEditor() {\n  const editor = React.useContext(EditorContext)\n\n  if (!editor) {\n    throw new Error('No Editor set. Use EditorProvider to set one.')\n  }\n\n  return editor\n}\n"],"names":["getGlobalScope","globalThis","window","self","global","Error","globalScope","createGloballyScopedContext","key","defaultValue","symbol","Symbol","for","document","createContext","EditorContext","useEditor","editor","React","useContext"],"mappings":";;;;;;AASA,SAASA,iBAAiB;IACxB,IAAI,OAAOC,aAAe,IAAa,CAAA,OAAOA;IAC9C,IAAI,OAAOC,SAAW,IAAa,CAAA,OAAOA;IAC1C,IAAI,OAAOC,OAAS,IAAa,CAAA,OAAOA;IACxC,IAAI,OAAOC,SAAW,IAAa,CAAA,OAAOA;IAE1C,MAAM,IAAIC,MAAM,qDAAqD;AACvE;AAEO,MAAMC,cAAcN,eAAAA;ACFpB,SAASO,4BAOdC,GAAAA,EACAC,YAAAA,EACsB;IACtB,MAAMC,SAASC,OAAOC,GAAAA,CAAIJ,GAAG;IAK7B,OAAI,OAAOK,WAAa,wKACfC,gBAAAA,EAA2BL,YAAY,IAAA,CAGhDH,WAAAA,CAAYI,MAAM,CAAA,GAAIJ,WAAAA,CAAYI,MAAM,CAAA,sKAAKI,gBAAAA,EAAiBL,YAAY,GAEnEH,WAAAA,CAAYI,MAAM,CAAA;AAC3B;ACnCO,MAAMK,gBAAgBR,4BAC3B,uCACA,IACF;ACYO,SAAAS,YAAA;IACL,MAAAC,uKAAeC,UAAAA,CAAAC,UAAAA,CAAAJ,aAA8B;IAAC,IAAA,CAEzCE,QAAM,MAAA,IAAAZ,MACO,+CAA+C;IAAA,OAG1DY;AAAM","ignoreList":[0,1,2,3],"debugId":null}},
    {"offset": {"line": 39, "column": 0}, "map": {"version":3,"file":"util.get-text-block-text.js","sources":["file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/utils/util.get-block-start-point.ts","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/utils/util.is-keyed-segment.ts","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/utils/util.selection-point.ts","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/utils/util.block-offset.ts","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/utils/asserters.ts","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/utils/parse-blocks.ts","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/utils/key-generator.ts","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/utils/util.get-selection-end-point.ts","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/utils/util.get-selection-start-point.ts","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/utils/util.slice-blocks.ts","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/utils/util.get-text-block-text.ts"],"sourcesContent":["import {isTextBlock} from '@portabletext/schema'\nimport type {PortableTextBlock} from '@sanity/types'\nimport type {EditorContext} from '../editor/editor-snapshot'\nimport type {EditorSelectionPoint} from '../types/editor'\nimport type {BlockPath} from '../types/paths'\n\n/**\n * @public\n */\nexport function getBlockStartPoint({\n  context,\n  block,\n}: {\n  context: Pick<EditorContext, 'schema'>\n  block: {\n    node: PortableTextBlock\n    path: BlockPath\n  }\n}): EditorSelectionPoint {\n  if (isTextBlock(context, block.node)) {\n    return {\n      path: [...block.path, 'children', {_key: block.node.children[0]._key}],\n      offset: 0,\n    }\n  }\n\n  return {\n    path: block.path,\n    offset: 0,\n  }\n}\n","import type {KeyedSegment} from '@sanity/types'\n\n/**\n * @public\n */\nexport function isKeyedSegment(segment: unknown): segment is KeyedSegment {\n  return typeof segment === 'object' && segment !== null && '_key' in segment\n}\n","import type {EditorSelectionPoint} from '../types/editor'\nimport {isKeyedSegment} from './util.is-keyed-segment'\n\nexport function getBlockKeyFromSelectionPoint(point: EditorSelectionPoint) {\n  const blockPathSegment = point.path.at(0)\n\n  if (isKeyedSegment(blockPathSegment)) {\n    return blockPathSegment._key\n  }\n\n  return undefined\n}\n\nexport function getChildKeyFromSelectionPoint(point: EditorSelectionPoint) {\n  const childPathSegment = point.path.at(2)\n\n  if (isKeyedSegment(childPathSegment)) {\n    return childPathSegment._key\n  }\n\n  return undefined\n}\n","import {isSpan, isTextBlock} from '@portabletext/schema'\nimport type {EditorContext} from '../editor/editor-snapshot'\nimport type {BlockOffset} from '../types/block-offset'\nimport type {EditorSelectionPoint} from '../types/editor'\nimport type {ChildPath} from '../types/paths'\nimport {\n  getBlockKeyFromSelectionPoint,\n  getChildKeyFromSelectionPoint,\n} from './util.selection-point'\n\n/**\n * @public\n */\nexport function blockOffsetToSpanSelectionPoint({\n  context,\n  blockOffset,\n  direction,\n}: {\n  context: Pick<EditorContext, 'schema' | 'value'>\n  blockOffset: BlockOffset\n  direction: 'forward' | 'backward'\n}) {\n  let offsetLeft = blockOffset.offset\n  let selectionPoint: {path: ChildPath; offset: number} | undefined\n  let skippedInlineObject = false\n\n  for (const block of context.value) {\n    if (block._key !== blockOffset.path[0]._key) {\n      continue\n    }\n\n    if (!isTextBlock(context, block)) {\n      continue\n    }\n\n    for (const child of block.children) {\n      if (direction === 'forward') {\n        if (!isSpan(context, child)) {\n          continue\n        }\n\n        if (offsetLeft <= child.text.length) {\n          selectionPoint = {\n            path: [...blockOffset.path, 'children', {_key: child._key}],\n            offset: offsetLeft,\n          }\n          break\n        }\n\n        offsetLeft -= child.text.length\n\n        continue\n      }\n\n      if (!isSpan(context, child)) {\n        skippedInlineObject = true\n        continue\n      }\n\n      if (offsetLeft === 0 && selectionPoint && !skippedInlineObject) {\n        if (skippedInlineObject) {\n          selectionPoint = {\n            path: [...blockOffset.path, 'children', {_key: child._key}],\n            offset: 0,\n          }\n        }\n        break\n      }\n\n      if (offsetLeft > child.text.length) {\n        offsetLeft -= child.text.length\n        continue\n      }\n\n      if (offsetLeft <= child.text.length) {\n        selectionPoint = {\n          path: [...blockOffset.path, 'children', {_key: child._key}],\n          offset: offsetLeft,\n        }\n\n        offsetLeft -= child.text.length\n\n        if (offsetLeft !== 0) {\n          break\n        }\n      }\n    }\n  }\n\n  return selectionPoint\n}\n\n/**\n * @public\n */\nexport function spanSelectionPointToBlockOffset({\n  context,\n  selectionPoint,\n}: {\n  context: Pick<EditorContext, 'schema' | 'value'>\n  selectionPoint: EditorSelectionPoint\n}): BlockOffset | undefined {\n  let offset = 0\n\n  const blockKey = getBlockKeyFromSelectionPoint(selectionPoint)\n  const spanKey = getChildKeyFromSelectionPoint(selectionPoint)\n\n  if (!blockKey || !spanKey) {\n    return undefined\n  }\n\n  for (const block of context.value) {\n    if (block._key !== blockKey) {\n      continue\n    }\n\n    if (!isTextBlock(context, block)) {\n      continue\n    }\n\n    for (const child of block.children) {\n      if (!isSpan(context, child)) {\n        continue\n      }\n\n      if (child._key === spanKey) {\n        return {\n          path: [{_key: block._key}],\n          offset: offset + selectionPoint.offset,\n        }\n      }\n\n      offset += child.text.length\n    }\n  }\n}\n","import type {TypedObject} from '@sanity/types'\n\nexport function isTypedObject(object: unknown): object is TypedObject {\n  return isRecord(object) && typeof object._type === 'string'\n}\n\nexport function isRecord(value: unknown): value is Record<string, unknown> {\n  return !!value && (typeof value === 'object' || typeof value === 'function')\n}\n","import {isTextBlock} from '@portabletext/schema'\nimport type {\n  PortableTextBlock,\n  PortableTextListBlock,\n  PortableTextObject,\n  PortableTextSpan,\n  PortableTextTextBlock,\n  TypedObject,\n} from '@sanity/types'\nimport type {EditorSchema} from '../editor/editor-schema'\nimport type {EditorContext} from '../editor/editor-snapshot'\nimport {isTypedObject} from './asserters'\n\nexport function parseBlocks({\n  context,\n  blocks,\n  options,\n}: {\n  context: Pick<EditorContext, 'keyGenerator' | 'schema'>\n  blocks: unknown\n  options: {\n    removeUnusedMarkDefs: boolean\n    validateFields: boolean\n  }\n}): Array<PortableTextBlock> {\n  if (!Array.isArray(blocks)) {\n    return []\n  }\n\n  return blocks.flatMap((block) => {\n    const parsedBlock = parseBlock({context, block, options})\n\n    return parsedBlock ? [parsedBlock] : []\n  })\n}\n\nexport function parseBlock({\n  context,\n  block,\n  options,\n}: {\n  context: Pick<EditorContext, 'keyGenerator' | 'schema'>\n  block: unknown\n  options: {\n    removeUnusedMarkDefs: boolean\n    validateFields: boolean\n  }\n}): PortableTextBlock | undefined {\n  return (\n    parseTextBlock({block, context, options}) ??\n    parseBlockObject({blockObject: block, context, options})\n  )\n}\n\nexport function parseBlockObject({\n  blockObject,\n  context,\n  options,\n}: {\n  blockObject: unknown\n  context: Pick<EditorContext, 'keyGenerator' | 'schema'>\n  options: {validateFields: boolean}\n}): PortableTextObject | undefined {\n  if (!isTypedObject(blockObject)) {\n    return undefined\n  }\n\n  const schemaType = context.schema.blockObjects.find(\n    ({name}) => name === blockObject._type,\n  )\n\n  if (!schemaType) {\n    return undefined\n  }\n\n  return parseObject({\n    object: blockObject,\n    context: {\n      keyGenerator: context.keyGenerator,\n      schemaType,\n    },\n    options,\n  })\n}\n\nexport function isListBlock(\n  context: Pick<EditorContext, 'schema'>,\n  block: unknown,\n): block is PortableTextListBlock {\n  return (\n    isTextBlock(context, block) &&\n    block.level !== undefined &&\n    block.listItem !== undefined\n  )\n}\n\nexport function parseTextBlock({\n  block,\n  context,\n  options,\n}: {\n  block: unknown\n  context: Pick<EditorContext, 'keyGenerator' | 'schema'>\n  options: {\n    removeUnusedMarkDefs: boolean\n    validateFields: boolean\n  }\n}): PortableTextTextBlock | undefined {\n  if (!isTypedObject(block)) {\n    return undefined\n  }\n\n  const customFields: Record<string, unknown> = {}\n\n  for (const key of Object.keys(block)) {\n    if (\n      key === '_type' ||\n      key === '_key' ||\n      key === 'children' ||\n      key === 'markDefs' ||\n      key === 'style' ||\n      key === 'listItem' ||\n      key === 'level'\n    ) {\n      continue\n    }\n\n    if (options.validateFields) {\n      if (context.schema.block.fields?.some((field) => field.name === key)) {\n        customFields[key] = block[key]\n      }\n    } else {\n      customFields[key] = block[key]\n    }\n  }\n\n  if (block._type !== context.schema.block.name) {\n    return undefined\n  }\n\n  const _key =\n    typeof block._key === 'string' ? block._key : context.keyGenerator()\n\n  const unparsedMarkDefs: Array<unknown> = Array.isArray(block.markDefs)\n    ? block.markDefs\n    : []\n  const markDefKeyMap = new Map<string, string>()\n  const markDefs = unparsedMarkDefs.flatMap((markDef) => {\n    if (!isTypedObject(markDef)) {\n      return []\n    }\n\n    const schemaType = context.schema.annotations.find(\n      ({name}) => name === markDef._type,\n    )\n\n    if (!schemaType) {\n      return []\n    }\n\n    if (typeof markDef._key !== 'string') {\n      // If the `markDef` doesn't have a `_key` then we don't know what spans\n      // it belongs to and therefore we have to discard it.\n      return []\n    }\n\n    const parsedAnnotation = parseObject({\n      object: markDef,\n      context: {\n        schemaType,\n        keyGenerator: context.keyGenerator,\n      },\n      options,\n    })\n\n    if (!parsedAnnotation) {\n      return []\n    }\n\n    markDefKeyMap.set(markDef._key, parsedAnnotation._key)\n\n    return [parsedAnnotation]\n  })\n\n  const unparsedChildren: Array<unknown> = Array.isArray(block.children)\n    ? block.children\n    : []\n\n  const children = unparsedChildren\n    .map(\n      (child) =>\n        parseSpan({span: child, context, markDefKeyMap, options}) ??\n        parseInlineObject({inlineObject: child, context, options}),\n    )\n    .filter((child) => child !== undefined)\n  const marks = children.flatMap((child) => child.marks ?? [])\n\n  const parsedBlock: PortableTextTextBlock = {\n    _type: context.schema.block.name,\n    _key,\n    children:\n      children.length > 0\n        ? children\n        : [\n            {\n              _key: context.keyGenerator(),\n              _type: context.schema.span.name,\n              text: '',\n              marks: [],\n            },\n          ],\n    markDefs: options.removeUnusedMarkDefs\n      ? markDefs.filter((markDef) => marks.includes(markDef._key))\n      : markDefs,\n    ...customFields,\n  }\n\n  if (\n    typeof block.style === 'string' &&\n    context.schema.styles.find((style) => style.name === block.style)\n  ) {\n    parsedBlock.style = block.style\n  } else {\n    const defaultStyle = context.schema.styles.at(0)?.name\n\n    if (defaultStyle !== undefined) {\n      parsedBlock.style = defaultStyle\n    } else {\n      console.error('Expected default style')\n    }\n  }\n\n  if (\n    typeof block.listItem === 'string' &&\n    context.schema.lists.find((list) => list.name === block.listItem)\n  ) {\n    parsedBlock.listItem = block.listItem\n  }\n\n  if (typeof block.level === 'number') {\n    parsedBlock.level = block.level\n  }\n\n  return parsedBlock\n}\n\nexport function parseSpan({\n  span,\n  context,\n  markDefKeyMap,\n  options,\n}: {\n  span: unknown\n  context: Pick<EditorContext, 'keyGenerator' | 'schema'>\n  markDefKeyMap: Map<string, string>\n  options: {validateFields: boolean}\n}): PortableTextSpan | undefined {\n  if (!isTypedObject(span)) {\n    return undefined\n  }\n\n  const customFields: Record<string, unknown> = {}\n\n  for (const key of Object.keys(span)) {\n    if (\n      key !== '_type' &&\n      key !== '_key' &&\n      key !== 'text' &&\n      key !== 'marks'\n    ) {\n      customFields[key] = span[key]\n    }\n  }\n\n  // In reality, the span schema name is always 'span', but we only the check here anyway\n  if (span._type !== context.schema.span.name || span._type !== 'span') {\n    return undefined\n  }\n\n  const unparsedMarks: Array<unknown> = Array.isArray(span.marks)\n    ? span.marks\n    : []\n  const marks = unparsedMarks.flatMap((mark) => {\n    if (typeof mark !== 'string') {\n      return []\n    }\n\n    const markDefKey = markDefKeyMap.get(mark)\n\n    if (markDefKey !== undefined) {\n      return [markDefKey]\n    }\n\n    if (\n      context.schema.decorators.some((decorator) => decorator.name === mark)\n    ) {\n      return [mark]\n    }\n\n    return []\n  })\n\n  return {\n    _type: 'span',\n    _key: typeof span._key === 'string' ? span._key : context.keyGenerator(),\n    text: typeof span.text === 'string' ? span.text : '',\n    marks,\n    ...(options.validateFields ? {} : customFields),\n  }\n}\n\nexport function parseInlineObject({\n  inlineObject,\n  context,\n  options,\n}: {\n  inlineObject: unknown\n  context: Pick<EditorContext, 'keyGenerator' | 'schema'>\n  options: {validateFields: boolean}\n}): PortableTextObject | undefined {\n  if (!isTypedObject(inlineObject)) {\n    return undefined\n  }\n\n  const schemaType = context.schema.inlineObjects.find(\n    ({name}) => name === inlineObject._type,\n  )\n\n  if (!schemaType) {\n    return undefined\n  }\n\n  return parseObject({\n    object: inlineObject,\n    context: {\n      keyGenerator: context.keyGenerator,\n      schemaType,\n    },\n    options,\n  })\n}\n\nexport function parseAnnotation({\n  annotation,\n  context,\n  options,\n}: {\n  annotation: TypedObject\n  context: Pick<EditorContext, 'keyGenerator' | 'schema'>\n  options: {validateFields: boolean}\n}): PortableTextObject | undefined {\n  if (!isTypedObject(annotation)) {\n    return undefined\n  }\n\n  const schemaType = context.schema.annotations.find(\n    ({name}) => name === annotation._type,\n  )\n\n  if (!schemaType) {\n    return undefined\n  }\n\n  return parseObject({\n    object: annotation,\n    context: {\n      keyGenerator: context.keyGenerator,\n      schemaType,\n    },\n    options,\n  })\n}\n\nfunction parseObject({\n  object,\n  context,\n  options,\n}: {\n  object: TypedObject\n  context: Pick<EditorContext, 'keyGenerator'> & {\n    schemaType: EditorSchema['blockObjects'][0]\n  }\n  options: {validateFields: boolean}\n}): PortableTextObject {\n  const {_type, _key, ...customFields} = object\n\n  // Validates all props on the object and only takes those that match\n  // the name of a field\n  const values = options.validateFields\n    ? context.schemaType.fields.reduce<Record<string, unknown>>(\n        (fieldValues, field) => {\n          const fieldValue = object[field.name]\n\n          if (fieldValue !== undefined) {\n            fieldValues[field.name] = fieldValue\n          }\n\n          return fieldValues\n        },\n        {},\n      )\n    : customFields\n\n  return {\n    _type: context.schemaType.name,\n    _key:\n      typeof object._key === 'string' ? object._key : context.keyGenerator(),\n    ...values,\n  }\n}\n","import getRandomValues from 'get-random-values-esm'\n\n/**\n * @public\n */\nexport const defaultKeyGenerator = (): string => randomKey(12)\n\nconst getByteHexTable = (() => {\n  let table: any[]\n  return () => {\n    if (table) {\n      return table\n    }\n\n    table = []\n    for (let i = 0; i < 256; ++i) {\n      table[i] = (i + 0x100).toString(16).slice(1)\n    }\n    return table\n  }\n})()\n\n// WHATWG crypto RNG - https://w3c.github.io/webcrypto/Overview.html\nfunction whatwgRNG(length = 16) {\n  const rnds8 = new Uint8Array(length)\n  getRandomValues(rnds8)\n  return rnds8\n}\n\nfunction randomKey(length?: number): string {\n  const table = getByteHexTable()\n  return whatwgRNG(length)\n    .reduce((str, n) => str + table[n], '')\n    .slice(0, length)\n}\n","import type {EditorSelection, EditorSelectionPoint} from '../types/editor'\n\n/**\n * @public\n */\nexport function getSelectionEndPoint<\n  TEditorSelection extends NonNullable<EditorSelection> | null,\n  TEditorSelectionPoint extends\n    EditorSelectionPoint | null = TEditorSelection extends NonNullable<EditorSelection>\n    ? EditorSelectionPoint\n    : null,\n>(selection: TEditorSelection): TEditorSelectionPoint {\n  if (!selection) {\n    return null as TEditorSelectionPoint\n  }\n\n  return (\n    selection.backward ? selection.anchor : selection.focus\n  ) as TEditorSelectionPoint\n}\n","import type {EditorSelection, EditorSelectionPoint} from '../types/editor'\n\n/**\n * @public\n */\nexport function getSelectionStartPoint<\n  TEditorSelection extends NonNullable<EditorSelection> | null,\n  TEditorSelectionPoint extends\n    EditorSelectionPoint | null = TEditorSelection extends NonNullable<EditorSelection>\n    ? EditorSelectionPoint\n    : null,\n>(selection: TEditorSelection): TEditorSelectionPoint {\n  if (!selection) {\n    return null as TEditorSelectionPoint\n  }\n\n  return (\n    selection.backward ? selection.focus : selection.anchor\n  ) as TEditorSelectionPoint\n}\n","import {isSpan, isTextBlock} from '@portabletext/schema'\nimport type {PortableTextBlock} from '@sanity/types'\nimport type {EditorContext} from '../editor/editor-snapshot'\nimport {defaultKeyGenerator} from './key-generator'\nimport {parseBlock} from './parse-blocks'\nimport {getSelectionEndPoint} from './util.get-selection-end-point'\nimport {getSelectionStartPoint} from './util.get-selection-start-point'\nimport {\n  getBlockKeyFromSelectionPoint,\n  getChildKeyFromSelectionPoint,\n} from './util.selection-point'\n\n/**\n * @public\n */\nexport function sliceBlocks({\n  context,\n  blocks,\n}: {\n  context: Pick<EditorContext, 'schema' | 'selection'>\n  blocks: Array<PortableTextBlock>\n}): Array<PortableTextBlock> {\n  const slice: Array<PortableTextBlock> = []\n\n  if (!context.selection) {\n    return slice\n  }\n\n  let startBlock: PortableTextBlock | undefined\n  const middleBlocks: PortableTextBlock[] = []\n  let endBlock: PortableTextBlock | undefined\n\n  const startPoint = getSelectionStartPoint(context.selection)\n  const endPoint = getSelectionEndPoint(context.selection)\n  const startBlockKey = getBlockKeyFromSelectionPoint(startPoint)\n  const startChildKey = getChildKeyFromSelectionPoint(startPoint)\n  const endBlockKey = getBlockKeyFromSelectionPoint(endPoint)\n  const endChildKey = getChildKeyFromSelectionPoint(endPoint)\n\n  if (!startBlockKey || !endBlockKey) {\n    return slice\n  }\n\n  for (const block of blocks) {\n    if (!isTextBlock(context, block)) {\n      if (block._key === startBlockKey && block._key === endBlockKey) {\n        startBlock = block\n        break\n      }\n    }\n\n    if (block._key === startBlockKey) {\n      if (!isTextBlock(context, block)) {\n        startBlock = block\n        continue\n      }\n\n      if (startChildKey) {\n        for (const child of block.children) {\n          if (child._key === startChildKey) {\n            if (isSpan(context, child)) {\n              const text =\n                child._key === endChildKey\n                  ? child.text.slice(startPoint.offset, endPoint.offset)\n                  : child.text.slice(startPoint.offset)\n\n              startBlock = {\n                ...block,\n                children: [\n                  {\n                    ...child,\n                    text,\n                  },\n                ],\n              }\n            } else {\n              startBlock = {\n                ...block,\n                children: [child],\n              }\n            }\n\n            if (block._key === endBlockKey && startChildKey === endChildKey) {\n              break\n            }\n            continue\n          }\n\n          if (startBlock && isTextBlock(context, startBlock)) {\n            if (\n              endChildKey &&\n              child._key === endChildKey &&\n              isSpan(context, child)\n            ) {\n              startBlock.children.push({\n                ...child,\n                text: child.text.slice(0, endPoint.offset),\n              })\n            } else {\n              startBlock.children.push(child)\n            }\n\n            if (\n              block._key === endBlockKey &&\n              endChildKey &&\n              child._key === endChildKey\n            ) {\n              break\n            }\n          }\n        }\n\n        if (startBlockKey === endBlockKey) {\n          break\n        }\n\n        continue\n      }\n\n      startBlock = block\n\n      if (startBlockKey === endBlockKey) {\n        break\n      }\n    }\n\n    if (block._key === endBlockKey) {\n      if (!isTextBlock(context, block)) {\n        endBlock = block\n        break\n      }\n\n      if (endChildKey) {\n        endBlock = {\n          ...block,\n          children: [],\n        }\n\n        for (const child of block.children) {\n          if (endBlock && isTextBlock(context, endBlock)) {\n            if (child._key === endChildKey && isSpan(context, child)) {\n              endBlock.children.push({\n                ...child,\n                text: child.text.slice(0, endPoint.offset),\n              })\n\n              break\n            }\n\n            endBlock.children.push(child)\n\n            if (endChildKey && child._key === endChildKey) {\n              break\n            }\n          }\n        }\n\n        break\n      }\n\n      endBlock = block\n\n      break\n    }\n\n    if (startBlock) {\n      middleBlocks.push(\n        parseBlock({\n          context: {\n            ...context,\n            keyGenerator: defaultKeyGenerator,\n          },\n          block,\n          options: {removeUnusedMarkDefs: true, validateFields: false},\n        }) ?? block,\n      )\n    }\n  }\n\n  const parsedStartBlock = startBlock\n    ? parseBlock({\n        context: {\n          ...context,\n          keyGenerator: defaultKeyGenerator,\n        },\n        block: startBlock,\n        options: {removeUnusedMarkDefs: true, validateFields: false},\n      })\n    : undefined\n\n  const parsedEndBlock = endBlock\n    ? parseBlock({\n        context: {\n          ...context,\n          keyGenerator: defaultKeyGenerator,\n        },\n        block: endBlock,\n        options: {removeUnusedMarkDefs: true, validateFields: false},\n      })\n    : undefined\n\n  return [\n    ...(parsedStartBlock ? [parsedStartBlock] : []),\n    ...middleBlocks,\n    ...(parsedEndBlock ? [parsedEndBlock] : []),\n  ]\n}\n","import type {PortableTextTextBlock} from '@sanity/types'\n\n/**\n * @public\n */\nexport function getTextBlockText(block: PortableTextTextBlock) {\n  return block.children.map((child) => child.text ?? '').join('')\n}\n"],"names":["getBlockStartPoint","context","block","isTextBlock","node","path","_key","children","offset","isKeyedSegment","segment","getBlockKeyFromSelectionPoint","point","blockPathSegment","at","getChildKeyFromSelectionPoint","childPathSegment","blockOffsetToSpanSelectionPoint","blockOffset","direction","offsetLeft","selectionPoint","skippedInlineObject","value","child","isSpan","text","length","spanSelectionPointToBlockOffset","blockKey","spanKey","isTypedObject","object","isRecord","_type","parseBlocks","blocks","options","Array","isArray","flatMap","parsedBlock","parseBlock","parseTextBlock","parseBlockObject","blockObject","schemaType","schema","blockObjects","find","name","parseObject","keyGenerator","isListBlock","level","undefined","listItem","customFields","key","Object","keys","validateFields","fields","some","field","unparsedMarkDefs","markDefs","markDefKeyMap","Map","markDef","annotations","parsedAnnotation","set","map","parseSpan","span","parseInlineObject","inlineObject","filter","marks","removeUnusedMarkDefs","includes","style","styles","defaultStyle","console","error","lists","list","mark","markDefKey","get","decorators","decorator","inlineObjects","parseAnnotation","annotation","values","reduce","fieldValues","fieldValue","defaultKeyGenerator","randomKey","getByteHexTable","table","i","toString","slice","whatwgRNG","rnds8","Uint8Array","getRandomValues","str","n","getSelectionEndPoint","selection","backward","anchor","focus","getSelectionStartPoint","sliceBlocks","startBlock","middleBlocks","endBlock","startPoint","endPoint","startBlockKey","startChildKey","endBlockKey","endChildKey","push","parsedStartBlock","parsedEndBlock","getTextBlockText","join"],"mappings":"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","ignoreList":[0,1,2,3,4,5,6,7,8,9,10],"debugId":null}},
    {"offset": {"line": 468, "column": 0}, "map": {"version":3,"file":"util.is-empty-text-block.js","sources":["file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/utils/util.get-block-end-point.ts","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/utils/util.is-selection-collapsed.ts","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/utils/util.is-equal-selection-points.ts","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/utils/util.is-empty-text-block.ts"],"sourcesContent":["import {isSpan, isTextBlock} from '@portabletext/schema'\nimport type {PortableTextBlock} from '@sanity/types'\nimport type {EditorContext} from '../editor/editor-snapshot'\nimport type {EditorSelectionPoint} from '../types/editor'\nimport type {BlockPath} from '../types/paths'\n\n/**\n * @public\n */\nexport function getBlockEndPoint({\n  context,\n  block,\n}: {\n  context: Pick<EditorContext, 'schema'>\n  block: {\n    node: PortableTextBlock\n    path: BlockPath\n  }\n}): EditorSelectionPoint {\n  if (isTextBlock(context, block.node)) {\n    const lastChild = block.node.children[block.node.children.length - 1]\n\n    if (lastChild) {\n      return {\n        path: [...block.path, 'children', {_key: lastChild._key}],\n        offset: isSpan(context, lastChild) ? lastChild.text.length : 0,\n      }\n    }\n  }\n\n  return {\n    path: block.path,\n    offset: 0,\n  }\n}\n","import type {EditorSelection} from '../types/editor'\n\n/**\n * @public\n */\nexport function isSelectionCollapsed(selection: EditorSelection) {\n  if (!selection) {\n    return false\n  }\n\n  return (\n    JSON.stringify(selection.anchor.path) ===\n      JSON.stringify(selection.focus.path) &&\n    selection.anchor.offset === selection.focus.offset\n  )\n}\n","import type {EditorSelectionPoint} from '../types/editor'\n\n/**\n * @public\n */\nexport function isEqualSelectionPoints(\n  a: EditorSelectionPoint,\n  b: EditorSelectionPoint,\n) {\n  return (\n    a.offset === b.offset && JSON.stringify(a.path) === JSON.stringify(b.path)\n  )\n}\n","import {isSpan, isTextBlock} from '@portabletext/schema'\nimport type {PortableTextBlock} from '@sanity/types'\nimport type {EditorContext} from '../editor/editor-snapshot'\nimport {getTextBlockText} from './util.get-text-block-text'\n\n/**\n * @public\n */\nexport function isEmptyTextBlock(\n  context: Pick<EditorContext, 'schema'>,\n  block: PortableTextBlock,\n) {\n  if (!isTextBlock(context, block)) {\n    return false\n  }\n\n  const onlyText = block.children.every((child) => isSpan(context, child))\n  const blockText = getTextBlockText(block)\n\n  return onlyText && blockText === ''\n}\n"],"names":["getBlockEndPoint","context","block","isTextBlock","node","lastChild","children","length","path","_key","offset","isSpan","text","isSelectionCollapsed","selection","JSON","stringify","anchor","focus","isEqualSelectionPoints","a","b","isEmptyTextBlock","onlyText","every","child","blockText","getTextBlockText"],"mappings":";;;;;;;;;;AASO,SAASA,iBAAiB,EAC/BC,OAAAA,EACAC,KAAAA,EAOF,EAAyB;IACvB,qKAAIC,cAAAA,EAAYF,SAASC,MAAME,IAAI,GAAG;QACpC,MAAMC,YAAYH,MAAME,IAAAA,CAAKE,QAAAA,CAASJ,MAAME,IAAAA,CAAKE,QAAAA,CAASC,MAAAA,GAAS,CAAC,CAAA;QAEpE,IAAIF,WACF,OAAO;YACLG,MAAM,CAAC;mBAAGN,MAAMM,IAAAA;gBAAM;gBAAY;oBAACC,MAAMJ,UAAUI,IAAAA;gBAAAA,CAAK;aAAA;YACxDC,SAAQC,yKAAAA,EAAOV,SAASI,SAAS,IAAIA,UAAUO,IAAAA,CAAKL,MAAAA,GAAS;QAAA;IAGnE;IAEA,OAAO;QACLC,MAAMN,MAAMM,IAAAA;QACZE,QAAQ;IAAA;AAEZ;AC7BO,SAASG,qBAAqBC,SAAAA,EAA4B;IAC/D,OAAKA,YAKHC,KAAKC,SAAAA,CAAUF,UAAUG,MAAAA,CAAOT,IAAI,MAClCO,KAAKC,SAAAA,CAAUF,UAAUI,KAAAA,CAAMV,IAAI,KACrCM,UAAUG,MAAAA,CAAOP,MAAAA,KAAWI,UAAUI,KAAAA,CAAMR,MAAAA,GANrC,CAAA;AAQX;ACVO,SAASS,uBACdC,CAAAA,EACAC,CAAAA,EACA;IACA,OACED,EAAEV,MAAAA,KAAWW,EAAEX,MAAAA,IAAUK,KAAKC,SAAAA,CAAUI,EAAEZ,IAAI,MAAMO,KAAKC,SAAAA,CAAUK,EAAEb,IAAI;AAE7E;ACJO,SAASc,iBACdrB,OAAAA,EACAC,KAAAA,EACA;IACA,IAAI,EAACC,8KAAAA,EAAYF,SAASC,KAAK,GAC7B,OAAO,CAAA;IAGT,MAAMqB,WAAWrB,MAAMI,QAAAA,CAASkB,KAAAA,CAAOC,CAAAA,yKAAUd,SAAAA,EAAOV,SAASwB,KAAK,CAAC,GACjEC,4NAAYC,mBAAAA,EAAiBzB,KAAK;IAExC,OAAOqB,YAAYG,cAAc;AACnC","ignoreList":[0,1,2,3],"debugId":null}},
    {"offset": {"line": 516, "column": 0}, "map": {"version":3,"file":"selector.get-selection-text.js","sources":["file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/selectors/selector.get-focus-block.ts","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/selectors/selector.get-focus-text-block.ts","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/selectors/selector.get-focus-child.ts","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/selectors/selector.get-focus-span.ts","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/selectors/selector.get-selection-start-point.ts","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/selectors/selector.is-selection-collapsed.ts","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/selectors/selector.is-selection-expanded.ts","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/selectors/selector.get-selected-value.ts","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/selectors/selector.get-previous-inline-object.ts","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/selectors/selector.get-selection-text.ts"],"sourcesContent":["import type {PortableTextBlock} from '@sanity/types'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport type {BlockPath} from '../types/paths'\nimport {getBlockKeyFromSelectionPoint} from '../utils/util.selection-point'\n\n/**\n * @public\n */\nexport const getFocusBlock: EditorSelector<\n  {node: PortableTextBlock; path: BlockPath} | undefined\n> = (snapshot) => {\n  if (!snapshot.context.selection) {\n    return undefined\n  }\n\n  const key = getBlockKeyFromSelectionPoint(snapshot.context.selection.focus)\n  const index = key ? snapshot.blockIndexMap.get(key) : undefined\n\n  const node =\n    index !== undefined ? snapshot.context.value.at(index) : undefined\n\n  return node && key ? {node, path: [{_key: key}]} : undefined\n}\n","import {isTextBlock} from '@portabletext/schema'\nimport type {PortableTextTextBlock} from '@sanity/types'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport type {BlockPath} from '../types/paths'\nimport {getFocusBlock} from './selector.get-focus-block'\n\n/**\n * @public\n */\nexport const getFocusTextBlock: EditorSelector<\n  {node: PortableTextTextBlock; path: BlockPath} | undefined\n> = (snapshot) => {\n  const focusBlock = getFocusBlock(snapshot)\n\n  return focusBlock && isTextBlock(snapshot.context, focusBlock.node)\n    ? {node: focusBlock.node, path: focusBlock.path}\n    : undefined\n}\n","import type {PortableTextObject, PortableTextSpan} from '@sanity/types'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport type {ChildPath} from '../types/paths'\nimport {getChildKeyFromSelectionPoint} from '../utils/util.selection-point'\nimport {getFocusTextBlock} from './selector.get-focus-text-block'\n\n/**\n * @public\n */\nexport const getFocusChild: EditorSelector<\n  | {\n      node: PortableTextObject | PortableTextSpan\n      path: ChildPath\n    }\n  | undefined\n> = (snapshot) => {\n  if (!snapshot.context.selection) {\n    return undefined\n  }\n\n  const focusBlock = getFocusTextBlock(snapshot)\n\n  if (!focusBlock) {\n    return undefined\n  }\n\n  const key = getChildKeyFromSelectionPoint(snapshot.context.selection.focus)\n\n  const node = key\n    ? focusBlock.node.children.find((span) => span._key === key)\n    : undefined\n\n  return node && key\n    ? {node, path: [...focusBlock.path, 'children', {_key: key}]}\n    : undefined\n}\n","import {isSpan} from '@portabletext/schema'\nimport type {PortableTextSpan} from '@sanity/types'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport type {ChildPath} from '../types/paths'\nimport {getFocusChild} from './selector.get-focus-child'\n\n/**\n * @public\n */\nexport const getFocusSpan: EditorSelector<\n  {node: PortableTextSpan; path: ChildPath} | undefined\n> = (snapshot) => {\n  const focusChild = getFocusChild(snapshot)\n\n  return focusChild && isSpan(snapshot.context, focusChild.node)\n    ? {node: focusChild.node, path: focusChild.path}\n    : undefined\n}\n","import type {EditorSelector} from '../editor/editor-selector'\nimport type {EditorSelectionPoint} from '../types/editor'\n\n/**\n * @public\n */\nexport const getSelectionStartPoint: EditorSelector<\n  EditorSelectionPoint | undefined\n> = (snapshot) => {\n  if (!snapshot.context.selection) {\n    return undefined\n  }\n\n  return snapshot.context.selection.backward\n    ? snapshot.context.selection.focus\n    : snapshot.context.selection.anchor\n}\n","import type {EditorSelector} from '../editor/editor-selector'\n\n/**\n * @public\n */\nexport const isSelectionCollapsed: EditorSelector<boolean> = (snapshot) => {\n  if (!snapshot.context.selection) {\n    return false\n  }\n\n  return (\n    JSON.stringify(snapshot.context.selection.anchor.path) ===\n      JSON.stringify(snapshot.context.selection.focus.path) &&\n    snapshot.context.selection?.anchor.offset ===\n      snapshot.context.selection?.focus.offset\n  )\n}\n","import type {EditorSelector} from '../editor/editor-selector'\nimport {isSelectionCollapsed} from './selector.is-selection-collapsed'\n\n/**\n * @public\n */\nexport const isSelectionExpanded: EditorSelector<boolean> = (snapshot) => {\n  return !isSelectionCollapsed(snapshot)\n}\n","import type {PortableTextBlock} from '@sanity/types'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport {getSelectionEndPoint} from '../utils/util.get-selection-end-point'\nimport {getSelectionStartPoint} from '../utils/util.get-selection-start-point'\nimport {getBlockKeyFromSelectionPoint} from '../utils/util.selection-point'\nimport {sliceBlocks} from '../utils/util.slice-blocks'\n\n/**\n * @public\n */\nexport const getSelectedValue: EditorSelector<Array<PortableTextBlock>> = (\n  snapshot,\n) => {\n  const selection = snapshot.context.selection\n\n  if (!selection) {\n    return []\n  }\n\n  const startPoint = getSelectionStartPoint(selection)\n  const endPoint = getSelectionEndPoint(selection)\n  const startBlockKey = getBlockKeyFromSelectionPoint(startPoint)\n  const endBlockKey = getBlockKeyFromSelectionPoint(endPoint)\n\n  if (!startBlockKey || !endBlockKey) {\n    return []\n  }\n\n  const startBlockIndex = snapshot.blockIndexMap.get(startBlockKey)\n  const endBlockIndex = snapshot.blockIndexMap.get(endBlockKey)\n\n  if (startBlockIndex === undefined || endBlockIndex === undefined) {\n    return []\n  }\n\n  const startBlock = snapshot.context.value.at(startBlockIndex)\n  const slicedStartBlock = startBlock\n    ? sliceBlocks({\n        context: snapshot.context,\n        blocks: [startBlock],\n      }).at(0)\n    : undefined\n\n  if (startBlockIndex === endBlockIndex) {\n    return slicedStartBlock ? [slicedStartBlock] : []\n  }\n\n  const endBlock = snapshot.context.value.at(endBlockIndex)\n  const slicedEndBlock = endBlock\n    ? sliceBlocks({\n        context: snapshot.context,\n        blocks: [endBlock],\n      }).at(0)\n    : undefined\n\n  const middleBlocks = snapshot.context.value.slice(\n    startBlockIndex + 1,\n    endBlockIndex,\n  )\n\n  return [\n    ...(slicedStartBlock ? [slicedStartBlock] : []),\n    ...middleBlocks,\n    ...(slicedEndBlock ? [slicedEndBlock] : []),\n  ]\n}\n","import {isSpan} from '@portabletext/schema'\nimport {isKeySegment, type PortableTextObject} from '@sanity/types'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport type {ChildPath} from '../types/paths'\nimport {getFocusTextBlock} from './selector.get-focus-text-block'\nimport {getSelectionStartPoint} from './selector.get-selection-start-point'\n\n/**\n * @public\n */\nexport const getPreviousInlineObject: EditorSelector<\n  | {\n      node: PortableTextObject\n      path: ChildPath\n    }\n  | undefined\n> = (snapshot) => {\n  const focusTextBlock = getFocusTextBlock(snapshot)\n  const selectionStartPoint = getSelectionStartPoint(snapshot)\n  const selectionStartPointChildKey =\n    selectionStartPoint && isKeySegment(selectionStartPoint.path[2])\n      ? selectionStartPoint.path[2]._key\n      : undefined\n\n  if (!focusTextBlock || !selectionStartPointChildKey) {\n    return undefined\n  }\n\n  let inlineObject:\n    | {\n        node: PortableTextObject\n        path: ChildPath\n      }\n    | undefined\n\n  for (const child of focusTextBlock.node.children) {\n    if (child._key === selectionStartPointChildKey) {\n      break\n    }\n\n    if (!isSpan(snapshot.context, child)) {\n      inlineObject = {\n        node: child,\n        path: [...focusTextBlock.path, 'children', {_key: child._key}],\n      }\n    }\n  }\n\n  return inlineObject\n}\n","import {isSpan, isTextBlock} from '@portabletext/schema'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport {getSelectedValue} from './selector.get-selected-value'\n\n/**\n * @public\n */\nexport const getSelectionText: EditorSelector<string> = (snapshot) => {\n  const selectedValue = getSelectedValue(snapshot)\n\n  return selectedValue.reduce((text, block) => {\n    if (!isTextBlock(snapshot.context, block)) {\n      return text\n    }\n\n    return (\n      text +\n      block.children.reduce((text, child) => {\n        if (isSpan(snapshot.context, child)) {\n          return text + child.text\n        }\n\n        return text\n      }, '')\n    )\n  }, '')\n}\n"],"names":["getFocusBlock","snapshot","context","selection","key","getBlockKeyFromSelectionPoint","focus","index","blockIndexMap","get","undefined","node","value","at","path","_key","getFocusTextBlock","focusBlock","isTextBlock","getFocusChild","getChildKeyFromSelectionPoint","children","find","span","getFocusSpan","focusChild","isSpan","getSelectionStartPoint","backward","anchor","isSelectionCollapsed","JSON","stringify","offset","isSelectionExpanded","getSelectedValue","startPoint","endPoint","getSelectionEndPoint","startBlockKey","endBlockKey","startBlockIndex","endBlockIndex","startBlock","slicedStartBlock","sliceBlocks","blocks","endBlock","slicedEndBlock","middleBlocks","slice","getPreviousInlineObject","focusTextBlock","selectionStartPoint","selectionStartPointChildKey","isKeySegment","inlineObject","child","getSelectionText","reduce","text","block"],"mappings":"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","ignoreList":[0,1,2,3,4,5,6,7,8,9],"debugId":null}},
    {"offset": {"line": 632, "column": 0}, "map": {"version":3,"file":"selector.is-active-style.js","sources":["file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/selectors/selector.get-focus-inline-object.ts","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/selectors/selector.get-selected-blocks.ts","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/selectors/selector.get-selection-end-block.ts","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/selectors/selector.get-selection-start-block.ts","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/selectors/selector.get-selection-end-point.ts","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/selectors/selector.is-point-after-selection.ts","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/selectors/selector.is-point-before-selection.ts","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/selectors/selector.is-overlapping-selection.ts","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/selectors/selector.is-selecting-entire-blocks.ts","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/types/paths.ts","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/utils/util.is-selection-expanded.ts","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/selectors/selector.get-next-span.ts","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/selectors/selector.get-previous-span.ts","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/selectors/selector.get-selected-spans.ts","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/selectors/selector.get-mark-state.ts","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/selectors/selector.get-active-decorators.ts","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/selectors/selector.get-trimmed-selection.ts","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/selectors/selector.get-next-inline-object.ts","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/selectors/selector.get-caret-word-selection.ts","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/selectors/selector.get-active-annotation-marks.ts","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/selectors/selector.is-active-annotation.ts","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/selectors/selector.get-focus-block-object.ts","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/selectors/selector.get-next-block.ts","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/selectors/selector.get-previous-block.ts","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/selectors/selector.get-first-block.ts","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/selectors/selector.get-last-block.ts","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/selectors/selector.is-at-the-end-of-block.ts","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/selectors/selector.is-at-the-start-of-block.ts","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/selectors/selector.get-focus-list-block.ts","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/selectors/selector.is-active-decorator.ts","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/selectors/selector.get-active-annotations.ts","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/selectors/selector.get-selected-text-blocks.ts","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/selectors/selector.get-active-list-item.ts","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/selectors/selector.is-active-list-item.ts","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/selectors/selector.get-active-style.ts","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/selectors/selector.is-active-style.ts"],"sourcesContent":["import {isPortableTextSpan, type PortableTextObject} from '@sanity/types'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport type {ChildPath} from '../types/paths'\nimport {getFocusChild} from './selector.get-focus-child'\n\n/**\n * @public\n */\nexport const getFocusInlineObject: EditorSelector<\n  {node: PortableTextObject; path: ChildPath} | undefined\n> = (snapshot) => {\n  const focusChild = getFocusChild(snapshot)\n\n  return focusChild && !isPortableTextSpan(focusChild.node)\n    ? {node: focusChild.node, path: focusChild.path}\n    : undefined\n}\n","import type {PortableTextBlock} from '@sanity/types'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport type {BlockPath} from '../types/paths'\nimport {getSelectionEndPoint} from '../utils/util.get-selection-end-point'\nimport {getSelectionStartPoint} from '../utils/util.get-selection-start-point'\nimport {getBlockKeyFromSelectionPoint} from '../utils/util.selection-point'\n\n/**\n * @public\n */\nexport const getSelectedBlocks: EditorSelector<\n  Array<{node: PortableTextBlock; path: BlockPath}>\n> = (snapshot) => {\n  if (!snapshot.context.selection) {\n    return []\n  }\n\n  const selectedBlocks: Array<{node: PortableTextBlock; path: BlockPath}> = []\n  const startPoint = getSelectionStartPoint(snapshot.context.selection)\n  const endPoint = getSelectionEndPoint(snapshot.context.selection)\n  const startKey = getBlockKeyFromSelectionPoint(startPoint)\n  const endKey = getBlockKeyFromSelectionPoint(endPoint)\n\n  if (!startKey || !endKey) {\n    return selectedBlocks\n  }\n\n  const startBlockIndex = snapshot.blockIndexMap.get(startKey)\n  const endBlockIndex = snapshot.blockIndexMap.get(endKey)\n\n  if (startBlockIndex === undefined || endBlockIndex === undefined) {\n    return selectedBlocks\n  }\n\n  const slicedValue = snapshot.context.value.slice(\n    startBlockIndex,\n    endBlockIndex + 1,\n  )\n\n  for (const block of slicedValue) {\n    if (block._key === startKey) {\n      selectedBlocks.push({node: block, path: [{_key: block._key}]})\n\n      if (startKey === endKey) {\n        break\n      }\n      continue\n    }\n\n    if (block._key === endKey) {\n      selectedBlocks.push({node: block, path: [{_key: block._key}]})\n      break\n    }\n\n    if (selectedBlocks.length > 0) {\n      selectedBlocks.push({node: block, path: [{_key: block._key}]})\n    }\n  }\n\n  return selectedBlocks\n}\n","import type {PortableTextBlock} from '@sanity/types'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport type {BlockPath} from '../types/paths'\nimport {getSelectionEndPoint} from '../utils/util.get-selection-end-point'\nimport {getFocusBlock} from './selector.get-focus-block'\n\n/**\n * @public\n */\nexport const getSelectionEndBlock: EditorSelector<\n  | {\n      node: PortableTextBlock\n      path: BlockPath\n    }\n  | undefined\n> = (snapshot) => {\n  const endPoint = getSelectionEndPoint(snapshot.context.selection)\n\n  if (!endPoint) {\n    return undefined\n  }\n\n  return getFocusBlock({\n    ...snapshot,\n    context: {\n      ...snapshot.context,\n      selection: {\n        anchor: endPoint,\n        focus: endPoint,\n      },\n    },\n  })\n}\n","import type {PortableTextBlock} from '@sanity/types'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport type {BlockPath} from '../types/paths'\nimport {getSelectionStartPoint} from '../utils/util.get-selection-start-point'\nimport {getFocusBlock} from './selector.get-focus-block'\n\n/**\n * @public\n */\nexport const getSelectionStartBlock: EditorSelector<\n  | {\n      node: PortableTextBlock\n      path: BlockPath\n    }\n  | undefined\n> = (snapshot) => {\n  const startPoint = getSelectionStartPoint(snapshot.context.selection)\n\n  if (!startPoint) {\n    return undefined\n  }\n\n  return getFocusBlock({\n    ...snapshot,\n    context: {\n      ...snapshot.context,\n      selection: {\n        anchor: startPoint,\n        focus: startPoint,\n      },\n    },\n  })\n}\n","import type {EditorSelector} from '../editor/editor-selector'\nimport type {EditorSelectionPoint} from '../types/editor'\n\n/**\n * @public\n */\nexport const getSelectionEndPoint: EditorSelector<\n  EditorSelectionPoint | undefined\n> = (snapshot) => {\n  if (!snapshot.context.selection) {\n    return undefined\n  }\n\n  return snapshot.context.selection.backward\n    ? snapshot.context.selection.anchor\n    : snapshot.context.selection.focus\n}\n","import {isTextBlock} from '@portabletext/schema'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport type {EditorSelectionPoint} from '../types/editor'\nimport {getSelectionEndPoint} from '../utils/util.get-selection-end-point'\nimport {\n  getBlockKeyFromSelectionPoint,\n  getChildKeyFromSelectionPoint,\n} from '../utils/util.selection-point'\n\n/**\n * @public\n */\nexport function isPointAfterSelection(\n  point: EditorSelectionPoint,\n): EditorSelector<boolean> {\n  return (snapshot) => {\n    if (!snapshot.context.selection) {\n      return false\n    }\n\n    const endPoint = getSelectionEndPoint(snapshot.context.selection)\n    const endBlockKey = getBlockKeyFromSelectionPoint(endPoint)\n    const endChildKey = getChildKeyFromSelectionPoint(endPoint)\n\n    const pointBlockKey = getBlockKeyFromSelectionPoint(point)\n    const pointChildKey = getChildKeyFromSelectionPoint(point)\n\n    if (!pointBlockKey || !endBlockKey) {\n      return false\n    }\n\n    const pointBlockIndex = snapshot.blockIndexMap.get(pointBlockKey)\n    const endBlockIndex = snapshot.blockIndexMap.get(endBlockKey)\n\n    if (pointBlockIndex === undefined || endBlockIndex === undefined) {\n      return false\n    }\n\n    if (pointBlockIndex > endBlockIndex) {\n      // The point block is after the end block.\n      return true\n    }\n\n    if (pointBlockIndex < endBlockIndex) {\n      // The point block is before the end block.\n      return false\n    }\n\n    // The point block is the same as the end block.\n    const pointBlock = snapshot.context.value.at(pointBlockIndex)\n\n    if (!pointBlock) {\n      // The point block is not in the value.\n      return false\n    }\n\n    if (!isTextBlock(snapshot.context, pointBlock)) {\n      // The point block is not a text block.\n      // Since the point block is the same as the end block, the point is not\n      // after the selection.\n      return false\n    }\n\n    let pointChildIndex: number | undefined\n    let endChildIndex: number | undefined\n\n    let childIndex = -1\n\n    // The point block is the same as the end block, so we need to find the\n    // child indices and compare them.\n    for (const child of pointBlock.children) {\n      childIndex++\n\n      if (child._key === pointChildKey && child._key === endChildKey) {\n        return point.offset > endPoint.offset\n      }\n\n      if (child._key === pointChildKey) {\n        pointChildIndex = childIndex\n      }\n\n      if (child._key === endChildKey) {\n        endChildIndex = childIndex\n      }\n\n      if (pointChildIndex !== undefined && endChildIndex !== undefined) {\n        break\n      }\n    }\n\n    if (pointChildIndex === undefined || endChildIndex === undefined) {\n      return false\n    }\n\n    return pointChildIndex > endChildIndex\n  }\n}\n","import {isTextBlock} from '@portabletext/schema'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport type {EditorSelectionPoint} from '../types/editor'\nimport {getSelectionStartPoint} from '../utils/util.get-selection-start-point'\nimport {\n  getBlockKeyFromSelectionPoint,\n  getChildKeyFromSelectionPoint,\n} from '../utils/util.selection-point'\n\n/**\n * @public\n */\nexport function isPointBeforeSelection(\n  point: EditorSelectionPoint,\n): EditorSelector<boolean> {\n  return (snapshot) => {\n    if (!snapshot.context.selection) {\n      return false\n    }\n\n    const startPoint = getSelectionStartPoint(snapshot.context.selection)\n    const startBlockKey = getBlockKeyFromSelectionPoint(startPoint)\n    const startChildKey = getChildKeyFromSelectionPoint(startPoint)\n\n    const pointBlockKey = getBlockKeyFromSelectionPoint(point)\n    const pointChildKey = getChildKeyFromSelectionPoint(point)\n\n    if (!pointBlockKey || !startBlockKey) {\n      return false\n    }\n\n    const startBlockIndex = snapshot.blockIndexMap.get(startBlockKey)\n    const pointBlockIndex = snapshot.blockIndexMap.get(pointBlockKey)\n\n    if (startBlockIndex === undefined || pointBlockIndex === undefined) {\n      return false\n    }\n\n    if (pointBlockIndex < startBlockIndex) {\n      // The point block is before the start block.\n      return true\n    }\n\n    if (pointBlockIndex > startBlockIndex) {\n      // The point block is after the start block.\n      return false\n    }\n\n    // The point block is the same as the start block.\n    const pointBlock = snapshot.context.value.at(pointBlockIndex)\n\n    if (!pointBlock) {\n      // The point block is not in the value.\n      return false\n    }\n\n    if (!isTextBlock(snapshot.context, pointBlock)) {\n      // The point block is not a text block.\n      // Since the point block is the same as the start block, the point is not\n      // before the selection.\n      return false\n    }\n\n    let pointChildIndex: number | undefined\n    let startChildIndex: number | undefined\n\n    let childIndex = -1\n\n    // The point block is the same as the start block, so we need to find the\n    // child indices and compare them.\n    for (const child of pointBlock.children) {\n      childIndex++\n\n      if (child._key === pointChildKey && child._key === startChildKey) {\n        return point.offset < startPoint.offset\n      }\n\n      if (child._key === pointChildKey) {\n        pointChildIndex = childIndex\n      }\n\n      if (child._key === startChildKey) {\n        startChildIndex = childIndex\n      }\n\n      if (pointChildIndex !== undefined && startChildIndex !== undefined) {\n        break\n      }\n    }\n\n    if (pointChildIndex === undefined || startChildIndex === undefined) {\n      return false\n    }\n\n    return pointChildIndex < startChildIndex\n  }\n}\n","import type {EditorSelection} from '../types/editor'\nimport {isEqualSelectionPoints} from '../utils/util.is-equal-selection-points'\nimport type {EditorSelector} from './../editor/editor-selector'\nimport {getSelectionEndPoint} from './selector.get-selection-end-point'\nimport {getSelectionStartPoint} from './selector.get-selection-start-point'\nimport {isPointAfterSelection} from './selector.is-point-after-selection'\nimport {isPointBeforeSelection} from './selector.is-point-before-selection'\n\n/**\n * @public\n */\nexport function isOverlappingSelection(\n  selection: EditorSelection,\n): EditorSelector<boolean> {\n  return (snapshot) => {\n    if (!selection || !snapshot.context.selection) {\n      return false\n    }\n\n    const selectionStartPoint = getSelectionStartPoint({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection,\n      },\n    })\n    const selectionEndPoint = getSelectionEndPoint({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection,\n      },\n    })\n\n    const originalSelectionStartPoint = getSelectionStartPoint(snapshot)\n    const originalSelectionEndPoint = getSelectionEndPoint(snapshot)\n\n    if (\n      !selectionStartPoint ||\n      !selectionEndPoint ||\n      !originalSelectionStartPoint ||\n      !originalSelectionEndPoint\n    ) {\n      return false\n    }\n\n    const startPointEqualToOriginalStartPoint = isEqualSelectionPoints(\n      selectionStartPoint,\n      originalSelectionStartPoint,\n    )\n    const endPointEqualToOriginalEndPoint = isEqualSelectionPoints(\n      selectionEndPoint,\n      originalSelectionEndPoint,\n    )\n\n    if (\n      startPointEqualToOriginalStartPoint &&\n      endPointEqualToOriginalEndPoint\n    ) {\n      return true\n    }\n\n    const startPointBeforeSelection =\n      isPointBeforeSelection(selectionStartPoint)(snapshot)\n    const startPointAfterSelection =\n      isPointAfterSelection(selectionStartPoint)(snapshot)\n    const endPointBeforeSelection =\n      isPointBeforeSelection(selectionEndPoint)(snapshot)\n    const endPointAfterSelection =\n      isPointAfterSelection(selectionEndPoint)(snapshot)\n\n    const originalStartPointBeforeStartPoint = isPointBeforeSelection(\n      originalSelectionStartPoint,\n    )({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection: {\n          anchor: selectionStartPoint,\n          focus: selectionStartPoint,\n        },\n      },\n    })\n    const originalStartPointAfterStartPoint = isPointAfterSelection(\n      originalSelectionStartPoint,\n    )({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection: {\n          anchor: selectionStartPoint,\n          focus: selectionStartPoint,\n        },\n      },\n    })\n\n    const originalEndPointBeforeEndPoint = isPointBeforeSelection(\n      originalSelectionEndPoint,\n    )({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection: {\n          anchor: selectionEndPoint,\n          focus: selectionEndPoint,\n        },\n      },\n    })\n    const originalEndPointAfterEndPoint = isPointAfterSelection(\n      originalSelectionEndPoint,\n    )({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection: {\n          anchor: selectionEndPoint,\n          focus: selectionEndPoint,\n        },\n      },\n    })\n\n    const startPointEqualToOriginalEndPoint = isEqualSelectionPoints(\n      selectionStartPoint,\n      originalSelectionEndPoint,\n    )\n    const endPointEqualToOriginalStartPoint = isEqualSelectionPoints(\n      selectionEndPoint,\n      originalSelectionStartPoint,\n    )\n\n    // If all checks fail then we can deduce that the selection does not exist\n    // and there doesn't overlap with the snapshot selection\n    if (\n      !endPointEqualToOriginalStartPoint &&\n      !startPointEqualToOriginalEndPoint &&\n      !originalStartPointBeforeStartPoint &&\n      !originalStartPointAfterStartPoint &&\n      !originalEndPointBeforeEndPoint &&\n      !originalEndPointAfterEndPoint\n    ) {\n      return false\n    }\n\n    if (endPointBeforeSelection && !endPointEqualToOriginalStartPoint) {\n      return false\n    }\n\n    if (startPointAfterSelection && !startPointEqualToOriginalEndPoint) {\n      return false\n    }\n\n    if (\n      !originalStartPointBeforeStartPoint &&\n      originalStartPointAfterStartPoint &&\n      !originalEndPointBeforeEndPoint &&\n      originalEndPointAfterEndPoint\n    ) {\n      return !endPointEqualToOriginalStartPoint\n    }\n\n    if (\n      originalStartPointBeforeStartPoint &&\n      !originalStartPointAfterStartPoint &&\n      originalEndPointBeforeEndPoint &&\n      !originalEndPointAfterEndPoint\n    ) {\n      return !startPointEqualToOriginalEndPoint\n    }\n\n    if (\n      !startPointAfterSelection ||\n      !startPointBeforeSelection ||\n      !endPointAfterSelection ||\n      !endPointBeforeSelection\n    ) {\n      return true\n    }\n\n    return false\n  }\n}\n","import type {EditorSelector} from '../editor/editor-selector'\nimport {getBlockEndPoint} from '../utils/util.get-block-end-point'\nimport {getBlockStartPoint} from '../utils/util.get-block-start-point'\nimport {isEqualSelectionPoints} from '../utils/util.is-equal-selection-points'\nimport {getSelectionEndBlock} from './selector.get-selection-end-block'\nimport {getSelectionStartBlock} from './selector.get-selection-start-block'\n\n/**\n * @public\n */\nexport const isSelectingEntireBlocks: EditorSelector<boolean> = (snapshot) => {\n  if (!snapshot.context.selection) {\n    return false\n  }\n\n  const startPoint = snapshot.context.selection.backward\n    ? snapshot.context.selection.focus\n    : snapshot.context.selection.anchor\n  const endPoint = snapshot.context.selection.backward\n    ? snapshot.context.selection.anchor\n    : snapshot.context.selection.focus\n\n  const startBlock = getSelectionStartBlock(snapshot)\n  const endBlock = getSelectionEndBlock(snapshot)\n\n  if (!startBlock || !endBlock) {\n    return false\n  }\n\n  const startBlockStartPoint = getBlockStartPoint({\n    context: snapshot.context,\n    block: startBlock,\n  })\n  const endBlockEndPoint = getBlockEndPoint({\n    context: snapshot.context,\n    block: endBlock,\n  })\n\n  return (\n    isEqualSelectionPoints(startBlockStartPoint, startPoint) &&\n    isEqualSelectionPoints(endBlockEndPoint, endPoint)\n  )\n}\n","import type {Path} from '@sanity/types'\n\n/**\n * @public\n */\nexport type BlockPath = [{_key: string}]\n\n/**\n * @public\n */\nexport function isBlockPath(path: Path): path is BlockPath {\n  const firstSegment = path.at(0)\n\n  return (\n    path.length === 1 &&\n    firstSegment !== undefined &&\n    isRecord(firstSegment) &&\n    '_key' in firstSegment &&\n    typeof firstSegment._key === 'string'\n  )\n}\n\nfunction isRecord(value: unknown): value is Record<string, unknown> {\n  return !!value && (typeof value === 'object' || typeof value === 'function')\n}\n\n/**\n * @public\n */\nexport type AnnotationPath = [{_key: string}, 'markDefs', {_key: string}]\n\n/**\n * @public\n */\nexport type ChildPath = [{_key: string}, 'children', {_key: string}]\n","import type {EditorSelection} from '../types/editor'\nimport {isSelectionCollapsed} from './util.is-selection-collapsed'\n\n/**\n * @public\n */\nexport function isSelectionExpanded(selection: EditorSelection) {\n  if (!selection) {\n    return false\n  }\n\n  return !isSelectionCollapsed(selection)\n}\n","import {isSpan, isTextBlock} from '@portabletext/schema'\nimport type {KeyedSegment, PortableTextSpan} from '@sanity/types'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport {getChildKeyFromSelectionPoint} from '../utils/util.selection-point'\nimport {getSelectionEndBlock} from './selector.get-selection-end-block'\nimport {getSelectionEndPoint} from './selector.get-selection-end-point'\n\n/**\n * @public\n */\nexport const getNextSpan: EditorSelector<\n  | {\n      node: PortableTextSpan\n      path: [KeyedSegment, 'children', KeyedSegment]\n    }\n  | undefined\n> = (snapshot) => {\n  const selectionEndBlock = getSelectionEndBlock(snapshot)\n  const selectionEndPoint = getSelectionEndPoint(snapshot)\n\n  if (!selectionEndBlock || !selectionEndPoint) {\n    return undefined\n  }\n\n  if (!isTextBlock(snapshot.context, selectionEndBlock.node)) {\n    return undefined\n  }\n\n  const selectionEndPointChildKey =\n    getChildKeyFromSelectionPoint(selectionEndPoint)\n\n  let endPointChildFound = false\n  let nextSpan:\n    | {\n        node: PortableTextSpan\n        path: [KeyedSegment, 'children', KeyedSegment]\n      }\n    | undefined\n\n  for (const child of selectionEndBlock.node.children) {\n    if (child._key === selectionEndPointChildKey) {\n      endPointChildFound = true\n      continue\n    }\n\n    if (isSpan(snapshot.context, child) && endPointChildFound) {\n      nextSpan = {\n        node: child,\n        path: [...selectionEndBlock.path, 'children', {_key: child._key}],\n      }\n      break\n    }\n  }\n\n  return nextSpan\n}\n","import {isSpan, isTextBlock} from '@portabletext/schema'\nimport type {KeyedSegment, PortableTextSpan} from '@sanity/types'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport {getChildKeyFromSelectionPoint} from '../utils/util.selection-point'\nimport {getSelectionStartBlock} from './selector.get-selection-start-block'\nimport {getSelectionStartPoint} from './selector.get-selection-start-point'\n\n/**\n * @public\n */\nexport const getPreviousSpan: EditorSelector<\n  | {\n      node: PortableTextSpan\n      path: [KeyedSegment, 'children', KeyedSegment]\n    }\n  | undefined\n> = (snapshot) => {\n  const selectionStartBlock = getSelectionStartBlock(snapshot)\n  const selectionStartPoint = getSelectionStartPoint(snapshot)\n\n  if (!selectionStartBlock || !selectionStartPoint) {\n    return undefined\n  }\n\n  if (!isTextBlock(snapshot.context, selectionStartBlock.node)) {\n    return undefined\n  }\n\n  const selectionStartPointChildKey =\n    getChildKeyFromSelectionPoint(selectionStartPoint)\n\n  let previousSpan:\n    | {\n        node: PortableTextSpan\n        path: [KeyedSegment, 'children', KeyedSegment]\n      }\n    | undefined\n\n  for (const child of selectionStartBlock.node.children) {\n    if (child._key === selectionStartPointChildKey) {\n      break\n    }\n\n    if (isSpan(snapshot.context, child)) {\n      previousSpan = {\n        node: child,\n        path: [...selectionStartBlock.path, 'children', {_key: child._key}],\n      }\n    }\n  }\n\n  return previousSpan\n}\n","import {isSpan, isTextBlock} from '@portabletext/schema'\nimport type {PortableTextSpan} from '@sanity/types'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport type {ChildPath} from '../types/paths'\nimport {\n  getBlockKeyFromSelectionPoint,\n  getChildKeyFromSelectionPoint,\n} from '../utils/util.selection-point'\nimport {getSelectionEndPoint} from './selector.get-selection-end-point'\nimport {getSelectionStartPoint} from './selector.get-selection-start-point'\n\n/**\n * @public\n */\nexport const getSelectedSpans: EditorSelector<\n  Array<{\n    node: PortableTextSpan\n    path: ChildPath\n  }>\n> = (snapshot) => {\n  if (!snapshot.context.selection) {\n    return []\n  }\n\n  const selectedSpans: Array<{\n    node: PortableTextSpan\n    path: ChildPath\n  }> = []\n\n  const startPoint = getSelectionStartPoint(snapshot)\n  const endPoint = getSelectionEndPoint(snapshot)\n\n  if (!startPoint || !endPoint) {\n    return selectedSpans\n  }\n\n  const startBlockKey = getBlockKeyFromSelectionPoint(startPoint)\n  const endBlockKey = getBlockKeyFromSelectionPoint(endPoint)\n  const startSpanKey = getChildKeyFromSelectionPoint(startPoint)\n  const endSpanKey = getChildKeyFromSelectionPoint(endPoint)\n\n  if (!startBlockKey || !endBlockKey) {\n    return selectedSpans\n  }\n\n  const startBlockIndex = snapshot.blockIndexMap.get(startBlockKey)\n  const endBlockIndex = snapshot.blockIndexMap.get(endBlockKey)\n\n  if (startBlockIndex === undefined || endBlockIndex === undefined) {\n    return selectedSpans\n  }\n\n  const slicedValue = snapshot.context.value.slice(\n    startBlockIndex,\n    endBlockIndex + 1,\n  )\n\n  let startBlockFound = false\n\n  for (const block of slicedValue) {\n    if (block._key === startBlockKey) {\n      startBlockFound = true\n    }\n\n    if (!isTextBlock(snapshot.context, block)) {\n      continue\n    }\n\n    if (block._key === startBlockKey) {\n      for (const child of block.children) {\n        if (!isSpan(snapshot.context, child)) {\n          continue\n        }\n\n        if (startSpanKey && child._key === startSpanKey) {\n          if (startPoint.offset < child.text.length) {\n            selectedSpans.push({\n              node: child,\n              path: [{_key: block._key}, 'children', {_key: child._key}],\n            })\n          }\n\n          if (startSpanKey === endSpanKey) {\n            break\n          }\n\n          continue\n        }\n\n        if (endSpanKey && child._key === endSpanKey) {\n          if (endPoint.offset > 0) {\n            selectedSpans.push({\n              node: child,\n              path: [{_key: block._key}, 'children', {_key: child._key}],\n            })\n          }\n          break\n        }\n\n        if (selectedSpans.length > 0) {\n          selectedSpans.push({\n            node: child,\n            path: [{_key: block._key}, 'children', {_key: child._key}],\n          })\n        }\n      }\n\n      if (startBlockKey === endBlockKey) {\n        break\n      }\n\n      continue\n    }\n\n    if (block._key === endBlockKey) {\n      for (const child of block.children) {\n        if (!isSpan(snapshot.context, child)) {\n          continue\n        }\n\n        if (endSpanKey && child._key === endSpanKey) {\n          if (endPoint.offset > 0) {\n            selectedSpans.push({\n              node: child,\n              path: [{_key: block._key}, 'children', {_key: child._key}],\n            })\n          }\n          break\n        }\n\n        selectedSpans.push({\n          node: child,\n          path: [{_key: block._key}, 'children', {_key: child._key}],\n        })\n      }\n\n      break\n    }\n\n    if (startBlockFound) {\n      for (const child of block.children) {\n        if (!isSpan(snapshot.context, child)) {\n          continue\n        }\n\n        selectedSpans.push({\n          node: child,\n          path: [{_key: block._key}, 'children', {_key: child._key}],\n        })\n      }\n    }\n  }\n\n  return selectedSpans\n}\n","import type {EditorSelector} from '../editor/editor-selector'\nimport {isBlockPath} from '../types/paths'\nimport {blockOffsetToSpanSelectionPoint} from '../utils/util.block-offset'\nimport {isSelectionExpanded} from '../utils/util.is-selection-expanded'\nimport {getFocusSpan} from './selector.get-focus-span'\nimport {getFocusTextBlock} from './selector.get-focus-text-block'\nimport {getNextSpan} from './selector.get-next-span'\nimport {getPreviousSpan} from './selector.get-previous-span'\nimport {getSelectedSpans} from './selector.get-selected-spans'\n\n/**\n * @beta\n */\nexport type MarkState =\n  | {\n      state: 'unchanged'\n      marks: Array<string>\n    }\n  | {\n      state: 'changed'\n      marks: Array<string>\n      previousMarks: Array<string>\n    }\n\n/**\n * Given that text is inserted at the current position, what marks should\n * be applied?\n * @beta\n */\nexport const getMarkState: EditorSelector<MarkState | undefined> = (\n  snapshot,\n) => {\n  if (!snapshot.context.selection) {\n    return undefined\n  }\n\n  let selection = snapshot.context.selection\n  const focusTextBlock = getFocusTextBlock(snapshot)\n\n  if (!focusTextBlock) {\n    return undefined\n  }\n\n  if (isBlockPath(selection.anchor.path)) {\n    const spanSelectionPoint = blockOffsetToSpanSelectionPoint({\n      context: snapshot.context,\n      blockOffset: {\n        path: selection.anchor.path,\n        offset: selection.anchor.offset,\n      },\n      direction: selection.backward ? 'backward' : 'forward',\n    })\n\n    selection = spanSelectionPoint\n      ? {\n          ...selection,\n          anchor: spanSelectionPoint,\n        }\n      : selection\n  }\n\n  if (isBlockPath(selection.focus.path)) {\n    const spanSelectionPoint = blockOffsetToSpanSelectionPoint({\n      context: snapshot.context,\n      blockOffset: {\n        path: selection.focus.path,\n        offset: selection.focus.offset,\n      },\n      direction: selection.backward ? 'backward' : 'forward',\n    })\n\n    selection = spanSelectionPoint\n      ? {\n          ...selection,\n          focus: spanSelectionPoint,\n        }\n      : selection\n  }\n\n  const focusSpan = getFocusSpan({\n    ...snapshot,\n    context: {\n      ...snapshot.context,\n      selection,\n    },\n  })\n\n  if (!focusSpan) {\n    return undefined\n  }\n\n  if (isSelectionExpanded(selection)) {\n    const selectedSpans = getSelectedSpans({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection,\n      },\n    })\n\n    let index = 0\n    let marks: Array<string> = []\n\n    for (const span of selectedSpans) {\n      if (index === 0) {\n        marks = span.node.marks ?? []\n      } else {\n        if (span.node.marks?.length === 0) {\n          marks = []\n          continue\n        }\n\n        marks = marks.filter((mark) =>\n          (span.node.marks ?? []).some((spanMark) => spanMark === mark),\n        )\n      }\n\n      index++\n    }\n\n    return {\n      state: 'unchanged',\n      marks,\n    }\n  }\n\n  const decorators = snapshot.context.schema.decorators.map(\n    (decorator) => decorator.name,\n  )\n  const marks = focusSpan.node.marks ?? []\n  const marksWithoutAnnotations = marks.filter((mark) =>\n    decorators.includes(mark),\n  )\n\n  const spanHasAnnotations = marks.length > marksWithoutAnnotations.length\n\n  const spanIsEmpty = focusSpan.node.text.length === 0\n\n  const atTheBeginningOfSpan = snapshot.context.selection.anchor.offset === 0\n  const atTheEndOfSpan =\n    snapshot.context.selection.anchor.offset === focusSpan.node.text.length\n\n  const previousSpan = getPreviousSpan({\n    ...snapshot,\n    context: {\n      ...snapshot.context,\n      selection,\n    },\n  })\n  const nextSpan = getNextSpan({\n    ...snapshot,\n    context: {\n      ...snapshot.context,\n      selection,\n    },\n  })\n  const nextSpanAnnotations =\n    nextSpan?.node?.marks?.filter((mark) => !decorators.includes(mark)) ?? []\n  const spanAnnotations = marks.filter((mark) => !decorators.includes(mark))\n\n  const previousSpanHasAnnotations = previousSpan\n    ? previousSpan.node.marks?.some((mark) => !decorators.includes(mark))\n    : false\n  const previousSpanHasSameAnnotations = previousSpan\n    ? previousSpan.node.marks\n        ?.filter((mark) => !decorators.includes(mark))\n        .every((mark) => marks.includes(mark))\n    : false\n  const previousSpanHasSameAnnotation = previousSpan\n    ? previousSpan.node.marks?.some(\n        (mark) => !decorators.includes(mark) && marks.includes(mark),\n      )\n    : false\n\n  const previousSpanHasSameMarks = previousSpan\n    ? previousSpan.node.marks?.every((mark) => marks.includes(mark))\n    : false\n  const nextSpanSharesSomeAnnotations = spanAnnotations.some((mark) =>\n    nextSpanAnnotations?.includes(mark),\n  )\n\n  if (spanHasAnnotations && !spanIsEmpty) {\n    if (atTheBeginningOfSpan) {\n      if (previousSpanHasSameMarks) {\n        return {\n          state: 'changed',\n          previousMarks: marks,\n          marks: previousSpan?.node.marks ?? [],\n        }\n      } else if (previousSpanHasSameAnnotations) {\n        return {\n          state: 'changed',\n          previousMarks: marks,\n          marks: previousSpan?.node.marks ?? [],\n        }\n      } else if (previousSpanHasSameAnnotation) {\n        return {\n          state: 'unchanged',\n          previousMarks: marks,\n          marks: focusSpan.node.marks ?? [],\n        }\n      } else if (!previousSpan) {\n        return {\n          state: 'changed',\n          previousMarks: marks,\n          marks: [],\n        }\n      }\n    }\n\n    if (atTheEndOfSpan) {\n      if (\n        (nextSpan &&\n          nextSpanSharesSomeAnnotations &&\n          nextSpanAnnotations.length < spanAnnotations.length) ||\n        !nextSpanSharesSomeAnnotations\n      ) {\n        return {\n          state: 'changed',\n          previousMarks: marks,\n          marks: nextSpan?.node.marks ?? [],\n        }\n      }\n\n      if (!nextSpan) {\n        return {\n          state: 'changed',\n          previousMarks: marks,\n          marks: [],\n        }\n      }\n    }\n  }\n\n  if (atTheBeginningOfSpan && !spanIsEmpty && !!previousSpan) {\n    if (previousSpanHasAnnotations) {\n      return {\n        state: 'changed',\n        marks,\n        previousMarks: previousSpan?.node.marks ?? [],\n      }\n    } else {\n      return {\n        state: 'changed',\n        previousMarks: marks,\n        marks: (previousSpan?.node.marks ?? []).filter((mark) =>\n          decorators.includes(mark),\n        ),\n      }\n    }\n  }\n\n  return {\n    state: 'unchanged',\n    marks,\n  }\n}\n","import type {EditorSnapshot} from '../editor/editor-snapshot'\nimport {getMarkState} from './selector.get-mark-state'\n\nexport function getActiveDecorators(snapshot: EditorSnapshot) {\n  const schema = snapshot.context.schema\n  const decoratorState = snapshot.decoratorState\n  const markState = getMarkState(snapshot)\n  const decorators = schema.decorators.map((decorator) => decorator.name)\n\n  const markStateDecorators = (markState?.marks ?? []).filter((mark) =>\n    decorators.includes(mark),\n  )\n\n  let activeDecorators: Array<string> = markStateDecorators\n\n  for (const decorator in decoratorState) {\n    if (decoratorState[decorator] === false) {\n      activeDecorators = activeDecorators.filter(\n        (activeDecorator) => activeDecorator !== decorator,\n      )\n    } else if (decoratorState[decorator] === true) {\n      if (!activeDecorators.includes(decorator)) {\n        activeDecorators.push(decorator)\n      }\n    }\n  }\n\n  return activeDecorators\n}\n","import {isSpan, isTextBlock} from '@portabletext/schema'\nimport type {PortableTextSpan} from '@sanity/types'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport type {EditorSelection, EditorSelectionPoint} from '../types/editor'\nimport {getSelectionEndPoint} from '../utils/util.get-selection-end-point'\nimport {getSelectionStartPoint} from '../utils/util.get-selection-start-point'\nimport {isEmptyTextBlock} from '../utils/util.is-empty-text-block'\nimport {\n  getBlockKeyFromSelectionPoint,\n  getChildKeyFromSelectionPoint,\n} from '../utils/util.selection-point'\nimport {getFocusTextBlock} from './selector.get-focus-text-block'\nimport {isSelectionCollapsed} from './selector.is-selection-collapsed'\n\n/**\n * @public\n */\nexport const getTrimmedSelection: EditorSelector<EditorSelection> = (\n  snapshot,\n) => {\n  if (!snapshot.context.selection) {\n    return snapshot.context.selection\n  }\n\n  const startPoint = getSelectionStartPoint(snapshot.context.selection)\n  const endPoint = getSelectionEndPoint(snapshot.context.selection)\n\n  const startBlockKey = getBlockKeyFromSelectionPoint(startPoint)\n  const startChildKey = getChildKeyFromSelectionPoint(startPoint)\n  const endBlockKey = getBlockKeyFromSelectionPoint(endPoint)\n  const endChildKey = getChildKeyFromSelectionPoint(endPoint)\n\n  if (!startBlockKey || !endBlockKey) {\n    return snapshot.context.selection\n  }\n\n  const startBlockIndex = snapshot.blockIndexMap.get(startBlockKey)\n  const endBlockIndex = snapshot.blockIndexMap.get(endBlockKey)\n\n  if (startBlockIndex === undefined || endBlockIndex === undefined) {\n    return snapshot.context.selection\n  }\n\n  const slicedValue = snapshot.context.value.slice(\n    startBlockIndex,\n    endBlockIndex + 1,\n  )\n\n  let startBlockFound = false\n  let adjustedStartPoint: EditorSelectionPoint | undefined\n  let trimStartPoint = false\n  let adjustedEndPoint: EditorSelectionPoint | undefined\n  let trimEndPoint = false\n  let previousPotentialEndpoint:\n    | {blockKey: string; span: PortableTextSpan}\n    | undefined\n\n  for (const block of slicedValue) {\n    if (block._key === startBlockKey) {\n      startBlockFound = true\n\n      if (\n        isTextBlock(snapshot.context, block) &&\n        isEmptyTextBlock(snapshot.context, block)\n      ) {\n        continue\n      }\n    }\n\n    if (!startBlockFound) {\n      continue\n    }\n\n    if (!isTextBlock(snapshot.context, block)) {\n      continue\n    }\n\n    if (\n      block._key === endBlockKey &&\n      isEmptyTextBlock(snapshot.context, block)\n    ) {\n      break\n    }\n\n    for (const child of block.children) {\n      if (child._key === endChildKey) {\n        if (!isSpan(snapshot.context, child) || endPoint.offset === 0) {\n          adjustedEndPoint = previousPotentialEndpoint\n            ? {\n                path: [\n                  {_key: previousPotentialEndpoint.blockKey},\n                  'children',\n                  {_key: previousPotentialEndpoint.span._key},\n                ],\n                offset: previousPotentialEndpoint.span.text.length,\n              }\n            : undefined\n\n          trimEndPoint = true\n          break\n        }\n      }\n\n      if (trimStartPoint) {\n        const lonelySpan =\n          isSpan(snapshot.context, child) && block.children.length === 1\n\n        if (\n          (isSpan(snapshot.context, child) && child.text.length > 0) ||\n          lonelySpan\n        ) {\n          adjustedStartPoint = {\n            path: [{_key: block._key}, 'children', {_key: child._key}],\n            offset: 0,\n          }\n          previousPotentialEndpoint = {blockKey: block._key, span: child}\n          trimStartPoint = false\n        }\n\n        continue\n      }\n\n      if (child._key === startChildKey) {\n        if (!isSpan(snapshot.context, child)) {\n          trimStartPoint = true\n          continue\n        }\n\n        if (startPoint.offset === child.text.length) {\n          trimStartPoint = true\n          previousPotentialEndpoint =\n            child.text.length > 0\n              ? {blockKey: block._key, span: child}\n              : previousPotentialEndpoint\n          continue\n        }\n      }\n\n      previousPotentialEndpoint =\n        isSpan(snapshot.context, child) && child.text.length > 0\n          ? {blockKey: block._key, span: child}\n          : previousPotentialEndpoint\n    }\n\n    if (block._key === endBlockKey) {\n      break\n    }\n  }\n\n  const trimmedSelection = snapshot.context.selection.backward\n    ? {\n        anchor: trimEndPoint && adjustedEndPoint ? adjustedEndPoint : endPoint,\n        focus: adjustedStartPoint ?? startPoint,\n        backward: true,\n      }\n    : {\n        anchor: adjustedStartPoint ?? startPoint,\n        focus: trimEndPoint && adjustedEndPoint ? adjustedEndPoint : endPoint,\n      }\n\n  if (\n    isSelectionCollapsed({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection: trimmedSelection,\n      },\n    })\n  ) {\n    const focusTextBlock = getFocusTextBlock({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection: trimmedSelection,\n      },\n    })\n\n    if (\n      focusTextBlock &&\n      !isEmptyTextBlock(snapshot.context, focusTextBlock.node)\n    ) {\n      return null\n    }\n  }\n\n  return trimmedSelection\n}\n","import {isSpan} from '@portabletext/schema'\nimport {isKeySegment, type PortableTextObject} from '@sanity/types'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport type {ChildPath} from '../types/paths'\nimport {getFocusTextBlock} from './selector.get-focus-text-block'\nimport {getSelectionEndPoint} from './selector.get-selection-end-point'\n\n/**\n * @public\n */\nexport const getNextInlineObject: EditorSelector<\n  | {\n      node: PortableTextObject\n      path: ChildPath\n    }\n  | undefined\n> = (snapshot) => {\n  const focusTextBlock = getFocusTextBlock(snapshot)\n  const selectionEndPoint = getSelectionEndPoint(snapshot)\n  const selectionEndPointChildKey =\n    selectionEndPoint && isKeySegment(selectionEndPoint.path[2])\n      ? selectionEndPoint.path[2]._key\n      : undefined\n\n  if (!focusTextBlock || !selectionEndPointChildKey) {\n    return undefined\n  }\n\n  let endPointChildFound = false\n  let inlineObject:\n    | {\n        node: PortableTextObject\n        path: ChildPath\n      }\n    | undefined\n\n  for (const child of focusTextBlock.node.children) {\n    if (child._key === selectionEndPointChildKey) {\n      endPointChildFound = true\n      continue\n    }\n\n    if (!isSpan(snapshot.context, child) && endPointChildFound) {\n      inlineObject = {\n        node: child,\n        path: [...focusTextBlock.path, 'children', {_key: child._key}],\n      }\n      break\n    }\n  }\n\n  return inlineObject\n}\n","import type {EditorSelector} from '../editor/editor-selector'\nimport type {BlockOffset} from '../types/block-offset'\nimport type {EditorSelection} from '../types/editor'\nimport {\n  blockOffsetToSpanSelectionPoint,\n  spanSelectionPointToBlockOffset,\n} from '../utils/util.block-offset'\nimport {getBlockEndPoint} from '../utils/util.get-block-end-point'\nimport {getBlockStartPoint} from '../utils/util.get-block-start-point'\nimport {getFocusTextBlock} from './selector.get-focus-text-block'\nimport {getNextInlineObject} from './selector.get-next-inline-object'\nimport {getPreviousInlineObject} from './selector.get-previous-inline-object'\nimport {getSelectionStartPoint} from './selector.get-selection-start-point'\nimport {getSelectionText} from './selector.get-selection-text'\nimport {isSelectionCollapsed} from './selector.is-selection-collapsed'\nimport {isSelectionExpanded} from './selector.is-selection-expanded'\n\n/**\n * @public\n * Returns the selection of the of the word the caret is placed in.\n * Note: Only returns a word selection if the current selection is collapsed\n */\nexport const getCaretWordSelection: EditorSelector<EditorSelection> = (\n  snapshot,\n) => {\n  if (!snapshot.context.selection) {\n    return null\n  }\n\n  if (!isSelectionCollapsed(snapshot)) {\n    return null\n  }\n\n  const focusTextBlock = getFocusTextBlock(snapshot)\n  const selectionStartPoint = getSelectionStartPoint(snapshot)\n  const selectionStartOffset = selectionStartPoint\n    ? spanSelectionPointToBlockOffset({\n        context: snapshot.context,\n        selectionPoint: selectionStartPoint,\n      })\n    : undefined\n\n  if (!focusTextBlock || !selectionStartPoint || !selectionStartOffset) {\n    return null\n  }\n\n  const previousInlineObject = getPreviousInlineObject(snapshot)\n  const blockStartPoint = getBlockStartPoint({\n    context: snapshot.context,\n    block: focusTextBlock,\n  })\n  const textBefore = getSelectionText({\n    ...snapshot,\n    context: {\n      ...snapshot.context,\n      selection: {\n        anchor: previousInlineObject\n          ? {path: previousInlineObject.path, offset: 0}\n          : blockStartPoint,\n        focus: selectionStartPoint,\n      },\n    },\n  })\n  const textDirectlyBefore = textBefore.split(/\\s+/).at(-1)\n\n  const nextInlineObject = getNextInlineObject(snapshot)\n  const blockEndPoint = getBlockEndPoint({\n    context: snapshot.context,\n    block: focusTextBlock,\n  })\n  const textAfter = getSelectionText({\n    ...snapshot,\n    context: {\n      ...snapshot.context,\n      selection: {\n        anchor: selectionStartPoint,\n        focus: nextInlineObject\n          ? {path: nextInlineObject.path, offset: 0}\n          : blockEndPoint,\n      },\n    },\n  })\n  const textDirectlyAfter = textAfter.split(/\\s+/).at(0)\n\n  if (\n    (textDirectlyBefore === undefined || textDirectlyBefore === '') &&\n    (textDirectlyAfter === undefined || textDirectlyAfter === '')\n  ) {\n    return null\n  }\n\n  const caretWordStartOffset: BlockOffset = textDirectlyBefore\n    ? {\n        ...selectionStartOffset,\n        offset: selectionStartOffset.offset - textDirectlyBefore.length,\n      }\n    : selectionStartOffset\n  const caretWordEndOffset: BlockOffset = textDirectlyAfter\n    ? {\n        ...selectionStartOffset,\n        offset: selectionStartOffset.offset + textDirectlyAfter.length,\n      }\n    : selectionStartOffset\n\n  const caretWordStartSelectionPoint = blockOffsetToSpanSelectionPoint({\n    context: snapshot.context,\n    blockOffset: caretWordStartOffset,\n    direction: 'backward',\n  })\n  const caretWordEndSelectionPoint = blockOffsetToSpanSelectionPoint({\n    context: snapshot.context,\n    blockOffset: caretWordEndOffset,\n    direction: 'forward',\n  })\n\n  if (!caretWordStartSelectionPoint || !caretWordEndSelectionPoint) {\n    return null\n  }\n\n  const caretWordSelection = {\n    anchor: caretWordStartSelectionPoint,\n    focus: caretWordEndSelectionPoint,\n  }\n\n  return isSelectionExpanded({\n    ...snapshot,\n    context: {\n      ...snapshot.context,\n      selection: caretWordSelection,\n    },\n  })\n    ? caretWordSelection\n    : null\n}\n","import type {EditorSnapshot} from '../editor/editor-snapshot'\nimport {getMarkState} from './selector.get-mark-state'\n\nexport function getActiveAnnotationsMarks(snapshot: EditorSnapshot) {\n  const schema = snapshot.context.schema\n  const markState = getMarkState(snapshot)\n\n  return (markState?.marks ?? []).filter(\n    (mark) =>\n      !schema.decorators.map((decorator) => decorator.name).includes(mark),\n  )\n}\n","import {isTextBlock} from '@portabletext/schema'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport {getActiveAnnotationsMarks} from './selector.get-active-annotation-marks'\nimport {getSelectedBlocks} from './selector.get-selected-blocks'\nimport {getSelectedValue} from './selector.get-selected-value'\n\n/**\n * Check whether an annotation is active in the given `snapshot`.\n *\n * @public\n */\nexport function isActiveAnnotation(\n  annotation: string,\n  options?: {\n    /**\n     * Choose whether the annotation has to take up the entire selection in the\n     * `snapshot` or if the annotation can be partially selected.\n     *\n     * Defaults to 'full'\n     */\n    mode?: 'partial' | 'full'\n  },\n): EditorSelector<boolean> {\n  return (snapshot) => {\n    const mode = options?.mode ?? 'full'\n\n    if (mode === 'partial') {\n      const selectedValue = getSelectedValue(snapshot)\n\n      const selectionMarkDefs = selectedValue.flatMap((block) =>\n        isTextBlock(snapshot.context, block) ? (block.markDefs ?? []) : [],\n      )\n\n      return selectionMarkDefs.some((markDef) => markDef._type === annotation)\n    }\n\n    const selectedBlocks = getSelectedBlocks(snapshot)\n    const selectionMarkDefs = selectedBlocks.flatMap((block) =>\n      isTextBlock(snapshot.context, block.node)\n        ? (block.node.markDefs ?? [])\n        : [],\n    )\n    const activeAnnotations = getActiveAnnotationsMarks(snapshot)\n    const activeMarkDefs = selectionMarkDefs.filter(\n      (markDef) =>\n        markDef._type === annotation &&\n        activeAnnotations.includes(markDef._key),\n    )\n\n    return activeMarkDefs.length > 0\n  }\n}\n","import {isTextBlock} from '@portabletext/schema'\nimport type {PortableTextObject} from '@sanity/types'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport type {BlockPath} from '../types/paths'\nimport {getFocusBlock} from './selector.get-focus-block'\n\n/**\n * @public\n */\nexport const getFocusBlockObject: EditorSelector<\n  {node: PortableTextObject; path: BlockPath} | undefined\n> = (snapshot) => {\n  const focusBlock = getFocusBlock(snapshot)\n\n  return focusBlock && !isTextBlock(snapshot.context, focusBlock.node)\n    ? {node: focusBlock.node, path: focusBlock.path}\n    : undefined\n}\n","import type {PortableTextBlock} from '@sanity/types'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport type {BlockPath} from '../types/paths'\nimport {getSelectionEndBlock} from './selector.get-selection-end-block'\n\n/**\n * @public\n */\nexport const getNextBlock: EditorSelector<\n  {node: PortableTextBlock; path: BlockPath} | undefined\n> = (snapshot) => {\n  const selectionEndBlock = getSelectionEndBlock(snapshot)\n\n  if (!selectionEndBlock) {\n    return undefined\n  }\n\n  const index = snapshot.blockIndexMap.get(selectionEndBlock.node._key)\n\n  if (index === undefined || index === snapshot.context.value.length - 1) {\n    return undefined\n  }\n\n  const nextBlock = snapshot.context.value.at(index + 1)\n\n  return nextBlock\n    ? {node: nextBlock, path: [{_key: nextBlock._key}]}\n    : undefined\n}\n","import type {PortableTextBlock} from '@sanity/types'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport type {BlockPath} from '../types/paths'\nimport {getSelectionStartBlock} from './selector.get-selection-start-block'\n\n/**\n * @public\n */\nexport const getPreviousBlock: EditorSelector<\n  {node: PortableTextBlock; path: BlockPath} | undefined\n> = (snapshot) => {\n  const selectionStartBlock = getSelectionStartBlock(snapshot)\n\n  if (!selectionStartBlock) {\n    return undefined\n  }\n\n  const index = snapshot.blockIndexMap.get(selectionStartBlock.node._key)\n\n  if (index === undefined || index === 0) {\n    return undefined\n  }\n\n  const previousBlock = snapshot.context.value.at(index - 1)\n\n  return previousBlock\n    ? {node: previousBlock, path: [{_key: previousBlock._key}]}\n    : undefined\n}\n","import type {PortableTextBlock} from '@sanity/types'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport type {BlockPath} from '../types/paths'\n\n/**\n * @public\n */\nexport const getFirstBlock: EditorSelector<\n  {node: PortableTextBlock; path: BlockPath} | undefined\n> = (snapshot) => {\n  const node = snapshot.context.value[0]\n\n  return node ? {node, path: [{_key: node._key}]} : undefined\n}\n","import type {PortableTextBlock} from '@sanity/types'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport type {BlockPath} from '../types/paths'\n\n/**\n * @public\n */\nexport const getLastBlock: EditorSelector<\n  {node: PortableTextBlock; path: BlockPath} | undefined\n> = (snapshot) => {\n  const node = snapshot.context.value[snapshot.context.value.length - 1]\n    ? snapshot.context.value[snapshot.context.value.length - 1]\n    : undefined\n\n  return node ? {node, path: [{_key: node._key}]} : undefined\n}\n","import type {PortableTextBlock} from '@sanity/types'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport type {BlockPath} from '../types/paths'\nimport {getBlockEndPoint} from '../utils/util.get-block-end-point'\nimport {isEqualSelectionPoints} from '../utils/util.is-equal-selection-points'\nimport {isSelectionCollapsed} from './selector.is-selection-collapsed'\n\n/**\n * @public\n */\nexport function isAtTheEndOfBlock(block: {\n  node: PortableTextBlock\n  path: BlockPath\n}): EditorSelector<boolean> {\n  return (snapshot) => {\n    if (!snapshot.context.selection || !isSelectionCollapsed(snapshot)) {\n      return false\n    }\n\n    const blockEndPoint = getBlockEndPoint({\n      context: snapshot.context,\n      block,\n    })\n\n    return isEqualSelectionPoints(\n      snapshot.context.selection.focus,\n      blockEndPoint,\n    )\n  }\n}\n","import type {PortableTextBlock} from '@sanity/types'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport type {BlockPath} from '../types/paths'\nimport {getBlockStartPoint} from '../utils/util.get-block-start-point'\nimport {isEqualSelectionPoints} from '../utils/util.is-equal-selection-points'\nimport {isSelectionCollapsed} from './selector.is-selection-collapsed'\n\n/**\n * @public\n */\nexport function isAtTheStartOfBlock(block: {\n  node: PortableTextBlock\n  path: BlockPath\n}): EditorSelector<boolean> {\n  return (snapshot) => {\n    if (!snapshot.context.selection || !isSelectionCollapsed(snapshot)) {\n      return false\n    }\n\n    const blockStartPoint = getBlockStartPoint({\n      context: snapshot.context,\n      block,\n    })\n\n    return isEqualSelectionPoints(\n      snapshot.context.selection.focus,\n      blockStartPoint,\n    )\n  }\n}\n","import type {PortableTextListBlock} from '@sanity/types'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport type {BlockPath} from '../types/paths'\nimport {isListBlock} from '../utils/parse-blocks'\nimport {getFocusTextBlock} from './selector.get-focus-text-block'\n\n/**\n * @public\n */\nexport const getFocusListBlock: EditorSelector<\n  {node: PortableTextListBlock; path: BlockPath} | undefined\n> = (snapshot) => {\n  const focusTextBlock = getFocusTextBlock(snapshot)\n\n  return focusTextBlock && isListBlock(snapshot.context, focusTextBlock.node)\n    ? {node: focusTextBlock.node, path: focusTextBlock.path}\n    : undefined\n}\n","import type {EditorSelector} from '../editor/editor-selector'\nimport {getActiveDecorators} from './selector.get-active-decorators'\nimport {getSelectedSpans} from './selector.get-selected-spans'\nimport {isSelectionExpanded} from './selector.is-selection-expanded'\n\n/**\n * @public\n */\nexport function isActiveDecorator(decorator: string): EditorSelector<boolean> {\n  return (snapshot) => {\n    if (isSelectionExpanded(snapshot)) {\n      const selectedSpans = getSelectedSpans(snapshot)\n\n      return (\n        selectedSpans.length > 0 &&\n        selectedSpans.every((span) => span.node.marks?.includes(decorator))\n      )\n    }\n\n    const activeDecorators = getActiveDecorators(snapshot)\n\n    return activeDecorators.includes(decorator)\n  }\n}\n","import {isTextBlock} from '@portabletext/schema'\nimport type {PortableTextObject} from '@sanity/types'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport {getMarkState} from './selector.get-mark-state'\nimport {getSelectedBlocks} from './selector.get-selected-blocks'\n\n/**\n * @public\n */\nexport const getActiveAnnotations: EditorSelector<Array<PortableTextObject>> = (\n  snapshot,\n) => {\n  if (!snapshot.context.selection) {\n    return []\n  }\n\n  const selectedBlocks = getSelectedBlocks(snapshot)\n  const markState = getMarkState(snapshot)\n\n  const activeAnnotations = (markState?.marks ?? []).filter(\n    (mark) =>\n      !snapshot.context.schema.decorators\n        .map((decorator) => decorator.name)\n        .includes(mark),\n  )\n\n  const selectionMarkDefs = selectedBlocks.flatMap((block) =>\n    isTextBlock(snapshot.context, block.node)\n      ? (block.node.markDefs ?? [])\n      : [],\n  )\n\n  return selectionMarkDefs.filter((markDef) =>\n    activeAnnotations.includes(markDef._key),\n  )\n}\n","import {isTextBlock} from '@portabletext/schema'\nimport type {PortableTextTextBlock} from '@sanity/types'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport type {BlockPath} from '../types/paths'\nimport {getSelectionEndPoint} from '../utils/util.get-selection-end-point'\nimport {getSelectionStartPoint} from '../utils/util.get-selection-start-point'\nimport {getBlockKeyFromSelectionPoint} from '../utils/util.selection-point'\n\n/**\n * @public\n */\nexport const getSelectedTextBlocks: EditorSelector<\n  Array<{node: PortableTextTextBlock; path: BlockPath}>\n> = (snapshot) => {\n  if (!snapshot.context.selection) {\n    return []\n  }\n\n  const selectedTextBlocks: Array<{\n    node: PortableTextTextBlock\n    path: BlockPath\n  }> = []\n\n  const startPoint = getSelectionStartPoint(snapshot.context.selection)\n  const endPoint = getSelectionEndPoint(snapshot.context.selection)\n  const startBlockKey = getBlockKeyFromSelectionPoint(startPoint)\n  const endBlockKey = getBlockKeyFromSelectionPoint(endPoint)\n\n  if (!startBlockKey || !endBlockKey) {\n    return selectedTextBlocks\n  }\n\n  const startBlockIndex = snapshot.blockIndexMap.get(startBlockKey)\n  const endBlockIndex = snapshot.blockIndexMap.get(endBlockKey)\n\n  if (startBlockIndex === undefined || endBlockIndex === undefined) {\n    return selectedTextBlocks\n  }\n\n  const slicedValue = snapshot.context.value.slice(\n    startBlockIndex,\n    endBlockIndex + 1,\n  )\n\n  for (const block of slicedValue) {\n    if (block._key === startBlockKey) {\n      if (isTextBlock(snapshot.context, block)) {\n        selectedTextBlocks.push({node: block, path: [{_key: block._key}]})\n      }\n\n      if (startBlockKey === endBlockKey) {\n        break\n      }\n      continue\n    }\n\n    if (block._key === endBlockKey) {\n      if (isTextBlock(snapshot.context, block)) {\n        selectedTextBlocks.push({node: block, path: [{_key: block._key}]})\n      }\n\n      break\n    }\n\n    if (selectedTextBlocks.length > 0) {\n      if (isTextBlock(snapshot.context, block)) {\n        selectedTextBlocks.push({node: block, path: [{_key: block._key}]})\n      }\n    }\n  }\n\n  return selectedTextBlocks\n}\n","import {isTextBlock} from '@portabletext/schema'\nimport type {PortableTextListBlock} from '@sanity/types'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport {getSelectedBlocks} from './selector.get-selected-blocks'\n\n/**\n * @public\n */\nexport const getActiveListItem: EditorSelector<\n  PortableTextListBlock['listItem'] | undefined\n> = (snapshot) => {\n  if (!snapshot.context.selection) {\n    return undefined\n  }\n\n  const selectedBlocks = getSelectedBlocks(snapshot).map((block) => block.node)\n  const selectedTextBlocks = selectedBlocks.filter((block) =>\n    isTextBlock(snapshot.context, block),\n  )\n\n  const firstTextBlock = selectedTextBlocks.at(0)\n\n  if (!firstTextBlock) {\n    return undefined\n  }\n\n  const firstListItem = firstTextBlock.listItem\n\n  if (!firstListItem) {\n    return undefined\n  }\n\n  if (selectedTextBlocks.every((block) => block.listItem === firstListItem)) {\n    return firstListItem\n  }\n\n  return undefined\n}\n","import type {EditorSelector} from '../editor/editor-selector'\nimport {getActiveListItem} from './selector.get-active-list-item'\n\n/**\n * @public\n */\nexport function isActiveListItem(listItem: string): EditorSelector<boolean> {\n  return (snapshot) => {\n    const activeListItem = getActiveListItem(snapshot)\n\n    return activeListItem === listItem\n  }\n}\n","import {isTextBlock} from '@portabletext/schema'\nimport type {PortableTextTextBlock} from '@sanity/types'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport {getSelectedBlocks} from './selector.get-selected-blocks'\n\n/**\n * @public\n */\nexport const getActiveStyle: EditorSelector<PortableTextTextBlock['style']> = (\n  snapshot,\n) => {\n  if (!snapshot.context.selection) {\n    return undefined\n  }\n\n  const selectedBlocks = getSelectedBlocks(snapshot).map((block) => block.node)\n  const selectedTextBlocks = selectedBlocks.filter((block) =>\n    isTextBlock(snapshot.context, block),\n  )\n\n  const firstTextBlock = selectedTextBlocks.at(0)\n\n  if (!firstTextBlock) {\n    return undefined\n  }\n\n  const firstStyle = firstTextBlock.style\n\n  if (!firstStyle) {\n    return undefined\n  }\n\n  if (selectedTextBlocks.every((block) => block.style === firstStyle)) {\n    return firstStyle\n  }\n\n  return undefined\n}\n","import type {EditorSelector} from '../editor/editor-selector'\nimport {getActiveStyle} from './selector.get-active-style'\n\n/**\n * @public\n */\nexport function isActiveStyle(style: string): EditorSelector<boolean> {\n  return (snapshot) => {\n    const activeStyle = getActiveStyle(snapshot)\n\n    return activeStyle === style\n  }\n}\n"],"names":["getFocusInlineObject","snapshot","focusChild","getFocusChild","isPortableTextSpan","node","path","undefined","getSelectedBlocks","context","selection","selectedBlocks","startPoint","getSelectionStartPoint","endPoint","getSelectionEndPoint","startKey","getBlockKeyFromSelectionPoint","endKey","startBlockIndex","blockIndexMap","get","endBlockIndex","slicedValue","value","slice","block","_key","push","length","getSelectionEndBlock","getFocusBlock","anchor","focus","getSelectionStartBlock","backward","isPointAfterSelection","point","endBlockKey","endChildKey","getChildKeyFromSelectionPoint","pointBlockKey","pointChildKey","pointBlockIndex","pointBlock","at","isTextBlock","pointChildIndex","endChildIndex","childIndex","child","children","offset","isPointBeforeSelection","startBlockKey","startChildKey","startChildIndex","isOverlappingSelection","selectionStartPoint","selectionEndPoint","originalSelectionStartPoint","originalSelectionEndPoint","startPointEqualToOriginalStartPoint","isEqualSelectionPoints","endPointEqualToOriginalEndPoint","startPointBeforeSelection","startPointAfterSelection","endPointBeforeSelection","endPointAfterSelection","originalStartPointBeforeStartPoint","originalStartPointAfterStartPoint","originalEndPointBeforeEndPoint","originalEndPointAfterEndPoint","startPointEqualToOriginalEndPoint","endPointEqualToOriginalStartPoint","isSelectingEntireBlocks","startBlock","endBlock","startBlockStartPoint","getBlockStartPoint","endBlockEndPoint","getBlockEndPoint","isBlockPath","firstSegment","isRecord","isSelectionExpanded","isSelectionCollapsed","getNextSpan","selectionEndBlock","selectionEndPointChildKey","endPointChildFound","nextSpan","isSpan","getPreviousSpan","selectionStartBlock","selectionStartPointChildKey","previousSpan","getSelectedSpans","selectedSpans","startSpanKey","endSpanKey","startBlockFound","text","getMarkState","getFocusTextBlock","spanSelectionPoint","blockOffsetToSpanSelectionPoint","blockOffset","direction","focusSpan","getFocusSpan","index","marks","span","filter","mark","some","spanMark","state","decorators","schema","map","decorator","name","marksWithoutAnnotations","includes","spanHasAnnotations","spanIsEmpty","atTheBeginningOfSpan","atTheEndOfSpan","nextSpanAnnotations","spanAnnotations","previousSpanHasAnnotations","previousSpanHasSameAnnotations","every","previousSpanHasSameAnnotation","previousSpanHasSameMarks","nextSpanSharesSomeAnnotations","previousMarks","getActiveDecorators","decoratorState","markState","activeDecorators","activeDecorator","getTrimmedSelection","adjustedStartPoint","trimStartPoint","adjustedEndPoint","trimEndPoint","previousPotentialEndpoint","isEmptyTextBlock","blockKey","lonelySpan","trimmedSelection","focusTextBlock","getNextInlineObject","isKeySegment","inlineObject","getCaretWordSelection","selectionStartOffset","spanSelectionPointToBlockOffset","selectionPoint","previousInlineObject","getPreviousInlineObject","blockStartPoint","textDirectlyBefore","getSelectionText","split","nextInlineObject","blockEndPoint","textDirectlyAfter","caretWordStartOffset","caretWordEndOffset","caretWordStartSelectionPoint","caretWordEndSelectionPoint","caretWordSelection","getActiveAnnotationsMarks","isActiveAnnotation","annotation","options","mode","getSelectedValue","flatMap","markDefs","markDef","_type","selectionMarkDefs","activeAnnotations","getFocusBlockObject","focusBlock","getNextBlock","nextBlock","getPreviousBlock","previousBlock","getFirstBlock","getLastBlock","isAtTheEndOfBlock","isAtTheStartOfBlock","getFocusListBlock","isListBlock","isActiveDecorator","getActiveAnnotations","getSelectedTextBlocks","selectedTextBlocks","getActiveListItem","firstTextBlock","firstListItem","listItem","isActiveListItem","getActiveStyle","firstStyle","style","isActiveStyle"],"mappings":"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","ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35],"debugId":null}},
    {"offset": {"line": 1502, "column": 0}, "map": {"version":3,"file":"index.js","sources":["file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/behaviors/behavior.types.action.ts","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/behaviors/behavior.types.behavior.ts"],"sourcesContent":["import type {EditorDom} from '../editor/editor-dom'\nimport type {EditorSnapshot} from '../editor/editor-snapshot'\nimport type {PickFromUnion} from '../type-utils'\nimport type {\n  CustomBehaviorEvent,\n  ExternalBehaviorEvent,\n  NativeBehaviorEvent,\n  SyntheticBehaviorEvent,\n} from './behavior.types.event'\n\n/**\n * @beta\n */\nexport type BehaviorAction =\n  | {\n      type: 'execute'\n      event: SyntheticBehaviorEvent\n    }\n  | {\n      type: 'forward'\n      event: NativeBehaviorEvent | SyntheticBehaviorEvent | CustomBehaviorEvent\n    }\n  | {\n      type: 'raise'\n      event: SyntheticBehaviorEvent | CustomBehaviorEvent\n    }\n  | {\n      type: 'effect'\n      effect: (payload: {\n        /**\n         * Send a Behavior Event back into the Editor.\n         *\n         * @example\n         * ```ts\n         * defineBehavior({\n         *   on: '...',\n         *   actions: [\n         *     () => [\n         *       effect(({send}) => {\n         *         doSomethingAsync()\n         *           .then(() => {\n         *             send({\n         *               type: '...',\n         *             })\n         *           })\n         *       })\n         *     ],\n         *   ],\n         * })\n         * ```\n         */\n        send: (event: ExternalBehaviorEvent) => void\n      }) => void\n    }\n\n/**\n * @beta\n */\nexport function execute(\n  event: SyntheticBehaviorEvent,\n): PickFromUnion<BehaviorAction, 'type', 'execute'> {\n  return {type: 'execute', event}\n}\n\n/**\n * @beta\n */\nexport function forward(\n  event: NativeBehaviorEvent | SyntheticBehaviorEvent | CustomBehaviorEvent,\n): PickFromUnion<BehaviorAction, 'type', 'forward'> {\n  return {type: 'forward', event}\n}\n\n/**\n * @beta\n */\nexport function raise(\n  event: SyntheticBehaviorEvent | CustomBehaviorEvent,\n): PickFromUnion<BehaviorAction, 'type', 'raise'> {\n  return {type: 'raise', event}\n}\n\n/**\n * @beta\n */\nexport function effect(\n  effect: PickFromUnion<BehaviorAction, 'type', 'effect'>['effect'],\n): PickFromUnion<BehaviorAction, 'type', 'effect'> {\n  return {type: 'effect', effect}\n}\n\n/**\n * @beta\n */\nexport type BehaviorActionSet<TBehaviorEvent, TGuardResponse> = (\n  payload: {\n    snapshot: EditorSnapshot\n    event: TBehaviorEvent\n    dom: EditorDom\n  },\n  guardResponse: TGuardResponse,\n) => Array<BehaviorAction>\n","import type {BehaviorActionSet} from './behavior.types.action'\nimport type {\n  BehaviorEvent,\n  BehaviorEventTypeNamespace,\n  CustomBehaviorEvent,\n  ResolveBehaviorEvent,\n} from './behavior.types.event'\nimport type {BehaviorGuard} from './behavior.types.guard'\n\n/**\n * @beta\n */\nexport type Behavior<\n  TBehaviorEventType extends\n    | '*'\n    | `${BehaviorEventTypeNamespace}.*`\n    | BehaviorEvent['type'] =\n    | '*'\n    | `${BehaviorEventTypeNamespace}.*`\n    | BehaviorEvent['type'],\n  TGuardResponse = true,\n  TBehaviorEvent extends\n    ResolveBehaviorEvent<TBehaviorEventType> = ResolveBehaviorEvent<TBehaviorEventType>,\n> = {\n  /**\n   * Editor Event that triggers this Behavior.\n   */\n  on: TBehaviorEventType\n  /**\n   * Predicate function that determines if the Behavior should be executed.\n   * Returning a non-nullable value from the guard will pass the value to the\n   * actions and execute them.\n   */\n  guard?: BehaviorGuard<TBehaviorEvent, TGuardResponse>\n  /**\n   * Array of Behavior Action sets.\n   * Each set represents a step in the history stack.\n   */\n  actions: Array<BehaviorActionSet<TBehaviorEvent, TGuardResponse>>\n}\n\n/**\n * @beta\n *\n * @example\n *\n * ```tsx\n * const noLowerCaseA = defineBehavior({\n *   on: 'insert.text',\n *   guard: ({event, snapshot}) => event.text === 'a',\n *   actions: [({event, snapshot}) => [{type: 'insert.text', text: 'A'}]],\n * })\n * ```\n *\n */\nexport function defineBehavior<\n  TPayload extends Record<string, unknown>,\n  TBehaviorEventType extends\n    | '*'\n    | `${BehaviorEventTypeNamespace}.*`\n    | BehaviorEvent['type'] = CustomBehaviorEvent['type'],\n  TGuardResponse = true,\n>(\n  behavior: Behavior<\n    TBehaviorEventType,\n    TGuardResponse,\n    ResolveBehaviorEvent<TBehaviorEventType, TPayload>\n  >,\n): Behavior\nexport function defineBehavior<\n  TPayload extends never = never,\n  TBehaviorEventType extends\n    | '*'\n    | `${BehaviorEventTypeNamespace}.*`\n    | BehaviorEvent['type'] = BehaviorEvent['type'],\n  TGuardResponse = true,\n  TBehaviorEvent extends ResolveBehaviorEvent<\n    TBehaviorEventType,\n    TPayload\n  > = ResolveBehaviorEvent<TBehaviorEventType, TPayload>,\n>(\n  behavior: Behavior<TBehaviorEventType, TGuardResponse, TBehaviorEvent>,\n): Behavior {\n  return behavior as unknown as Behavior\n}\n"],"names":["execute","event","type","forward","raise","effect","defineBehavior","behavior"],"mappings":";;;;;;;AA0DO,SAASA,QACdC,KAAAA,EACkD;IAClD,OAAO;QAACC,MAAM;QAAWD;IAAAA;AAC3B;AAKO,SAASE,QACdF,KAAAA,EACkD;IAClD,OAAO;QAACC,MAAM;QAAWD;IAAAA;AAC3B;AAKO,SAASG,MACdH,KAAAA,EACgD;IAChD,OAAO;QAACC,MAAM;QAASD;IAAAA;AACzB;AAKO,SAASI,OACdA,OAAAA,EACiD;IACjD,OAAO;QAACH,MAAM;QAAUG,QAAAA;IAAAA;AAC1B;ACpBO,SAASC,eAYdC,QAAAA,EACU;IACV,OAAOA;AACT","ignoreList":[0,1],"debugId":null}},
    {"offset": {"line": 1544, "column": 0}, "map": {"version":3,"file":"util.child-selection-point-to-block-offset.js","sources":["file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/utils/util.block-offset-to-block-selection-point.ts","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/utils/util.block-offset-to-selection-point.ts","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/utils/util.block-offsets-to-selection.ts","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/utils/util.child-selection-point-to-block-offset.ts"],"sourcesContent":["import type {EditorContext} from '../editor/editor-snapshot'\nimport type {BlockOffset} from '../types/block-offset'\nimport type {EditorSelectionPoint} from '../types/editor'\n\n/**\n * @public\n */\nexport function blockOffsetToBlockSelectionPoint({\n  context,\n  blockOffset,\n}: {\n  context: Pick<EditorContext, 'value'>\n  blockOffset: BlockOffset\n}): EditorSelectionPoint | undefined {\n  let selectionPoint: EditorSelectionPoint | undefined\n\n  for (const block of context.value) {\n    if (block._key === blockOffset.path[0]._key) {\n      selectionPoint = {\n        path: [{_key: block._key}],\n        offset: blockOffset.offset,\n      }\n      break\n    }\n  }\n\n  return selectionPoint\n}\n","import type {EditorContext} from '../editor/editor-snapshot'\nimport type {BlockOffset} from '../types/block-offset'\nimport type {EditorSelectionPoint} from '../types/editor'\nimport {blockOffsetToSpanSelectionPoint} from './util.block-offset'\nimport {blockOffsetToBlockSelectionPoint} from './util.block-offset-to-block-selection-point'\n\n/**\n * @public\n */\nexport function blockOffsetToSelectionPoint({\n  context,\n  blockOffset,\n  direction,\n}: {\n  context: Pick<EditorContext, 'schema' | 'value'>\n  blockOffset: BlockOffset\n  direction: 'forward' | 'backward'\n}): EditorSelectionPoint | undefined {\n  const spanSelectionPoint = blockOffsetToSpanSelectionPoint({\n    context,\n    blockOffset,\n    direction,\n  })\n\n  if (!spanSelectionPoint) {\n    return blockOffsetToBlockSelectionPoint({\n      context,\n      blockOffset,\n    })\n  }\n\n  return spanSelectionPoint\n}\n","import type {EditorContext} from '../editor/editor-snapshot'\nimport type {BlockOffset} from '../types/block-offset'\nimport type {EditorSelection} from '../types/editor'\nimport {blockOffsetToSelectionPoint} from './util.block-offset-to-selection-point'\n\n/**\n * @public\n */\nexport function blockOffsetsToSelection({\n  context,\n  offsets,\n  backward,\n}: {\n  context: Pick<EditorContext, 'schema' | 'value'>\n  offsets: {anchor: BlockOffset; focus: BlockOffset}\n  backward?: boolean\n}): EditorSelection {\n  const anchor = blockOffsetToSelectionPoint({\n    context,\n    blockOffset: offsets.anchor,\n    direction: backward ? 'backward' : 'forward',\n  })\n  const focus = blockOffsetToSelectionPoint({\n    context,\n    blockOffset: offsets.focus,\n    direction: backward ? 'forward' : 'backward',\n  })\n\n  if (!anchor || !focus) {\n    return null\n  }\n\n  return {\n    anchor,\n    focus,\n    backward,\n  }\n}\n","import {isSpan, isTextBlock} from '@portabletext/schema'\nimport type {EditorContext} from '../editor/editor-snapshot'\nimport type {BlockOffset} from '../types/block-offset'\nimport type {EditorSelectionPoint} from '../types/editor'\nimport {\n  getBlockKeyFromSelectionPoint,\n  getChildKeyFromSelectionPoint,\n} from './util.selection-point'\n\n/**\n * @public\n */\nexport function childSelectionPointToBlockOffset({\n  context,\n  selectionPoint,\n}: {\n  context: Pick<EditorContext, 'schema' | 'value'>\n  selectionPoint: EditorSelectionPoint\n}): BlockOffset | undefined {\n  let offset = 0\n\n  const blockKey = getBlockKeyFromSelectionPoint(selectionPoint)\n  const childKey = getChildKeyFromSelectionPoint(selectionPoint)\n\n  if (!blockKey || !childKey) {\n    return undefined\n  }\n\n  for (const block of context.value) {\n    if (block._key !== blockKey) {\n      continue\n    }\n\n    if (!isTextBlock(context, block)) {\n      continue\n    }\n\n    for (const child of block.children) {\n      if (child._key === childKey) {\n        return {\n          path: [{_key: block._key}],\n          offset: offset + selectionPoint.offset,\n        }\n      }\n\n      if (isSpan(context, child)) {\n        offset += child.text.length\n      }\n    }\n  }\n}\n"],"names":["blockOffsetToBlockSelectionPoint","context","blockOffset","selectionPoint","block","value","_key","path","offset","blockOffsetToSelectionPoint","direction","blockOffsetToSpanSelectionPoint","blockOffsetsToSelection","offsets","backward","anchor","focus","childSelectionPointToBlockOffset","blockKey","getBlockKeyFromSelectionPoint","childKey","getChildKeyFromSelectionPoint","isTextBlock","child","children","isSpan","text","length"],"mappings":";;;;;;;;;;AAOO,SAASA,iCAAiC,EAC/CC,OAAAA,EACAC,WAAAA,EAIF,EAAqC;IACnC,IAAIC;IAEJ,KAAA,MAAWC,SAASH,QAAQI,KAAAA,CAC1B,IAAID,MAAME,IAAAA,KAASJ,YAAYK,IAAAA,CAAK,CAAC,CAAA,CAAED,IAAAA,EAAM;QAC3CH,iBAAiB;YACfI,MAAM;gBAAC;oBAACD,MAAMF,MAAME,IAAAA;gBAAAA,CAAK;aAAA;YACzBE,QAAQN,YAAYM,MAAAA;QAAAA;QAEtB;IACF;IAGF,OAAOL;AACT;AClBO,SAASM,4BAA4B,EAC1CR,OAAAA,EACAC,WAAAA,EACAQ,SAAAA,EAKF,EAAqC;IAOnC,uNAN2BC,kCAAAA,EAAgC;QACzDV;QACAC;QACAQ;IAAAA,CACD,KAGQV,iCAAiC;QACtCC;QACAC;IAAAA,CACD;AAIL;ACxBO,SAASU,wBAAwB,EACtCX,OAAAA,EACAY,OAAAA,EACAC,QAAAA,EAKF,EAAoB;IAClB,MAAMC,SAASN,4BAA4B;QACzCR;QACAC,aAAaW,QAAQE,MAAAA;QACrBL,WAAWI,WAAW,aAAa;IAAA,CACpC,GACKE,QAAQP,4BAA4B;QACxCR;QACAC,aAAaW,QAAQG,KAAAA;QACrBN,WAAWI,WAAW,YAAY;IAAA,CACnC;IAED,OAAI,CAACC,UAAU,CAACC,QACP,OAGF;QACLD;QACAC;QACAF;IAAAA;AAEJ;ACzBO,SAASG,iCAAiC,EAC/ChB,OAAAA,EACAE,cAAAA,EAIF,EAA4B;IAC1B,IAAIK,SAAS;IAEb,MAAMU,2NAAWC,gCAAAA,EAA8BhB,cAAc,GACvDiB,YAAWC,+OAAAA,EAA8BlB,cAAc;IAE7D,IAAI,CAAA,CAAA,CAACe,YAAY,CAACE,QAAAA,GAAAA;QAIlB,KAAA,MAAWhB,SAASH,QAAQI,KAAAA,CAC1B,IAAID,MAAME,IAAAA,KAASY,6KAIdI,cAAAA,EAAYrB,SAASG,KAAK,GAI/B,KAAA,MAAWmB,SAASnB,MAAMoB,QAAAA,CAAU;YAClC,IAAID,MAAMjB,IAAAA,KAASc,UACjB,OAAO;gBACLb,MAAM;oBAAC;wBAACD,MAAMF,MAAME,IAAAA;oBAAAA,CAAK;iBAAA;gBACzBE,QAAQA,SAASL,eAAeK,MAAAA;YAAAA;YAIhCiB,CAAAA,GAAAA,4JAAAA,CAAAA,SAAAA,EAAOxB,SAASsB,KAAK,KAAA,CACvBf,UAAUe,MAAMG,IAAAA,CAAKC,MAAAA;QAEzB;IAAA;AAEJ","ignoreList":[0,1,2,3],"debugId":null}},
    {"offset": {"line": 1620, "column": 0}, "map": {"version":3,"file":"util.slice-text-block.js","sources":["file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/utils/util.selection-point-to-block-offset.ts","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/utils/util.slice-text-block.ts"],"sourcesContent":["import type {EditorContext} from '../editor/editor-snapshot'\nimport type {BlockOffset} from '../types/block-offset'\nimport type {EditorSelectionPoint} from '../types/editor'\nimport {childSelectionPointToBlockOffset} from './util.child-selection-point-to-block-offset'\nimport {getBlockKeyFromSelectionPoint} from './util.selection-point'\n\n/**\n * @public\n */\nexport function selectionPointToBlockOffset({\n  context,\n  selectionPoint,\n}: {\n  context: Pick<EditorContext, 'schema' | 'value'>\n  selectionPoint: EditorSelectionPoint\n}): BlockOffset | undefined {\n  const blockKey = getBlockKeyFromSelectionPoint(selectionPoint)\n\n  if (selectionPoint.path.length === 1 && blockKey !== undefined) {\n    return {\n      path: [{_key: blockKey}],\n      offset: selectionPoint.offset,\n    }\n  }\n\n  return childSelectionPointToBlockOffset({\n    context,\n    selectionPoint,\n  })\n}\n","import {isSpan} from '@portabletext/schema'\nimport type {PortableTextChild, PortableTextTextBlock} from '@sanity/types'\nimport type {EditorContext} from '../editor/editor-snapshot'\nimport {getSelectionEndPoint} from './util.get-selection-end-point'\nimport {getSelectionStartPoint} from './util.get-selection-start-point'\nimport {\n  getBlockKeyFromSelectionPoint,\n  getChildKeyFromSelectionPoint,\n} from './util.selection-point'\n\nexport function sliceTextBlock({\n  context,\n  block,\n}: {\n  context: Pick<EditorContext, 'schema' | 'selection'>\n  block: PortableTextTextBlock\n}): PortableTextTextBlock {\n  const startPoint = getSelectionStartPoint(context.selection)\n  const endPoint = getSelectionEndPoint(context.selection)\n\n  if (!startPoint || !endPoint) {\n    return block\n  }\n\n  const startBlockKey = getBlockKeyFromSelectionPoint(startPoint)\n  const endBlockKey = getBlockKeyFromSelectionPoint(endPoint)\n\n  if (startBlockKey !== endBlockKey || startBlockKey !== block._key) {\n    return block\n  }\n\n  const startChildKey = getChildKeyFromSelectionPoint(startPoint)\n  const endChildKey = getChildKeyFromSelectionPoint(endPoint)\n\n  if (!startChildKey || !endChildKey) {\n    return block\n  }\n\n  let startChildFound = false\n  const children: Array<PortableTextChild> = []\n\n  for (const child of block.children) {\n    if (child._key === startChildKey) {\n      startChildFound = true\n\n      if (isSpan(context, child)) {\n        const text =\n          child._key === endChildKey\n            ? child.text.slice(startPoint.offset, endPoint.offset)\n            : child.text.slice(startPoint.offset)\n\n        children.push({\n          ...child,\n          text,\n        })\n      } else {\n        children.push(child)\n      }\n\n      if (startChildKey === endChildKey) {\n        break\n      }\n\n      continue\n    }\n\n    if (child._key === endChildKey) {\n      if (isSpan(context, child)) {\n        children.push({\n          ...child,\n          text: child.text.slice(0, endPoint.offset),\n        })\n      } else {\n        children.push(child)\n      }\n\n      break\n    }\n\n    if (startChildFound) {\n      children.push(child)\n    }\n  }\n\n  return {\n    ...block,\n    children,\n  }\n}\n"],"names":["selectionPointToBlockOffset","context","selectionPoint","blockKey","getBlockKeyFromSelectionPoint","path","length","undefined","_key","offset","childSelectionPointToBlockOffset","sliceTextBlock","block","startPoint","getSelectionStartPoint","selection","endPoint","getSelectionEndPoint","startBlockKey","endBlockKey","startChildKey","getChildKeyFromSelectionPoint","endChildKey","startChildFound","children","child","isSpan","text","slice","push"],"mappings":";;;;;;;;;;AASO,SAASA,4BAA4B,EAC1CC,OAAAA,EACAC,cAAAA,EAIF,EAA4B;IAC1B,MAAMC,2NAAWC,gCAAAA,EAA8BF,cAAc;IAE7D,OAAIA,eAAeG,IAAAA,CAAKC,MAAAA,KAAW,KAAKH,aAAaI,KAAAA,IAC5C;QACLF,MAAM;YAAC;gBAACG,MAAML;YAAAA,CAAS;SAAA;QACvBM,QAAQP,eAAeO,MAAAA;IAAAA,IAIpBC,2QAAAA,EAAiC;QACtCT;QACAC;IAAAA,CACD;AACH;ACnBO,SAASS,eAAe,EAC7BV,OAAAA,EACAW,KAAAA,EAIF,EAA0B;IACxB,MAAMC,iBAAaC,qOAAAA,EAAuBb,QAAQc,SAAS,GACrDC,2NAAWC,uBAAAA,EAAqBhB,QAAQc,SAAS;IAEvD,IAAI,CAACF,cAAc,CAACG,UAClB,OAAOJ;IAGT,MAAMM,gOAAgBd,gCAAAA,EAA8BS,UAAU,GACxDM,eAAcf,+OAAAA,EAA8BY,QAAQ;IAE1D,IAAIE,kBAAkBC,eAAeD,kBAAkBN,MAAMJ,IAAAA,EAC3D,OAAOI;IAGT,MAAMQ,gBAAgBC,gPAAAA,EAA8BR,UAAU,GACxDS,8NAAcD,gCAAAA,EAA8BL,QAAQ;IAE1D,IAAI,CAACI,iBAAiB,CAACE,aACrB,OAAOV;IAGT,IAAIW,kBAAkB,CAAA;IACtB,MAAMC,WAAqC,CAAA,CAAA;IAE3C,KAAA,MAAWC,SAASb,MAAMY,QAAAA,CAAU;QAClC,IAAIC,MAAMjB,IAAAA,KAASY,eAAe;YAGhC,IAFAG,kBAAkB,CAAA,GAEdG,0KAAAA,EAAOzB,SAASwB,KAAK,GAAG;gBAC1B,MAAME,OACJF,MAAMjB,IAAAA,KAASc,cACXG,MAAME,IAAAA,CAAKC,KAAAA,CAAMf,WAAWJ,MAAAA,EAAQO,SAASP,MAAM,IACnDgB,MAAME,IAAAA,CAAKC,KAAAA,CAAMf,WAAWJ,MAAM;gBAExCe,SAASK,IAAAA,CAAK;oBACZ,GAAGJ,KAAAA;oBACHE;gBAAAA,CACD;YACH,OACEH,SAASK,IAAAA,CAAKJ,KAAK;YAGrB,IAAIL,kBAAkBE,aACpB;YAGF;QACF;QAEA,IAAIG,MAAMjB,IAAAA,KAASc,aAAa;YAC1BI,CAAAA,GAAAA,4JAAAA,CAAAA,SAAAA,EAAOzB,SAASwB,KAAK,IACvBD,SAASK,IAAAA,CAAK;gBACZ,GAAGJ,KAAAA;gBACHE,MAAMF,MAAME,IAAAA,CAAKC,KAAAA,CAAM,GAAGZ,SAASP,MAAM;YAAA,CAC1C,IAEDe,SAASK,IAAAA,CAAKJ,KAAK;YAGrB;QACF;QAEIF,mBACFC,SAASK,IAAAA,CAAKJ,KAAK;IAEvB;IAEA,OAAO;QACL,GAAGb,KAAAA;QACHY;IAAAA;AAEJ","ignoreList":[0,1],"debugId":null}},
    {"offset": {"line": 1687, "column": 0}, "map": {"version":3,"file":"index.js","sources":["file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/editor-event-listener.tsx","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/internal-utils/debug.ts","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/internal-utils/values.ts","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/internal-utils/slate-utils.ts","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/internal-utils/event-position.ts","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/internal-utils/selection.ts","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/internal-utils/to-slate-range.ts","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/editor/editor-actor-context.ts","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/editor/components/drop-indicator.tsx","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/editor/components/render-default-object.tsx","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/priority/priority.types.ts","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/priority/priority.core.ts","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/selectors/drag-selection.ts","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/behaviors/behavior.core.block-element.ts","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/editor/components/use-core-block-element-behaviors.ts","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/editor/components/render-block-object.tsx","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/editor/components/render-inline-object.tsx","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/editor/components/render-text-block.tsx","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/editor/components/render-element.tsx","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/editor/editor-selector.ts","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/editor/components/render-span.tsx","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/editor/components/render-leaf.tsx","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/editor/components/render-text.tsx","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/editor/hooks/usePortableTextEditor.ts","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/internal-utils/is-hotkey.ts","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/editor/plugins/createWithHotKeys.ts","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/internal-utils/move-range-by-operation.ts","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/editor/range-decorations-machine.ts","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/editor/relay-actor-context.ts","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/editor/validate-selection-machine.ts","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/editor/weakMaps.ts","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/editor/Editable.tsx","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/internal-utils/stop-actor.ts","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/converters/converter.json.ts","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/converters/converter.portable-text.ts","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/converters/converter.text-html.ts","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/converters/converter.text-plain.ts","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/converters/converters.core.ts","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/internal-utils/schema.ts","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/internal-utils/build-index-maps.ts","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/internal-utils/create-placeholder-block.ts","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/internal-utils/sibling-utils.ts","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/editor/with-normalizing-node.ts","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/editor/withChanges.ts","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/editor/withUndoRedo.ts","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/editor/plugins/createWithPortableTextMarkModel.ts","file:///Users/isseemii/app/letterseed/node_modules/node_modules/.pnpm/%40sanity%2Bdiff-match-patch%403.2.0/node_modules/%40sanity/diff-match-patch/dist/index.js","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/editor/with-undo-step.ts","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/editor/plugins/createWithUndoRedo.ts","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/operations/behavior.operation.annotation.add.ts","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/operations/behavior.operation.annotation.remove.ts","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/operations/behavior.operation.block.set.ts","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/operations/behavior.operation.block.unset.ts","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/operations/behavior.operation.child.set.ts","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/operations/behavior.operation.child.unset.ts","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/operations/behavior.operation.decorator.add.ts","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/operations/behavior.operation.delete.ts","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/operations/behavior.operation.insert.block.ts","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/operations/behavior.operation.insert.child.ts","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/operations/behavior.operation.insert.text.ts","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/operations/behavior.operation.move.backward.ts","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/operations/behavior.operation.move.block.ts","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/operations/behavior.operation.move.forward.ts","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/operations/behavior.operation.select.ts","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/operations/behavior.operations.ts","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/editor/with-performing-behavior-operation.ts","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/editor/plugins/create-with-event-listeners.ts","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/editor/plugins/createWithMaxBlocks.ts","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/editor/plugins/createWithObjectKeys.ts","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/internal-utils/applyPatch.ts","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/internal-utils/operation-to-patches.ts","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/editor/withoutPatching.ts","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/editor/plugins/createWithPatches.ts","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/editor/plugins/createWithPlaceholderBlock.ts","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/editor/plugins/createWithSchemaTypes.ts","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/editor/plugins/createWithUtils.ts","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/editor/plugins/slate-plugin.update-selection.ts","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/internal-utils/portable-text-node.ts","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/internal-utils/apply-operation-to-portable-text.ts","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/editor/plugins/slate-plugin.update-value.ts","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/editor/plugins/with-plugins.ts","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/editor/create-slate-editor.tsx","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/editor/editor-dom.ts","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/behaviors/behavior.core.annotations.ts","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/keyboard-shortcuts/default-keyboard-shortcuts.ts","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/behaviors/behavior.core.block-objects.ts","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/behaviors/behavior.core.decorators.ts","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/internal-utils/compound-client-rect.ts","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/behaviors/behavior.core.dnd.ts","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/behaviors/behavior.core.insert.ts","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/behaviors/behavior.core.insert-break.ts","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/utils/util.at-the-beginning-of-block.ts","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/behaviors/behavior.core.lists.ts","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/behaviors/behavior.core.ts","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/editor/without-normalizing-conditional.ts","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/behaviors/behavior.abstract.annotation.ts","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/behaviors/behavior.abstract.decorator.ts","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/behaviors/behavior.abstract.delete.ts","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/behaviors/behavior.abstract.deserialize.ts","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/behaviors/behavior.abstract.insert.ts","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/behaviors/behavior.abstract.keyboard.ts","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/behaviors/behavior.abstract.list-item.ts","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/behaviors/behavior.abstract.move.ts","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/behaviors/behavior.abstract.select.ts","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/behaviors/behavior.abstract.serialize.ts","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/behaviors/behavior.abstract.split.ts","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/behaviors/behavior.abstract.style.ts","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/behaviors/behavior.abstract.ts","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/behaviors/behavior.types.event.ts","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/behaviors/behavior.perform-event.ts","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/priority/priority.sort.ts","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/editor/editor-snapshot.ts","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/editor/editor-machine.ts","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/editor/mutation-machine.ts","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/editor/plugins/createWithEditableAPI.ts","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/editor/relay-machine.ts","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/internal-utils/validateValue.ts","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/editor/sync-machine.ts","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/editor/create-editor.ts","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/editor/event-to-change.tsx","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/editor/PortableTextEditor.tsx","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/editor/editor-provider.tsx","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/editor/hooks/usePortableTextEditorSelection.tsx"],"sourcesContent":["import {useEffect} from 'react'\nimport type {EditorEmittedEvent} from './editor/relay-machine'\nimport {useEditor} from './editor/use-editor'\n\n/**\n * @public\n * @deprecated\n * This component has been renamed. Use `EventListenerPlugin` instead.\n *\n * ```\n * import {EventListenerPlugin} from '@portabletext/editor/plugins'\n * ```\n */\nexport function EditorEventListener(props: {\n  on: (event: EditorEmittedEvent) => void\n}) {\n  const editor = useEditor()\n\n  useEffect(() => {\n    const subscription = editor.on('*', props.on)\n\n    return () => {\n      subscription.unsubscribe()\n    }\n  }, [editor, props.on])\n\n  return null\n}\n","import debug from 'debug'\n\nconst rootName = 'sanity-pte:'\n\nexport default debug(rootName)\nexport function debugWithName(name: string): debug.Debugger {\n  const namespace = `${rootName}${name}`\n  if (debug && debug.enabled(namespace)) {\n    return debug(namespace)\n  }\n  return debug(rootName)\n}\n","import type {\n  PortableTextBlock,\n  PortableTextChild,\n  PortableTextObject,\n  PortableTextTextBlock,\n} from '@sanity/types'\nimport {isEqual} from 'lodash'\nimport {Element, Text, type Descendant} from 'slate'\nimport type {EditorSchema} from '../editor/editor-schema'\n\nexport const EMPTY_MARKDEFS: PortableTextObject[] = []\n\nexport const VOID_CHILD_KEY = 'void-child'\n\nfunction keepObjectEquality(\n  object: PortableTextBlock | PortableTextChild,\n  keyMap: Record<string, PortableTextBlock | PortableTextChild>,\n) {\n  const value = keyMap[object._key]\n  if (value && isEqual(object, value)) {\n    return value\n  }\n  keyMap[object._key] = object\n  return object\n}\n\nexport function toSlateValue(\n  value: PortableTextBlock[] | undefined,\n  {schemaTypes}: {schemaTypes: EditorSchema},\n  keyMap: Record<string, any> = {},\n): Descendant[] {\n  if (value && Array.isArray(value)) {\n    return value.map((block) => {\n      const {_type, _key, ...rest} = block\n      const isPortableText = block && block._type === schemaTypes.block.name\n      if (isPortableText) {\n        const textBlock = block as PortableTextTextBlock\n        let hasInlines = false\n        const hasMissingStyle = typeof textBlock.style === 'undefined'\n        const hasMissingMarkDefs = typeof textBlock.markDefs === 'undefined'\n        const hasMissingChildren = typeof textBlock.children === 'undefined'\n\n        const children = (textBlock.children || []).map((child) => {\n          const {_type: cType, _key: cKey, ...cRest} = child\n          // Return 'slate' version of inline object where the actual\n          // value is stored in the `value` property.\n          // In slate, inline objects are represented as regular\n          // children with actual text node in order to be able to\n          // be selected the same way as the rest of the (text) content.\n          if (cType !== 'span') {\n            hasInlines = true\n            return keepObjectEquality(\n              {\n                _type: cType,\n                _key: cKey,\n                children: [\n                  {\n                    _key: VOID_CHILD_KEY,\n                    _type: 'span',\n                    text: '',\n                    marks: [],\n                  },\n                ],\n                value: cRest,\n                __inline: true,\n              },\n              keyMap,\n            )\n          }\n          // Original child object (span)\n          return child\n        })\n        // Return original block\n        if (\n          !hasMissingStyle &&\n          !hasMissingMarkDefs &&\n          !hasMissingChildren &&\n          !hasInlines &&\n          Element.isElement(block)\n        ) {\n          // Original object\n          return block\n        }\n        // TODO: remove this when we have a better way to handle missing style\n        if (hasMissingStyle) {\n          rest.style = schemaTypes.styles[0].name\n        }\n        return keepObjectEquality({_type, _key, ...rest, children}, keyMap)\n      }\n      return keepObjectEquality(\n        {\n          _type,\n          _key,\n          children: [\n            {\n              _key: VOID_CHILD_KEY,\n              _type: 'span',\n              text: '',\n              marks: [],\n            },\n          ],\n          value: rest,\n        },\n        keyMap,\n      )\n    }) as Descendant[]\n  }\n  return []\n}\n\nexport function fromSlateValue(\n  value: Descendant[],\n  textBlockType: string,\n  keyMap: Record<string, PortableTextBlock | PortableTextChild> = {},\n): PortableTextBlock[] {\n  return value.map((block) => {\n    const {_key, _type} = block\n    if (!_key || !_type) {\n      throw new Error('Not a valid block')\n    }\n    if (\n      _type === textBlockType &&\n      'children' in block &&\n      Array.isArray(block.children) &&\n      _key\n    ) {\n      let hasInlines = false\n      const children = block.children.map((child) => {\n        const {_type: _cType} = child\n        if ('value' in child && _cType !== 'span') {\n          hasInlines = true\n          const {\n            value: v,\n            _key: k,\n            _type: t,\n            __inline: _i,\n            children: _c,\n            ...rest\n          } = child\n          return keepObjectEquality(\n            {...rest, ...v, _key: k as string, _type: t as string},\n            keyMap,\n          )\n        }\n        return child\n      })\n      if (!hasInlines) {\n        return block as PortableTextBlock // Original object\n      }\n      return keepObjectEquality(\n        {...block, children, _key, _type},\n        keyMap,\n      ) as PortableTextBlock\n    }\n    const blockValue = 'value' in block && block.value\n    return keepObjectEquality(\n      {_key, _type, ...(typeof blockValue === 'object' ? blockValue : {})},\n      keyMap,\n    ) as PortableTextBlock\n  })\n}\n\nexport function isEqualToEmptyEditor(\n  children: Descendant[] | PortableTextBlock[],\n  schemaTypes: EditorSchema,\n): boolean {\n  return (\n    children === undefined ||\n    (children && Array.isArray(children) && children.length === 0) ||\n    (children &&\n      Array.isArray(children) &&\n      children.length === 1 &&\n      Element.isElement(children[0]) &&\n      children[0]._type === schemaTypes.block.name &&\n      'style' in children[0] &&\n      children[0].style === schemaTypes.styles[0].name &&\n      !('listItem' in children[0]) &&\n      Array.isArray(children[0].children) &&\n      children[0].children.length === 1 &&\n      Text.isText(children[0].children[0]) &&\n      children[0].children[0]._type === 'span' &&\n      !children[0].children[0].marks?.join('') &&\n      children[0].children[0].text === '')\n  )\n}\n","import type {PortableTextSpan} from '@sanity/types'\nimport {Editor, Element, Node, Range, type Path, type Point} from 'slate'\nimport type {EditorSchema} from '../editor/editor-schema'\nimport type {EditorSelection, PortableTextSlateEditor} from '../types/editor'\nimport {fromSlateValue} from './values'\n\nexport function getBlockPath({\n  editor,\n  _key,\n}: {\n  editor: PortableTextSlateEditor\n  _key: string\n}): [number] | undefined {\n  const [, blockPath] = Array.from(\n    Editor.nodes(editor, {\n      at: [],\n      match: (n) => n._key === _key,\n    }),\n  ).at(0) ?? [undefined, undefined]\n\n  const blockIndex = blockPath?.at(0)\n\n  if (blockIndex === undefined) {\n    return undefined\n  }\n\n  return [blockIndex]\n}\n\nexport function getAnchorBlock({\n  editor,\n}: {\n  editor: PortableTextSlateEditor\n}): [node: Node, path: Path] | [undefined, undefined] {\n  if (!editor.selection) {\n    return [undefined, undefined]\n  }\n\n  try {\n    return (\n      Editor.node(editor, editor.selection.anchor.path.slice(0, 1)) ?? [\n        undefined,\n        undefined,\n      ]\n    )\n  } catch {\n    return [undefined, undefined]\n  }\n}\n\nexport function getFocusBlock({\n  editor,\n}: {\n  editor: PortableTextSlateEditor\n}): [node: Node, path: Path] | [undefined, undefined] {\n  if (!editor.selection) {\n    return [undefined, undefined]\n  }\n\n  try {\n    return (\n      Editor.node(editor, editor.selection.focus.path.slice(0, 1)) ?? [\n        undefined,\n        undefined,\n      ]\n    )\n  } catch {\n    return [undefined, undefined]\n  }\n}\n\nexport function getFocusSpan({\n  editor,\n}: {\n  editor: PortableTextSlateEditor\n}): [node: PortableTextSpan, path: Path] | [undefined, undefined] {\n  if (!editor.selection) {\n    return [undefined, undefined]\n  }\n\n  try {\n    const [focusBlock] = getFocusBlock({editor})\n\n    if (!focusBlock) {\n      return [undefined, undefined]\n    }\n\n    if (!editor.isTextBlock(focusBlock)) {\n      return [undefined, undefined]\n    }\n\n    const [node, path] = Editor.node(\n      editor,\n      editor.selection.focus.path.slice(0, 2),\n    )\n\n    if (editor.isTextSpan(node)) {\n      return [node, path]\n    }\n  } catch {\n    return [undefined, undefined]\n  }\n\n  return [undefined, undefined]\n}\n\nexport function getSelectionStartBlock({\n  editor,\n}: {\n  editor: PortableTextSlateEditor\n}): [node: Node, path: Path] | [undefined, undefined] {\n  if (!editor.selection) {\n    return [undefined, undefined]\n  }\n\n  const selectionStartPoint = Range.start(editor.selection)\n\n  return getPointBlock({editor, point: selectionStartPoint})\n}\n\nexport function getSelectionEndBlock({\n  editor,\n}: {\n  editor: PortableTextSlateEditor\n}): [node: Node, path: Path] | [undefined, undefined] {\n  if (!editor.selection) {\n    return [undefined, undefined]\n  }\n\n  const selectionEndPoint = Range.end(editor.selection)\n\n  return getPointBlock({editor, point: selectionEndPoint})\n}\n\nexport function getPointBlock({\n  editor,\n  point,\n}: {\n  editor: PortableTextSlateEditor\n  point: Point\n}): [node: Node, path: Path] | [undefined, undefined] {\n  try {\n    const [block] = Editor.node(editor, point.path.slice(0, 1)) ?? [\n      undefined,\n      undefined,\n    ]\n    return block ? [block, point.path.slice(0, 1)] : [undefined, undefined]\n  } catch {\n    return [undefined, undefined]\n  }\n}\n\nexport function getFocusChild({\n  editor,\n}: {\n  editor: PortableTextSlateEditor\n}): [node: Node, path: Path] | [undefined, undefined] {\n  const [focusBlock, focusBlockPath] = getFocusBlock({editor})\n  const childIndex = editor.selection?.focus.path.at(1)\n\n  if (!focusBlock || !focusBlockPath || childIndex === undefined) {\n    return [undefined, undefined]\n  }\n\n  try {\n    const focusChild = Node.child(focusBlock, childIndex)\n\n    return focusChild\n      ? [focusChild, [...focusBlockPath, childIndex]]\n      : [undefined, undefined]\n  } catch {\n    return [undefined, undefined]\n  }\n}\n\nfunction getPointChild({\n  editor,\n  point,\n}: {\n  editor: PortableTextSlateEditor\n  point: Point\n}): [node: Node, path: Path] | [undefined, undefined] {\n  const [block, blockPath] = getPointBlock({editor, point})\n  const childIndex = point.path.at(1)\n\n  if (!block || !blockPath || childIndex === undefined) {\n    return [undefined, undefined]\n  }\n\n  try {\n    const pointChild = Node.child(block, childIndex)\n\n    return pointChild\n      ? [pointChild, [...blockPath, childIndex]]\n      : [undefined, undefined]\n  } catch {\n    return [undefined, undefined]\n  }\n}\n\nexport function getFirstBlock({\n  editor,\n}: {\n  editor: PortableTextSlateEditor\n}): [node: Node, path: Path] | [undefined, undefined] {\n  if (editor.children.length === 0) {\n    return [undefined, undefined]\n  }\n\n  const firstPoint = Editor.start(editor, [])\n  const firstBlockPath = firstPoint.path.at(0)\n\n  try {\n    return firstBlockPath !== undefined\n      ? (Editor.node(editor, [firstBlockPath]) ?? [undefined, undefined])\n      : [undefined, undefined]\n  } catch {\n    return [undefined, undefined]\n  }\n}\n\nexport function getLastBlock({\n  editor,\n}: {\n  editor: PortableTextSlateEditor\n}): [node: Node, path: Path] | [undefined, undefined] {\n  if (editor.children.length === 0) {\n    return [undefined, undefined]\n  }\n\n  const lastPoint = Editor.end(editor, [])\n  const lastBlockPath = lastPoint.path.at(0)\n\n  try {\n    return lastBlockPath !== undefined\n      ? (Editor.node(editor, [lastBlockPath]) ?? [undefined, undefined])\n      : [undefined, undefined]\n  } catch {\n    return [undefined, undefined]\n  }\n}\n\nexport function getNodeBlock({\n  editor,\n  schema,\n  node,\n}: {\n  editor: PortableTextSlateEditor\n  schema: EditorSchema\n  node: Node\n}) {\n  if (Editor.isEditor(node)) {\n    return undefined\n  }\n\n  if (isBlockElement({editor, schema}, node)) {\n    return elementToBlock({schema, element: node})\n  }\n\n  const parent = Array.from(\n    Editor.nodes(editor, {\n      mode: 'highest',\n      at: [],\n      match: (n) =>\n        isBlockElement({editor, schema}, n) &&\n        n.children.some((child) => child._key === node._key),\n    }),\n  )\n    .at(0)\n    ?.at(0)\n\n  return Element.isElement(parent)\n    ? elementToBlock({\n        schema,\n        element: parent,\n      })\n    : undefined\n}\n\nfunction elementToBlock({\n  schema,\n  element,\n}: {\n  schema: EditorSchema\n  element: Element\n}) {\n  return fromSlateValue([element], schema.block.name)?.at(0)\n}\n\nfunction isBlockElement(\n  {editor, schema}: {editor: PortableTextSlateEditor; schema: EditorSchema},\n  node: Node,\n): node is Element {\n  return (\n    Element.isElement(node) &&\n    !editor.isInline(node) &&\n    (schema.block.name === node._type ||\n      schema.blockObjects.some(\n        (blockObject) => blockObject.name === node._type,\n      ))\n  )\n}\n\nexport function isListItemActive({\n  editor,\n  listItem,\n}: {\n  editor: Editor\n  listItem: string\n}): boolean {\n  if (!editor.selection) {\n    return false\n  }\n\n  const selectedBlocks = [\n    ...Editor.nodes(editor, {\n      at: editor.selection,\n      match: (node) => editor.isTextBlock(node),\n    }),\n  ]\n\n  if (selectedBlocks.length > 0) {\n    return selectedBlocks.every(\n      ([node]) => editor.isListBlock(node) && node.listItem === listItem,\n    )\n  }\n\n  return false\n}\n\nexport function isStyleActive({\n  editor,\n  style,\n}: {\n  editor: Editor\n  style: string\n}): boolean {\n  if (!editor.selection) {\n    return false\n  }\n\n  const selectedBlocks = [\n    ...Editor.nodes(editor, {\n      at: editor.selection,\n      match: (node) => editor.isTextBlock(node),\n    }),\n  ]\n\n  if (selectedBlocks.length > 0) {\n    return selectedBlocks.every(([node]) => node.style === style)\n  }\n\n  return false\n}\n\nexport function slateRangeToSelection({\n  schema,\n  editor,\n  range,\n}: {\n  schema: EditorSchema\n  editor: PortableTextSlateEditor\n  range: Range\n}): EditorSelection {\n  const [anchorBlock] = getPointBlock({\n    editor,\n    point: range.anchor,\n  })\n  const [focusBlock] = getPointBlock({\n    editor,\n    point: range.focus,\n  })\n\n  if (!anchorBlock || !focusBlock) {\n    return null\n  }\n\n  const [anchorChild] =\n    anchorBlock._type === schema.block.name\n      ? getPointChild({\n          editor,\n          point: range.anchor,\n        })\n      : [undefined, undefined]\n  const [focusChild] =\n    focusBlock._type === schema.block.name\n      ? getPointChild({\n          editor,\n          point: range.focus,\n        })\n      : [undefined, undefined]\n\n  const selection: EditorSelection = {\n    anchor: {\n      path: [{_key: anchorBlock._key}],\n      offset: range.anchor.offset,\n    },\n    focus: {\n      path: [{_key: focusBlock._key}],\n      offset: range.focus.offset,\n    },\n    backward: Range.isBackward(range),\n  }\n\n  if (anchorChild) {\n    selection.anchor.path.push('children')\n    selection.anchor.path.push({_key: anchorChild._key})\n  }\n\n  if (focusChild) {\n    selection.focus.path.push('children')\n    selection.focus.path.push({_key: focusChild._key})\n  }\n\n  return selection\n}\n","import {Editor, type BaseRange, type Node} from 'slate'\nimport {DOMEditor, isDOMNode} from 'slate-dom'\nimport type {EditorActor} from '../editor/editor-machine'\nimport type {EditorSchema} from '../editor/editor-schema'\nimport type {EditorSelection, PortableTextSlateEditor} from '../types/editor'\nimport {getBlockEndPoint} from '../utils/util.get-block-end-point'\nimport {getBlockStartPoint} from '../utils/util.get-block-start-point'\nimport {isSelectionCollapsed} from '../utils/util.is-selection-collapsed'\nimport {getBlockKeyFromSelectionPoint} from '../utils/util.selection-point'\nimport {\n  getFirstBlock,\n  getLastBlock,\n  getNodeBlock,\n  slateRangeToSelection,\n} from './slate-utils'\n\nexport type EventPosition = {\n  block: 'start' | 'end'\n  /**\n   * Did the event origin from the editor DOM node itself or from a child node?\n   */\n  isEditor: boolean\n  selection: NonNullable<EditorSelection>\n}\nexport type EventPositionBlock = EventPosition['block']\n\nexport function getEventPosition({\n  editorActor,\n  slateEditor,\n  event,\n}: {\n  editorActor: EditorActor\n  slateEditor: PortableTextSlateEditor\n  event: DragEvent | MouseEvent\n}): EventPosition | undefined {\n  if (editorActor.getSnapshot().matches({setup: 'setting up'})) {\n    return undefined\n  }\n\n  const eventNode = getEventNode({slateEditor, event})\n\n  if (!eventNode) {\n    return undefined\n  }\n\n  const eventBlock = getNodeBlock({\n    editor: slateEditor,\n    schema: editorActor.getSnapshot().context.schema,\n    node: eventNode,\n  })\n  const eventPositionBlock = getEventPositionBlock({\n    node: eventNode,\n    slateEditor,\n    event,\n  })\n  const eventSelection = getEventSelection({\n    schema: editorActor.getSnapshot().context.schema,\n    slateEditor,\n    event,\n  })\n\n  if (\n    eventBlock &&\n    eventPositionBlock &&\n    !eventSelection &&\n    !Editor.isEditor(eventNode)\n  ) {\n    // If we for some reason can't find the event selection, then we default to\n    // selecting the entire block that the event originates from.\n    return {\n      block: eventPositionBlock,\n      isEditor: false,\n      selection: {\n        anchor: getBlockStartPoint({\n          context: editorActor.getSnapshot().context,\n          block: {\n            node: eventBlock,\n            path: [{_key: eventBlock._key}],\n          },\n        }),\n        focus: getBlockEndPoint({\n          context: editorActor.getSnapshot().context,\n          block: {\n            node: eventBlock,\n            path: [{_key: eventBlock._key}],\n          },\n        }),\n      },\n    }\n  }\n\n  if (!eventPositionBlock || !eventSelection) {\n    return undefined\n  }\n\n  const eventSelectionFocusBlockKey = getBlockKeyFromSelectionPoint(\n    eventSelection.focus,\n  )\n\n  if (eventSelectionFocusBlockKey === undefined) {\n    return undefined\n  }\n\n  if (\n    isSelectionCollapsed(eventSelection) &&\n    eventBlock &&\n    eventSelectionFocusBlockKey !== eventBlock._key\n  ) {\n    // If the event block and event selection somehow don't match, then the\n    // event block takes precedence.\n    return {\n      block: eventPositionBlock,\n      isEditor: false,\n      selection: {\n        anchor: getBlockStartPoint({\n          context: editorActor.getSnapshot().context,\n          block: {\n            node: eventBlock,\n            path: [{_key: eventBlock._key}],\n          },\n        }),\n        focus: getBlockEndPoint({\n          context: editorActor.getSnapshot().context,\n          block: {\n            node: eventBlock,\n            path: [{_key: eventBlock._key}],\n          },\n        }),\n      },\n    }\n  }\n\n  return {\n    block: eventPositionBlock,\n    isEditor: Editor.isEditor(eventNode),\n    selection: eventSelection,\n  }\n}\n\nexport function getEventNode({\n  slateEditor,\n  event,\n}: {\n  slateEditor: PortableTextSlateEditor\n  event: DragEvent | MouseEvent\n}) {\n  if (!DOMEditor.hasTarget(slateEditor, event.target)) {\n    return undefined\n  }\n\n  const node = DOMEditor.toSlateNode(slateEditor, event.target)\n\n  return node\n}\n\nfunction getEventPositionBlock({\n  node,\n  slateEditor,\n  event,\n}: {\n  node: Node\n  slateEditor: PortableTextSlateEditor\n  event: DragEvent | MouseEvent\n}): EventPositionBlock | undefined {\n  const [firstBlock] = getFirstBlock({editor: slateEditor})\n\n  if (!firstBlock) {\n    return undefined\n  }\n\n  const firstBlockElement = DOMEditor.toDOMNode(slateEditor, firstBlock)\n  const firstBlockRect = firstBlockElement.getBoundingClientRect()\n\n  if (event.pageY < firstBlockRect.top) {\n    return 'start'\n  }\n\n  const [lastBlock] = getLastBlock({editor: slateEditor})\n\n  if (!lastBlock) {\n    return undefined\n  }\n\n  const lastBlockElement = DOMEditor.toDOMNode(slateEditor, lastBlock)\n  const lastBlockRef = lastBlockElement.getBoundingClientRect()\n\n  if (event.pageY > lastBlockRef.bottom) {\n    return 'end'\n  }\n\n  const element = DOMEditor.toDOMNode(slateEditor, node)\n  const elementRect = element.getBoundingClientRect()\n  const top = elementRect.top\n  const height = elementRect.height\n  const location = Math.abs(top - event.pageY)\n\n  return location < height / 2 ? 'start' : 'end'\n}\n\nexport function getEventSelection({\n  schema,\n  slateEditor,\n  event,\n}: {\n  schema: EditorSchema\n  slateEditor: PortableTextSlateEditor\n  event: DragEvent | MouseEvent\n}): EditorSelection {\n  const range = getSlateRangeFromEvent(slateEditor, event)\n\n  const selection = range\n    ? slateRangeToSelection({\n        schema,\n        editor: slateEditor,\n        range,\n      })\n    : null\n\n  return selection\n}\n\nfunction getSlateRangeFromEvent(\n  editor: PortableTextSlateEditor,\n  event: DragEvent | MouseEvent,\n) {\n  if (!event.target) {\n    return undefined\n  }\n\n  if (!isDOMNode(event.target)) {\n    return undefined\n  }\n\n  const window = DOMEditor.getWindow(editor)\n\n  let domRange: Range | undefined\n\n  if (window.document.caretPositionFromPoint !== undefined) {\n    const position = window.document.caretPositionFromPoint(\n      event.clientX,\n      event.clientY,\n    )\n\n    if (position) {\n      try {\n        domRange = window.document.createRange()\n        domRange.setStart(position.offsetNode, position.offset)\n        domRange.setEnd(position.offsetNode, position.offset)\n      } catch {}\n    }\n  } else if (window.document.caretRangeFromPoint !== undefined) {\n    // Use WebKit-proprietary fallback method\n    domRange =\n      window.document.caretRangeFromPoint(event.clientX, event.clientY) ??\n      undefined\n  } else {\n    console.warn(\n      'Neither caretPositionFromPoint nor caretRangeFromPoint is supported',\n    )\n    return undefined\n  }\n\n  if (!domRange) {\n    return undefined\n  }\n\n  let range: BaseRange | undefined\n\n  try {\n    range = DOMEditor.toSlateRange(editor, domRange, {\n      exactMatch: false,\n      // It can still throw even with this option set to true\n      suppressThrow: false,\n    })\n  } catch {}\n\n  return range\n}\n","import type {Path, PortableTextBlock} from '@sanity/types'\nimport {isEqual} from 'lodash'\nimport type {EditorSelection, EditorSelectionPoint} from '../types/editor'\n\nexport function normalizePoint(\n  point: EditorSelectionPoint,\n  value: PortableTextBlock[],\n): EditorSelectionPoint | null {\n  if (!point || !value) {\n    return null\n  }\n  const newPath: Path = []\n  let newOffset: number = point.offset || 0\n  const blockKey =\n    typeof point.path[0] === 'object' &&\n    '_key' in point.path[0] &&\n    point.path[0]._key\n  const childKey =\n    typeof point.path[2] === 'object' &&\n    '_key' in point.path[2] &&\n    point.path[2]._key\n  const block: PortableTextBlock | undefined = value.find(\n    (blk) => blk._key === blockKey,\n  )\n  if (block) {\n    newPath.push({_key: block._key})\n  } else {\n    return null\n  }\n  if (block && point.path[1] === 'children') {\n    if (\n      !block.children ||\n      (Array.isArray(block.children) && block.children.length === 0)\n    ) {\n      return null\n    }\n    const child =\n      Array.isArray(block.children) &&\n      block.children.find((cld) => cld._key === childKey)\n    if (child) {\n      newPath.push('children')\n      newPath.push({_key: child._key})\n      newOffset =\n        child.text && child.text.length >= point.offset\n          ? point.offset\n          : (child.text && child.text.length) || 0\n    } else {\n      return null\n    }\n  }\n  return {path: newPath, offset: newOffset}\n}\n\nexport function normalizeSelection(\n  selection: EditorSelection,\n  value: PortableTextBlock[] | undefined,\n): EditorSelection | null {\n  if (!selection || !value || value.length === 0) {\n    return null\n  }\n  let newAnchor: EditorSelectionPoint | null = null\n  let newFocus: EditorSelectionPoint | null = null\n  const {anchor, focus} = selection\n  if (\n    anchor &&\n    value.find((blk) => isEqual({_key: blk._key}, anchor.path[0]))\n  ) {\n    newAnchor = normalizePoint(anchor, value)\n  }\n  if (focus && value.find((blk) => isEqual({_key: blk._key}, focus.path[0]))) {\n    newFocus = normalizePoint(focus, value)\n  }\n  if (newAnchor && newFocus) {\n    return {anchor: newAnchor, focus: newFocus, backward: selection.backward}\n  }\n  return null\n}\n","import {isSpan, isTextBlock} from '@portabletext/schema'\nimport type {PortableTextObject, PortableTextSpan} from '@sanity/types'\nimport type {Path, Range} from 'slate'\nimport type {EditorContext, EditorSnapshot} from '../editor/editor-snapshot'\nimport type {EditorSelectionPoint} from '../types/editor'\nimport {blockOffsetToSpanSelectionPoint} from '../utils/util.block-offset'\nimport {isEqualSelectionPoints} from '../utils/util.is-equal-selection-points'\nimport {\n  getBlockKeyFromSelectionPoint,\n  getChildKeyFromSelectionPoint,\n} from '../utils/util.selection-point'\n\nexport function toSlateRange(\n  snapshot: {\n    context: Pick<EditorContext, 'schema' | 'value' | 'selection'>\n  } & Pick<EditorSnapshot, 'blockIndexMap'>,\n): Range | null {\n  if (!snapshot.context.selection) {\n    return null\n  }\n\n  if (\n    isEqualSelectionPoints(\n      snapshot.context.selection.anchor,\n      snapshot.context.selection.focus,\n    )\n  ) {\n    const anchorPoint = toSlateSelectionPoint(\n      snapshot,\n      snapshot.context.selection.anchor,\n      snapshot.context.selection.backward ? 'backward' : 'forward',\n    )\n\n    if (!anchorPoint) {\n      return null\n    }\n\n    return {\n      anchor: anchorPoint,\n      focus: anchorPoint,\n    }\n  }\n\n  const anchorPoint = toSlateSelectionPoint(\n    snapshot,\n    snapshot.context.selection.anchor,\n    snapshot.context.selection.backward ? 'forward' : 'backward',\n  )\n  const focusPoint = toSlateSelectionPoint(\n    snapshot,\n    snapshot.context.selection.focus,\n    snapshot.context.selection.backward ? 'backward' : 'forward',\n  )\n\n  if (!anchorPoint || !focusPoint) {\n    return null\n  }\n\n  return {\n    anchor: anchorPoint,\n    focus: focusPoint,\n  }\n}\n\nfunction toSlateSelectionPoint(\n  snapshot: {\n    context: Pick<EditorContext, 'schema' | 'value'>\n  } & Pick<EditorSnapshot, 'blockIndexMap'>,\n  selectionPoint: EditorSelectionPoint,\n  direction: 'forward' | 'backward',\n):\n  | {\n      path: Path\n      offset: number\n    }\n  | undefined {\n  const blockKey = getBlockKeyFromSelectionPoint(selectionPoint)\n\n  if (!blockKey) {\n    return undefined\n  }\n\n  const blockIndex = snapshot.blockIndexMap.get(blockKey)\n\n  if (blockIndex === undefined) {\n    return undefined\n  }\n\n  const block = snapshot.context.value.at(blockIndex)\n\n  if (!block) {\n    return undefined\n  }\n\n  if (!isTextBlock(snapshot.context, block)) {\n    return {\n      path: [blockIndex, 0],\n      offset: 0,\n    }\n  }\n\n  let childKey = getChildKeyFromSelectionPoint({\n    path: selectionPoint.path,\n    offset: 0,\n  })\n\n  // If the block is a text block, but there is no child key in the selection\n  // point path, then we can try to find a span selection point by the offset.\n  const spanSelectionPoint = !childKey\n    ? blockOffsetToSpanSelectionPoint({\n        context: {\n          schema: snapshot.context.schema,\n          value: [block],\n        },\n        blockOffset: {\n          path: [{_key: blockKey}],\n          offset: selectionPoint.offset,\n        },\n        direction,\n      })\n    : undefined\n\n  childKey = spanSelectionPoint\n    ? getChildKeyFromSelectionPoint(spanSelectionPoint)\n    : childKey\n\n  // If we still don't have a child key, then we have to resort to selecting\n  // the first child of the block (which by Slate convention is a span).\n  if (!childKey) {\n    return {\n      path: [blockIndex, 0],\n      offset: 0,\n    }\n  }\n\n  let offset = spanSelectionPoint?.offset ?? selectionPoint.offset\n  let childPath: Array<number> = []\n  let childIndex = -1\n  let pathChild: PortableTextSpan | PortableTextObject | undefined\n\n  for (const child of block.children) {\n    childIndex++\n    if (child._key === childKey) {\n      pathChild = child\n      if (isSpan(snapshot.context, child)) {\n        childPath = [childIndex]\n      } else {\n        childPath = [childIndex, 0]\n        offset = 0\n      }\n      break\n    }\n  }\n\n  // If we for some unforeseen reason didn't manage to produce a child path,\n  // then we have to resort to selecting the first child of the block (which\n  // by Slate convention is a span).\n  if (childPath.length === 0) {\n    return {\n      path: [blockIndex, 0],\n      offset: 0,\n    }\n  }\n\n  return {\n    path: [blockIndex].concat(childPath),\n    offset: isSpan(snapshot.context, pathChild)\n      ? Math.min(pathChild.text.length, offset)\n      : offset,\n  }\n}\n","import {createContext} from 'react'\nimport type {EditorActor} from './editor-machine'\n\nexport const EditorActorContext = createContext<EditorActor>({} as EditorActor)\n","export function DropIndicator() {\n  return (\n    <div\n      contentEditable={false}\n      className=\"pt-drop-indicator\"\n      style={{\n        position: 'absolute',\n        width: '100%',\n        height: 1,\n        borderBottom: '1px solid currentColor',\n        zIndex: 5,\n      }}\n    >\n      <span />\n    </div>\n  )\n}\n","import type {PortableTextChild, PortableTextObject} from '@sanity/types'\n\nexport function RenderDefaultBlockObject(props: {\n  blockObject: PortableTextObject\n}) {\n  return (\n    <div style={{userSelect: 'none'}}>\n      [{props.blockObject._type}: {props.blockObject._key}]\n    </div>\n  )\n}\n\nexport function RenderDefaultInlineObject(props: {\n  inlineObject: PortableTextObject | PortableTextChild\n}) {\n  return (\n    <span style={{userSelect: 'none'}}>\n      [{props.inlineObject._type}: {props.inlineObject._key}]\n    </span>\n  )\n}\n","import {defaultKeyGenerator} from '../utils/key-generator'\n\nexport type EditorPriority = {\n  id: string\n  name?: string\n  reference?: {\n    priority: EditorPriority\n    importance: 'higher' | 'lower'\n  }\n}\n\nexport function createEditorPriority(config?: {\n  name?: string\n  reference?: {\n    priority: EditorPriority\n    importance: 'higher' | 'lower'\n  }\n}): EditorPriority {\n  return {\n    id: defaultKeyGenerator(),\n    name: config?.name,\n    reference: config?.reference,\n  }\n}\n","import {createEditorPriority} from './priority.types'\n\nexport const corePriority = createEditorPriority({name: 'core'})\n","import type {EditorSnapshot} from '../editor/editor-snapshot'\nimport type {EventPosition} from '../internal-utils/event-position'\nimport {getBlockEndPoint} from '../utils/util.get-block-end-point'\nimport {getBlockStartPoint} from '../utils/util.get-block-start-point'\nimport {getFocusInlineObject} from './selector.get-focus-inline-object'\nimport {getFocusSpan} from './selector.get-focus-span'\nimport {getFocusTextBlock} from './selector.get-focus-text-block'\nimport {getSelectedBlocks} from './selector.get-selected-blocks'\nimport {getSelectionEndBlock} from './selector.get-selection-end-block'\nimport {getSelectionStartBlock} from './selector.get-selection-start-block'\nimport {isOverlappingSelection} from './selector.is-overlapping-selection'\nimport {isSelectionCollapsed} from './selector.is-selection-collapsed'\nimport {isSelectionExpanded} from './selector.is-selection-expanded'\n\n/**\n * Given the current editor `snapshot` and an `eventSelection` representing\n * where the drag event origins from, this function calculates the selection\n * in the editor that should be dragged.\n */\nexport function getDragSelection({\n  eventSelection,\n  snapshot,\n}: {\n  eventSelection: EventPosition['selection']\n  snapshot: EditorSnapshot\n}) {\n  let dragSelection = eventSelection\n\n  const draggedInlineObject = getFocusInlineObject({\n    ...snapshot,\n    context: {\n      ...snapshot.context,\n      selection: eventSelection,\n    },\n  })\n\n  if (draggedInlineObject) {\n    return dragSelection\n  }\n\n  const draggingCollapsedSelection = isSelectionCollapsed({\n    ...snapshot,\n    context: {\n      ...snapshot.context,\n      selection: eventSelection,\n    },\n  })\n  const draggedTextBlock = getFocusTextBlock({\n    ...snapshot,\n    context: {\n      ...snapshot.context,\n      selection: eventSelection,\n    },\n  })\n  const draggedSpan = getFocusSpan({\n    ...snapshot,\n    context: {\n      ...snapshot.context,\n      selection: eventSelection,\n    },\n  })\n\n  if (draggingCollapsedSelection && draggedTextBlock && draggedSpan) {\n    // Looks like we are dragging an empty span\n    // Let's drag the entire block instead\n    dragSelection = {\n      anchor: getBlockStartPoint({\n        context: snapshot.context,\n        block: draggedTextBlock,\n      }),\n      focus: getBlockEndPoint({\n        context: snapshot.context,\n        block: draggedTextBlock,\n      }),\n    }\n  }\n\n  const selectedBlocks = getSelectedBlocks(snapshot)\n\n  if (\n    snapshot.context.selection &&\n    isSelectionExpanded(snapshot) &&\n    selectedBlocks.length > 1\n  ) {\n    const selectionStartBlock = getSelectionStartBlock(snapshot)\n    const selectionEndBlock = getSelectionEndBlock(snapshot)\n\n    if (!selectionStartBlock || !selectionEndBlock) {\n      return dragSelection\n    }\n\n    const selectionStartPoint = getBlockStartPoint({\n      context: snapshot.context,\n      block: selectionStartBlock,\n    })\n    const selectionEndPoint = getBlockEndPoint({\n      context: snapshot.context,\n      block: selectionEndBlock,\n    })\n\n    const eventSelectionInsideBlocks = isOverlappingSelection(eventSelection)({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection: {anchor: selectionStartPoint, focus: selectionEndPoint},\n      },\n    })\n\n    if (eventSelectionInsideBlocks) {\n      dragSelection = {\n        anchor: selectionStartPoint,\n        focus: selectionEndPoint,\n      }\n    }\n  }\n\n  return dragSelection\n}\n","import type {EventPositionBlock} from '../internal-utils/event-position'\nimport {corePriority} from '../priority/priority.core'\nimport {createEditorPriority} from '../priority/priority.types'\nimport {getDragSelection} from '../selectors/drag-selection'\nimport {getFocusBlock} from '../selectors/selector.get-focus-block'\nimport {getSelectedBlocks} from '../selectors/selector.get-selected-blocks'\nimport {isSelectingEntireBlocks} from '../selectors/selector.is-selecting-entire-blocks'\nimport {forward} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nexport function createCoreBlockElementBehaviorsConfig({\n  key,\n  onSetDragPositionBlock,\n}: {\n  key: string\n  onSetDragPositionBlock: (\n    eventPositionBlock: EventPositionBlock | undefined,\n  ) => void\n}) {\n  return [\n    {\n      behavior: defineBehavior({\n        on: 'drag.dragover',\n        guard: ({snapshot, event}) => {\n          const dropFocusBlock = getFocusBlock({\n            ...snapshot,\n            context: {\n              ...snapshot.context,\n              selection: event.position.selection,\n            },\n          })\n\n          if (!dropFocusBlock || dropFocusBlock.node._key !== key) {\n            return false\n          }\n\n          const dragOrigin = event.dragOrigin\n\n          if (!dragOrigin) {\n            return false\n          }\n\n          const dragSelection = getDragSelection({\n            eventSelection: dragOrigin.selection,\n            snapshot,\n          })\n\n          const draggedBlocks = getSelectedBlocks({\n            ...snapshot,\n            context: {\n              ...snapshot.context,\n              selection: dragSelection,\n            },\n          })\n\n          if (\n            draggedBlocks.some((draggedBlock) => draggedBlock.node._key === key)\n          ) {\n            return false\n          }\n\n          const draggingEntireBlocks = isSelectingEntireBlocks({\n            ...snapshot,\n            context: {\n              ...snapshot.context,\n              selection: dragSelection,\n            },\n          })\n\n          return draggingEntireBlocks\n        },\n        actions: [\n          ({event}) => [\n            {\n              type: 'effect',\n              effect: () => {\n                onSetDragPositionBlock(event.position.block)\n              },\n            },\n          ],\n        ],\n      }),\n      priority: createEditorPriority({\n        reference: {\n          priority: corePriority,\n          importance: 'lower',\n        },\n      }),\n    },\n    {\n      behavior: defineBehavior({\n        on: 'drag.*',\n        guard: ({event}) => {\n          return event.type !== 'drag.dragover'\n        },\n        actions: [\n          ({event}) => [\n            {\n              type: 'effect',\n              effect: () => {\n                onSetDragPositionBlock(undefined)\n              },\n            },\n            forward(event),\n          ],\n        ],\n      }),\n      priority: createEditorPriority({\n        reference: {\n          priority: corePriority,\n          importance: 'lower',\n        },\n      }),\n    },\n  ]\n}\n","import {useContext, useEffect} from 'react'\nimport {createCoreBlockElementBehaviorsConfig} from '../../behaviors/behavior.core.block-element'\nimport type {EventPositionBlock} from '../../internal-utils/event-position'\nimport {EditorActorContext} from '../editor-actor-context'\n\nexport function useCoreBlockElementBehaviors({\n  key,\n  onSetDragPositionBlock,\n}: {\n  key: string\n  onSetDragPositionBlock: (\n    eventPositionBlock: EventPositionBlock | undefined,\n  ) => void\n}) {\n  const editorActor = useContext(EditorActorContext)\n\n  useEffect(() => {\n    const behaviorConfigs = createCoreBlockElementBehaviorsConfig({\n      key,\n      onSetDragPositionBlock,\n    })\n\n    for (const behaviorConfig of behaviorConfigs) {\n      editorActor.send({\n        type: 'add behavior',\n        behaviorConfig,\n      })\n    }\n\n    return () => {\n      for (const behaviorConfig of behaviorConfigs) {\n        editorActor.send({\n          type: 'remove behavior',\n          behaviorConfig,\n        })\n      }\n    }\n  }, [editorActor, key, onSetDragPositionBlock])\n}\n","import type {PortableTextObject} from '@sanity/types'\nimport {useRef, useState, type ReactElement} from 'react'\nimport {Range, type Element as SlateElement} from 'slate'\nimport {\n  useSelected,\n  useSlateSelector,\n  type RenderElementProps,\n} from 'slate-react'\nimport type {EventPositionBlock} from '../../internal-utils/event-position'\nimport type {\n  BlockRenderProps,\n  PortableTextMemberSchemaTypes,\n  RenderBlockFunction,\n} from '../../types/editor'\nimport type {EditorSchema} from '../editor-schema'\nimport {DropIndicator} from './drop-indicator'\nimport {RenderDefaultBlockObject} from './render-default-object'\nimport {useCoreBlockElementBehaviors} from './use-core-block-element-behaviors'\n\nexport function RenderBlockObject(props: {\n  attributes: RenderElementProps['attributes']\n  blockObject: PortableTextObject | undefined\n  children: ReactElement\n  element: SlateElement\n  legacySchema: PortableTextMemberSchemaTypes\n  readOnly: boolean\n  renderBlock?: RenderBlockFunction\n  schema: EditorSchema\n}) {\n  const [dragPositionBlock, setDragPositionBlock] =\n    useState<EventPositionBlock>()\n  const blockObjectRef = useRef<HTMLDivElement>(null)\n  const selected = useSelected()\n  const focused = useSlateSelector(\n    (editor) =>\n      selected &&\n      editor.selection !== null &&\n      Range.isCollapsed(editor.selection),\n  )\n\n  useCoreBlockElementBehaviors({\n    key: props.element._key,\n    onSetDragPositionBlock: setDragPositionBlock,\n  })\n\n  const legacySchemaType = props.legacySchema.blockObjects.find(\n    (schemaType) => schemaType.name === props.element._type,\n  )\n\n  if (!legacySchemaType) {\n    console.error(\n      `Unable to find Block Object \"${props.element._type}\" in Schema`,\n    )\n  }\n\n  const blockObject = props.blockObject ?? {\n    _key: props.element._key,\n    _type: props.element._type,\n  }\n\n  return (\n    <div\n      {...props.attributes}\n      className=\"pt-block pt-object-block\"\n      data-block-key={props.element._key}\n      data-block-name={props.element._type}\n      data-block-type=\"object\"\n    >\n      {dragPositionBlock === 'start' ? <DropIndicator /> : null}\n      {props.children}\n      <div\n        ref={blockObjectRef}\n        contentEditable={false}\n        draggable={!props.readOnly}\n      >\n        {props.renderBlock && legacySchemaType ? (\n          <RenderBlock\n            renderBlock={props.renderBlock}\n            editorElementRef={blockObjectRef}\n            focused={focused}\n            path={[{_key: props.element._key}]}\n            schemaType={legacySchemaType}\n            selected={selected}\n            type={legacySchemaType}\n            value={blockObject}\n          >\n            <RenderDefaultBlockObject blockObject={blockObject} />\n          </RenderBlock>\n        ) : (\n          <RenderDefaultBlockObject blockObject={blockObject} />\n        )}\n      </div>\n      {dragPositionBlock === 'end' ? <DropIndicator /> : null}\n    </div>\n  )\n}\n\nfunction RenderBlock({\n  renderBlock,\n  children,\n  editorElementRef,\n  focused,\n  path,\n  schemaType,\n  selected,\n  type,\n  value,\n}: {\n  renderBlock: RenderBlockFunction\n} & BlockRenderProps) {\n  return renderBlock({\n    children,\n    editorElementRef,\n    focused,\n    path,\n    schemaType,\n    selected,\n    type,\n    value,\n  })\n}\n","import {useRef, type ReactElement} from 'react'\nimport {Range, type Element as SlateElement} from 'slate'\nimport {DOMEditor} from 'slate-dom'\nimport {\n  useSelected,\n  useSlateSelector,\n  useSlateStatic,\n  type RenderElementProps,\n} from 'slate-react'\nimport {getPointBlock} from '../../internal-utils/slate-utils'\nimport type {\n  BlockChildRenderProps,\n  PortableTextMemberSchemaTypes,\n  RenderChildFunction,\n} from '../../types/editor'\nimport type {EditorSchema} from '../editor-schema'\nimport {RenderDefaultInlineObject} from './render-default-object'\n\nexport function RenderInlineObject(props: {\n  attributes: RenderElementProps['attributes']\n  children: ReactElement\n  element: SlateElement\n  legacySchema: PortableTextMemberSchemaTypes\n  readOnly: boolean\n  renderChild?: RenderChildFunction\n  schema: EditorSchema\n}) {\n  const inlineObjectRef = useRef<HTMLElement>(null)\n  const slateEditor = useSlateStatic()\n  const selected = useSelected()\n  const focused = useSlateSelector(\n    (editor) =>\n      selected &&\n      editor.selection !== null &&\n      Range.isCollapsed(editor.selection),\n  )\n\n  const legacySchemaType = props.legacySchema.inlineObjects.find(\n    (inlineObject) => inlineObject.name === props.element._type,\n  )\n\n  if (!legacySchemaType) {\n    console.error(\n      `Unable to find Inline Object \"${props.element._type}\" in Schema`,\n    )\n  }\n\n  const path = DOMEditor.findPath(slateEditor, props.element)\n  const [block] = getPointBlock({\n    editor: slateEditor,\n    point: {\n      path,\n      offset: 0,\n    },\n  })\n\n  if (!block) {\n    console.error(\n      `Unable to find parent block of inline object ${props.element._key}`,\n    )\n  }\n\n  const inlineObject = {\n    _key: props.element._key,\n    _type: props.element._type,\n    ...('value' in props.element && typeof props.element.value === 'object'\n      ? props.element.value\n      : {}),\n  }\n\n  return (\n    <span\n      {...props.attributes}\n      draggable={!props.readOnly}\n      className=\"pt-inline-object\"\n      data-child-key={inlineObject._key}\n      data-child-name={inlineObject._type}\n      data-child-type=\"object\"\n    >\n      {props.children}\n      <span ref={inlineObjectRef} style={{display: 'inline-block'}}>\n        {props.renderChild && block && legacySchemaType ? (\n          <RenderChild\n            renderChild={props.renderChild}\n            annotations={[]}\n            editorElementRef={inlineObjectRef}\n            selected={selected}\n            focused={focused}\n            path={[{_key: block._key}, 'children', {_key: props.element._key}]}\n            schemaType={legacySchemaType}\n            value={inlineObject}\n            type={legacySchemaType}\n          >\n            <RenderDefaultInlineObject inlineObject={inlineObject} />\n          </RenderChild>\n        ) : (\n          <RenderDefaultInlineObject inlineObject={inlineObject} />\n        )}\n      </span>\n    </span>\n  )\n}\n\nfunction RenderChild({\n  renderChild,\n  annotations,\n  children,\n  editorElementRef,\n  focused,\n  path,\n  schemaType,\n  selected,\n  value,\n  type,\n}: {\n  renderChild: RenderChildFunction\n} & BlockChildRenderProps) {\n  return renderChild({\n    annotations,\n    children,\n    editorElementRef,\n    focused,\n    path,\n    schemaType,\n    selected,\n    value,\n    type,\n  })\n}\n","import type {PortableTextTextBlock} from '@sanity/types'\nimport {useRef, useState, type ReactElement} from 'react'\nimport {Range, type Element as SlateElement} from 'slate'\nimport {\n  useSelected,\n  useSlateSelector,\n  type RenderElementProps,\n} from 'slate-react'\nimport type {EventPositionBlock} from '../../internal-utils/event-position'\nimport type {\n  BlockListItemRenderProps,\n  BlockRenderProps,\n  BlockStyleRenderProps,\n  PortableTextMemberSchemaTypes,\n  RenderBlockFunction,\n  RenderListItemFunction,\n  RenderStyleFunction,\n} from '../../types/editor'\nimport {DropIndicator} from './drop-indicator'\nimport {useCoreBlockElementBehaviors} from './use-core-block-element-behaviors'\n\nexport function RenderTextBlock(props: {\n  attributes: RenderElementProps['attributes']\n  children: ReactElement\n  element: SlateElement\n  legacySchema: PortableTextMemberSchemaTypes\n  readOnly: boolean\n  renderBlock?: RenderBlockFunction\n  renderListItem?: RenderListItemFunction\n  renderStyle?: RenderStyleFunction\n  spellCheck?: boolean\n  textBlock: PortableTextTextBlock\n}) {\n  const [dragPositionBlock, setDragPositionBlock] =\n    useState<EventPositionBlock>()\n  const blockRef = useRef<HTMLDivElement>(null)\n\n  const selected = useSelected()\n  const focused = useSlateSelector(\n    (editor) =>\n      selected &&\n      editor.selection !== null &&\n      Range.isCollapsed(editor.selection),\n  )\n\n  useCoreBlockElementBehaviors({\n    key: props.element._key,\n    onSetDragPositionBlock: setDragPositionBlock,\n  })\n\n  const listIndex = useSlateSelector((editor) =>\n    editor.listIndexMap.get(props.textBlock._key),\n  )\n\n  let children = props.children\n\n  if (props.renderStyle && props.textBlock.style) {\n    const legacyStyleSchemaType =\n      props.textBlock.style !== undefined\n        ? props.legacySchema.styles.find(\n            (style) => style.value === props.textBlock.style,\n          )\n        : undefined\n\n    if (legacyStyleSchemaType) {\n      children = (\n        <RenderStyle\n          renderStyle={props.renderStyle}\n          block={props.textBlock}\n          editorElementRef={blockRef}\n          focused={focused}\n          path={[{_key: props.textBlock._key}]}\n          schemaType={legacyStyleSchemaType}\n          selected={selected}\n          value={props.textBlock.style}\n        >\n          {children}\n        </RenderStyle>\n      )\n    } else {\n      console.error(\n        `Unable to find Schema type for text block style ${props.textBlock.style}`,\n      )\n    }\n  }\n\n  if (props.renderListItem && props.textBlock.listItem) {\n    const legacyListItemSchemaType = props.legacySchema.lists.find(\n      (list) => list.value === props.textBlock.listItem,\n    )\n\n    if (legacyListItemSchemaType) {\n      children = (\n        <RenderListItem\n          renderListItem={props.renderListItem}\n          block={props.textBlock}\n          editorElementRef={blockRef}\n          focused={focused}\n          level={props.textBlock.level ?? 1}\n          path={[{_key: props.textBlock._key}]}\n          selected={selected}\n          value={props.textBlock.listItem}\n          schemaType={legacyListItemSchemaType}\n        >\n          {children}\n        </RenderListItem>\n      )\n    } else {\n      console.error(\n        `Unable to find Schema type for text block list item ${props.textBlock.listItem}`,\n      )\n    }\n  }\n\n  return (\n    <div\n      {...props.attributes}\n      className={[\n        'pt-block',\n        'pt-text-block',\n        ...(props.textBlock.style\n          ? [`pt-text-block-style-${props.textBlock.style}`]\n          : []),\n        ...(props.textBlock.listItem\n          ? [\n              'pt-list-item',\n              `pt-list-item-${props.textBlock.listItem}`,\n              `pt-list-item-level-${props.textBlock.level ?? 1}`,\n            ]\n          : []),\n      ].join(' ')}\n      spellCheck={props.spellCheck}\n      data-block-key={props.textBlock._key}\n      data-block-name={props.textBlock._type}\n      data-block-type=\"text\"\n      {...(props.textBlock.listItem !== undefined\n        ? {\n            'data-list-item': props.textBlock.listItem,\n          }\n        : {})}\n      {...(props.textBlock.level !== undefined\n        ? {\n            'data-level': props.textBlock.level,\n          }\n        : {})}\n      {...(props.textBlock.style !== undefined\n        ? {\n            'data-style': props.textBlock.style,\n          }\n        : {})}\n      {...(listIndex !== undefined\n        ? {\n            'data-list-index': listIndex,\n          }\n        : {})}\n    >\n      {dragPositionBlock === 'start' ? <DropIndicator /> : null}\n      <div ref={blockRef}>\n        {props.renderBlock ? (\n          <RenderBlock\n            renderBlock={props.renderBlock}\n            editorElementRef={blockRef}\n            focused={focused}\n            level={props.textBlock.level}\n            listItem={props.textBlock.listItem}\n            path={[{_key: props.textBlock._key}]}\n            selected={selected}\n            schemaType={props.legacySchema.block}\n            style={props.textBlock.style}\n            type={props.legacySchema.block}\n            value={props.textBlock}\n          >\n            {children}\n          </RenderBlock>\n        ) : (\n          children\n        )}\n      </div>\n      {dragPositionBlock === 'end' ? <DropIndicator /> : null}\n    </div>\n  )\n}\n\nfunction RenderBlock({\n  renderBlock,\n  children,\n  editorElementRef,\n  focused,\n  level,\n  listItem,\n  path,\n  selected,\n  style,\n  schemaType,\n  type,\n  value,\n}: {\n  renderBlock: RenderBlockFunction\n} & BlockRenderProps) {\n  return renderBlock({\n    children,\n    editorElementRef,\n    focused,\n    level,\n    listItem,\n    path,\n    selected,\n    style,\n    schemaType,\n    type,\n    value,\n  })\n}\n\nfunction RenderListItem({\n  renderListItem,\n  block,\n  children,\n  editorElementRef,\n  focused,\n  level,\n  path,\n  schemaType,\n  selected,\n  value,\n}: {\n  renderListItem: RenderListItemFunction\n} & BlockListItemRenderProps) {\n  return renderListItem({\n    block,\n    children,\n    editorElementRef,\n    focused,\n    level,\n    path,\n    schemaType,\n    selected,\n    value,\n  })\n}\n\nfunction RenderStyle({\n  renderStyle,\n  block,\n  children,\n  editorElementRef,\n  focused,\n  path,\n  schemaType,\n  selected,\n  value,\n}: {\n  renderStyle: RenderStyleFunction\n} & BlockStyleRenderProps) {\n  return renderStyle({\n    block,\n    children,\n    editorElementRef,\n    focused,\n    path,\n    schemaType,\n    selected,\n    value,\n  })\n}\n","import {isTextBlock} from '@portabletext/schema'\nimport {useSelector} from '@xstate/react'\nimport {useContext, type ReactElement} from 'react'\nimport type {Element as SlateElement} from 'slate'\nimport {useSlateStatic, type RenderElementProps} from 'slate-react'\nimport type {\n  RenderBlockFunction,\n  RenderChildFunction,\n  RenderListItemFunction,\n  RenderStyleFunction,\n} from '../../types/editor'\nimport {EditorActorContext} from '../editor-actor-context'\nimport {RenderBlockObject} from './render-block-object'\nimport {RenderInlineObject} from './render-inline-object'\nimport {RenderTextBlock} from './render-text-block'\n\nexport function RenderElement(props: {\n  attributes: RenderElementProps['attributes']\n  children: ReactElement\n  element: SlateElement\n  readOnly: boolean\n  renderBlock?: RenderBlockFunction\n  renderChild?: RenderChildFunction\n  renderListItem?: RenderListItemFunction\n  renderStyle?: RenderStyleFunction\n  spellCheck?: boolean\n}) {\n  const editorActor = useContext(EditorActorContext)\n  const schema = useSelector(editorActor, (s) => s.context.schema)\n  const legacySchema = useSelector(editorActor, (s) =>\n    s.context.getLegacySchema(),\n  )\n  const slateStatic = useSlateStatic()\n\n  const isInline =\n    '__inline' in props.element && props.element.__inline === true\n\n  if (isInline) {\n    return (\n      <RenderInlineObject\n        attributes={props.attributes}\n        element={props.element}\n        legacySchema={legacySchema}\n        readOnly={props.readOnly}\n        renderChild={props.renderChild}\n        schema={schema}\n      >\n        {props.children}\n      </RenderInlineObject>\n    )\n  }\n\n  const blockIndex = slateStatic.blockIndexMap.get(props.element._key)\n  const block =\n    blockIndex !== undefined ? slateStatic.value.at(blockIndex) : undefined\n\n  if (isTextBlock({schema}, block)) {\n    return (\n      <RenderTextBlock\n        attributes={props.attributes}\n        element={props.element}\n        legacySchema={legacySchema}\n        readOnly={props.readOnly}\n        renderBlock={props.renderBlock}\n        renderListItem={props.renderListItem}\n        renderStyle={props.renderStyle}\n        spellCheck={props.spellCheck}\n        textBlock={block}\n      >\n        {props.children}\n      </RenderTextBlock>\n    )\n  }\n\n  return (\n    <RenderBlockObject\n      attributes={props.attributes}\n      blockObject={block}\n      element={props.element}\n      legacySchema={legacySchema}\n      readOnly={props.readOnly}\n      renderBlock={props.renderBlock}\n      schema={schema}\n    >\n      {props.children}\n    </RenderBlockObject>\n  )\n}\n","import {useSelector} from '@xstate/react'\nimport type {Editor} from '../editor'\nimport {slateRangeToSelection} from '../internal-utils/slate-utils'\nimport type {PortableTextSlateEditor} from '../types/editor'\nimport type {InternalEditor} from './create-editor'\nimport type {EditorActor} from './editor-machine'\nimport type {EditorSnapshot} from './editor-snapshot'\n\nfunction defaultCompare<T>(a: T, b: T) {\n  return a === b\n}\n\n/**\n * @public\n */\nexport type EditorSelector<TSelected> = (snapshot: EditorSnapshot) => TSelected\n\n/**\n * @public\n * Hook to select a value from the editor state.\n * @example\n * Pass a selector as the second argument\n * ```tsx\n * import { useEditorSelector } from '@portabletext/editor'\n *\n * function MyComponent(editor) {\n *  const value = useEditorSelector(editor, selector)\n * }\n * ```\n * @example\n * Pass an inline selector as the second argument.\n * In this case, use the editor context to obtain the schema.\n * ```tsx\n * import { useEditorSelector } from '@portabletext/editor'\n *\n * function MyComponent(editor) {\n *  const schema = useEditorSelector(editor, (snapshot) => snapshot.context.schema)\n * }\n * ```\n * @group Hooks\n */\nexport function useEditorSelector<TSelected>(\n  editor: Editor,\n  selector: EditorSelector<TSelected>,\n  compare: (a: TSelected, b: TSelected) => boolean = defaultCompare,\n) {\n  return useSelector(\n    (editor as InternalEditor)._internal.editorActor,\n    (editorActorSnapshot) => {\n      const snapshot = getEditorSnapshot({\n        editorActorSnapshot,\n        slateEditorInstance: (editor as InternalEditor)._internal.slateEditor\n          .instance,\n      })\n\n      return selector(snapshot)\n    },\n    compare,\n  )\n}\n\nexport function getEditorSnapshot({\n  editorActorSnapshot,\n  slateEditorInstance,\n}: {\n  editorActorSnapshot: ReturnType<EditorActor['getSnapshot']>\n  slateEditorInstance: PortableTextSlateEditor\n}): EditorSnapshot {\n  const selection = slateEditorInstance.selection\n    ? slateRangeToSelection({\n        schema: editorActorSnapshot.context.schema,\n        editor: slateEditorInstance,\n        range: slateEditorInstance.selection,\n      })\n    : null\n\n  return {\n    blockIndexMap: slateEditorInstance.blockIndexMap,\n    context: {\n      converters: [...editorActorSnapshot.context.converters],\n      keyGenerator: editorActorSnapshot.context.keyGenerator,\n      readOnly: editorActorSnapshot.matches({'edit mode': 'read only'}),\n      schema: editorActorSnapshot.context.schema,\n      selection,\n      value: slateEditorInstance.value,\n    },\n    decoratorState: slateEditorInstance.decoratorState,\n  }\n}\n","import {isTextBlock} from '@portabletext/schema'\nimport {useSelector} from '@xstate/react'\nimport {uniq} from 'lodash'\nimport {useContext, useMemo, useRef, type ReactElement} from 'react'\nimport {useSlateStatic, type RenderLeafProps} from 'slate-react'\nimport {getFocusSpan} from '../../selectors/selector.get-focus-span'\nimport {isOverlappingSelection} from '../../selectors/selector.is-overlapping-selection'\nimport {isSelectionCollapsed} from '../../selectors/selector.is-selection-collapsed'\nimport type {\n  BlockAnnotationRenderProps,\n  BlockChildRenderProps,\n  BlockDecoratorRenderProps,\n  EditorSelection,\n  RenderAnnotationFunction,\n  RenderChildFunction,\n  RenderDecoratorFunction,\n} from '../../types/editor'\nimport {EditorActorContext} from '../editor-actor-context'\nimport {getEditorSnapshot} from '../editor-selector'\n\nexport interface RenderSpanProps extends RenderLeafProps {\n  children: ReactElement<any>\n  renderAnnotation?: RenderAnnotationFunction\n  renderChild?: RenderChildFunction\n  renderDecorator?: RenderDecoratorFunction\n  readOnly: boolean\n}\n\nexport function RenderSpan(props: RenderSpanProps) {\n  const slateEditor = useSlateStatic()\n  const editorActor = useContext(EditorActorContext)\n  const legacySchema = useSelector(editorActor, (s) =>\n    s.context.getLegacySchema(),\n  )\n  const spanRef = useRef<HTMLElement>(null)\n\n  /**\n   * A span is considered focused if the selection is collapsed and the caret\n   * is inside the span.\n   */\n  const focused = useSelector(editorActor, (editorActorSnapshot) => {\n    const snapshot = getEditorSnapshot({\n      editorActorSnapshot,\n      slateEditorInstance: slateEditor,\n    })\n\n    if (!snapshot.context.selection) {\n      return false\n    }\n\n    if (!isSelectionCollapsed(snapshot)) {\n      return false\n    }\n\n    const focusedSpan = getFocusSpan(snapshot)\n\n    if (!focusedSpan) {\n      return false\n    }\n\n    return focusedSpan.node._key === props.leaf._key\n  })\n\n  /**\n   * A span is considered selected if editor selection is overlapping with the\n   * span selection points.\n   */\n  const selected = useSelector(editorActor, (editorActorSnapshot) => {\n    const snapshot = getEditorSnapshot({\n      editorActorSnapshot,\n      slateEditorInstance: slateEditor,\n    })\n\n    if (!snapshot.context.selection) {\n      return false\n    }\n\n    const parent = props.children.props.parent\n    const block =\n      parent && isTextBlock(snapshot.context, parent) ? parent : undefined\n    const spanSelection: EditorSelection = block\n      ? {\n          anchor: {\n            path: [{_key: block._key}, 'children', {_key: props.leaf._key}],\n            offset: 0,\n          },\n          focus: {\n            path: [{_key: block._key}, 'children', {_key: props.leaf._key}],\n            offset: props.leaf.text.length,\n          },\n        }\n      : null\n\n    return isOverlappingSelection(spanSelection)(snapshot)\n  })\n\n  const parent = props.children.props.parent\n  const block = parent && slateEditor.isTextBlock(parent) ? parent : undefined\n\n  const path = useMemo(\n    () =>\n      block\n        ? [{_key: block._key}, 'children', {_key: props.leaf._key}]\n        : undefined,\n    [block, props.leaf._key],\n  )\n\n  const decoratorSchemaTypes = editorActor\n    .getSnapshot()\n    .context.schema.decorators.map((decorator) => decorator.name)\n\n  const decorators = uniq(\n    (props.leaf.marks ?? []).filter((mark) =>\n      decoratorSchemaTypes.includes(mark),\n    ),\n  )\n\n  const annotationMarkDefs = (props.leaf.marks ?? []).flatMap((mark) => {\n    if (decoratorSchemaTypes.includes(mark)) {\n      return []\n    }\n\n    const markDef = block?.markDefs?.find((markDef) => markDef._key === mark)\n\n    if (markDef) {\n      return [markDef]\n    }\n\n    return []\n  })\n\n  let children = props.children\n\n  /**\n   * Support `renderDecorator` render function for each Decorator\n   */\n  for (const mark of decorators) {\n    const legacyDecoratorSchemaType = legacySchema.decorators.find(\n      (dec) => dec.value === mark,\n    )\n\n    if (path && legacyDecoratorSchemaType && props.renderDecorator) {\n      children = (\n        <RenderDecorator\n          renderDecorator={props.renderDecorator}\n          editorElementRef={spanRef}\n          focused={focused}\n          path={path}\n          selected={selected}\n          schemaType={legacyDecoratorSchemaType}\n          value={mark}\n          type={legacyDecoratorSchemaType}\n        >\n          {children}\n        </RenderDecorator>\n      )\n    }\n  }\n\n  /**\n   * Support `renderAnnotation` render function for each Annotation\n   */\n  for (const annotationMarkDef of annotationMarkDefs) {\n    const legacyAnnotationSchemaType = legacySchema.annotations.find(\n      (t) => t.name === annotationMarkDef._type,\n    )\n    if (legacyAnnotationSchemaType) {\n      if (block && path && props.renderAnnotation) {\n        children = (\n          <span ref={spanRef}>\n            <RenderAnnotation\n              renderAnnotation={props.renderAnnotation}\n              block={block}\n              editorElementRef={spanRef}\n              focused={focused}\n              path={path}\n              selected={selected}\n              schemaType={legacyAnnotationSchemaType}\n              value={annotationMarkDef}\n              type={legacyAnnotationSchemaType}\n            >\n              {children}\n            </RenderAnnotation>\n          </span>\n        )\n      } else {\n        children = <span ref={spanRef}>{children}</span>\n      }\n    }\n  }\n\n  /**\n   * Support `renderChild` render function for the Span itself\n   */\n  if (block && path && props.renderChild) {\n    const child = block.children.find(\n      (_child) => _child._key === props.leaf._key,\n    ) // Ensure object equality\n\n    if (child) {\n      children = (\n        <RenderChild\n          renderChild={props.renderChild}\n          annotations={annotationMarkDefs}\n          editorElementRef={spanRef}\n          focused={focused}\n          path={path}\n          schemaType={legacySchema.span}\n          selected={selected}\n          value={child}\n          type={legacySchema.span}\n        >\n          {children}\n        </RenderChild>\n      )\n    }\n  }\n\n  return (\n    <span {...props.attributes} ref={spanRef}>\n      {children}\n    </span>\n  )\n}\n\nfunction RenderAnnotation({\n  renderAnnotation,\n  block,\n  children,\n  editorElementRef,\n  focused,\n  path,\n  schemaType,\n  selected,\n  value,\n  type,\n}: {\n  renderAnnotation: RenderAnnotationFunction\n} & BlockAnnotationRenderProps) {\n  return renderAnnotation({\n    block,\n    children,\n    editorElementRef,\n    focused,\n    path,\n    schemaType,\n    selected,\n    value,\n    type,\n  })\n}\n\nfunction RenderDecorator({\n  renderDecorator,\n  children,\n  editorElementRef,\n  focused,\n  path,\n  schemaType,\n  selected,\n  value,\n  type,\n}: {\n  renderDecorator: RenderDecoratorFunction\n} & BlockDecoratorRenderProps) {\n  return renderDecorator({\n    children,\n    editorElementRef,\n    focused,\n    path,\n    schemaType,\n    selected,\n    value,\n    type,\n  })\n}\n\nfunction RenderChild({\n  renderChild,\n  annotations,\n  children,\n  editorElementRef,\n  focused,\n  path,\n  schemaType,\n  selected,\n  value,\n  type,\n}: {\n  renderChild: RenderChildFunction\n} & BlockChildRenderProps) {\n  return renderChild({\n    annotations,\n    children,\n    editorElementRef,\n    focused,\n    path,\n    schemaType,\n    selected,\n    value,\n    type,\n  })\n}\n","import {useSelector} from '@xstate/react'\nimport {useContext, type CSSProperties} from 'react'\nimport type {Text} from 'slate'\nimport type {RenderLeafProps} from 'slate-react'\nimport type {\n  RangeDecoration,\n  RenderAnnotationFunction,\n  RenderChildFunction,\n  RenderDecoratorFunction,\n  RenderPlaceholderFunction,\n} from '../../types/editor'\nimport {EditorActorContext} from '../editor-actor-context'\nimport {RenderSpan} from './render-span'\n\nconst PLACEHOLDER_STYLE: CSSProperties = {\n  position: 'absolute',\n  userSelect: 'none',\n  pointerEvents: 'none',\n  left: 0,\n  right: 0,\n}\n\nexport function RenderLeaf(\n  props: RenderLeafProps & {\n    leaf: Text & {placeholder?: boolean; rangeDecoration?: RangeDecoration}\n    readOnly: boolean\n    renderAnnotation?: RenderAnnotationFunction\n    renderChild?: RenderChildFunction\n    renderDecorator?: RenderDecoratorFunction\n    renderPlaceholder?: RenderPlaceholderFunction\n  },\n) {\n  const editorActor = useContext(EditorActorContext)\n  const schema = useSelector(editorActor, (s) => s.context.schema)\n\n  if (props.leaf._type !== schema.span.name) {\n    return props.children\n  }\n\n  let renderedSpan = <RenderSpan {...props} />\n\n  if (\n    props.renderPlaceholder &&\n    props.leaf.placeholder &&\n    props.text.text === ''\n  ) {\n    return (\n      <>\n        <span style={PLACEHOLDER_STYLE} contentEditable={false}>\n          {props.renderPlaceholder()}\n        </span>\n        {renderedSpan}\n      </>\n    )\n  }\n\n  const rangeDecoration = props.leaf.rangeDecoration\n\n  if (rangeDecoration) {\n    renderedSpan = rangeDecoration.component({children: renderedSpan})\n  }\n\n  return renderedSpan\n}\n","import type {Editable} from 'slate-react'\n\nexport type RenderTextProps = Parameters<\n  NonNullable<React.ComponentProps<typeof Editable>['renderText']>\n>[0]\n\nexport function RenderText(props: RenderTextProps) {\n  return (\n    <span\n      {...props.attributes}\n      data-child-key={props.text._key}\n      data-child-name={props.text._type}\n      data-child-type=\"span\"\n    >\n      {props.children}\n    </span>\n  )\n}\n","import {createContext, useContext} from 'react'\nimport type {PortableTextEditor} from '../PortableTextEditor'\n\n/**\n * A React context for sharing the editor object.\n */\nexport const PortableTextEditorContext =\n  createContext<PortableTextEditor | null>(null)\n\n/**\n * @deprecated Use `useEditor` to get the current editor instance.\n * @public\n * Get the current editor object from the React context.\n */\nexport const usePortableTextEditor = (): PortableTextEditor => {\n  const editor = useContext(PortableTextEditorContext)\n\n  if (!editor) {\n    throw new Error(\n      `The \\`usePortableTextEditor\\` hook must be used inside the <PortableTextEditor> component's context.`,\n    )\n  }\n\n  return editor\n}\n","export interface KeyboardEventLike {\n  key: string\n  keyCode?: number\n  altKey: boolean\n  ctrlKey: boolean\n  metaKey: boolean\n  shiftKey: boolean\n}\n\ninterface HotKey {\n  keyCode?: number | undefined\n  key?: string | undefined\n  altKey: boolean | null\n  ctrlKey: boolean | null\n  metaKey: boolean | null\n  shiftKey: boolean | null\n}\n\nexport const IS_MAC =\n  typeof window !== 'undefined' &&\n  /Mac|iPod|iPhone|iPad/.test(window.navigator.userAgent)\n\ntype Modifier = 'altKey' | 'ctrlKey' | 'metaKey' | 'shiftKey'\n\nconst modifiers: Record<string, Modifier | undefined> = {\n  alt: 'altKey',\n  control: 'ctrlKey',\n  meta: 'metaKey',\n  shift: 'shiftKey',\n}\n\nconst aliases: Record<string, string | undefined> = {\n  add: '+',\n  break: 'pause',\n  cmd: 'meta',\n  command: 'meta',\n  ctl: 'control',\n  ctrl: 'control',\n  del: 'delete',\n  down: 'arrowdown',\n  esc: 'escape',\n  ins: 'insert',\n  left: 'arrowleft',\n  mod: IS_MAC ? 'meta' : 'control',\n  opt: 'alt',\n  option: 'alt',\n  return: 'enter',\n  right: 'arrowright',\n  space: ' ',\n  spacebar: ' ',\n  up: 'arrowup',\n  win: 'meta',\n  windows: 'meta',\n}\n\nconst keyCodes: Record<string, number | undefined> = {\n  'backspace': 8,\n  'tab': 9,\n  'enter': 13,\n  'shift': 16,\n  'control': 17,\n  'alt': 18,\n  'pause': 19,\n  'capslock': 20,\n  'escape': 27,\n  ' ': 32,\n  'pageup': 33,\n  'pagedown': 34,\n  'end': 35,\n  'home': 36,\n  'arrowleft': 37,\n  'arrowup': 38,\n  'arrowright': 39,\n  'arrowdown': 40,\n  'insert': 45,\n  'delete': 46,\n  'meta': 91,\n  'numlock': 144,\n  'scrolllock': 145,\n  ';': 186,\n  '=': 187,\n  ',': 188,\n  '-': 189,\n  '.': 190,\n  '/': 191,\n  '`': 192,\n  '[': 219,\n  '\\\\': 220,\n  ']': 221,\n  \"'\": 222,\n  'f1': 112,\n  'f2': 113,\n  'f3': 114,\n  'f4': 115,\n  'f5': 116,\n  'f6': 117,\n  'f7': 118,\n  'f8': 119,\n  'f9': 120,\n  'f10': 121,\n  'f11': 122,\n  'f12': 123,\n  'f13': 124,\n  'f14': 125,\n  'f15': 126,\n  'f16': 127,\n  'f17': 128,\n  'f18': 129,\n  'f19': 130,\n  'f20': 131,\n}\n\nexport function isHotkey(hotkey: string, event: KeyboardEventLike): boolean {\n  return compareHotkey(parseHotkey(hotkey), event)\n}\n\nfunction parseHotkey(hotkey: string): HotKey {\n  // Ensure that all the modifiers are set to false unless the hotkey has them.\n  const parsedHotkey: HotKey = {\n    altKey: false,\n    ctrlKey: false,\n    metaKey: false,\n    shiftKey: false,\n  }\n\n  // Special case to handle the `+` key since we use it as a separator.\n  const hotkeySegments = hotkey.replace('++', '+add').split('+')\n\n  for (const rawHotkeySegment of hotkeySegments) {\n    const optional =\n      rawHotkeySegment.endsWith('?') && rawHotkeySegment.length > 1\n    const hotkeySegment = optional\n      ? rawHotkeySegment.slice(0, -1)\n      : rawHotkeySegment\n    const keyName = toKeyName(hotkeySegment)\n    const modifier = modifiers[keyName]\n    const alias = aliases[hotkeySegment]\n    const code = keyCodes[keyName]\n\n    if (\n      hotkeySegment.length > 1 &&\n      modifier === undefined &&\n      alias === undefined &&\n      code === undefined\n    ) {\n      throw new TypeError(`Unknown modifier: \"${hotkeySegment}\"`)\n    }\n\n    if (hotkeySegments.length === 1 || modifier === undefined) {\n      parsedHotkey.key = keyName\n      parsedHotkey.keyCode = toKeyCode(hotkeySegment)\n    }\n\n    if (modifier !== undefined) {\n      parsedHotkey[modifier] = optional ? null : true\n    }\n  }\n\n  return parsedHotkey\n}\n\nfunction compareHotkey(\n  parsedHotkey: HotKey,\n  event: KeyboardEventLike,\n): boolean {\n  const matchingModifiers =\n    (parsedHotkey.altKey != null\n      ? parsedHotkey.altKey === event.altKey\n      : true) &&\n    (parsedHotkey.ctrlKey != null\n      ? parsedHotkey.ctrlKey === event.ctrlKey\n      : true) &&\n    (parsedHotkey.metaKey != null\n      ? parsedHotkey.metaKey === event.metaKey\n      : true) &&\n    (parsedHotkey.shiftKey != null\n      ? parsedHotkey.shiftKey === event.shiftKey\n      : true)\n\n  if (!matchingModifiers) {\n    return false\n  }\n\n  if (parsedHotkey.keyCode !== undefined && event.keyCode !== undefined) {\n    if (parsedHotkey.keyCode === 91 && event.keyCode === 93) {\n      return true\n    }\n\n    return parsedHotkey.keyCode === event.keyCode\n  }\n\n  return (\n    parsedHotkey.keyCode === event.keyCode ||\n    parsedHotkey.key === event.key.toLowerCase()\n  )\n}\n\nfunction toKeyCode(name: string): number {\n  const keyName = toKeyName(name)\n  const keyCode = keyCodes[keyName] ?? keyName.toUpperCase().charCodeAt(0)\n\n  return keyCode\n}\n\nfunction toKeyName(name: string): string {\n  const keyName = name.toLowerCase()\n\n  return aliases[keyName] ?? keyName\n}\n","import type {KeyboardEvent} from 'react'\nimport type {ReactEditor} from 'slate-react'\nimport {debugWithName} from '../../internal-utils/debug'\nimport {isHotkey} from '../../internal-utils/is-hotkey'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport type {HotkeyOptions} from '../../types/options'\nimport type {EditorActor} from '../editor-machine'\nimport type {PortableTextEditor} from '../PortableTextEditor'\n\nconst debug = debugWithName('plugin:withHotKeys')\n\n/**\n * This plugin takes care of all hotkeys in the editor\n *\n */\nexport function createWithHotkeys(\n  editorActor: EditorActor,\n  portableTextEditor: PortableTextEditor,\n  hotkeysFromOptions?: HotkeyOptions,\n): (editor: PortableTextSlateEditor & ReactEditor) => any {\n  const reservedHotkeys = ['enter', 'tab', 'shift', 'delete', 'end']\n  const activeHotkeys = hotkeysFromOptions ?? {}\n  return function withHotKeys(editor: PortableTextSlateEditor & ReactEditor) {\n    editor.pteWithHotKeys = (event: KeyboardEvent<HTMLDivElement>): void => {\n      // Wire up custom marks hotkeys\n      Object.keys(activeHotkeys).forEach((cat) => {\n        if (cat === 'marks') {\n          for (const hotkey in activeHotkeys[cat]) {\n            if (reservedHotkeys.includes(hotkey)) {\n              throw new Error(`The hotkey ${hotkey} is reserved!`)\n            }\n            if (isHotkey(hotkey, event.nativeEvent)) {\n              event.preventDefault()\n              const possibleMark = activeHotkeys[cat]\n              if (possibleMark) {\n                const mark = possibleMark[hotkey]\n                debug(`HotKey ${hotkey} to toggle ${mark}`)\n                editorActor.send({\n                  type: 'behavior event',\n                  behaviorEvent: {\n                    type: 'decorator.toggle',\n                    decorator: mark,\n                  },\n                  editor,\n                })\n              }\n            }\n          }\n        }\n        if (cat === 'custom') {\n          for (const hotkey in activeHotkeys[cat]) {\n            if (reservedHotkeys.includes(hotkey)) {\n              throw new Error(`The hotkey ${hotkey} is reserved!`)\n            }\n            if (isHotkey(hotkey, event.nativeEvent)) {\n              const possibleCommand = activeHotkeys[cat]\n              if (possibleCommand) {\n                const command = possibleCommand[hotkey]\n                command(event, portableTextEditor)\n              }\n            }\n          }\n        }\n      })\n    }\n    return editor\n  }\n}\n","import {Point, type Operation, type Range} from 'slate'\n\nexport function moveRangeByOperation(\n  range: Range,\n  operation: Operation,\n): Range | null {\n  const anchor = Point.transform(range.anchor, operation)\n  const focus = Point.transform(range.focus, operation)\n\n  if (anchor === null || focus === null) {\n    return null\n  }\n\n  if (Point.equals(anchor, range.anchor) && Point.equals(focus, range.focus)) {\n    return range\n  }\n\n  return {anchor, focus}\n}\n","import {isEqual} from 'lodash'\nimport {\n  Element,\n  Path,\n  Range,\n  type BaseRange,\n  type NodeEntry,\n  type Operation,\n} from 'slate'\nimport {\n  and,\n  assign,\n  fromCallback,\n  setup,\n  type AnyEventObject,\n  type CallbackLogicFunction,\n} from 'xstate'\nimport {moveRangeByOperation} from '../internal-utils/move-range-by-operation'\nimport {slateRangeToSelection} from '../internal-utils/slate-utils'\nimport {toSlateRange} from '../internal-utils/to-slate-range'\nimport {isEqualToEmptyEditor} from '../internal-utils/values'\nimport type {PortableTextSlateEditor, RangeDecoration} from '../types/editor'\nimport type {EditorSchema} from './editor-schema'\n\nconst slateOperationCallback: CallbackLogicFunction<\n  AnyEventObject,\n  {type: 'slate operation'; operation: Operation},\n  {slateEditor: PortableTextSlateEditor}\n> = ({input, sendBack}) => {\n  const originalApply = input.slateEditor.apply\n\n  input.slateEditor.apply = (op) => {\n    if (op.type !== 'set_selection') {\n      sendBack({type: 'slate operation', operation: op})\n    }\n\n    originalApply(op)\n  }\n\n  return () => {\n    input.slateEditor.apply = originalApply\n  }\n}\n\nexport type DecoratedRange = BaseRange & {rangeDecoration: RangeDecoration}\n\nexport const rangeDecorationsMachine = setup({\n  types: {\n    context: {} as {\n      pendingRangeDecorations: Array<RangeDecoration>\n      skipSetup: boolean\n      readOnly: boolean\n      schema: EditorSchema\n      slateEditor: PortableTextSlateEditor\n      decorate: {fn: (nodeEntry: NodeEntry) => Array<BaseRange>}\n    },\n    input: {} as {\n      rangeDecorations: Array<RangeDecoration>\n      readOnly: boolean\n      schema: EditorSchema\n      skipSetup: boolean\n      slateEditor: PortableTextSlateEditor\n    },\n    events: {} as\n      | {\n          type: 'ready'\n        }\n      | {\n          type: 'range decorations updated'\n          rangeDecorations: Array<RangeDecoration>\n        }\n      | {\n          type: 'slate operation'\n          operation: Operation\n        }\n      | {\n          type: 'update read only'\n          readOnly: boolean\n        },\n  },\n  actions: {\n    'update pending range decorations': assign({\n      pendingRangeDecorations: ({context, event}) => {\n        if (event.type !== 'range decorations updated') {\n          return context.pendingRangeDecorations\n        }\n\n        return event.rangeDecorations\n      },\n    }),\n    'set up initial range decorations': ({context}) => {\n      const rangeDecorationState: Array<DecoratedRange> = []\n\n      for (const rangeDecoration of context.pendingRangeDecorations) {\n        const slateRange = toSlateRange({\n          context: {\n            schema: context.schema,\n            value: context.slateEditor.value,\n            selection: rangeDecoration.selection,\n          },\n          blockIndexMap: context.slateEditor.blockIndexMap,\n        })\n\n        if (!Range.isRange(slateRange)) {\n          rangeDecoration.onMoved?.({\n            newSelection: null,\n            rangeDecoration,\n            origin: 'local',\n          })\n          continue\n        }\n\n        rangeDecorationState.push({\n          rangeDecoration,\n          ...slateRange,\n        })\n      }\n\n      context.slateEditor.decoratedRanges = rangeDecorationState\n    },\n    'update range decorations': ({context, event}) => {\n      if (event.type !== 'range decorations updated') {\n        return\n      }\n\n      const rangeDecorationState: Array<DecoratedRange> = []\n\n      for (const rangeDecoration of event.rangeDecorations) {\n        const slateRange = toSlateRange({\n          context: {\n            schema: context.schema,\n            value: context.slateEditor.value,\n            selection: rangeDecoration.selection,\n          },\n          blockIndexMap: context.slateEditor.blockIndexMap,\n        })\n\n        if (!Range.isRange(slateRange)) {\n          rangeDecoration.onMoved?.({\n            newSelection: null,\n            rangeDecoration,\n            origin: 'local',\n          })\n          continue\n        }\n\n        rangeDecorationState.push({\n          rangeDecoration,\n          ...slateRange,\n        })\n      }\n\n      context.slateEditor.decoratedRanges = rangeDecorationState\n    },\n\n    'move range decorations': ({context, event}) => {\n      if (event.type !== 'slate operation') {\n        return\n      }\n\n      const rangeDecorationState: Array<DecoratedRange> = []\n\n      for (const decoratedRange of context.slateEditor.decoratedRanges) {\n        const slateRange = toSlateRange({\n          context: {\n            schema: context.schema,\n            value: context.slateEditor.value,\n            selection: decoratedRange.rangeDecoration.selection,\n          },\n          blockIndexMap: context.slateEditor.blockIndexMap,\n        })\n\n        if (!Range.isRange(slateRange)) {\n          decoratedRange.rangeDecoration.onMoved?.({\n            newSelection: null,\n            rangeDecoration: decoratedRange.rangeDecoration,\n            origin: 'local',\n          })\n          continue\n        }\n\n        let newRange: BaseRange | null | undefined\n\n        newRange = moveRangeByOperation(slateRange, event.operation)\n        if (\n          (newRange && newRange !== slateRange) ||\n          (newRange === null && slateRange)\n        ) {\n          const newRangeSelection = newRange\n            ? slateRangeToSelection({\n                schema: context.schema,\n                editor: context.slateEditor,\n                range: newRange,\n              })\n            : null\n\n          decoratedRange.rangeDecoration.onMoved?.({\n            newSelection: newRangeSelection,\n            rangeDecoration: decoratedRange.rangeDecoration,\n            origin: 'local',\n          })\n        }\n\n        // If the newRange is null, it means that the range is not valid anymore and should be removed\n        // If it's undefined, it means that the slateRange is still valid and should be kept\n        if (newRange !== null) {\n          rangeDecorationState.push({\n            ...(newRange || slateRange),\n            rangeDecoration: {\n              ...decoratedRange.rangeDecoration,\n              selection: slateRangeToSelection({\n                schema: context.schema,\n                editor: context.slateEditor,\n                range: newRange,\n              }),\n            },\n          })\n        }\n      }\n\n      context.slateEditor.decoratedRanges = rangeDecorationState\n    },\n    'assign readOnly': assign({\n      readOnly: ({context, event}) => {\n        if (event.type !== 'update read only') {\n          return context.readOnly\n        }\n\n        return event.readOnly\n      },\n    }),\n    'update decorate': assign({\n      decorate: ({context}) => {\n        return {\n          fn: createDecorate(context.schema, context.slateEditor),\n        }\n      },\n    }),\n  },\n  actors: {\n    'slate operation listener': fromCallback(slateOperationCallback),\n  },\n  guards: {\n    'has pending range decorations': ({context}) =>\n      context.pendingRangeDecorations.length > 0,\n    'has range decorations': ({context}) =>\n      context.slateEditor.decoratedRanges.length > 0,\n    'has different decorations': ({context, event}) => {\n      if (event.type !== 'range decorations updated') {\n        return false\n      }\n\n      const existingRangeDecorations = context.slateEditor.decoratedRanges.map(\n        (decoratedRange) => ({\n          anchor: decoratedRange.rangeDecoration.selection?.anchor,\n          focus: decoratedRange.rangeDecoration.selection?.focus,\n          payload: decoratedRange.rangeDecoration.payload,\n        }),\n      )\n\n      const newRangeDecorations = event.rangeDecorations.map(\n        (rangeDecoration) => ({\n          anchor: rangeDecoration.selection?.anchor,\n          focus: rangeDecoration.selection?.focus,\n          payload: rangeDecoration.payload,\n        }),\n      )\n\n      const different = !isEqual(existingRangeDecorations, newRangeDecorations)\n\n      return different\n    },\n    'not read only': ({context}) => !context.readOnly,\n    'should skip setup': ({context}) => context.skipSetup,\n  },\n}).createMachine({\n  id: 'range decorations',\n  context: ({input}) => ({\n    readOnly: input.readOnly,\n    pendingRangeDecorations: input.rangeDecorations,\n    decoratedRanges: [],\n    skipSetup: input.skipSetup,\n    schema: input.schema,\n    slateEditor: input.slateEditor,\n    decorate: {fn: createDecorate(input.schema, input.slateEditor)},\n  }),\n  invoke: {\n    src: 'slate operation listener',\n    input: ({context}) => ({slateEditor: context.slateEditor}),\n  },\n  on: {\n    'update read only': {\n      actions: ['assign readOnly'],\n    },\n  },\n  initial: 'setting up',\n  states: {\n    'setting up': {\n      always: [\n        {\n          guard: and(['should skip setup', 'has pending range decorations']),\n          target: 'ready',\n          actions: ['set up initial range decorations', 'update decorate'],\n        },\n        {\n          guard: 'should skip setup',\n          target: 'ready',\n        },\n      ],\n      on: {\n        'range decorations updated': {\n          actions: ['update pending range decorations'],\n        },\n        'ready': [\n          {\n            target: 'ready',\n            guard: 'has pending range decorations',\n            actions: ['set up initial range decorations', 'update decorate'],\n          },\n          {\n            target: 'ready',\n          },\n        ],\n      },\n    },\n    'ready': {\n      initial: 'idle',\n      on: {\n        'range decorations updated': {\n          target: '.idle',\n          guard: 'has different decorations',\n          actions: ['update range decorations', 'update decorate'],\n        },\n      },\n      states: {\n        'idle': {\n          on: {\n            'slate operation': {\n              target: 'moving range decorations',\n              guard: and(['has range decorations', 'not read only']),\n            },\n          },\n        },\n        'moving range decorations': {\n          entry: ['move range decorations'],\n          always: {\n            target: 'idle',\n          },\n        },\n      },\n    },\n  },\n})\n\nfunction createDecorate(\n  schema: EditorSchema,\n  slateEditor: PortableTextSlateEditor,\n) {\n  return function decorate([node, path]: NodeEntry): Array<BaseRange> {\n    if (isEqualToEmptyEditor(slateEditor.children, schema)) {\n      return [\n        {\n          anchor: {\n            path: [0, 0],\n            offset: 0,\n          },\n          focus: {\n            path: [0, 0],\n            offset: 0,\n          },\n          placeholder: true,\n        } as BaseRange,\n      ]\n    }\n\n    // Editor node has a path length of 0 (should never be decorated)\n    if (path.length === 0) {\n      return []\n    }\n\n    if (!Element.isElement(node) || node.children.length === 0) {\n      return []\n    }\n\n    const blockIndex = path.at(0)\n\n    if (blockIndex === undefined) {\n      return []\n    }\n\n    return slateEditor.decoratedRanges.filter((decoratedRange) => {\n      // Special case in order to only return one decoration for collapsed ranges\n      if (Range.isCollapsed(decoratedRange)) {\n        // Collapsed ranges should only be decorated if they are on a block child level (length 2)\n        return node.children.some(\n          (_, childIndex) =>\n            Path.equals(decoratedRange.anchor.path, [blockIndex, childIndex]) &&\n            Path.equals(decoratedRange.focus.path, [blockIndex, childIndex]),\n        )\n      }\n\n      return (\n        Range.intersection(decoratedRange, {\n          anchor: {path, offset: 0},\n          focus: {path, offset: 0},\n        }) || Range.includes(decoratedRange, path)\n      )\n    })\n  }\n}\n","import {createContext} from 'react'\nimport type {RelayActor} from './relay-machine'\n\nexport const RelayActorContext = createContext<RelayActor>({} as RelayActor)\n","import {Editor, Transforms} from 'slate'\nimport {ReactEditor} from 'slate-react'\nimport {setup} from 'xstate'\nimport {debugWithName} from '../internal-utils/debug'\nimport type {PortableTextSlateEditor} from '../types/editor'\n\nconst debug = debugWithName('validate selection machine')\n\nconst validateSelectionSetup = setup({\n  types: {\n    context: {} as {\n      slateEditor: PortableTextSlateEditor\n    },\n    input: {} as {\n      slateEditor: PortableTextSlateEditor\n    },\n    events: {} as {\n      type: 'validate selection'\n      editorElement: HTMLDivElement\n    },\n  },\n  guards: {\n    'pending operations': ({context}) =>\n      context.slateEditor.operations.length > 0,\n  },\n})\n\nconst validateSelectionAction = validateSelectionSetup.createAction(\n  ({context, event}) => {\n    validateSelection(context.slateEditor, event.editorElement)\n  },\n)\n\nexport const validateSelectionMachine = validateSelectionSetup.createMachine({\n  id: 'validate selection',\n  context: ({input}) => ({\n    slateEditor: input.slateEditor,\n  }),\n  initial: 'idle',\n  states: {\n    idle: {\n      on: {\n        'validate selection': [\n          {\n            guard: 'pending operations',\n            target: 'waiting',\n          },\n          {\n            actions: [validateSelectionAction],\n            target: 'idle',\n          },\n        ],\n      },\n    },\n    waiting: {\n      after: {\n        0: [\n          {\n            guard: 'pending operations',\n            target: '.',\n            reenter: true,\n          },\n          {\n            target: 'idle',\n            actions: [validateSelectionAction],\n          },\n        ],\n      },\n      on: {\n        'validate selection': {\n          target: '.',\n          reenter: true,\n        },\n      },\n    },\n  },\n})\n\n// This function will handle unexpected DOM changes inside the Editable rendering,\n// and make sure that we can maintain a stable slateEditor.selection when that happens.\n//\n// For example, if this Editable is rendered inside something that might re-render\n// this component (hidden contexts) while the user is still actively changing the\n// contentEditable, this could interfere with the intermediate DOM selection,\n// which again could be picked up by ReactEditor's event listeners.\n// If that range is invalid at that point, the slate.editorSelection could be\n// set either wrong, or invalid, to which slateEditor will throw exceptions\n// that are impossible to recover properly from or result in a wrong selection.\n//\n// Also the other way around, when the ReactEditor will try to create a DOM Range\n// from the current slateEditor.selection, it may throw unrecoverable errors\n// if the current editor.selection is invalid according to the DOM.\n// If this is the case, default to selecting the top of the document, if the\n// user already had a selection.\nfunction validateSelection(\n  slateEditor: PortableTextSlateEditor,\n  editorElement: HTMLDivElement,\n) {\n  if (!slateEditor.selection) {\n    return\n  }\n\n  let root: Document | ShadowRoot | undefined\n\n  try {\n    root = ReactEditor.findDocumentOrShadowRoot(slateEditor)\n  } catch {}\n\n  if (!root) {\n    // The editor has most likely been unmounted\n    return\n  }\n\n  // Return if the editor isn't the active element\n  if (editorElement !== root.activeElement) {\n    return\n  }\n  const window = ReactEditor.getWindow(slateEditor)\n  const domSelection = window.getSelection()\n  if (!domSelection || domSelection.rangeCount === 0) {\n    return\n  }\n  const existingDOMRange = domSelection.getRangeAt(0)\n  try {\n    const newDOMRange = ReactEditor.toDOMRange(\n      slateEditor,\n      slateEditor.selection,\n    )\n    if (\n      newDOMRange.startOffset !== existingDOMRange.startOffset ||\n      newDOMRange.endOffset !== existingDOMRange.endOffset\n    ) {\n      debug('DOM range out of sync, validating selection')\n      // Remove all ranges temporary\n      domSelection?.removeAllRanges()\n      // Set the correct range\n      domSelection.addRange(newDOMRange)\n    }\n  } catch {\n    debug(`Could not resolve selection, selecting top document`)\n    // Deselect the editor\n    Transforms.deselect(slateEditor)\n    // Select top document if there is a top block to select\n    if (slateEditor.children.length > 0) {\n      Transforms.select(slateEditor, Editor.start(slateEditor, []))\n    }\n    slateEditor.onChange()\n  }\n}\n","import type {Editor, Range} from 'slate'\nimport type {EditorSelection} from '../types/editor'\n\n// Is the editor currently receiving remote changes that are being applied to the content?\nexport const IS_PROCESSING_REMOTE_CHANGES: WeakMap<Editor, boolean> =\n  new WeakMap()\n\nexport const KEY_TO_SLATE_ELEMENT: WeakMap<Editor, any | undefined> =\n  new WeakMap()\nexport const KEY_TO_VALUE_ELEMENT: WeakMap<Editor, any | undefined> =\n  new WeakMap()\n\n// Keep object relation to slate range in the portable-text-range\nexport const SLATE_TO_PORTABLE_TEXT_RANGE = new WeakMap<\n  Range,\n  EditorSelection\n>()\n","import {useActorRef, useSelector} from '@xstate/react'\nimport {noop} from 'lodash'\nimport {\n  forwardRef,\n  useCallback,\n  useContext,\n  useEffect,\n  useMemo,\n  useState,\n  type ClipboardEvent,\n  type FocusEventHandler,\n  type KeyboardEvent,\n  type TextareaHTMLAttributes,\n} from 'react'\nimport {Editor, Transforms, type Text} from 'slate'\nimport {\n  ReactEditor,\n  Editable as SlateEditable,\n  useSlate,\n  type RenderElementProps,\n  type RenderLeafProps,\n} from 'slate-react'\nimport {debugWithName} from '../internal-utils/debug'\nimport {getEventPosition} from '../internal-utils/event-position'\nimport {normalizeSelection} from '../internal-utils/selection'\nimport {slateRangeToSelection} from '../internal-utils/slate-utils'\nimport {toSlateRange} from '../internal-utils/to-slate-range'\nimport {fromSlateValue, isEqualToEmptyEditor} from '../internal-utils/values'\nimport type {\n  EditorSelection,\n  OnCopyFn,\n  OnPasteFn,\n  RangeDecoration,\n  RenderAnnotationFunction,\n  RenderBlockFunction,\n  RenderChildFunction,\n  RenderDecoratorFunction,\n  RenderListItemFunction,\n  RenderPlaceholderFunction,\n  RenderStyleFunction,\n  ScrollSelectionIntoViewFunction,\n} from '../types/editor'\nimport type {HotkeyOptions} from '../types/options'\nimport {parseBlocks} from '../utils/parse-blocks'\nimport {RenderElement} from './components/render-element'\nimport {RenderLeaf} from './components/render-leaf'\nimport {RenderText, type RenderTextProps} from './components/render-text'\nimport {EditorActorContext} from './editor-actor-context'\nimport {usePortableTextEditor} from './hooks/usePortableTextEditor'\nimport {createWithHotkeys} from './plugins/createWithHotKeys'\nimport {rangeDecorationsMachine} from './range-decorations-machine'\nimport {RelayActorContext} from './relay-actor-context'\nimport {validateSelectionMachine} from './validate-selection-machine'\nimport {KEY_TO_VALUE_ELEMENT} from './weakMaps'\n\nconst debug = debugWithName('component:Editable')\n\n/**\n * @public\n */\nexport type PortableTextEditableProps = Omit<\n  TextareaHTMLAttributes<HTMLDivElement>,\n  'onPaste' | 'onCopy' | 'onBeforeInput'\n> & {\n  ref?: React.Ref<HTMLDivElement>\n  hotkeys?: HotkeyOptions\n  onBeforeInput?: (event: InputEvent) => void\n  onPaste?: OnPasteFn\n  onCopy?: OnCopyFn\n  rangeDecorations?: RangeDecoration[]\n  renderAnnotation?: RenderAnnotationFunction\n  renderBlock?: RenderBlockFunction\n  renderChild?: RenderChildFunction\n  renderDecorator?: RenderDecoratorFunction\n  renderListItem?: RenderListItemFunction\n  renderPlaceholder?: RenderPlaceholderFunction\n  renderStyle?: RenderStyleFunction\n  scrollSelectionIntoView?: ScrollSelectionIntoViewFunction\n  selection?: EditorSelection\n  spellCheck?: boolean\n}\n\n/**\n * @public\n *\n *\n * The core component that renders the editor. Must be placed within the {@link EditorProvider} component.\n *\n * @example\n * ```tsx\n * import { PortableTextEditable, EditorProvider } from '@portabletext/editor'\n *\n * function MyComponent() {\n *  return (\n *   <EditorProvider>\n *    <PortableTextEditable />\n *  </EditorProvider>\n *  )\n * }\n * ```\n * @group Components\n */\nexport const PortableTextEditable = forwardRef<\n  Omit<HTMLDivElement, 'as' | 'onPaste' | 'onBeforeInput'>,\n  PortableTextEditableProps\n>(function PortableTextEditable(props, forwardedRef) {\n  const {\n    hotkeys,\n    onBlur,\n    onFocus,\n    onBeforeInput,\n    onPaste,\n    onCopy,\n    onCut,\n    onClick,\n    onDragStart,\n    onDrag,\n    onDragEnd,\n    onDragEnter,\n    onDragOver,\n    onDrop,\n    onDragLeave,\n    rangeDecorations,\n    renderAnnotation,\n    renderBlock,\n    renderChild,\n    renderDecorator,\n    renderListItem,\n    renderPlaceholder,\n    renderStyle,\n    selection: propsSelection,\n    scrollSelectionIntoView,\n    spellCheck,\n    ...restProps\n  } = props\n\n  const portableTextEditor = usePortableTextEditor()\n  const [hasInvalidValue, setHasInvalidValue] = useState(false)\n\n  const editorActor = useContext(EditorActorContext)\n  const relayActor = useContext(RelayActorContext)\n  const readOnly = useSelector(editorActor, (s) =>\n    s.matches({'edit mode': 'read only'}),\n  )\n  const slateEditor = useSlate()\n  const validateSelectionActor = useActorRef(validateSelectionMachine, {\n    input: {\n      slateEditor,\n    },\n  })\n\n  const rangeDecorationsActor = useActorRef(rangeDecorationsMachine, {\n    input: {\n      rangeDecorations: rangeDecorations ?? [],\n      readOnly,\n      schema: editorActor.getSnapshot().context.schema,\n      slateEditor,\n      skipSetup: !editorActor.getSnapshot().matches({setup: 'setting up'}),\n    },\n  })\n  const decorate = useSelector(\n    rangeDecorationsActor,\n    (s) => s.context.decorate?.fn,\n  )\n\n  useEffect(() => {\n    rangeDecorationsActor.send({\n      type: 'update read only',\n      readOnly,\n    })\n  }, [rangeDecorationsActor, readOnly])\n\n  useEffect(() => {\n    rangeDecorationsActor.send({\n      type: 'range decorations updated',\n      rangeDecorations: rangeDecorations ?? [],\n    })\n  }, [rangeDecorationsActor, rangeDecorations])\n\n  // Output a minimal React editor inside Editable when in readOnly mode.\n  // NOTE: make sure all the plugins used here can be safely run over again at any point.\n  // There will be a problem if they redefine editor methods and then calling the original method within themselves.\n  useMemo(() => {\n    // React/UI-specific plugins\n    if (readOnly) {\n      return slateEditor\n    }\n    const withHotKeys = createWithHotkeys(\n      editorActor,\n      portableTextEditor,\n      hotkeys,\n    )\n\n    return withHotKeys(slateEditor)\n  }, [editorActor, hotkeys, portableTextEditor, readOnly, slateEditor])\n\n  const renderElement = useCallback(\n    (eProps: RenderElementProps) => (\n      <RenderElement\n        {...eProps}\n        readOnly={readOnly}\n        renderBlock={renderBlock}\n        renderChild={renderChild}\n        renderListItem={renderListItem}\n        renderStyle={renderStyle}\n        spellCheck={spellCheck}\n      />\n    ),\n    [\n      spellCheck,\n      readOnly,\n      renderBlock,\n      renderChild,\n      renderListItem,\n      renderStyle,\n    ],\n  )\n\n  const renderLeaf = useCallback(\n    (\n      leafProps: RenderLeafProps & {\n        leaf: Text & {placeholder?: boolean; rangeDecoration?: RangeDecoration}\n      },\n    ) => (\n      <RenderLeaf\n        {...leafProps}\n        readOnly={readOnly}\n        renderAnnotation={renderAnnotation}\n        renderChild={renderChild}\n        renderDecorator={renderDecorator}\n        renderPlaceholder={renderPlaceholder}\n      />\n    ),\n    [\n      readOnly,\n      renderAnnotation,\n      renderChild,\n      renderDecorator,\n      renderPlaceholder,\n    ],\n  )\n\n  const renderText = useCallback(\n    (props: RenderTextProps) => <RenderText {...props} />,\n    [],\n  )\n\n  const restoreSelectionFromProps = useCallback(() => {\n    if (propsSelection) {\n      debug(`Selection from props ${JSON.stringify(propsSelection)}`)\n      const normalizedSelection = normalizeSelection(\n        propsSelection,\n        fromSlateValue(\n          slateEditor.children,\n          editorActor.getSnapshot().context.schema.block.name,\n        ),\n      )\n      if (normalizedSelection !== null) {\n        debug(\n          `Normalized selection from props ${JSON.stringify(normalizedSelection)}`,\n        )\n        const slateRange = toSlateRange({\n          context: {\n            schema: editorActor.getSnapshot().context.schema,\n            value: slateEditor.value,\n            selection: normalizedSelection,\n          },\n          blockIndexMap: slateEditor.blockIndexMap,\n        })\n        if (slateRange) {\n          Transforms.select(slateEditor, slateRange)\n          // Output selection here in those cases where the editor selection was the same, and there are no set_selection operations made.\n          // The selection is usually automatically emitted to change$ by the withPortableTextSelections plugin whenever there is a set_selection operation applied.\n          if (!slateEditor.operations.some((o) => o.type === 'set_selection')) {\n            editorActor.send({\n              type: 'update selection',\n              selection: normalizedSelection,\n            })\n          }\n          slateEditor.onChange()\n        }\n      }\n    }\n  }, [editorActor, propsSelection, slateEditor])\n\n  // Restore selection from props when the editor has been initialized properly with it's value\n  useEffect(() => {\n    const onReady = editorActor.on('ready', () => {\n      rangeDecorationsActor.send({\n        type: 'ready',\n      })\n\n      restoreSelectionFromProps()\n    })\n\n    const onInvalidValue = editorActor.on('invalid value', () => {\n      setHasInvalidValue(true)\n    })\n\n    const onValueChanged = editorActor.on('value changed', () => {\n      setHasInvalidValue(false)\n    })\n\n    return () => {\n      onReady.unsubscribe()\n      onInvalidValue.unsubscribe()\n      onValueChanged.unsubscribe()\n    }\n  }, [rangeDecorationsActor, editorActor, restoreSelectionFromProps])\n\n  // Restore selection from props when it changes\n  useEffect(() => {\n    if (propsSelection && !hasInvalidValue) {\n      restoreSelectionFromProps()\n    }\n  }, [hasInvalidValue, propsSelection, restoreSelectionFromProps])\n\n  // Handle from props onCopy function\n  const handleCopy = useCallback(\n    (event: ClipboardEvent<HTMLDivElement>): void | ReactEditor => {\n      if (onCopy) {\n        const result = onCopy(event)\n        // CopyFn may return something to avoid doing default stuff\n        if (result !== undefined) {\n          event.preventDefault()\n        }\n      } else if (event.nativeEvent.clipboardData) {\n        // Prevent Slate from handling the event\n        event.stopPropagation()\n        event.preventDefault()\n\n        const selection = slateEditor.selection\n          ? slateRangeToSelection({\n              schema: editorActor.getSnapshot().context.schema,\n              editor: slateEditor,\n              range: slateEditor.selection,\n            })\n          : undefined\n        const position = selection ? {selection} : undefined\n\n        if (!position) {\n          console.warn('Could not find position for copy event')\n          return\n        }\n\n        editorActor.send({\n          type: 'behavior event',\n          behaviorEvent: {\n            type: 'clipboard.copy',\n            originEvent: {\n              dataTransfer: event.nativeEvent.clipboardData,\n            },\n            position,\n          },\n          editor: slateEditor,\n          nativeEvent: event,\n        })\n      }\n    },\n    [onCopy, editorActor, slateEditor],\n  )\n\n  const handleCut = useCallback(\n    (event: ClipboardEvent<HTMLDivElement>) => {\n      if (onCut) {\n        const result = onCut(event)\n        // CutFn may return something to avoid doing default stuff\n        if (result !== undefined) {\n          event.preventDefault()\n        }\n      } else if (event.nativeEvent.clipboardData) {\n        // Prevent Slate from handling the event\n        event.stopPropagation()\n        event.preventDefault()\n\n        const selection = editorActor.getSnapshot().context.selection\n        const position = selection ? {selection} : undefined\n\n        if (!position) {\n          console.warn('Could not find position for cut event')\n          return\n        }\n\n        editorActor.send({\n          type: 'behavior event',\n          behaviorEvent: {\n            type: 'clipboard.cut',\n            originEvent: {\n              dataTransfer: event.nativeEvent.clipboardData,\n            },\n            position,\n          },\n          editor: slateEditor,\n          nativeEvent: event,\n        })\n      }\n    },\n    [onCut, editorActor, slateEditor],\n  )\n\n  // Handle incoming pasting events in the editor\n  const handlePaste = useCallback(\n    (event: ClipboardEvent<HTMLDivElement>): Promise<void> | void => {\n      const value = fromSlateValue(\n        slateEditor.children,\n        editorActor.getSnapshot().context.schema.block.name,\n        KEY_TO_VALUE_ELEMENT.get(slateEditor),\n      )\n      const ptRange = slateEditor.selection\n        ? slateRangeToSelection({\n            schema: editorActor.getSnapshot().context.schema,\n            editor: slateEditor,\n            range: slateEditor.selection,\n          })\n        : null\n      const path = ptRange?.focus.path || []\n      const onPasteResult = onPaste?.({\n        event,\n        value,\n        path,\n        schemaTypes: portableTextEditor.schemaTypes,\n      })\n\n      if (onPasteResult || !slateEditor.selection) {\n        event.preventDefault()\n\n        // Resolve it as promise (can be either async promise or sync return value)\n        relayActor.send({type: 'loading'})\n\n        Promise.resolve(onPasteResult)\n          .then((result) => {\n            debug('Custom paste function from client resolved', result)\n\n            if (!result || !result.insert) {\n              debug('No result from custom paste handler, pasting normally')\n\n              const selection = editorActor.getSnapshot().context.selection\n              const position = selection ? {selection} : undefined\n\n              if (!position) {\n                console.warn('Could not find position for paste event')\n                return\n              }\n\n              editorActor.send({\n                type: 'behavior event',\n                behaviorEvent: {\n                  type: 'clipboard.paste',\n                  originEvent: {\n                    dataTransfer: event.clipboardData,\n                  },\n                  position,\n                },\n                editor: slateEditor,\n                nativeEvent: event,\n              })\n            } else if (result.insert) {\n              editorActor.send({\n                type: 'behavior event',\n                behaviorEvent: {\n                  type: 'insert.blocks',\n                  blocks: parseBlocks({\n                    context: {\n                      keyGenerator:\n                        editorActor.getSnapshot().context.keyGenerator,\n                      schema: editorActor.getSnapshot().context.schema,\n                    },\n                    blocks: result.insert,\n                    options: {\n                      removeUnusedMarkDefs: true,\n                      validateFields: false,\n                    },\n                  }),\n                  placement: 'auto',\n                },\n                editor: slateEditor,\n              })\n            } else {\n              console.warn(\n                'Your onPaste function returned something unexpected:',\n                result,\n              )\n            }\n          })\n          .catch((error) => {\n            console.warn(error)\n\n            return error\n          })\n          .finally(() => {\n            relayActor.send({type: 'done loading'})\n          })\n      } else if (event.nativeEvent.clipboardData) {\n        // Prevent Slate from handling the event\n        event.preventDefault()\n        event.stopPropagation()\n\n        const selection = editorActor.getSnapshot().context.selection\n        const position = selection ? {selection} : undefined\n\n        if (!position) {\n          console.warn('Could not find position for paste event')\n          return\n        }\n\n        editorActor.send({\n          type: 'behavior event',\n          behaviorEvent: {\n            type: 'clipboard.paste',\n            originEvent: {\n              dataTransfer: event.nativeEvent.clipboardData,\n            },\n            position,\n          },\n          editor: slateEditor,\n          nativeEvent: event,\n        })\n      }\n\n      debug('No result from custom paste handler, pasting normally')\n    },\n    [editorActor, onPaste, portableTextEditor, relayActor, slateEditor],\n  )\n\n  const handleOnFocus: FocusEventHandler<HTMLDivElement> = useCallback(\n    (event) => {\n      if (onFocus) {\n        onFocus(event)\n      }\n\n      if (!event.isDefaultPrevented()) {\n        relayActor.send({type: 'focused', event})\n\n        if (\n          !slateEditor.selection &&\n          isEqualToEmptyEditor(\n            slateEditor.children,\n            editorActor.getSnapshot().context.schema,\n          )\n        ) {\n          Transforms.select(slateEditor, Editor.start(slateEditor, []))\n          slateEditor.onChange()\n        }\n      }\n    },\n    [editorActor, onFocus, relayActor, slateEditor],\n  )\n\n  const handleClick = useCallback(\n    (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n      if (onClick) {\n        onClick(event)\n      }\n\n      if (event.isDefaultPrevented() || event.isPropagationStopped()) {\n        return\n      }\n\n      const position = getEventPosition({\n        editorActor,\n        slateEditor,\n        event: event.nativeEvent,\n      })\n\n      if (position) {\n        editorActor.send({\n          type: 'behavior event',\n          behaviorEvent: {\n            type: 'mouse.click',\n            position,\n          },\n          editor: slateEditor,\n          nativeEvent: event,\n        })\n      }\n    },\n    [onClick, editorActor, slateEditor],\n  )\n\n  const handleOnBlur: FocusEventHandler<HTMLDivElement> = useCallback(\n    (event) => {\n      if (onBlur) {\n        onBlur(event)\n      }\n      if (!event.isPropagationStopped()) {\n        relayActor.send({type: 'blurred', event})\n      }\n    },\n    [relayActor, onBlur],\n  )\n\n  const handleOnBeforeInput = useCallback(\n    (event: InputEvent) => {\n      if (onBeforeInput) {\n        onBeforeInput(event)\n      }\n    },\n    [onBeforeInput],\n  )\n\n  const handleKeyDown = useCallback(\n    (event: KeyboardEvent<HTMLDivElement>) => {\n      if (props.onKeyDown) {\n        props.onKeyDown(event)\n      }\n      if (!event.isDefaultPrevented()) {\n        slateEditor.pteWithHotKeys(event)\n      }\n      if (!event.isDefaultPrevented()) {\n        editorActor.send({\n          type: 'behavior event',\n          behaviorEvent: {\n            type: 'keyboard.keydown',\n            originEvent: {\n              key: event.key,\n              code: event.code,\n              altKey: event.altKey,\n              ctrlKey: event.ctrlKey,\n              metaKey: event.metaKey,\n              shiftKey: event.shiftKey,\n            },\n          },\n          editor: slateEditor,\n          nativeEvent: event,\n        })\n      }\n    },\n    [props, editorActor, slateEditor],\n  )\n\n  const handleKeyUp = useCallback(\n    (event: KeyboardEvent<HTMLDivElement>) => {\n      if (props.onKeyUp) {\n        props.onKeyUp(event)\n      }\n      if (!event.isDefaultPrevented()) {\n        editorActor.send({\n          type: 'behavior event',\n          behaviorEvent: {\n            type: 'keyboard.keyup',\n            originEvent: {\n              key: event.key,\n              code: event.code,\n              altKey: event.altKey,\n              ctrlKey: event.ctrlKey,\n              metaKey: event.metaKey,\n              shiftKey: event.shiftKey,\n            },\n          },\n          editor: slateEditor,\n          nativeEvent: event,\n        })\n      }\n    },\n    [props, editorActor, slateEditor],\n  )\n\n  const scrollSelectionIntoViewToSlate = useMemo(() => {\n    // Use slate-react default scroll into view\n    if (scrollSelectionIntoView === undefined) {\n      return undefined\n    }\n    // Disable scroll into view totally\n    if (scrollSelectionIntoView === null) {\n      return noop\n    }\n    // Translate PortableTextEditor prop fn to Slate plugin fn\n    return (_editor: ReactEditor, domRange: Range) => {\n      scrollSelectionIntoView(portableTextEditor, domRange)\n    }\n  }, [portableTextEditor, scrollSelectionIntoView])\n\n  useEffect(() => {\n    const window = ReactEditor.getWindow(slateEditor)\n\n    const onDragEnd = () => {\n      editorActor.send({type: 'dragend'})\n    }\n    const onDrop = () => {\n      editorActor.send({type: 'drop'})\n    }\n\n    window.document.addEventListener('dragend', onDragEnd)\n    window.document.addEventListener('drop', onDrop)\n\n    return () => {\n      window.document.removeEventListener('dragend', onDragEnd)\n      window.document.removeEventListener('drop', onDrop)\n    }\n  }, [slateEditor, editorActor])\n\n  const handleDragStart = useCallback(\n    (event: React.DragEvent<HTMLDivElement>) => {\n      onDragStart?.(event)\n\n      if (event.isDefaultPrevented() || event.isPropagationStopped()) {\n        return\n      }\n\n      const position = getEventPosition({\n        editorActor,\n        slateEditor,\n        event: event.nativeEvent,\n      })\n\n      if (!position) {\n        console.warn('Could not find position for dragstart event')\n        return\n      }\n\n      editorActor.send({\n        type: 'dragstart',\n        origin: position,\n      })\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'drag.dragstart',\n          originEvent: {\n            clientX: event.clientX,\n            clientY: event.clientY,\n            dataTransfer: event.dataTransfer,\n          },\n          position,\n        },\n        editor: slateEditor,\n      })\n\n      // Prevent Slate from handling the event\n      return true\n    },\n    [onDragStart, editorActor, slateEditor],\n  )\n\n  const handleDrag = useCallback(\n    (event: React.DragEvent<HTMLDivElement>) => {\n      onDrag?.(event)\n\n      if (event.isDefaultPrevented() || event.isPropagationStopped()) {\n        return\n      }\n\n      const position = getEventPosition({\n        editorActor,\n        slateEditor,\n        event: event.nativeEvent,\n      })\n\n      if (!position) {\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'drag.drag',\n          originEvent: {\n            dataTransfer: event.dataTransfer,\n          },\n        },\n        editor: slateEditor,\n      })\n\n      // Prevent Slate from handling the event\n      return true\n    },\n    [onDrag, editorActor, slateEditor],\n  )\n\n  const handleDragEnd = useCallback(\n    (event: React.DragEvent<HTMLDivElement>) => {\n      onDragEnd?.(event)\n\n      if (event.isDefaultPrevented() || event.isPropagationStopped()) {\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'drag.dragend',\n          originEvent: {\n            dataTransfer: event.dataTransfer,\n          },\n        },\n        editor: slateEditor,\n      })\n\n      // Prevent Slate from handling the event\n      return true\n    },\n    [onDragEnd, editorActor, slateEditor],\n  )\n\n  const handleDragEnter = useCallback(\n    (event: React.DragEvent<HTMLDivElement>) => {\n      onDragEnter?.(event)\n\n      if (event.isDefaultPrevented() || event.isPropagationStopped()) {\n        return\n      }\n\n      const position = getEventPosition({\n        editorActor,\n        slateEditor,\n        event: event.nativeEvent,\n      })\n\n      if (!position) {\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'drag.dragenter',\n          originEvent: {\n            dataTransfer: event.dataTransfer,\n          },\n          position,\n        },\n        editor: slateEditor,\n      })\n\n      // Prevent Slate from handling the event\n      return true\n    },\n    [onDragEnter, editorActor, slateEditor],\n  )\n\n  const handleDragOver = useCallback(\n    (event: React.DragEvent<HTMLDivElement>) => {\n      onDragOver?.(event)\n\n      if (event.isDefaultPrevented() || event.isPropagationStopped()) {\n        return\n      }\n\n      const position = getEventPosition({\n        editorActor,\n        slateEditor,\n        event: event.nativeEvent,\n      })\n\n      if (!position) {\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'drag.dragover',\n          originEvent: {\n            dataTransfer: event.dataTransfer,\n          },\n          dragOrigin: editorActor.getSnapshot().context.internalDrag?.origin,\n          position,\n        },\n        editor: slateEditor,\n        nativeEvent: event,\n      })\n\n      // Prevent Slate from handling the event\n      return true\n    },\n    [onDragOver, editorActor, slateEditor],\n  )\n\n  const handleDrop = useCallback(\n    (event: React.DragEvent<HTMLDivElement>) => {\n      onDrop?.(event)\n\n      if (event.isDefaultPrevented() || event.isPropagationStopped()) {\n        return\n      }\n\n      const position = getEventPosition({\n        editorActor,\n        slateEditor,\n        event: event.nativeEvent,\n      })\n\n      if (!position) {\n        console.warn('Could not find position for drop event')\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'drag.drop',\n          originEvent: {\n            dataTransfer: event.dataTransfer,\n          },\n          dragOrigin: editorActor.getSnapshot().context.internalDrag?.origin,\n          position,\n        },\n        editor: slateEditor,\n        nativeEvent: event,\n      })\n\n      // Prevent Slate from handling the event\n      return true\n    },\n    [onDrop, editorActor, slateEditor],\n  )\n\n  const handleDragLeave = useCallback(\n    (event: React.DragEvent<HTMLDivElement>) => {\n      onDragLeave?.(event)\n\n      if (event.isDefaultPrevented() || event.isPropagationStopped()) {\n        return\n      }\n\n      const position = getEventPosition({\n        editorActor,\n        slateEditor,\n        event: event.nativeEvent,\n      })\n\n      if (!position) {\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'drag.dragleave',\n          originEvent: {\n            dataTransfer: event.dataTransfer,\n          },\n        },\n        editor: slateEditor,\n      })\n\n      // Prevent Slate from handling the event\n      return true\n    },\n    [onDragLeave, editorActor, slateEditor],\n  )\n\n  const callbackRef = useCallback(\n    (editorElement: HTMLDivElement | null) => {\n      if (typeof forwardedRef === 'function') {\n        forwardedRef(editorElement)\n      } else if (forwardedRef) {\n        forwardedRef.current = editorElement\n      }\n\n      if (editorElement) {\n        // Observe mutations (child list and subtree) to this component's DOM,\n        // and make sure the editor selection is valid when that happens.\n        const mutationObserver = new MutationObserver(() => {\n          validateSelectionActor.send({\n            type: 'validate selection',\n            editorElement,\n          })\n        })\n\n        mutationObserver.observe(editorElement, {\n          attributeOldValue: false,\n          attributes: false,\n          characterData: false,\n          childList: true,\n          subtree: true,\n        })\n\n        return () => {\n          mutationObserver.disconnect()\n        }\n      }\n    },\n    [forwardedRef, validateSelectionActor],\n  )\n\n  if (!portableTextEditor) {\n    return null\n  }\n\n  return hasInvalidValue ? null : (\n    <SlateEditable\n      {...restProps}\n      ref={callbackRef}\n      data-read-only={readOnly}\n      autoFocus={false}\n      className={restProps.className || 'pt-editable'}\n      decorate={decorate}\n      onBlur={handleOnBlur}\n      onCopy={handleCopy}\n      onCut={handleCut}\n      onClick={handleClick}\n      onDOMBeforeInput={handleOnBeforeInput}\n      onDragStart={handleDragStart}\n      onDrag={handleDrag}\n      onDragEnd={handleDragEnd}\n      onDragEnter={handleDragEnter}\n      onDragOver={handleDragOver}\n      onDrop={handleDrop}\n      onDragLeave={handleDragLeave}\n      onFocus={handleOnFocus}\n      onKeyDown={handleKeyDown}\n      onKeyUp={handleKeyUp}\n      onPaste={handlePaste}\n      readOnly={readOnly}\n      // We have implemented our own placeholder logic with decorations.\n      // This 'renderPlaceholder' should not be used.\n      renderPlaceholder={undefined}\n      renderElement={renderElement}\n      renderLeaf={renderLeaf}\n      renderText={renderText}\n      scrollSelectionIntoView={scrollSelectionIntoViewToSlate}\n    />\n  )\n})\n\nPortableTextEditable.displayName = 'ForwardRef(PortableTextEditable)'\n","/**\n * Copy/pasted from https://github.com/statelyai/xstate/blob/main/packages/xstate-react/src/stopRootWithRehydration.ts\n * and renamed to `stopActor`\n */\n\nimport type {AnyActorRef, Snapshot} from 'xstate'\n\nconst forEachActor = (\n  actorRef: AnyActorRef,\n  callback: (ref: AnyActorRef) => void,\n) => {\n  callback(actorRef)\n  const children = actorRef.getSnapshot().children\n  if (children) {\n    Object.values(children).forEach((child) => {\n      forEachActor(child as AnyActorRef, callback)\n    })\n  }\n}\n\nexport function stopActor(actorRef: AnyActorRef) {\n  // persist snapshot here in a custom way allows us to persist inline actors and to preserve actor references\n  // we do it to avoid setState in useEffect when the effect gets \"reconnected\"\n  // this currently only happens in Strict Effects but it simulates the Offscreen aka Activity API\n  // it also just allows us to end up with a somewhat more predictable behavior for the users\n  const persistedSnapshots: Array<[AnyActorRef, Snapshot<unknown>]> = []\n  forEachActor(actorRef, (ref) => {\n    persistedSnapshots.push([ref, ref.getSnapshot()])\n    // muting observers allow us to avoid `useSelector` from being notified about the stopped snapshot\n    // React reconnects its subscribers (from the useSyncExternalStore) on its own\n    // and userland subscibers should basically always do the same anyway\n    // as each subscription should have its own cleanup logic and that should be called each such reconnect\n    ;(ref as any).observers = new Set()\n  })\n  const systemSnapshot = actorRef.system.getSnapshot?.()\n\n  actorRef.stop()\n  ;(actorRef.system as any)._snapshot = systemSnapshot\n  persistedSnapshots.forEach(([ref, snapshot]) => {\n    ;(ref as any)._processingStatus = 0\n    ;(ref as any)._snapshot = snapshot\n  })\n}\n","import {defineConverter} from './converter.types'\n\nexport const converterJson = defineConverter({\n  mimeType: 'application/json',\n  serialize: ({snapshot, event}) => {\n    const portableTextConverter = snapshot.context.converters.find(\n      (converter) => converter.mimeType === 'application/x-portable-text',\n    )\n\n    if (!portableTextConverter) {\n      return {\n        type: 'serialization.failure',\n        mimeType: 'application/json',\n        originEvent: event.originEvent,\n        reason: 'No application/x-portable-text Converter found',\n      }\n    }\n\n    const serializationEvent = portableTextConverter.serialize({\n      snapshot,\n      event,\n    })\n\n    return {\n      ...serializationEvent,\n      mimeType: 'application/json',\n      originEvent: event.originEvent,\n    }\n  },\n  deserialize: ({snapshot, event}) => {\n    const portableTextConverter = snapshot.context.converters.find(\n      (converter) => converter.mimeType === 'application/x-portable-text',\n    )\n\n    if (!portableTextConverter) {\n      return {\n        type: 'deserialization.failure',\n        mimeType: 'application/json',\n        reason: 'No application/x-portable-text Converter found',\n      }\n    }\n\n    const deserializationEvent = portableTextConverter.deserialize({\n      snapshot,\n      event,\n    })\n\n    return {\n      ...deserializationEvent,\n      mimeType: 'application/json',\n    }\n  },\n})\n","import {getSelectedValue} from '../selectors/selector.get-selected-value'\nimport {parseBlock} from '../utils/parse-blocks'\nimport {defineConverter} from './converter.types'\n\nexport const converterPortableText = defineConverter({\n  mimeType: 'application/x-portable-text',\n  serialize: ({snapshot, event}) => {\n    const selection = snapshot.context.selection\n\n    if (!selection) {\n      return {\n        type: 'serialization.failure',\n        mimeType: 'application/x-portable-text',\n        originEvent: event.originEvent,\n        reason: 'No selection',\n      }\n    }\n\n    const blocks = getSelectedValue(snapshot)\n\n    if (blocks.length === 0) {\n      return {\n        type: 'serialization.failure',\n        mimeType: 'application/x-portable-text',\n        reason: 'No blocks serialized',\n        originEvent: event.originEvent,\n      }\n    }\n\n    return {\n      type: 'serialization.success',\n      data: JSON.stringify(blocks),\n      mimeType: 'application/x-portable-text',\n      originEvent: event.originEvent,\n    }\n  },\n  deserialize: ({snapshot, event}) => {\n    const blocks = JSON.parse(event.data)\n\n    if (!Array.isArray(blocks)) {\n      return {\n        type: 'deserialization.failure',\n        mimeType: 'application/x-portable-text',\n        reason: 'Data is not an array',\n      }\n    }\n\n    const parsedBlocks = blocks.flatMap((block) => {\n      const parsedBlock = parseBlock({\n        context: snapshot.context,\n        block,\n        options: {\n          removeUnusedMarkDefs: true,\n          validateFields: false,\n        },\n      })\n      return parsedBlock ? [parsedBlock] : []\n    })\n\n    if (parsedBlocks.length === 0 && blocks.length > 0) {\n      return {\n        type: 'deserialization.failure',\n        mimeType: 'application/x-portable-text',\n        reason: 'No blocks were parsed',\n      }\n    }\n\n    return {\n      type: 'deserialization.success',\n      data: parsedBlocks,\n      mimeType: 'application/x-portable-text',\n    }\n  },\n})\n","import {htmlToBlocks} from '@portabletext/block-tools'\nimport {toHTML} from '@portabletext/to-html'\nimport type {PortableTextBlock} from '@sanity/types'\nimport {getSelectedValue} from '../selectors/selector.get-selected-value'\nimport type {PortableTextMemberSchemaTypes} from '../types/editor'\nimport {parseBlock} from '../utils/parse-blocks'\nimport {defineConverter} from './converter.types'\n\nexport function createConverterTextHtml(\n  legacySchema: PortableTextMemberSchemaTypes,\n) {\n  return defineConverter({\n    mimeType: 'text/html',\n    serialize: ({snapshot, event}) => {\n      const selection = snapshot.context.selection\n\n      if (!selection) {\n        return {\n          type: 'serialization.failure',\n          mimeType: 'text/html',\n          originEvent: event.originEvent,\n          reason: 'No selection',\n        }\n      }\n\n      const blocks = getSelectedValue(snapshot)\n\n      const html = toHTML(blocks, {\n        onMissingComponent: false,\n        components: {\n          unknownType: ({children}) =>\n            children !== undefined ? `${children}` : '',\n        },\n      })\n\n      if (html === '') {\n        return {\n          type: 'serialization.failure',\n          mimeType: 'text/html',\n          originEvent: event.originEvent,\n          reason: 'Serialized HTML is empty',\n        }\n      }\n\n      return {\n        type: 'serialization.success',\n        data: html,\n        mimeType: 'text/html',\n        originEvent: event.originEvent,\n      }\n    },\n    deserialize: ({snapshot, event}) => {\n      const blocks = htmlToBlocks(event.data, legacySchema.portableText, {\n        keyGenerator: snapshot.context.keyGenerator,\n        unstable_whitespaceOnPasteMode:\n          legacySchema.block.options.unstable_whitespaceOnPasteMode,\n      }) as Array<PortableTextBlock>\n\n      const parsedBlocks = blocks.flatMap((block) => {\n        const parsedBlock = parseBlock({\n          context: snapshot.context,\n          block,\n          options: {\n            removeUnusedMarkDefs: true,\n            validateFields: false,\n          },\n        })\n        return parsedBlock ? [parsedBlock] : []\n      })\n\n      if (parsedBlocks.length === 0) {\n        return {\n          type: 'deserialization.failure',\n          mimeType: 'text/html',\n          reason: 'No blocks deserialized',\n        }\n      }\n\n      return {\n        type: 'deserialization.success',\n        data: parsedBlocks,\n        mimeType: 'text/html',\n      }\n    },\n  })\n}\n","import {htmlToBlocks} from '@portabletext/block-tools'\nimport {isTextBlock} from '@portabletext/schema'\nimport type {PortableTextBlock} from '@sanity/types'\nimport {getSelectedValue} from '../selectors/selector.get-selected-value'\nimport type {PortableTextMemberSchemaTypes} from '../types/editor'\nimport {parseBlock} from '../utils/parse-blocks'\nimport {defineConverter} from './converter.types'\n\nexport function createConverterTextPlain(\n  legacySchema: PortableTextMemberSchemaTypes,\n) {\n  return defineConverter({\n    mimeType: 'text/plain',\n    serialize: ({snapshot, event}) => {\n      const selection = snapshot.context.selection\n\n      if (!selection) {\n        return {\n          type: 'serialization.failure',\n          mimeType: 'text/plain',\n          originEvent: event.originEvent,\n          reason: 'No selection',\n        }\n      }\n\n      const blocks = getSelectedValue(snapshot)\n\n      const data = blocks\n        .map((block) => {\n          if (isTextBlock(snapshot.context, block)) {\n            return block.children\n              .map((child) => {\n                if (child._type === snapshot.context.schema.span.name) {\n                  return child.text\n                }\n\n                return event.originEvent === 'drag.dragstart'\n                  ? `[${\n                      snapshot.context.schema.inlineObjects.find(\n                        (inlineObjectType) =>\n                          inlineObjectType.name === child._type,\n                      )?.title ?? 'Object'\n                    }]`\n                  : ''\n              })\n              .join('')\n          }\n\n          return event.originEvent === 'drag.dragstart'\n            ? `[${\n                snapshot.context.schema.blockObjects.find(\n                  (blockObjectType) => blockObjectType.name === block._type,\n                )?.title ?? 'Object'\n              }]`\n            : ''\n        })\n        .filter((block) => block !== '')\n        .join('\\n\\n')\n\n      return {\n        type: 'serialization.success',\n        data,\n        mimeType: 'text/plain',\n        originEvent: event.originEvent,\n      }\n    },\n    deserialize: ({snapshot, event}) => {\n      const html = escapeHtml(event.data)\n        .split(/\\n{2,}/)\n        .map((line) =>\n          line\n            ? `<p>${line.replace(/(?:\\r\\n|\\r|\\n)/g, '<br/>')}</p>`\n            : '<p></p>',\n        )\n        .join('')\n\n      const textToHtml = `<html><body>${html}</body></html>`\n\n      const blocks = htmlToBlocks(textToHtml, legacySchema.portableText, {\n        keyGenerator: snapshot.context.keyGenerator,\n      }) as Array<PortableTextBlock>\n\n      const parsedBlocks = blocks.flatMap((block) => {\n        const parsedBlock = parseBlock({\n          context: snapshot.context,\n          block,\n          options: {\n            removeUnusedMarkDefs: true,\n            validateFields: false,\n          },\n        })\n        return parsedBlock ? [parsedBlock] : []\n      })\n\n      if (parsedBlocks.length === 0) {\n        return {\n          type: 'deserialization.failure',\n          mimeType: 'text/plain',\n          reason: 'No blocks deserialized',\n        }\n      }\n\n      return {\n        type: 'deserialization.success',\n        data: parsedBlocks,\n        mimeType: 'text/plain',\n      }\n    },\n  })\n}\n\nconst entityMap: Record<string, string> = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&quot;',\n  \"'\": '&#39;',\n  '/': '&#x2F;',\n  '`': '&#x60;',\n  '=': '&#x3D;',\n}\n\nfunction escapeHtml(str: string) {\n  return String(str).replace(/[&<>\"'`=/]/g, (s: string) => entityMap[s])\n}\n","import type {PortableTextMemberSchemaTypes} from '../types/editor'\nimport {converterJson} from './converter.json'\nimport {converterPortableText} from './converter.portable-text'\nimport {createConverterTextHtml} from './converter.text-html'\nimport {createConverterTextPlain} from './converter.text-plain'\n\nexport function createCoreConverters(\n  legacySchema: PortableTextMemberSchemaTypes,\n) {\n  return [\n    converterJson,\n    converterPortableText,\n    createConverterTextHtml(legacySchema),\n    createConverterTextPlain(legacySchema),\n  ]\n}\n","import {Schema} from '@sanity/schema'\n\nexport function compileType(rawType: any) {\n  return Schema.compile({\n    name: 'blockTypeSchema',\n    types: [rawType],\n  }).get(rawType.name)\n}\n","import {isTextBlock} from '@portabletext/schema'\nimport type {EditorContext} from '../editor/editor-snapshot'\n\n// Maps for each list type, keeping track of the current list count for each\n// level.\nconst levelIndexMaps = new Map<string, Map<number, number>>()\n\n/**\n * Mutates the maps in place.\n */\nexport function buildIndexMaps(\n  context: Pick<EditorContext, 'schema' | 'value'>,\n  {\n    blockIndexMap,\n    listIndexMap,\n  }: {\n    blockIndexMap: Map<string, number>\n    listIndexMap: Map<string, number>\n  },\n): void {\n  blockIndexMap.clear()\n  listIndexMap.clear()\n  levelIndexMaps.clear()\n\n  let previousListItem:\n    | {\n        listItem: string\n        level: number\n      }\n    | undefined\n\n  for (let blockIndex = 0; blockIndex < context.value.length; blockIndex++) {\n    const block = context.value.at(blockIndex)\n\n    if (block === undefined) {\n      continue\n    }\n\n    blockIndexMap.set(block._key, blockIndex)\n\n    // Clear the state if we encounter a non-text block\n    if (!isTextBlock(context, block)) {\n      levelIndexMaps.clear()\n      previousListItem = undefined\n\n      continue\n    }\n\n    // Clear the state if we encounter a non-list text block\n    if (block.listItem === undefined || block.level === undefined) {\n      levelIndexMaps.clear()\n      previousListItem = undefined\n\n      continue\n    }\n\n    // If we encounter a new list item, we set the initial index to 1 for the\n    // list type on that level.\n    if (!previousListItem) {\n      const listIndex = 1\n      const levelIndexMap =\n        levelIndexMaps.get(block.listItem) ?? new Map<number, number>()\n      levelIndexMap.set(block.level, listIndex)\n      levelIndexMaps.set(block.listItem, levelIndexMap)\n\n      listIndexMap.set(block._key, listIndex)\n\n      previousListItem = {\n        listItem: block.listItem,\n        level: block.level,\n      }\n\n      continue\n    }\n\n    // If the previous list item is of the same type but on a lower level, we\n    // need to reset the level index map for that type.\n    if (\n      previousListItem.listItem === block.listItem &&\n      previousListItem.level < block.level\n    ) {\n      const listIndex = 1\n      const levelIndexMap =\n        levelIndexMaps.get(block.listItem) ?? new Map<number, number>()\n      levelIndexMap.set(block.level, listIndex)\n      levelIndexMaps.set(block.listItem, levelIndexMap)\n\n      listIndexMap.set(block._key, listIndex)\n\n      previousListItem = {\n        listItem: block.listItem,\n        level: block.level,\n      }\n\n      continue\n    }\n\n    // Reset other list types at current level and deeper\n    levelIndexMaps.forEach((levelIndexMap, listItem) => {\n      if (listItem === block.listItem) {\n        return\n      }\n\n      // Reset all levels that are >= current level\n      const levelsToDelete: number[] = []\n\n      levelIndexMap.forEach((_, level) => {\n        if (level >= block.level!) {\n          levelsToDelete.push(level)\n        }\n      })\n\n      levelsToDelete.forEach((level) => {\n        levelIndexMap.delete(level)\n      })\n    })\n\n    const levelIndexMap =\n      levelIndexMaps.get(block.listItem) ?? new Map<number, number>()\n    const levelCounter = levelIndexMap.get(block.level) ?? 0\n    levelIndexMap.set(block.level, levelCounter + 1)\n    levelIndexMaps.set(block.listItem, levelIndexMap)\n\n    listIndexMap.set(block._key, levelCounter + 1)\n\n    previousListItem = {\n      listItem: block.listItem,\n      level: block.level,\n    }\n  }\n}\n","import type {PortableTextSpan} from '@sanity/types'\nimport type {EditorContext} from '../editor/editor-snapshot'\n\nexport function createPlaceholderBlock(\n  context: Pick<EditorContext, 'keyGenerator' | 'schema'>,\n) {\n  return {\n    _type: context.schema.block.name,\n    _key: context.keyGenerator(),\n    style: context.schema.styles[0].name ?? 'normal',\n    markDefs: [],\n    children: [\n      {\n        _type: context.schema.span.name,\n        _key: context.keyGenerator(),\n        text: '',\n        marks: [],\n      } as PortableTextSpan,\n    ],\n  }\n}\n","import type {PortableTextSpan} from '@sanity/types'\nimport {Node, Path} from 'slate'\nimport type {PortableTextSlateEditor} from '../types/editor'\n\nexport function getPreviousSpan({\n  editor,\n  blockPath,\n  spanPath,\n}: {\n  editor: PortableTextSlateEditor\n  blockPath: Path\n  spanPath: Path\n}): PortableTextSpan | undefined {\n  let previousSpan: PortableTextSpan | undefined\n\n  for (const [child, childPath] of Node.children(editor, blockPath, {\n    reverse: true,\n  })) {\n    if (!editor.isTextSpan(child)) {\n      continue\n    }\n\n    if (Path.isBefore(childPath, spanPath)) {\n      previousSpan = child\n      break\n    }\n  }\n\n  return previousSpan\n}\n\nexport function getNextSpan({\n  editor,\n  blockPath,\n  spanPath,\n}: {\n  editor: PortableTextSlateEditor\n  blockPath: Path\n  spanPath: Path\n}): PortableTextSpan | undefined {\n  let nextSpan: PortableTextSpan | undefined\n\n  for (const [child, childPath] of Node.children(editor, blockPath)) {\n    if (!editor.isTextSpan(child)) {\n      continue\n    }\n\n    if (Path.isAfter(childPath, spanPath)) {\n      nextSpan = child\n      break\n    }\n  }\n\n  return nextSpan\n}\n","import type {Editor} from 'slate'\n\nconst IS_NORMALIZING_NODE: WeakMap<Editor, boolean | undefined> = new WeakMap()\n\nexport function withNormalizeNode(editor: Editor, fn: () => void) {\n  const prev = IS_NORMALIZING_NODE.get(editor)\n  IS_NORMALIZING_NODE.set(editor, true)\n  fn()\n  IS_NORMALIZING_NODE.set(editor, prev)\n}\n\nexport function isNormalizingNode(editor: Editor) {\n  return IS_NORMALIZING_NODE.get(editor) ?? false\n}\n","import type {Editor} from 'slate'\nimport {IS_PROCESSING_REMOTE_CHANGES} from './weakMaps'\n\nexport function withRemoteChanges(editor: Editor, fn: () => void): void {\n  const prev = isChangingRemotely(editor) || false\n  IS_PROCESSING_REMOTE_CHANGES.set(editor, true)\n  fn()\n  IS_PROCESSING_REMOTE_CHANGES.set(editor, prev)\n}\n\nexport function isChangingRemotely(editor: Editor): boolean | undefined {\n  return IS_PROCESSING_REMOTE_CHANGES.get(editor)\n}\n","import type {Editor} from 'slate'\n\nconst IS_UDOING: WeakMap<Editor, boolean | undefined> = new WeakMap()\nconst IS_REDOING: WeakMap<Editor, boolean | undefined> = new WeakMap()\n\nexport function withUndoing(editor: Editor, fn: () => void) {\n  const prev = isUndoing(editor)\n  IS_UDOING.set(editor, true)\n  fn()\n  IS_UDOING.set(editor, prev)\n}\n\nexport function isUndoing(editor: Editor) {\n  return IS_UDOING.get(editor) ?? false\n}\n\nexport function setIsUndoing(editor: Editor, isUndoing: boolean) {\n  IS_UDOING.set(editor, isUndoing)\n}\n\nexport function withRedoing(editor: Editor, fn: () => void) {\n  const prev = isRedoing(editor)\n  IS_REDOING.set(editor, true)\n  fn()\n  IS_REDOING.set(editor, prev)\n}\n\nexport function isRedoing(editor: Editor) {\n  return IS_REDOING.get(editor) ?? false\n}\n\nexport function setIsRedoing(editor: Editor, isRedoing: boolean) {\n  IS_REDOING.set(editor, isRedoing)\n}\n","/**\n *\n * This plugin will change Slate's default marks model (every prop is a mark) with the Portable Text model (marks is an array of strings on prop .marks).\n *\n */\n\nimport {isTextBlock} from '@portabletext/schema'\nimport type {PortableTextObject, PortableTextSpan} from '@sanity/types'\nimport {isEqual, uniq} from 'lodash'\nimport {Editor, Element, Node, Path, Range, Text, Transforms} from 'slate'\nimport {debugWithName} from '../../internal-utils/debug'\nimport {getNextSpan, getPreviousSpan} from '../../internal-utils/sibling-utils'\nimport type {BehaviorOperationImplementation} from '../../operations/behavior.operations'\nimport {getActiveDecorators} from '../../selectors/selector.get-active-decorators'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\nimport {getEditorSnapshot} from '../editor-selector'\nimport {withNormalizeNode} from '../with-normalizing-node'\nimport {isChangingRemotely} from '../withChanges'\nimport {isRedoing, isUndoing} from '../withUndoRedo'\n\nconst debug = debugWithName('plugin:withPortableTextMarkModel')\n\nexport function createWithPortableTextMarkModel(\n  editorActor: EditorActor,\n): (editor: PortableTextSlateEditor) => PortableTextSlateEditor {\n  return function withPortableTextMarkModel(editor: PortableTextSlateEditor) {\n    const {apply, normalizeNode} = editor\n    const decorators = editorActor\n      .getSnapshot()\n      .context.schema.decorators.map((t) => t.name)\n\n    // Extend Slate's default normalization. Merge spans with same set of .marks when doing merge_node operations, and clean up markDefs / marks\n    editor.normalizeNode = (nodeEntry) => {\n      const [node, path] = nodeEntry\n\n      if (editor.isTextBlock(node)) {\n        const children = Node.children(editor, path)\n\n        for (const [child, childPath] of children) {\n          const nextNode = node.children[childPath[1] + 1]\n\n          if (\n            editor.isTextSpan(child) &&\n            editor.isTextSpan(nextNode) &&\n            child.marks?.every((mark) => nextNode.marks?.includes(mark)) &&\n            nextNode.marks?.every((mark) => child.marks?.includes(mark))\n          ) {\n            debug(\n              'Merging spans',\n              JSON.stringify(child, null, 2),\n              JSON.stringify(nextNode, null, 2),\n            )\n            withNormalizeNode(editor, () => {\n              Transforms.mergeNodes(editor, {\n                at: [childPath[0], childPath[1] + 1],\n                voids: true,\n              })\n            })\n            return\n          }\n        }\n      }\n\n      /**\n       * Add missing .markDefs to block nodes\n       */\n      if (editor.isTextBlock(node) && !Array.isArray(node.markDefs)) {\n        debug('Adding .markDefs to block node')\n        withNormalizeNode(editor, () => {\n          Transforms.setNodes(editor, {markDefs: []}, {at: path})\n        })\n        return\n      }\n\n      /**\n       * Add missing .marks to span nodes\n       */\n      if (editor.isTextSpan(node) && !Array.isArray(node.marks)) {\n        debug('Adding .marks to span node')\n        withNormalizeNode(editor, () => {\n          Transforms.setNodes(editor, {marks: []}, {at: path})\n        })\n        return\n      }\n\n      /**\n       * Remove annotations from empty spans\n       */\n      if (editor.isTextSpan(node)) {\n        const blockPath = Path.parent(path)\n        const [block] = Editor.node(editor, blockPath)\n        const decorators = editorActor\n          .getSnapshot()\n          .context.schema.decorators.map((decorator) => decorator.name)\n        const annotations = node.marks?.filter(\n          (mark) => !decorators.includes(mark),\n        )\n\n        if (editor.isTextBlock(block)) {\n          if (node.text === '' && annotations && annotations.length > 0) {\n            debug('Removing annotations from empty span node')\n            withNormalizeNode(editor, () => {\n              Transforms.setNodes(\n                editor,\n                {\n                  marks: node.marks?.filter((mark) =>\n                    decorators.includes(mark),\n                  ),\n                },\n                {at: path},\n              )\n            })\n            return\n          }\n        }\n      }\n\n      /**\n       * Remove orphaned annotations from child spans of block nodes\n       */\n      if (editor.isTextBlock(node)) {\n        const decorators = editorActor\n          .getSnapshot()\n          .context.schema.decorators.map((decorator) => decorator.name)\n\n        for (const [child, childPath] of Node.children(editor, path)) {\n          if (editor.isTextSpan(child)) {\n            const marks = child.marks ?? []\n            const orphanedAnnotations = marks.filter((mark) => {\n              return (\n                !decorators.includes(mark) &&\n                !node.markDefs?.find((def) => def._key === mark)\n              )\n            })\n\n            if (orphanedAnnotations.length > 0) {\n              debug('Removing orphaned annotations from span node')\n              withNormalizeNode(editor, () => {\n                Transforms.setNodes(\n                  editor,\n                  {\n                    marks: marks.filter(\n                      (mark) => !orphanedAnnotations.includes(mark),\n                    ),\n                  },\n                  {at: childPath},\n                )\n              })\n              return\n            }\n          }\n        }\n      }\n\n      /**\n       * Remove orphaned annotations from span nodes\n       */\n      if (editor.isTextSpan(node)) {\n        const blockPath = Path.parent(path)\n        const [block] = Editor.node(editor, blockPath)\n\n        if (editor.isTextBlock(block)) {\n          const decorators = editorActor\n            .getSnapshot()\n            .context.schema.decorators.map((decorator) => decorator.name)\n          const marks = node.marks ?? []\n          const orphanedAnnotations = marks.filter((mark) => {\n            return (\n              !decorators.includes(mark) &&\n              !block.markDefs?.find((def) => def._key === mark)\n            )\n          })\n\n          if (orphanedAnnotations.length > 0) {\n            debug('Removing orphaned annotations from span node')\n            withNormalizeNode(editor, () => {\n              Transforms.setNodes(\n                editor,\n                {\n                  marks: marks.filter(\n                    (mark) => !orphanedAnnotations.includes(mark),\n                  ),\n                },\n                {at: path},\n              )\n            })\n            return\n          }\n        }\n      }\n\n      // Remove duplicate markDefs\n      if (editor.isTextBlock(node)) {\n        const markDefs = node.markDefs ?? []\n        const markDefKeys = new Set<string>()\n        const newMarkDefs: Array<PortableTextObject> = []\n\n        for (const markDef of markDefs) {\n          if (!markDefKeys.has(markDef._key)) {\n            markDefKeys.add(markDef._key)\n            newMarkDefs.push(markDef)\n          }\n        }\n\n        if (markDefs.length !== newMarkDefs.length) {\n          debug('Removing duplicate markDefs')\n          withNormalizeNode(editor, () => {\n            Transforms.setNodes(editor, {markDefs: newMarkDefs}, {at: path})\n          })\n          return\n        }\n      }\n\n      // Check consistency of markDefs (unless we are merging two nodes)\n      if (\n        editor.isTextBlock(node) &&\n        !editor.operations.some(\n          (op) =>\n            op.type === 'merge_node' &&\n            'markDefs' in op.properties &&\n            op.path.length === 1,\n        )\n      ) {\n        const newMarkDefs = (node.markDefs || []).filter((def) => {\n          return node.children.find((child) => {\n            return (\n              Text.isText(child) &&\n              Array.isArray(child.marks) &&\n              child.marks.includes(def._key)\n            )\n          })\n        })\n        if (node.markDefs && !isEqual(newMarkDefs, node.markDefs)) {\n          debug('Removing markDef not in use')\n          withNormalizeNode(editor, () => {\n            Transforms.setNodes(\n              editor,\n              {\n                markDefs: newMarkDefs,\n              },\n              {at: path},\n            )\n          })\n          return\n        }\n      }\n\n      withNormalizeNode(editor, () => {\n        normalizeNode(nodeEntry)\n      })\n    }\n\n    editor.apply = (op) => {\n      /**\n       * We don't want to run any side effects when the editor is processing\n       * remote changes.\n       */\n      if (isChangingRemotely(editor)) {\n        apply(op)\n        return\n      }\n\n      /**\n       * We don't want to run any side effects when the editor is undoing or\n       * redoing operations.\n       */\n      if (isUndoing(editor) || isRedoing(editor)) {\n        apply(op)\n        return\n      }\n\n      if (op.type === 'set_selection') {\n        if (\n          op.properties &&\n          op.newProperties &&\n          op.properties.anchor &&\n          op.properties.focus &&\n          op.newProperties.anchor &&\n          op.newProperties.focus\n        ) {\n          const previousSelectionIsCollapsed = Range.isCollapsed({\n            anchor: op.properties.anchor,\n            focus: op.properties.focus,\n          })\n          const newSelectionIsCollapsed = Range.isCollapsed({\n            anchor: op.newProperties.anchor,\n            focus: op.newProperties.focus,\n          })\n\n          if (previousSelectionIsCollapsed && newSelectionIsCollapsed) {\n            const focusSpan: PortableTextSpan | undefined = Array.from(\n              Editor.nodes(editor, {\n                mode: 'lowest',\n                at: op.properties.focus,\n                match: (n) => editor.isTextSpan(n),\n                voids: false,\n              }),\n            )[0]?.[0]\n            const newFocusSpan: PortableTextSpan | undefined = Array.from(\n              Editor.nodes(editor, {\n                mode: 'lowest',\n                at: op.newProperties.focus,\n                match: (n) => editor.isTextSpan(n),\n                voids: false,\n              }),\n            )[0]?.[0]\n            const movedToNextSpan =\n              focusSpan &&\n              newFocusSpan &&\n              op.newProperties.focus.path[0] === op.properties.focus.path[0] &&\n              op.newProperties.focus.path[1] ===\n                op.properties.focus.path[1] + 1 &&\n              focusSpan.text.length === op.properties.focus.offset &&\n              op.newProperties.focus.offset === 0\n            const movedToPreviousSpan =\n              focusSpan &&\n              newFocusSpan &&\n              op.newProperties.focus.path[0] === op.properties.focus.path[0] &&\n              op.newProperties.focus.path[1] ===\n                op.properties.focus.path[1] - 1 &&\n              op.properties.focus.offset === 0 &&\n              newFocusSpan.text.length === op.newProperties.focus.offset\n\n            // We only want to clear the decorator state if the caret is visually\n            // moving\n            if (!movedToNextSpan && !movedToPreviousSpan) {\n              editor.decoratorState = {}\n            }\n          }\n        }\n      }\n\n      if (op.type === 'remove_text') {\n        const {selection} = editor\n\n        if (selection && Range.isExpanded(selection)) {\n          const [block, blockPath] = Editor.node(editor, selection, {\n            depth: 1,\n          })\n          const [span, spanPath] =\n            Array.from(\n              Editor.nodes(editor, {\n                mode: 'lowest',\n                at: {path: op.path, offset: op.offset},\n                match: (n) => editor.isTextSpan(n),\n                voids: false,\n              }),\n            )[0] ?? ([undefined, undefined] as const)\n\n          if (\n            span &&\n            block &&\n            isTextBlock(editorActor.getSnapshot().context, block)\n          ) {\n            const markDefs = block.markDefs ?? []\n            const marks = span.marks ?? []\n            const spanHasAnnotations = marks.some((mark) =>\n              markDefs.find((markDef) => markDef._key === mark),\n            )\n            const deletingFromTheEnd =\n              op.offset + op.text.length === span.text.length\n            const deletingAllText = op.offset === 0 && deletingFromTheEnd\n\n            const previousSpan = getPreviousSpan({editor, blockPath, spanPath})\n            const nextSpan = getNextSpan({editor, blockPath, spanPath})\n\n            const previousSpanHasSameAnnotation = previousSpan\n              ? previousSpan.marks?.some(\n                  (mark) => !decorators.includes(mark) && marks.includes(mark),\n                )\n              : false\n            const nextSpanHasSameAnnotation = nextSpan\n              ? nextSpan.marks?.some(\n                  (mark) => !decorators.includes(mark) && marks.includes(mark),\n                )\n              : false\n\n            if (\n              spanHasAnnotations &&\n              deletingAllText &&\n              !previousSpanHasSameAnnotation &&\n              !nextSpanHasSameAnnotation\n            ) {\n              const snapshot = getEditorSnapshot({\n                editorActorSnapshot: editorActor.getSnapshot(),\n                slateEditorInstance: editor,\n              })\n\n              Editor.withoutNormalizing(editor, () => {\n                apply(op)\n                Transforms.setNodes(\n                  editor,\n                  {marks: getActiveDecorators(snapshot)},\n                  {at: op.path},\n                )\n              })\n\n              editor.onChange()\n              return\n            }\n          }\n        }\n      }\n\n      /**\n       * Copy over markDefs when merging blocks\n       */\n      if (\n        op.type === 'merge_node' &&\n        op.path.length === 1 &&\n        'markDefs' in op.properties &&\n        op.properties._type ===\n          editorActor.getSnapshot().context.schema.block.name &&\n        Array.isArray(op.properties.markDefs) &&\n        op.properties.markDefs.length > 0 &&\n        op.path[0] - 1 >= 0\n      ) {\n        const [targetBlock, targetPath] = Editor.node(editor, [op.path[0] - 1])\n\n        if (editor.isTextBlock(targetBlock)) {\n          const oldDefs =\n            (Array.isArray(targetBlock.markDefs) && targetBlock.markDefs) || []\n          const newMarkDefs = uniq([...oldDefs, ...op.properties.markDefs])\n\n          debug(`Copying markDefs over to merged block`, op)\n          Transforms.setNodes(\n            editor,\n            {markDefs: newMarkDefs},\n            {at: targetPath, voids: false},\n          )\n          apply(op)\n          return\n        }\n      }\n\n      apply(op)\n    }\n\n    return editor\n  }\n}\n\nexport const removeDecoratorOperationImplementation: BehaviorOperationImplementation<\n  'decorator.remove'\n> = ({operation}) => {\n  const editor = operation.editor\n  const mark = operation.decorator\n  const {selection} = editor\n\n  if (selection) {\n    if (Range.isExpanded(selection)) {\n      // Split if needed\n      Transforms.setNodes(\n        editor,\n        {},\n        {match: Text.isText, split: true, hanging: true},\n      )\n      if (editor.selection) {\n        const splitTextNodes = [\n          ...Editor.nodes(editor, {\n            at: editor.selection,\n            match: Text.isText,\n          }),\n        ]\n        splitTextNodes.forEach(([node, path]) => {\n          const block = editor.children[path[0]]\n          if (Element.isElement(block) && block.children.includes(node)) {\n            Transforms.setNodes(\n              editor,\n              {\n                marks: (Array.isArray(node.marks) ? node.marks : []).filter(\n                  (eMark: string) => eMark !== mark,\n                ),\n                _type: 'span',\n              },\n              {at: path},\n            )\n          }\n        })\n      }\n    } else {\n      const [block, blockPath] = Editor.node(editor, selection, {\n        depth: 1,\n      })\n      const lonelyEmptySpan =\n        editor.isTextBlock(block) &&\n        block.children.length === 1 &&\n        editor.isTextSpan(block.children[0]) &&\n        block.children[0].text === ''\n          ? block.children[0]\n          : undefined\n\n      if (lonelyEmptySpan) {\n        const existingMarks = lonelyEmptySpan.marks ?? []\n        const existingMarksWithoutDecorator = existingMarks.filter(\n          (existingMark) => existingMark !== mark,\n        )\n\n        Transforms.setNodes(\n          editor,\n          {\n            marks: existingMarksWithoutDecorator,\n          },\n          {\n            at: blockPath,\n            match: (node) => editor.isTextSpan(node),\n          },\n        )\n      } else {\n        editor.decoratorState[mark] = false\n      }\n    }\n\n    if (editor.selection) {\n      // Reselect\n      const selection = editor.selection\n      editor.selection = {...selection}\n    }\n  }\n}\n","function cloneDiff(diff2) {\n  const [type, patch] = diff2;\n  return [type, patch];\n}\nfunction getCommonOverlap(textA, textB) {\n  let text1 = textA, text2 = textB;\n  const text1Length = text1.length, text2Length = text2.length;\n  if (text1Length === 0 || text2Length === 0)\n    return 0;\n  text1Length > text2Length ? text1 = text1.substring(text1Length - text2Length) : text1Length < text2Length && (text2 = text2.substring(0, text1Length));\n  const textLength = Math.min(text1Length, text2Length);\n  if (text1 === text2)\n    return textLength;\n  let best = 0, length = 1;\n  for (let found = 0; found !== -1; ) {\n    const pattern = text1.substring(textLength - length);\n    if (found = text2.indexOf(pattern), found === -1)\n      return best;\n    length += found, (found === 0 || text1.substring(textLength - length) === text2.substring(0, length)) && (best = length, length++);\n  }\n  return best;\n}\nfunction getCommonPrefix(text1, text2) {\n  if (!text1 || !text2 || text1[0] !== text2[0])\n    return 0;\n  let pointerMin = 0, pointerMax = Math.min(text1.length, text2.length), pointerMid = pointerMax, pointerStart = 0;\n  for (; pointerMin < pointerMid; )\n    text1.substring(pointerStart, pointerMid) === text2.substring(pointerStart, pointerMid) ? (pointerMin = pointerMid, pointerStart = pointerMin) : pointerMax = pointerMid, pointerMid = Math.floor((pointerMax - pointerMin) / 2 + pointerMin);\n  return pointerMid;\n}\nfunction getCommonSuffix(text1, text2) {\n  if (!text1 || !text2 || text1[text1.length - 1] !== text2[text2.length - 1])\n    return 0;\n  let pointerMin = 0, pointerMax = Math.min(text1.length, text2.length), pointerMid = pointerMax, pointerEnd = 0;\n  for (; pointerMin < pointerMid; )\n    text1.substring(text1.length - pointerMid, text1.length - pointerEnd) === text2.substring(text2.length - pointerMid, text2.length - pointerEnd) ? (pointerMin = pointerMid, pointerEnd = pointerMin) : pointerMax = pointerMid, pointerMid = Math.floor((pointerMax - pointerMin) / 2 + pointerMin);\n  return pointerMid;\n}\nfunction isHighSurrogate(char) {\n  const charCode = char.charCodeAt(0);\n  return charCode >= 55296 && charCode <= 56319;\n}\nfunction isLowSurrogate(char) {\n  const charCode = char.charCodeAt(0);\n  return charCode >= 56320 && charCode <= 57343;\n}\nfunction bisect(text1, text2, deadline) {\n  const text1Length = text1.length, text2Length = text2.length, maxD = Math.ceil((text1Length + text2Length) / 2), vOffset = maxD, vLength = 2 * maxD, v1 = new Array(vLength), v2 = new Array(vLength);\n  for (let x = 0; x < vLength; x++)\n    v1[x] = -1, v2[x] = -1;\n  v1[vOffset + 1] = 0, v2[vOffset + 1] = 0;\n  const delta = text1Length - text2Length, front = delta % 2 !== 0;\n  let k1start = 0, k1end = 0, k2start = 0, k2end = 0;\n  for (let d = 0; d < maxD && !(Date.now() > deadline); d++) {\n    for (let k1 = -d + k1start; k1 <= d - k1end; k1 += 2) {\n      const k1Offset = vOffset + k1;\n      let x1;\n      k1 === -d || k1 !== d && v1[k1Offset - 1] < v1[k1Offset + 1] ? x1 = v1[k1Offset + 1] : x1 = v1[k1Offset - 1] + 1;\n      let y1 = x1 - k1;\n      for (; x1 < text1Length && y1 < text2Length && text1.charAt(x1) === text2.charAt(y1); )\n        x1++, y1++;\n      if (v1[k1Offset] = x1, x1 > text1Length)\n        k1end += 2;\n      else if (y1 > text2Length)\n        k1start += 2;\n      else if (front) {\n        const k2Offset = vOffset + delta - k1;\n        if (k2Offset >= 0 && k2Offset < vLength && v2[k2Offset] !== -1) {\n          const x2 = text1Length - v2[k2Offset];\n          if (x1 >= x2)\n            return bisectSplit(text1, text2, x1, y1, deadline);\n        }\n      }\n    }\n    for (let k2 = -d + k2start; k2 <= d - k2end; k2 += 2) {\n      const k2Offset = vOffset + k2;\n      let x2;\n      k2 === -d || k2 !== d && v2[k2Offset - 1] < v2[k2Offset + 1] ? x2 = v2[k2Offset + 1] : x2 = v2[k2Offset - 1] + 1;\n      let y2 = x2 - k2;\n      for (; x2 < text1Length && y2 < text2Length && text1.charAt(text1Length - x2 - 1) === text2.charAt(text2Length - y2 - 1); )\n        x2++, y2++;\n      if (v2[k2Offset] = x2, x2 > text1Length)\n        k2end += 2;\n      else if (y2 > text2Length)\n        k2start += 2;\n      else if (!front) {\n        const k1Offset = vOffset + delta - k2;\n        if (k1Offset >= 0 && k1Offset < vLength && v1[k1Offset] !== -1) {\n          const x1 = v1[k1Offset], y1 = vOffset + x1 - k1Offset;\n          if (x2 = text1Length - x2, x1 >= x2)\n            return bisectSplit(text1, text2, x1, y1, deadline);\n        }\n      }\n    }\n  }\n  return [\n    [DIFF_DELETE, text1],\n    [DIFF_INSERT, text2]\n  ];\n}\nfunction bisectSplit(text1, text2, x, y, deadline) {\n  const text1a = text1.substring(0, x), text2a = text2.substring(0, y), text1b = text1.substring(x), text2b = text2.substring(y), diffs = doDiff(text1a, text2a, { checkLines: !1, deadline }), diffsb = doDiff(text1b, text2b, { checkLines: !1, deadline });\n  return diffs.concat(diffsb);\n}\nfunction findHalfMatch(text1, text2, timeout = 1) {\n  if (timeout <= 0)\n    return null;\n  const longText = text1.length > text2.length ? text1 : text2, shortText = text1.length > text2.length ? text2 : text1;\n  if (longText.length < 4 || shortText.length * 2 < longText.length)\n    return null;\n  const halfMatch1 = halfMatchI(longText, shortText, Math.ceil(longText.length / 4)), halfMatch2 = halfMatchI(longText, shortText, Math.ceil(longText.length / 2));\n  let halfMatch;\n  if (halfMatch1 && halfMatch2)\n    halfMatch = halfMatch1[4].length > halfMatch2[4].length ? halfMatch1 : halfMatch2;\n  else {\n    if (!halfMatch1 && !halfMatch2)\n      return null;\n    halfMatch2 ? halfMatch1 || (halfMatch = halfMatch2) : halfMatch = halfMatch1;\n  }\n  if (!halfMatch)\n    throw new Error(\"Unable to find a half match.\");\n  let text1A, text1B, text2A, text2B;\n  text1.length > text2.length ? (text1A = halfMatch[0], text1B = halfMatch[1], text2A = halfMatch[2], text2B = halfMatch[3]) : (text2A = halfMatch[0], text2B = halfMatch[1], text1A = halfMatch[2], text1B = halfMatch[3]);\n  const midCommon = halfMatch[4];\n  return [text1A, text1B, text2A, text2B, midCommon];\n}\nfunction halfMatchI(longText, shortText, i) {\n  const seed = longText.slice(i, i + Math.floor(longText.length / 4));\n  let j = -1, bestCommon = \"\", bestLongTextA, bestLongTextB, bestShortTextA, bestShortTextB;\n  for (; (j = shortText.indexOf(seed, j + 1)) !== -1; ) {\n    const prefixLength = getCommonPrefix(longText.slice(i), shortText.slice(j)), suffixLength = getCommonSuffix(longText.slice(0, i), shortText.slice(0, j));\n    bestCommon.length < suffixLength + prefixLength && (bestCommon = shortText.slice(j - suffixLength, j) + shortText.slice(j, j + prefixLength), bestLongTextA = longText.slice(0, i - suffixLength), bestLongTextB = longText.slice(i + prefixLength), bestShortTextA = shortText.slice(0, j - suffixLength), bestShortTextB = shortText.slice(j + prefixLength));\n  }\n  return bestCommon.length * 2 >= longText.length ? [\n    bestLongTextA || \"\",\n    bestLongTextB || \"\",\n    bestShortTextA || \"\",\n    bestShortTextB || \"\",\n    bestCommon || \"\"\n  ] : null;\n}\nfunction charsToLines(diffs, lineArray) {\n  for (let x = 0; x < diffs.length; x++) {\n    const chars = diffs[x][1], text = [];\n    for (let y = 0; y < chars.length; y++)\n      text[y] = lineArray[chars.charCodeAt(y)];\n    diffs[x][1] = text.join(\"\");\n  }\n}\nfunction linesToChars(textA, textB) {\n  const lineArray = [], lineHash = {};\n  lineArray[0] = \"\";\n  function diffLinesToMunge(text) {\n    let chars = \"\", lineStart = 0, lineEnd = -1, lineArrayLength = lineArray.length;\n    for (; lineEnd < text.length - 1; ) {\n      lineEnd = text.indexOf(`\n`, lineStart), lineEnd === -1 && (lineEnd = text.length - 1);\n      let line = text.slice(lineStart, lineEnd + 1);\n      (lineHash.hasOwnProperty ? lineHash.hasOwnProperty(line) : lineHash[line] !== void 0) ? chars += String.fromCharCode(lineHash[line]) : (lineArrayLength === maxLines && (line = text.slice(lineStart), lineEnd = text.length), chars += String.fromCharCode(lineArrayLength), lineHash[line] = lineArrayLength, lineArray[lineArrayLength++] = line), lineStart = lineEnd + 1;\n    }\n    return chars;\n  }\n  let maxLines = 4e4;\n  const chars1 = diffLinesToMunge(textA);\n  maxLines = 65535;\n  const chars2 = diffLinesToMunge(textB);\n  return { chars1, chars2, lineArray };\n}\nfunction doLineModeDiff(textA, textB, opts) {\n  let text1 = textA, text2 = textB;\n  const a = linesToChars(text1, text2);\n  text1 = a.chars1, text2 = a.chars2;\n  const linearray = a.lineArray;\n  let diffs = doDiff(text1, text2, {\n    checkLines: !1,\n    deadline: opts.deadline\n  });\n  charsToLines(diffs, linearray), diffs = cleanupSemantic(diffs), diffs.push([DIFF_EQUAL, \"\"]);\n  let pointer = 0, countDelete = 0, countInsert = 0, textDelete = \"\", textInsert = \"\";\n  for (; pointer < diffs.length; ) {\n    switch (diffs[pointer][0]) {\n      case DIFF_INSERT:\n        countInsert++, textInsert += diffs[pointer][1];\n        break;\n      case DIFF_DELETE:\n        countDelete++, textDelete += diffs[pointer][1];\n        break;\n      case DIFF_EQUAL:\n        if (countDelete >= 1 && countInsert >= 1) {\n          diffs.splice(pointer - countDelete - countInsert, countDelete + countInsert), pointer = pointer - countDelete - countInsert;\n          const aa = doDiff(textDelete, textInsert, {\n            checkLines: !1,\n            deadline: opts.deadline\n          });\n          for (let j = aa.length - 1; j >= 0; j--)\n            diffs.splice(pointer, 0, aa[j]);\n          pointer += aa.length;\n        }\n        countInsert = 0, countDelete = 0, textDelete = \"\", textInsert = \"\";\n        break;\n      default:\n        throw new Error(\"Unknown diff operation.\");\n    }\n    pointer++;\n  }\n  return diffs.pop(), diffs;\n}\nfunction computeDiff(text1, text2, opts) {\n  let diffs;\n  if (!text1)\n    return [[DIFF_INSERT, text2]];\n  if (!text2)\n    return [[DIFF_DELETE, text1]];\n  const longtext = text1.length > text2.length ? text1 : text2, shorttext = text1.length > text2.length ? text2 : text1, i = longtext.indexOf(shorttext);\n  if (i !== -1)\n    return diffs = [\n      [DIFF_INSERT, longtext.substring(0, i)],\n      [DIFF_EQUAL, shorttext],\n      [DIFF_INSERT, longtext.substring(i + shorttext.length)]\n    ], text1.length > text2.length && (diffs[0][0] = DIFF_DELETE, diffs[2][0] = DIFF_DELETE), diffs;\n  if (shorttext.length === 1)\n    return [\n      [DIFF_DELETE, text1],\n      [DIFF_INSERT, text2]\n    ];\n  const halfMatch = findHalfMatch(text1, text2);\n  if (halfMatch) {\n    const text1A = halfMatch[0], text1B = halfMatch[1], text2A = halfMatch[2], text2B = halfMatch[3], midCommon = halfMatch[4], diffsA = doDiff(text1A, text2A, opts), diffsB = doDiff(text1B, text2B, opts);\n    return diffsA.concat([[DIFF_EQUAL, midCommon]], diffsB);\n  }\n  return opts.checkLines && text1.length > 100 && text2.length > 100 ? doLineModeDiff(text1, text2, opts) : bisect(text1, text2, opts.deadline);\n}\nvar __defProp$2 = Object.defineProperty, __getOwnPropSymbols$2 = Object.getOwnPropertySymbols, __hasOwnProp$2 = Object.prototype.hasOwnProperty, __propIsEnum$2 = Object.prototype.propertyIsEnumerable, __defNormalProp$2 = (obj, key, value) => key in obj ? __defProp$2(obj, key, { enumerable: !0, configurable: !0, writable: !0, value }) : obj[key] = value, __spreadValues$2 = (a, b) => {\n  for (var prop in b || (b = {}))\n    __hasOwnProp$2.call(b, prop) && __defNormalProp$2(a, prop, b[prop]);\n  if (__getOwnPropSymbols$2)\n    for (var prop of __getOwnPropSymbols$2(b))\n      __propIsEnum$2.call(b, prop) && __defNormalProp$2(a, prop, b[prop]);\n  return a;\n};\nconst DIFF_DELETE = -1, DIFF_INSERT = 1, DIFF_EQUAL = 0;\nfunction diff(textA, textB, opts) {\n  if (textA === null || textB === null)\n    throw new Error(\"Null input. (diff)\");\n  const diffs = doDiff(textA, textB, createInternalOpts(opts || {}));\n  return adjustDiffForSurrogatePairs(diffs), diffs;\n}\nfunction doDiff(textA, textB, options) {\n  let text1 = textA, text2 = textB;\n  if (text1 === text2)\n    return text1 ? [[DIFF_EQUAL, text1]] : [];\n  let commonlength = getCommonPrefix(text1, text2);\n  const commonprefix = text1.substring(0, commonlength);\n  text1 = text1.substring(commonlength), text2 = text2.substring(commonlength), commonlength = getCommonSuffix(text1, text2);\n  const commonsuffix = text1.substring(text1.length - commonlength);\n  text1 = text1.substring(0, text1.length - commonlength), text2 = text2.substring(0, text2.length - commonlength);\n  let diffs = computeDiff(text1, text2, options);\n  return commonprefix && diffs.unshift([DIFF_EQUAL, commonprefix]), commonsuffix && diffs.push([DIFF_EQUAL, commonsuffix]), diffs = cleanupMerge(diffs), diffs;\n}\nfunction createDeadLine(timeout) {\n  let t = 1;\n  return typeof timeout < \"u\" && (t = timeout <= 0 ? Number.MAX_VALUE : timeout), Date.now() + t * 1e3;\n}\nfunction createInternalOpts(opts) {\n  return __spreadValues$2({\n    checkLines: !0,\n    deadline: createDeadLine(opts.timeout || 1)\n  }, opts);\n}\nfunction combineChar(data, char, dir) {\n  return dir === 1 ? data + char : char + data;\n}\nfunction splitChar(data, dir) {\n  return dir === 1 ? [data.substring(0, data.length - 1), data[data.length - 1]] : [data.substring(1), data[0]];\n}\nfunction hasSharedChar(diffs, i, j, dir) {\n  return dir === 1 ? diffs[i][1][diffs[i][1].length - 1] === diffs[j][1][diffs[j][1].length - 1] : diffs[i][1][0] === diffs[j][1][0];\n}\nfunction deisolateChar(diffs, i, dir) {\n  const inv = dir === 1 ? -1 : 1;\n  let insertIdx = null, deleteIdx = null, j = i + dir;\n  for (; j >= 0 && j < diffs.length && (insertIdx === null || deleteIdx === null); j += dir) {\n    const [op, text2] = diffs[j];\n    if (text2.length !== 0) {\n      if (op === DIFF_INSERT) {\n        insertIdx === null && (insertIdx = j);\n        continue;\n      } else if (op === DIFF_DELETE) {\n        deleteIdx === null && (deleteIdx = j);\n        continue;\n      } else if (op === DIFF_EQUAL) {\n        if (insertIdx === null && deleteIdx === null) {\n          const [rest, char2] = splitChar(diffs[i][1], dir);\n          diffs[i][1] = rest, diffs[j][1] = combineChar(diffs[j][1], char2, inv);\n          return;\n        }\n        break;\n      }\n    }\n  }\n  if (insertIdx !== null && deleteIdx !== null && hasSharedChar(diffs, insertIdx, deleteIdx, dir)) {\n    const [insertText, insertChar] = splitChar(diffs[insertIdx][1], inv), [deleteText] = splitChar(diffs[deleteIdx][1], inv);\n    diffs[insertIdx][1] = insertText, diffs[deleteIdx][1] = deleteText, diffs[i][1] = combineChar(diffs[i][1], insertChar, dir);\n    return;\n  }\n  const [text, char] = splitChar(diffs[i][1], dir);\n  diffs[i][1] = text, insertIdx === null ? (diffs.splice(j, 0, [DIFF_INSERT, char]), deleteIdx !== null && deleteIdx >= j && deleteIdx++) : diffs[insertIdx][1] = combineChar(diffs[insertIdx][1], char, inv), deleteIdx === null ? diffs.splice(j, 0, [DIFF_DELETE, char]) : diffs[deleteIdx][1] = combineChar(diffs[deleteIdx][1], char, inv);\n}\nfunction adjustDiffForSurrogatePairs(diffs) {\n  for (let i = 0; i < diffs.length; i++) {\n    const [diffType, diffText] = diffs[i];\n    if (diffText.length === 0) continue;\n    const firstChar = diffText[0], lastChar = diffText[diffText.length - 1];\n    isHighSurrogate(lastChar) && diffType === DIFF_EQUAL && deisolateChar(diffs, i, 1), isLowSurrogate(firstChar) && diffType === DIFF_EQUAL && deisolateChar(diffs, i, -1);\n  }\n  for (let i = 0; i < diffs.length; i++)\n    diffs[i][1].length === 0 && diffs.splice(i, 1);\n}\nfunction cleanupSemantic(rawDiffs) {\n  let diffs = rawDiffs.map((diff2) => cloneDiff(diff2)), hasChanges = !1;\n  const equalities = [];\n  let equalitiesLength = 0, lastEquality = null, pointer = 0, lengthInsertions1 = 0, lengthDeletions1 = 0, lengthInsertions2 = 0, lengthDeletions2 = 0;\n  for (; pointer < diffs.length; )\n    diffs[pointer][0] === DIFF_EQUAL ? (equalities[equalitiesLength++] = pointer, lengthInsertions1 = lengthInsertions2, lengthDeletions1 = lengthDeletions2, lengthInsertions2 = 0, lengthDeletions2 = 0, lastEquality = diffs[pointer][1]) : (diffs[pointer][0] === DIFF_INSERT ? lengthInsertions2 += diffs[pointer][1].length : lengthDeletions2 += diffs[pointer][1].length, lastEquality && lastEquality.length <= Math.max(lengthInsertions1, lengthDeletions1) && lastEquality.length <= Math.max(lengthInsertions2, lengthDeletions2) && (diffs.splice(equalities[equalitiesLength - 1], 0, [DIFF_DELETE, lastEquality]), diffs[equalities[equalitiesLength - 1] + 1][0] = DIFF_INSERT, equalitiesLength--, equalitiesLength--, pointer = equalitiesLength > 0 ? equalities[equalitiesLength - 1] : -1, lengthInsertions1 = 0, lengthDeletions1 = 0, lengthInsertions2 = 0, lengthDeletions2 = 0, lastEquality = null, hasChanges = !0)), pointer++;\n  for (hasChanges && (diffs = cleanupMerge(diffs)), diffs = cleanupSemanticLossless(diffs), pointer = 1; pointer < diffs.length; ) {\n    if (diffs[pointer - 1][0] === DIFF_DELETE && diffs[pointer][0] === DIFF_INSERT) {\n      const deletion = diffs[pointer - 1][1], insertion = diffs[pointer][1], overlapLength1 = getCommonOverlap(deletion, insertion), overlapLength2 = getCommonOverlap(insertion, deletion);\n      overlapLength1 >= overlapLength2 ? (overlapLength1 >= deletion.length / 2 || overlapLength1 >= insertion.length / 2) && (diffs.splice(pointer, 0, [DIFF_EQUAL, insertion.substring(0, overlapLength1)]), diffs[pointer - 1][1] = deletion.substring(0, deletion.length - overlapLength1), diffs[pointer + 1][1] = insertion.substring(overlapLength1), pointer++) : (overlapLength2 >= deletion.length / 2 || overlapLength2 >= insertion.length / 2) && (diffs.splice(pointer, 0, [DIFF_EQUAL, deletion.substring(0, overlapLength2)]), diffs[pointer - 1][0] = DIFF_INSERT, diffs[pointer - 1][1] = insertion.substring(0, insertion.length - overlapLength2), diffs[pointer + 1][0] = DIFF_DELETE, diffs[pointer + 1][1] = deletion.substring(overlapLength2), pointer++), pointer++;\n    }\n    pointer++;\n  }\n  return diffs;\n}\nconst nonAlphaNumericRegex = /[^a-zA-Z0-9]/, whitespaceRegex = /\\s/, linebreakRegex = /[\\r\\n]/, blanklineEndRegex = /\\n\\r?\\n$/, blanklineStartRegex = /^\\r?\\n\\r?\\n/;\nfunction cleanupSemanticLossless(rawDiffs) {\n  const diffs = rawDiffs.map((diff2) => cloneDiff(diff2));\n  function diffCleanupSemanticScore(one, two) {\n    if (!one || !two)\n      return 6;\n    const char1 = one.charAt(one.length - 1), char2 = two.charAt(0), nonAlphaNumeric1 = char1.match(nonAlphaNumericRegex), nonAlphaNumeric2 = char2.match(nonAlphaNumericRegex), whitespace1 = nonAlphaNumeric1 && char1.match(whitespaceRegex), whitespace2 = nonAlphaNumeric2 && char2.match(whitespaceRegex), lineBreak1 = whitespace1 && char1.match(linebreakRegex), lineBreak2 = whitespace2 && char2.match(linebreakRegex), blankLine1 = lineBreak1 && one.match(blanklineEndRegex), blankLine2 = lineBreak2 && two.match(blanklineStartRegex);\n    return blankLine1 || blankLine2 ? 5 : lineBreak1 || lineBreak2 ? 4 : nonAlphaNumeric1 && !whitespace1 && whitespace2 ? 3 : whitespace1 || whitespace2 ? 2 : nonAlphaNumeric1 || nonAlphaNumeric2 ? 1 : 0;\n  }\n  let pointer = 1;\n  for (; pointer < diffs.length - 1; ) {\n    if (diffs[pointer - 1][0] === DIFF_EQUAL && diffs[pointer + 1][0] === DIFF_EQUAL) {\n      let equality1 = diffs[pointer - 1][1], edit = diffs[pointer][1], equality2 = diffs[pointer + 1][1];\n      const commonOffset = getCommonSuffix(equality1, edit);\n      if (commonOffset) {\n        const commonString = edit.substring(edit.length - commonOffset);\n        equality1 = equality1.substring(0, equality1.length - commonOffset), edit = commonString + edit.substring(0, edit.length - commonOffset), equality2 = commonString + equality2;\n      }\n      let bestEquality1 = equality1, bestEdit = edit, bestEquality2 = equality2, bestScore = diffCleanupSemanticScore(equality1, edit) + diffCleanupSemanticScore(edit, equality2);\n      for (; edit.charAt(0) === equality2.charAt(0); ) {\n        equality1 += edit.charAt(0), edit = edit.substring(1) + equality2.charAt(0), equality2 = equality2.substring(1);\n        const score = diffCleanupSemanticScore(equality1, edit) + diffCleanupSemanticScore(edit, equality2);\n        score >= bestScore && (bestScore = score, bestEquality1 = equality1, bestEdit = edit, bestEquality2 = equality2);\n      }\n      diffs[pointer - 1][1] !== bestEquality1 && (bestEquality1 ? diffs[pointer - 1][1] = bestEquality1 : (diffs.splice(pointer - 1, 1), pointer--), diffs[pointer][1] = bestEdit, bestEquality2 ? diffs[pointer + 1][1] = bestEquality2 : (diffs.splice(pointer + 1, 1), pointer--));\n    }\n    pointer++;\n  }\n  return diffs;\n}\nfunction cleanupMerge(rawDiffs) {\n  let diffs = rawDiffs.map((diff2) => cloneDiff(diff2));\n  diffs.push([DIFF_EQUAL, \"\"]);\n  let pointer = 0, countDelete = 0, countInsert = 0, textDelete = \"\", textInsert = \"\", commonlength;\n  for (; pointer < diffs.length; )\n    switch (diffs[pointer][0]) {\n      case DIFF_INSERT:\n        countInsert++, textInsert += diffs[pointer][1], pointer++;\n        break;\n      case DIFF_DELETE:\n        countDelete++, textDelete += diffs[pointer][1], pointer++;\n        break;\n      case DIFF_EQUAL:\n        countDelete + countInsert > 1 ? (countDelete !== 0 && countInsert !== 0 && (commonlength = getCommonPrefix(textInsert, textDelete), commonlength !== 0 && (pointer - countDelete - countInsert > 0 && diffs[pointer - countDelete - countInsert - 1][0] === DIFF_EQUAL ? diffs[pointer - countDelete - countInsert - 1][1] += textInsert.substring(\n          0,\n          commonlength\n        ) : (diffs.splice(0, 0, [DIFF_EQUAL, textInsert.substring(0, commonlength)]), pointer++), textInsert = textInsert.substring(commonlength), textDelete = textDelete.substring(commonlength)), commonlength = getCommonSuffix(textInsert, textDelete), commonlength !== 0 && (diffs[pointer][1] = textInsert.substring(textInsert.length - commonlength) + diffs[pointer][1], textInsert = textInsert.substring(0, textInsert.length - commonlength), textDelete = textDelete.substring(0, textDelete.length - commonlength))), pointer -= countDelete + countInsert, diffs.splice(pointer, countDelete + countInsert), textDelete.length && (diffs.splice(pointer, 0, [DIFF_DELETE, textDelete]), pointer++), textInsert.length && (diffs.splice(pointer, 0, [DIFF_INSERT, textInsert]), pointer++), pointer++) : pointer !== 0 && diffs[pointer - 1][0] === DIFF_EQUAL ? (diffs[pointer - 1][1] += diffs[pointer][1], diffs.splice(pointer, 1)) : pointer++, countInsert = 0, countDelete = 0, textDelete = \"\", textInsert = \"\";\n        break;\n      default:\n        throw new Error(\"Unknown diff operation\");\n    }\n  diffs[diffs.length - 1][1] === \"\" && diffs.pop();\n  let hasChanges = !1;\n  for (pointer = 1; pointer < diffs.length - 1; )\n    diffs[pointer - 1][0] === DIFF_EQUAL && diffs[pointer + 1][0] === DIFF_EQUAL && (diffs[pointer][1].substring(diffs[pointer][1].length - diffs[pointer - 1][1].length) === diffs[pointer - 1][1] ? (diffs[pointer][1] = diffs[pointer - 1][1] + diffs[pointer][1].substring(0, diffs[pointer][1].length - diffs[pointer - 1][1].length), diffs[pointer + 1][1] = diffs[pointer - 1][1] + diffs[pointer + 1][1], diffs.splice(pointer - 1, 1), hasChanges = !0) : diffs[pointer][1].substring(0, diffs[pointer + 1][1].length) === diffs[pointer + 1][1] && (diffs[pointer - 1][1] += diffs[pointer + 1][1], diffs[pointer][1] = diffs[pointer][1].substring(diffs[pointer + 1][1].length) + diffs[pointer + 1][1], diffs.splice(pointer + 1, 1), hasChanges = !0)), pointer++;\n  return hasChanges && (diffs = cleanupMerge(diffs)), diffs;\n}\nfunction trueCount(...args) {\n  return args.reduce((n, bool) => n + (bool ? 1 : 0), 0);\n}\nfunction cleanupEfficiency(rawDiffs, editCost = 4) {\n  let diffs = rawDiffs.map((diff2) => cloneDiff(diff2)), hasChanges = !1;\n  const equalities = [];\n  let equalitiesLength = 0, lastEquality = null, pointer = 0, preIns = !1, preDel = !1, postIns = !1, postDel = !1;\n  for (; pointer < diffs.length; )\n    diffs[pointer][0] === DIFF_EQUAL ? (diffs[pointer][1].length < editCost && (postIns || postDel) ? (equalities[equalitiesLength++] = pointer, preIns = postIns, preDel = postDel, lastEquality = diffs[pointer][1]) : (equalitiesLength = 0, lastEquality = null), postIns = !1, postDel = !1) : (diffs[pointer][0] === DIFF_DELETE ? postDel = !0 : postIns = !0, lastEquality && (preIns && preDel && postIns && postDel || lastEquality.length < editCost / 2 && trueCount(preIns, preDel, postIns, postDel) === 3) && (diffs.splice(equalities[equalitiesLength - 1], 0, [DIFF_DELETE, lastEquality]), diffs[equalities[equalitiesLength - 1] + 1][0] = DIFF_INSERT, equalitiesLength--, lastEquality = null, preIns && preDel ? (postIns = !0, postDel = !0, equalitiesLength = 0) : (equalitiesLength--, pointer = equalitiesLength > 0 ? equalities[equalitiesLength - 1] : -1, postIns = !1, postDel = !1), hasChanges = !0)), pointer++;\n  return hasChanges && (diffs = cleanupMerge(diffs)), diffs;\n}\nvar __defProp$1 = Object.defineProperty, __getOwnPropSymbols$1 = Object.getOwnPropertySymbols, __hasOwnProp$1 = Object.prototype.hasOwnProperty, __propIsEnum$1 = Object.prototype.propertyIsEnumerable, __defNormalProp$1 = (obj, key, value) => key in obj ? __defProp$1(obj, key, { enumerable: !0, configurable: !0, writable: !0, value }) : obj[key] = value, __spreadValues$1 = (a, b) => {\n  for (var prop in b || (b = {}))\n    __hasOwnProp$1.call(b, prop) && __defNormalProp$1(a, prop, b[prop]);\n  if (__getOwnPropSymbols$1)\n    for (var prop of __getOwnPropSymbols$1(b))\n      __propIsEnum$1.call(b, prop) && __defNormalProp$1(a, prop, b[prop]);\n  return a;\n};\nconst DEFAULT_OPTIONS = {\n  /**\n   * At what point is no match declared (0.0 = perfection, 1.0 = very loose).\n   */\n  threshold: 0.5,\n  /**\n   * How far to search for a match (0 = exact location, 1000+ = broad match).\n   * A match this many characters away from the expected location will add\n   * 1.0 to the score (0.0 is a perfect match).\n   */\n  distance: 1e3\n};\nfunction applyDefaults(options) {\n  return __spreadValues$1(__spreadValues$1({}, DEFAULT_OPTIONS), options);\n}\nconst MAX_BITS$1 = 32;\nfunction bitap(text, pattern, loc, opts = {}) {\n  if (pattern.length > MAX_BITS$1)\n    throw new Error(\"Pattern too long for this browser.\");\n  const options = applyDefaults(opts), s = getAlphabetFromPattern(pattern);\n  function getBitapScore(e, x) {\n    const accuracy = e / pattern.length, proximity = Math.abs(loc - x);\n    return options.distance ? accuracy + proximity / options.distance : proximity ? 1 : accuracy;\n  }\n  let scoreThreshold = options.threshold, bestLoc = text.indexOf(pattern, loc);\n  bestLoc !== -1 && (scoreThreshold = Math.min(getBitapScore(0, bestLoc), scoreThreshold), bestLoc = text.lastIndexOf(pattern, loc + pattern.length), bestLoc !== -1 && (scoreThreshold = Math.min(getBitapScore(0, bestLoc), scoreThreshold)));\n  const matchmask = 1 << pattern.length - 1;\n  bestLoc = -1;\n  let binMin, binMid, binMax = pattern.length + text.length, lastRd = [];\n  for (let d = 0; d < pattern.length; d++) {\n    for (binMin = 0, binMid = binMax; binMin < binMid; )\n      getBitapScore(d, loc + binMid) <= scoreThreshold ? binMin = binMid : binMax = binMid, binMid = Math.floor((binMax - binMin) / 2 + binMin);\n    binMax = binMid;\n    let start = Math.max(1, loc - binMid + 1);\n    const finish = Math.min(loc + binMid, text.length) + pattern.length, rd = new Array(finish + 2);\n    rd[finish + 1] = (1 << d) - 1;\n    for (let j = finish; j >= start; j--) {\n      const charMatch = s[text.charAt(j - 1)];\n      if (d === 0 ? rd[j] = (rd[j + 1] << 1 | 1) & charMatch : rd[j] = (rd[j + 1] << 1 | 1) & charMatch | ((lastRd[j + 1] | lastRd[j]) << 1 | 1) | lastRd[j + 1], rd[j] & matchmask) {\n        const score = getBitapScore(d, j - 1);\n        if (score <= scoreThreshold)\n          if (scoreThreshold = score, bestLoc = j - 1, bestLoc > loc)\n            start = Math.max(1, 2 * loc - bestLoc);\n          else\n            break;\n      }\n    }\n    if (getBitapScore(d + 1, loc) > scoreThreshold)\n      break;\n    lastRd = rd;\n  }\n  return bestLoc;\n}\nfunction getAlphabetFromPattern(pattern) {\n  const s = {};\n  for (let i = 0; i < pattern.length; i++)\n    s[pattern.charAt(i)] = 0;\n  for (let i = 0; i < pattern.length; i++)\n    s[pattern.charAt(i)] |= 1 << pattern.length - i - 1;\n  return s;\n}\nfunction match(text, pattern, searchLocation, options = {}) {\n  if (text === null || pattern === null || searchLocation === null)\n    throw new Error(\"Null input. (match())\");\n  const loc = Math.max(0, Math.min(searchLocation, text.length));\n  if (text === pattern)\n    return 0;\n  if (text.length) {\n    if (text.substring(loc, loc + pattern.length) === pattern)\n      return loc;\n  } else return -1;\n  return bitap(text, pattern, loc, options);\n}\nfunction diffText1(diffs) {\n  const text = [];\n  for (let x = 0; x < diffs.length; x++)\n    diffs[x][0] !== DIFF_INSERT && (text[x] = diffs[x][1]);\n  return text.join(\"\");\n}\nfunction diffText2(diffs) {\n  const text = [];\n  for (let x = 0; x < diffs.length; x++)\n    diffs[x][0] !== DIFF_DELETE && (text[x] = diffs[x][1]);\n  return text.join(\"\");\n}\nfunction levenshtein(diffs) {\n  let leven = 0, insertions = 0, deletions = 0;\n  for (let x = 0; x < diffs.length; x++) {\n    const op = diffs[x][0], data = diffs[x][1];\n    switch (op) {\n      case DIFF_INSERT:\n        insertions += data.length;\n        break;\n      case DIFF_DELETE:\n        deletions += data.length;\n        break;\n      case DIFF_EQUAL:\n        leven += Math.max(insertions, deletions), insertions = 0, deletions = 0;\n        break;\n      default:\n        throw new Error(\"Unknown diff operation.\");\n    }\n  }\n  return leven += Math.max(insertions, deletions), leven;\n}\nfunction xIndex(diffs, location) {\n  let chars1 = 0, chars2 = 0, lastChars1 = 0, lastChars2 = 0, x;\n  for (x = 0; x < diffs.length && (diffs[x][0] !== DIFF_INSERT && (chars1 += diffs[x][1].length), diffs[x][0] !== DIFF_DELETE && (chars2 += diffs[x][1].length), !(chars1 > location)); x++)\n    lastChars1 = chars1, lastChars2 = chars2;\n  return diffs.length !== x && diffs[x][0] === DIFF_DELETE ? lastChars2 : lastChars2 + (location - lastChars1);\n}\nfunction countUtf8Bytes(str) {\n  let bytes = 0;\n  for (let i = 0; i < str.length; i++) {\n    const codePoint = str.codePointAt(i);\n    if (typeof codePoint > \"u\")\n      throw new Error(\"Failed to get codepoint\");\n    bytes += utf8len(codePoint);\n  }\n  return bytes;\n}\nfunction adjustIndiciesToUcs2(patches, base, options = {}) {\n  let byteOffset = 0, idx = 0;\n  function advanceTo(target) {\n    for (; byteOffset < target; ) {\n      const codePoint = base.codePointAt(idx);\n      if (typeof codePoint > \"u\")\n        return idx;\n      byteOffset += utf8len(codePoint), codePoint > 65535 ? idx += 2 : idx += 1;\n    }\n    if (!options.allowExceedingIndices && byteOffset !== target)\n      throw new Error(\"Failed to determine byte offset\");\n    return idx;\n  }\n  const adjusted = [];\n  for (const patch of patches)\n    adjusted.push({\n      diffs: patch.diffs.map((diff2) => cloneDiff(diff2)),\n      start1: advanceTo(patch.start1),\n      start2: advanceTo(patch.start2),\n      utf8Start1: patch.utf8Start1,\n      utf8Start2: patch.utf8Start2,\n      length1: patch.length1,\n      length2: patch.length2,\n      utf8Length1: patch.utf8Length1,\n      utf8Length2: patch.utf8Length2\n    });\n  return adjusted;\n}\nfunction utf8len(codePoint) {\n  return codePoint <= 127 ? 1 : codePoint <= 2047 ? 2 : codePoint <= 65535 ? 3 : 4;\n}\nconst MAX_BITS = 32, DEFAULT_MARGIN = 4;\nfunction addPadding(patches, margin = DEFAULT_MARGIN) {\n  const paddingLength = margin;\n  let nullPadding = \"\";\n  for (let x = 1; x <= paddingLength; x++)\n    nullPadding += String.fromCharCode(x);\n  for (const p of patches)\n    p.start1 += paddingLength, p.start2 += paddingLength, p.utf8Start1 += paddingLength, p.utf8Start2 += paddingLength;\n  let patch = patches[0], diffs = patch.diffs;\n  if (diffs.length === 0 || diffs[0][0] !== DIFF_EQUAL)\n    diffs.unshift([DIFF_EQUAL, nullPadding]), patch.start1 -= paddingLength, patch.start2 -= paddingLength, patch.utf8Start1 -= paddingLength, patch.utf8Start2 -= paddingLength, patch.length1 += paddingLength, patch.length2 += paddingLength, patch.utf8Length1 += paddingLength, patch.utf8Length2 += paddingLength;\n  else if (paddingLength > diffs[0][1].length) {\n    const firstDiffLength = diffs[0][1].length, extraLength = paddingLength - firstDiffLength;\n    diffs[0][1] = nullPadding.substring(firstDiffLength) + diffs[0][1], patch.start1 -= extraLength, patch.start2 -= extraLength, patch.utf8Start1 -= extraLength, patch.utf8Start2 -= extraLength, patch.length1 += extraLength, patch.length2 += extraLength, patch.utf8Length1 += extraLength, patch.utf8Length2 += extraLength;\n  }\n  if (patch = patches[patches.length - 1], diffs = patch.diffs, diffs.length === 0 || diffs[diffs.length - 1][0] !== DIFF_EQUAL)\n    diffs.push([DIFF_EQUAL, nullPadding]), patch.length1 += paddingLength, patch.length2 += paddingLength, patch.utf8Length1 += paddingLength, patch.utf8Length2 += paddingLength;\n  else if (paddingLength > diffs[diffs.length - 1][1].length) {\n    const extraLength = paddingLength - diffs[diffs.length - 1][1].length;\n    diffs[diffs.length - 1][1] += nullPadding.substring(0, extraLength), patch.length1 += extraLength, patch.length2 += extraLength, patch.utf8Length1 += extraLength, patch.utf8Length2 += extraLength;\n  }\n  return nullPadding;\n}\nfunction createPatchObject(start1, start2) {\n  return {\n    diffs: [],\n    start1,\n    start2,\n    utf8Start1: start1,\n    utf8Start2: start2,\n    length1: 0,\n    length2: 0,\n    utf8Length1: 0,\n    utf8Length2: 0\n  };\n}\nfunction splitMax(patches, margin = DEFAULT_MARGIN) {\n  const patchSize = MAX_BITS;\n  for (let x = 0; x < patches.length; x++) {\n    if (patches[x].length1 <= patchSize)\n      continue;\n    const bigpatch = patches[x];\n    patches.splice(x--, 1);\n    let start1 = bigpatch.start1, start2 = bigpatch.start2, preContext = \"\";\n    for (; bigpatch.diffs.length !== 0; ) {\n      const patch = createPatchObject(start1 - preContext.length, start2 - preContext.length);\n      let empty = !0;\n      if (preContext !== \"\") {\n        const precontextByteCount = countUtf8Bytes(preContext);\n        patch.length1 = preContext.length, patch.utf8Length1 = precontextByteCount, patch.length2 = preContext.length, patch.utf8Length2 = precontextByteCount, patch.diffs.push([DIFF_EQUAL, preContext]);\n      }\n      for (; bigpatch.diffs.length !== 0 && patch.length1 < patchSize - margin; ) {\n        const diffType = bigpatch.diffs[0][0];\n        let diffText = bigpatch.diffs[0][1], diffTextByteCount = countUtf8Bytes(diffText);\n        if (diffType === DIFF_INSERT) {\n          patch.length2 += diffText.length, patch.utf8Length2 += diffTextByteCount, start2 += diffText.length;\n          const diff2 = bigpatch.diffs.shift();\n          diff2 && patch.diffs.push(diff2), empty = !1;\n        } else diffType === DIFF_DELETE && patch.diffs.length === 1 && patch.diffs[0][0] === DIFF_EQUAL && diffText.length > 2 * patchSize ? (patch.length1 += diffText.length, patch.utf8Length1 += diffTextByteCount, start1 += diffText.length, empty = !1, patch.diffs.push([diffType, diffText]), bigpatch.diffs.shift()) : (diffText = diffText.substring(0, patchSize - patch.length1 - margin), diffTextByteCount = countUtf8Bytes(diffText), patch.length1 += diffText.length, patch.utf8Length1 += diffTextByteCount, start1 += diffText.length, diffType === DIFF_EQUAL ? (patch.length2 += diffText.length, patch.utf8Length2 += diffTextByteCount, start2 += diffText.length) : empty = !1, patch.diffs.push([diffType, diffText]), diffText === bigpatch.diffs[0][1] ? bigpatch.diffs.shift() : bigpatch.diffs[0][1] = bigpatch.diffs[0][1].substring(diffText.length));\n      }\n      preContext = diffText2(patch.diffs), preContext = preContext.substring(preContext.length - margin);\n      const postContext = diffText1(bigpatch.diffs).substring(0, margin), postContextByteCount = countUtf8Bytes(postContext);\n      postContext !== \"\" && (patch.length1 += postContext.length, patch.length2 += postContext.length, patch.utf8Length1 += postContextByteCount, patch.utf8Length2 += postContextByteCount, patch.diffs.length !== 0 && patch.diffs[patch.diffs.length - 1][0] === DIFF_EQUAL ? patch.diffs[patch.diffs.length - 1][1] += postContext : patch.diffs.push([DIFF_EQUAL, postContext])), empty || patches.splice(++x, 0, patch);\n    }\n  }\n}\nfunction apply(patches, originalText, opts = {}) {\n  if (typeof patches == \"string\")\n    throw new Error(\"Patches must be an array - pass the patch to `parsePatch()` first\");\n  let text = originalText;\n  if (patches.length === 0)\n    return [text, []];\n  const parsed = adjustIndiciesToUcs2(patches, text, {\n    allowExceedingIndices: opts.allowExceedingIndices\n  }), margin = opts.margin || DEFAULT_MARGIN, deleteThreshold = opts.deleteThreshold || 0.4, nullPadding = addPadding(parsed, margin);\n  text = nullPadding + text + nullPadding, splitMax(parsed, margin);\n  let delta = 0;\n  const results = [];\n  for (let x = 0; x < parsed.length; x++) {\n    const expectedLoc = parsed[x].start2 + delta, text1 = diffText1(parsed[x].diffs);\n    let startLoc, endLoc = -1;\n    if (text1.length > MAX_BITS ? (startLoc = match(text, text1.substring(0, MAX_BITS), expectedLoc), startLoc !== -1 && (endLoc = match(\n      text,\n      text1.substring(text1.length - MAX_BITS),\n      expectedLoc + text1.length - MAX_BITS\n    ), (endLoc === -1 || startLoc >= endLoc) && (startLoc = -1))) : startLoc = match(text, text1, expectedLoc), startLoc === -1)\n      results[x] = !1, delta -= parsed[x].length2 - parsed[x].length1;\n    else {\n      results[x] = !0, delta = startLoc - expectedLoc;\n      let text2;\n      if (endLoc === -1 ? text2 = text.substring(startLoc, startLoc + text1.length) : text2 = text.substring(startLoc, endLoc + MAX_BITS), text1 === text2)\n        text = text.substring(0, startLoc) + diffText2(parsed[x].diffs) + text.substring(startLoc + text1.length);\n      else {\n        let diffs = diff(text1, text2, { checkLines: !1 });\n        if (text1.length > MAX_BITS && levenshtein(diffs) / text1.length > deleteThreshold)\n          results[x] = !1;\n        else {\n          diffs = cleanupSemanticLossless(diffs);\n          let index1 = 0, index2 = 0;\n          for (let y = 0; y < parsed[x].diffs.length; y++) {\n            const mod = parsed[x].diffs[y];\n            mod[0] !== DIFF_EQUAL && (index2 = xIndex(diffs, index1)), mod[0] === DIFF_INSERT ? text = text.substring(0, startLoc + index2) + mod[1] + text.substring(startLoc + index2) : mod[0] === DIFF_DELETE && (text = text.substring(0, startLoc + index2) + text.substring(startLoc + xIndex(diffs, index1 + mod[1].length))), mod[0] !== DIFF_DELETE && (index1 += mod[1].length);\n          }\n        }\n      }\n    }\n  }\n  return text = text.substring(nullPadding.length, text.length - nullPadding.length), [text, results];\n}\nvar __defProp = Object.defineProperty, __getOwnPropSymbols = Object.getOwnPropertySymbols, __hasOwnProp = Object.prototype.hasOwnProperty, __propIsEnum = Object.prototype.propertyIsEnumerable, __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: !0, configurable: !0, writable: !0, value }) : obj[key] = value, __spreadValues = (a, b) => {\n  for (var prop in b || (b = {}))\n    __hasOwnProp.call(b, prop) && __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(b))\n      __propIsEnum.call(b, prop) && __defNormalProp(a, prop, b[prop]);\n  return a;\n};\nconst DEFAULT_OPTS = {\n  margin: 4\n};\nfunction getDefaultOpts(opts = {}) {\n  return __spreadValues(__spreadValues({}, DEFAULT_OPTS), opts);\n}\nfunction make(a, b, options) {\n  if (typeof a == \"string\" && typeof b == \"string\") {\n    let diffs = diff(a, b, { checkLines: !0 });\n    return diffs.length > 2 && (diffs = cleanupSemantic(diffs), diffs = cleanupEfficiency(diffs)), _make(a, diffs, getDefaultOpts(options));\n  }\n  if (a && Array.isArray(a) && typeof b > \"u\")\n    return _make(diffText1(a), a, getDefaultOpts(options));\n  if (typeof a == \"string\" && b && Array.isArray(b))\n    return _make(a, b, getDefaultOpts(options));\n  throw new Error(\"Unknown call format to make()\");\n}\nfunction _make(textA, diffs, options) {\n  if (diffs.length === 0)\n    return [];\n  const patches = [];\n  let patch = createPatchObject(0, 0), patchDiffLength = 0, charCount1 = 0, charCount2 = 0, utf8Count1 = 0, utf8Count2 = 0, prepatchText = textA, postpatchText = textA;\n  for (let x = 0; x < diffs.length; x++) {\n    const currentDiff = diffs[x], [diffType, diffText] = currentDiff, diffTextLength = diffText.length, diffByteLength = countUtf8Bytes(diffText);\n    switch (!patchDiffLength && diffType !== DIFF_EQUAL && (patch.start1 = charCount1, patch.start2 = charCount2, patch.utf8Start1 = utf8Count1, patch.utf8Start2 = utf8Count2), diffType) {\n      case DIFF_INSERT:\n        patch.diffs[patchDiffLength++] = currentDiff, patch.length2 += diffTextLength, patch.utf8Length2 += diffByteLength, postpatchText = postpatchText.substring(0, charCount2) + diffText + postpatchText.substring(charCount2);\n        break;\n      case DIFF_DELETE:\n        patch.length1 += diffTextLength, patch.utf8Length1 += diffByteLength, patch.diffs[patchDiffLength++] = currentDiff, postpatchText = postpatchText.substring(0, charCount2) + postpatchText.substring(charCount2 + diffTextLength);\n        break;\n      case DIFF_EQUAL:\n        diffTextLength <= 2 * options.margin && patchDiffLength && diffs.length !== x + 1 ? (patch.diffs[patchDiffLength++] = currentDiff, patch.length1 += diffTextLength, patch.length2 += diffTextLength, patch.utf8Length1 += diffByteLength, patch.utf8Length2 += diffByteLength) : diffTextLength >= 2 * options.margin && patchDiffLength && (addContext(patch, prepatchText, options), patches.push(patch), patch = createPatchObject(-1, -1), patchDiffLength = 0, prepatchText = postpatchText, charCount1 = charCount2, utf8Count1 = utf8Count2);\n        break;\n      default:\n        throw new Error(\"Unknown diff type\");\n    }\n    diffType !== DIFF_INSERT && (charCount1 += diffTextLength, utf8Count1 += diffByteLength), diffType !== DIFF_DELETE && (charCount2 += diffTextLength, utf8Count2 += diffByteLength);\n  }\n  return patchDiffLength && (addContext(patch, prepatchText, options), patches.push(patch)), patches;\n}\nfunction addContext(patch, text, opts) {\n  if (text.length === 0)\n    return;\n  let pattern = text.substring(patch.start2, patch.start2 + patch.length1), padding = 0;\n  for (; text.indexOf(pattern) !== text.lastIndexOf(pattern) && pattern.length < MAX_BITS - opts.margin - opts.margin; )\n    padding += opts.margin, pattern = text.substring(patch.start2 - padding, patch.start2 + patch.length1 + padding);\n  padding += opts.margin;\n  let prefixStart = patch.start2 - padding;\n  prefixStart >= 1 && isLowSurrogate(text[prefixStart]) && prefixStart--;\n  const prefix = text.substring(prefixStart, patch.start2);\n  prefix && patch.diffs.unshift([DIFF_EQUAL, prefix]);\n  const prefixLength = prefix.length, prefixUtf8Length = countUtf8Bytes(prefix);\n  let suffixEnd = patch.start2 + patch.length1 + padding;\n  suffixEnd < text.length && isLowSurrogate(text[suffixEnd]) && suffixEnd++;\n  const suffix = text.substring(patch.start2 + patch.length1, suffixEnd);\n  suffix && patch.diffs.push([DIFF_EQUAL, suffix]);\n  const suffixLength = suffix.length, suffixUtf8Length = countUtf8Bytes(suffix);\n  patch.start1 -= prefixLength, patch.start2 -= prefixLength, patch.utf8Start1 -= prefixUtf8Length, patch.utf8Start2 -= prefixUtf8Length, patch.length1 += prefixLength + suffixLength, patch.length2 += prefixLength + suffixLength, patch.utf8Length1 += prefixUtf8Length + suffixUtf8Length, patch.utf8Length2 += prefixUtf8Length + suffixUtf8Length;\n}\nconst patchHeader = /^@@ -(\\d+),?(\\d*) \\+(\\d+),?(\\d*) @@$/;\nfunction parse(textline) {\n  if (!textline)\n    return [];\n  const patches = [], lines = textline.split(`\n`);\n  let textPointer = 0;\n  for (; textPointer < lines.length; ) {\n    const m = lines[textPointer].match(patchHeader);\n    if (!m)\n      throw new Error(`Invalid patch string: ${lines[textPointer]}`);\n    const patch = createPatchObject(toInt(m[1]), toInt(m[3]));\n    for (patches.push(patch), m[2] === \"\" ? (patch.start1--, patch.utf8Start1--, patch.length1 = 1, patch.utf8Length1 = 1) : m[2] === \"0\" ? (patch.length1 = 0, patch.utf8Length1 = 0) : (patch.start1--, patch.utf8Start1--, patch.utf8Length1 = toInt(m[2]), patch.length1 = patch.utf8Length1), m[4] === \"\" ? (patch.start2--, patch.utf8Start2--, patch.length2 = 1, patch.utf8Length2 = 1) : m[4] === \"0\" ? (patch.length2 = 0, patch.utf8Length2 = 0) : (patch.start2--, patch.utf8Start2--, patch.utf8Length2 = toInt(m[4]), patch.length2 = patch.utf8Length2), textPointer++; textPointer < lines.length; ) {\n      const currentLine = lines[textPointer], sign = currentLine.charAt(0);\n      if (sign === \"@\")\n        break;\n      if (sign === \"\") {\n        textPointer++;\n        continue;\n      }\n      let line;\n      try {\n        line = decodeURI(currentLine.slice(1));\n      } catch (ex) {\n        throw new Error(`Illegal escape in parse: ${currentLine}`);\n      }\n      const utf8Diff = countUtf8Bytes(line) - line.length;\n      if (sign === \"-\")\n        patch.diffs.push([DIFF_DELETE, line]), patch.length1 -= utf8Diff;\n      else if (sign === \"+\")\n        patch.diffs.push([DIFF_INSERT, line]), patch.length2 -= utf8Diff;\n      else if (sign === \" \")\n        patch.diffs.push([DIFF_EQUAL, line]), patch.length1 -= utf8Diff, patch.length2 -= utf8Diff;\n      else\n        throw new Error(`Invalid patch mode \"${sign}\" in: ${line}`);\n      textPointer++;\n    }\n  }\n  return patches;\n}\nfunction toInt(num) {\n  return parseInt(num, 10);\n}\nfunction stringify(patches) {\n  return patches.map(stringifyPatch).join(\"\");\n}\nfunction stringifyPatch(patch) {\n  const { utf8Length1, utf8Length2, utf8Start1, utf8Start2, diffs } = patch;\n  let coords1;\n  utf8Length1 === 0 ? coords1 = `${utf8Start1},0` : utf8Length1 === 1 ? coords1 = `${utf8Start1 + 1}` : coords1 = `${utf8Start1 + 1},${utf8Length1}`;\n  let coords2;\n  utf8Length2 === 0 ? coords2 = `${utf8Start2},0` : utf8Length2 === 1 ? coords2 = `${utf8Start2 + 1}` : coords2 = `${utf8Start2 + 1},${utf8Length2}`;\n  const text = [`@@ -${coords1} +${coords2} @@\n`];\n  let op;\n  for (let x = 0; x < diffs.length; x++) {\n    switch (diffs[x][0]) {\n      case DIFF_INSERT:\n        op = \"+\";\n        break;\n      case DIFF_DELETE:\n        op = \"-\";\n        break;\n      case DIFF_EQUAL:\n        op = \" \";\n        break;\n      default:\n        throw new Error(\"Unknown patch operation.\");\n    }\n    text[x + 1] = `${op + encodeURI(diffs[x][1])}\n`;\n  }\n  return text.join(\"\").replace(/%20/g, \" \");\n}\nexport {\n  DIFF_DELETE,\n  DIFF_EQUAL,\n  DIFF_INSERT,\n  adjustIndiciesToUcs2,\n  apply as applyPatches,\n  cleanupEfficiency,\n  cleanupSemantic,\n  diff as makeDiff,\n  make as makePatches,\n  match,\n  parse as parsePatch,\n  stringifyPatch,\n  stringify as stringifyPatches,\n  xIndex\n};\n//# sourceMappingURL=index.js.map\n","import type {Editor} from 'slate'\nimport {defaultKeyGenerator} from '../utils/key-generator'\n\nconst CURRENT_UNDO_STEP: WeakMap<Editor, {undoStepId: string} | undefined> =\n  new WeakMap()\n\nexport function withUndoStep(editor: Editor, fn: () => void) {\n  const current = CURRENT_UNDO_STEP.get(editor)\n\n  if (current) {\n    fn()\n    return\n  }\n\n  CURRENT_UNDO_STEP.set(\n    editor,\n    current ?? {\n      undoStepId: defaultKeyGenerator(),\n    },\n  )\n  fn()\n  CURRENT_UNDO_STEP.set(editor, undefined)\n}\n\nexport function getCurrentUndoStepId(editor: Editor) {\n  return CURRENT_UNDO_STEP.get(editor)?.undoStepId\n}\n\nexport function createUndoStep(editor: Editor) {\n  CURRENT_UNDO_STEP.set(editor, {\n    undoStepId: defaultKeyGenerator(),\n  })\n}\n\nexport function clearUndoStep(editor: Editor) {\n  CURRENT_UNDO_STEP.set(editor, undefined)\n}\n","/**\n * This plugin will make the editor support undo/redo on the local state only.\n * The undo/redo steps are rebased against incoming patches since the step occurred.\n */\n\nimport type {Patch} from '@portabletext/patches'\nimport {\n  DIFF_DELETE,\n  DIFF_EQUAL,\n  DIFF_INSERT,\n  parsePatch,\n} from '@sanity/diff-match-patch'\nimport type {PortableTextBlock} from '@sanity/types'\nimport {flatten, isEqual} from 'lodash'\nimport {\n  Editor,\n  Operation,\n  Path,\n  Transforms,\n  type Descendant,\n  type SelectionOperation,\n} from 'slate'\nimport {debugWithName} from '../../internal-utils/debug'\nimport {fromSlateValue} from '../../internal-utils/values'\nimport type {BehaviorOperationImplementation} from '../../operations/behavior.operations'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\nimport {isNormalizingNode} from '../with-normalizing-node'\nimport {getCurrentUndoStepId} from '../with-undo-step'\nimport {isChangingRemotely} from '../withChanges'\nimport {\n  isRedoing,\n  isUndoing,\n  setIsRedoing,\n  setIsUndoing,\n  withRedoing,\n  withUndoing,\n} from '../withUndoRedo'\n\nconst debug = debugWithName('plugin:withUndoRedo')\nconst debugVerbose = debug.enabled && false\n\nconst SAVING = new WeakMap<Editor, boolean | undefined>()\nconst REMOTE_PATCHES = new WeakMap<\n  Editor,\n  {\n    patch: Patch\n    time: Date\n    snapshot: PortableTextBlock[] | undefined\n    previousSnapshot: PortableTextBlock[] | undefined\n  }[]\n>()\nconst UNDO_STEP_LIMIT = 1000\n\nconst isSaving = (editor: Editor): boolean | undefined => {\n  const state = SAVING.get(editor)\n  return state === undefined ? true : state\n}\n\nexport interface Options {\n  editorActor: EditorActor\n  subscriptions: Array<() => () => void>\n}\n\nconst getRemotePatches = (editor: Editor) => {\n  if (!REMOTE_PATCHES.get(editor)) {\n    REMOTE_PATCHES.set(editor, [])\n  }\n  return REMOTE_PATCHES.get(editor) || []\n}\n\nexport function createWithUndoRedo(\n  options: Options,\n): (editor: PortableTextSlateEditor) => PortableTextSlateEditor {\n  const {editorActor} = options\n\n  return (editor: PortableTextSlateEditor) => {\n    let previousSnapshot: PortableTextBlock[] | undefined = fromSlateValue(\n      editor.children,\n      editorActor.getSnapshot().context.schema.block.name,\n    )\n    const remotePatches = getRemotePatches(editor)\n    let previousUndoStepId = getCurrentUndoStepId(editor)\n\n    options.subscriptions.push(() => {\n      debug('Subscribing to patches')\n      const sub = editorActor.on('patches', ({patches, snapshot}) => {\n        let reset = false\n        patches.forEach((patch) => {\n          if (!reset && patch.origin !== 'local' && remotePatches) {\n            if (patch.type === 'unset' && patch.path.length === 0) {\n              debug(\n                'Someone else cleared the content, resetting undo/redo history',\n              )\n              editor.history = {undos: [], redos: []}\n              remotePatches.splice(0, remotePatches.length)\n              SAVING.set(editor, true)\n              reset = true\n              return\n            }\n            remotePatches.push({\n              patch,\n              time: new Date(),\n              snapshot,\n              previousSnapshot,\n            })\n          }\n        })\n        previousSnapshot = snapshot\n      })\n      return () => {\n        debug('Unsubscribing to patches')\n        sub.unsubscribe()\n      }\n    })\n\n    editor.history = {undos: [], redos: []}\n\n    const {apply} = editor\n\n    editor.apply = (op: Operation) => {\n      if (editorActor.getSnapshot().matches({'edit mode': 'read only'})) {\n        apply(op)\n        return\n      }\n\n      /**\n       * We don't want to run any side effects when the editor is processing\n       * remote changes.\n       */\n      if (isChangingRemotely(editor)) {\n        apply(op)\n        return\n      }\n\n      /**\n       * We don't want to run any side effects when the editor is undoing or\n       * redoing operations.\n       */\n      if (isUndoing(editor) || isRedoing(editor)) {\n        apply(op)\n        return\n      }\n\n      const {operations, history} = editor\n      const {undos} = history\n      const step = undos[undos.length - 1]\n      const lastOp =\n        step && step.operations && step.operations[step.operations.length - 1]\n      const overwrite = shouldOverwrite(op, lastOp)\n      const save = isSaving(editor)\n\n      const currentUndoStepId = getCurrentUndoStepId(editor)\n\n      let merge =\n        currentUndoStepId === previousUndoStepId || isNormalizingNode(editor)\n\n      if (save) {\n        if (!step) {\n          merge = false\n        } else if (operations.length === 0) {\n          merge =\n            currentUndoStepId === undefined && previousUndoStepId === undefined\n              ? shouldMerge(op, lastOp) || overwrite\n              : merge\n        }\n\n        if (step && merge) {\n          step.operations.push(op)\n        } else {\n          const newStep = {\n            operations: [\n              ...(editor.selection === null\n                ? []\n                : [createSelectOperation(editor)]),\n              op,\n            ],\n            timestamp: new Date(),\n          }\n          undos.push(newStep)\n          debug('Created new undo step', step)\n        }\n\n        while (undos.length > UNDO_STEP_LIMIT) {\n          undos.shift()\n        }\n\n        if (shouldClear(op)) {\n          history.redos = []\n        }\n      }\n\n      previousUndoStepId = currentUndoStepId\n\n      apply(op)\n    }\n\n    // Plugin return\n    return editor\n  }\n}\n\nexport const historyUndoOperationImplementation: BehaviorOperationImplementation<\n  'history.undo'\n> = ({operation}) => {\n  const editor = operation.editor\n  const {undos} = editor.history\n  const remotePatches = getRemotePatches(editor)\n\n  if (undos.length > 0) {\n    const step = undos[undos.length - 1]\n    debug('Undoing', step)\n    if (step.operations.length > 0) {\n      const otherPatches = remotePatches.filter(\n        (item) => item.time >= step.timestamp,\n      )\n      let transformedOperations = step.operations\n      otherPatches.forEach((item) => {\n        transformedOperations = flatten(\n          transformedOperations.map((op) =>\n            transformOperation(\n              editor,\n              item.patch,\n              op,\n              item.snapshot,\n              item.previousSnapshot,\n            ),\n          ),\n        )\n      })\n      const reversedOperations = transformedOperations\n        .map(Operation.inverse)\n        .reverse()\n\n      try {\n        Editor.withoutNormalizing(editor, () => {\n          withUndoing(editor, () => {\n            withoutSaving(editor, () => {\n              reversedOperations.forEach((op) => {\n                editor.apply(op)\n              })\n            })\n          })\n        })\n      } catch (err) {\n        debug('Could not perform undo step', err)\n        remotePatches.splice(0, remotePatches.length)\n        Transforms.deselect(editor)\n        editor.history = {undos: [], redos: []}\n        SAVING.set(editor, true)\n        setIsUndoing(editor, false)\n        editor.onChange()\n        return\n      }\n      editor.history.redos.push(step)\n      editor.history.undos.pop()\n    }\n  }\n}\n\nexport const historyRedoOperationImplementation: BehaviorOperationImplementation<\n  'history.redo'\n> = ({operation}) => {\n  const editor = operation.editor\n  const {redos} = editor.history\n  const remotePatches = getRemotePatches(editor)\n\n  if (redos.length > 0) {\n    const step = redos[redos.length - 1]\n    debug('Redoing', step)\n    if (step.operations.length > 0) {\n      const otherPatches = remotePatches.filter(\n        (item) => item.time >= step.timestamp,\n      )\n      let transformedOperations = step.operations\n      otherPatches.forEach((item) => {\n        transformedOperations = flatten(\n          transformedOperations.map((op) =>\n            transformOperation(\n              editor,\n              item.patch,\n              op,\n              item.snapshot,\n              item.previousSnapshot,\n            ),\n          ),\n        )\n      })\n      try {\n        Editor.withoutNormalizing(editor, () => {\n          withRedoing(editor, () => {\n            withoutSaving(editor, () => {\n              transformedOperations.forEach((op) => {\n                editor.apply(op)\n              })\n            })\n          })\n        })\n      } catch (err) {\n        debug('Could not perform redo step', err)\n        remotePatches.splice(0, remotePatches.length)\n        Transforms.deselect(editor)\n        editor.history = {undos: [], redos: []}\n        SAVING.set(editor, true)\n        setIsRedoing(editor, false)\n        editor.onChange()\n        return\n      }\n      editor.history.undos.push(step)\n      editor.history.redos.pop()\n    }\n  }\n}\n\n/**\n * This will adjust the operation paths and offsets according to the\n * remote patches by other editors since the step operations was performed.\n */\nfunction transformOperation(\n  editor: PortableTextSlateEditor,\n  patch: Patch,\n  operation: Operation,\n  snapshot: PortableTextBlock[] | undefined,\n  previousSnapshot: PortableTextBlock[] | undefined,\n): Operation[] {\n  if (debugVerbose) {\n    debug(\n      `Adjusting '${operation.type}' operation paths for '${patch.type}' patch`,\n    )\n    debug(`Operation ${JSON.stringify(operation)}`)\n    debug(`Patch ${JSON.stringify(patch)}`)\n  }\n\n  const transformedOperation = {...operation}\n\n  if (patch.type === 'insert' && patch.path.length === 1) {\n    const insertBlockIndex = (snapshot || []).findIndex((blk) =>\n      isEqual({_key: blk._key}, patch.path[0]),\n    )\n    debug(\n      `Adjusting block path (+${patch.items.length}) for '${transformedOperation.type}' operation and patch '${patch.type}'`,\n    )\n    return [\n      adjustBlockPath(\n        transformedOperation,\n        patch.items.length,\n        insertBlockIndex,\n      ),\n    ]\n  }\n\n  if (patch.type === 'unset' && patch.path.length === 1) {\n    const unsetBlockIndex = (previousSnapshot || []).findIndex((blk) =>\n      isEqual({_key: blk._key}, patch.path[0]),\n    )\n    // If this operation is targeting the same block that got removed, return empty\n    if (\n      'path' in transformedOperation &&\n      Array.isArray(transformedOperation.path) &&\n      transformedOperation.path[0] === unsetBlockIndex\n    ) {\n      debug('Skipping transformation that targeted removed block')\n      return []\n    }\n    if (debugVerbose) {\n      debug(`Selection ${JSON.stringify(editor.selection)}`)\n      debug(\n        `Adjusting block path (-1) for '${transformedOperation.type}' operation and patch '${patch.type}'`,\n      )\n    }\n    return [adjustBlockPath(transformedOperation, -1, unsetBlockIndex)]\n  }\n\n  // Someone reset the whole value\n  if (patch.type === 'unset' && patch.path.length === 0) {\n    debug(\n      `Adjusting selection for unset everything patch and ${operation.type} operation`,\n    )\n    return []\n  }\n\n  if (patch.type === 'diffMatchPatch') {\n    const operationTargetBlock = findOperationTargetBlock(\n      editor,\n      transformedOperation,\n    )\n    if (\n      !operationTargetBlock ||\n      !isEqual({_key: operationTargetBlock._key}, patch.path[0])\n    ) {\n      return [transformedOperation]\n    }\n    const diffPatches = parsePatch(patch.value)\n    diffPatches.forEach((diffPatch) => {\n      let adjustOffsetBy = 0\n      let changedOffset = diffPatch.utf8Start1\n      const {diffs} = diffPatch\n      diffs.forEach((diff, index) => {\n        const [diffType, text] = diff\n        if (diffType === DIFF_INSERT) {\n          adjustOffsetBy += text.length\n          changedOffset += text.length\n        } else if (diffType === DIFF_DELETE) {\n          adjustOffsetBy -= text.length\n          changedOffset -= text.length\n        } else if (diffType === DIFF_EQUAL) {\n          // Only up to the point where there are no other changes\n          if (!diffs.slice(index).every(([dType]) => dType === DIFF_EQUAL)) {\n            changedOffset += text.length\n          }\n        }\n      })\n      // Adjust accordingly if someone inserted text in the same node before us\n      if (transformedOperation.type === 'insert_text') {\n        if (changedOffset < transformedOperation.offset) {\n          transformedOperation.offset += adjustOffsetBy\n        }\n      }\n      // Adjust accordingly if someone removed text in the same node before us\n      if (transformedOperation.type === 'remove_text') {\n        if (\n          changedOffset <=\n          transformedOperation.offset - transformedOperation.text.length\n        ) {\n          transformedOperation.offset += adjustOffsetBy\n        }\n      }\n      // Adjust set_selection operation's points to new offset\n      if (transformedOperation.type === 'set_selection') {\n        const currentFocus = transformedOperation.properties?.focus\n          ? {...transformedOperation.properties.focus}\n          : undefined\n        const currentAnchor = transformedOperation?.properties?.anchor\n          ? {...transformedOperation.properties.anchor}\n          : undefined\n        const newFocus = transformedOperation?.newProperties?.focus\n          ? {...transformedOperation.newProperties.focus}\n          : undefined\n        const newAnchor = transformedOperation?.newProperties?.anchor\n          ? {...transformedOperation.newProperties.anchor}\n          : undefined\n        if ((currentFocus && currentAnchor) || (newFocus && newAnchor)) {\n          const points = [currentFocus, currentAnchor, newFocus, newAnchor]\n          points.forEach((point) => {\n            if (point && changedOffset < point.offset) {\n              point.offset += adjustOffsetBy\n            }\n          })\n          if (currentFocus && currentAnchor) {\n            transformedOperation.properties = {\n              focus: currentFocus,\n              anchor: currentAnchor,\n            }\n          }\n          if (newFocus && newAnchor) {\n            transformedOperation.newProperties = {\n              focus: newFocus,\n              anchor: newAnchor,\n            }\n          }\n        }\n      }\n    })\n    return [transformedOperation]\n  }\n  return [transformedOperation]\n}\n/**\n * Adjust the block path for a operation\n */\nfunction adjustBlockPath(\n  operation: Operation,\n  level: number,\n  blockIndex: number,\n): Operation {\n  const transformedOperation = {...operation}\n  if (\n    blockIndex >= 0 &&\n    transformedOperation.type !== 'set_selection' &&\n    Array.isArray(transformedOperation.path) &&\n    transformedOperation.path[0] >= blockIndex + level &&\n    transformedOperation.path[0] + level > -1\n  ) {\n    const newPath = [\n      transformedOperation.path[0] + level,\n      ...transformedOperation.path.slice(1),\n    ]\n    transformedOperation.path = newPath\n  }\n  if (transformedOperation.type === 'set_selection') {\n    const currentFocus = transformedOperation.properties?.focus\n      ? {...transformedOperation.properties.focus}\n      : undefined\n    const currentAnchor = transformedOperation?.properties?.anchor\n      ? {...transformedOperation.properties.anchor}\n      : undefined\n    const newFocus = transformedOperation?.newProperties?.focus\n      ? {...transformedOperation.newProperties.focus}\n      : undefined\n    const newAnchor = transformedOperation?.newProperties?.anchor\n      ? {...transformedOperation.newProperties.anchor}\n      : undefined\n    if ((currentFocus && currentAnchor) || (newFocus && newAnchor)) {\n      const points = [currentFocus, currentAnchor, newFocus, newAnchor]\n      points.forEach((point) => {\n        if (\n          point &&\n          point.path[0] >= blockIndex + level &&\n          point.path[0] + level > -1\n        ) {\n          point.path = [point.path[0] + level, ...point.path.slice(1)]\n        }\n      })\n      if (currentFocus && currentAnchor) {\n        transformedOperation.properties = {\n          focus: currentFocus,\n          anchor: currentAnchor,\n        }\n      }\n      if (newFocus && newAnchor) {\n        transformedOperation.newProperties = {\n          focus: newFocus,\n          anchor: newAnchor,\n        }\n      }\n    }\n  }\n  //   // Assign fresh point objects (we don't want to mutate the original ones)\n  return transformedOperation\n}\n\n// Helper functions for editor.apply above\n\nconst shouldMerge = (op: Operation, prev: Operation | undefined): boolean => {\n  if (op.type === 'set_selection') {\n    return true\n  }\n\n  // Text input\n  if (\n    prev &&\n    op.type === 'insert_text' &&\n    prev.type === 'insert_text' &&\n    op.offset === prev.offset + prev.text.length &&\n    Path.equals(op.path, prev.path) &&\n    op.text !== ' ' // Tokenize between words\n  ) {\n    return true\n  }\n\n  // Text deletion\n  if (\n    prev &&\n    op.type === 'remove_text' &&\n    prev.type === 'remove_text' &&\n    op.offset + op.text.length === prev.offset &&\n    Path.equals(op.path, prev.path)\n  ) {\n    return true\n  }\n\n  // Don't merge\n  return false\n}\n\nconst shouldOverwrite = (\n  op: Operation,\n  prev: Operation | undefined,\n): boolean => {\n  if (prev && op.type === 'set_selection' && prev.type === 'set_selection') {\n    return true\n  }\n\n  return false\n}\n\nconst shouldClear = (op: Operation): boolean => {\n  if (op.type === 'set_selection') {\n    return false\n  }\n\n  return true\n}\n\nexport function withoutSaving(editor: Editor, fn: () => void): void {\n  const prev = isSaving(editor)\n  SAVING.set(editor, false)\n  fn()\n  SAVING.set(editor, prev)\n}\n\nfunction createSelectOperation(editor: Editor): SelectionOperation {\n  return {\n    type: 'set_selection',\n    properties: {...editor.selection},\n    newProperties: {...editor.selection},\n  }\n}\n\nfunction findOperationTargetBlock(\n  editor: PortableTextSlateEditor,\n  operation: Operation,\n): Descendant | undefined {\n  let block: Descendant | undefined\n  if (operation.type === 'set_selection' && editor.selection) {\n    block = editor.children[editor.selection.focus.path[0]]\n  } else if ('path' in operation) {\n    block = editor.children[operation.path[0]]\n  }\n  return block\n}\n","import {Editor, Node, Range, Text, Transforms} from 'slate'\nimport {parseAnnotation} from '../utils/parse-blocks'\nimport type {BehaviorOperationImplementation} from './behavior.operations'\n\nexport const addAnnotationOperationImplementation: BehaviorOperationImplementation<\n  'annotation.add'\n> = ({context, operation}) => {\n  const parsedAnnotation = parseAnnotation({\n    annotation: {\n      _type: operation.annotation.name,\n      ...operation.annotation.value,\n    },\n    context,\n    options: {validateFields: true},\n  })\n\n  if (!parsedAnnotation) {\n    throw new Error(\n      `Failed to parse annotation ${JSON.stringify(operation.annotation)}`,\n    )\n  }\n\n  const editor = operation.editor\n\n  if (!editor.selection || Range.isCollapsed(editor.selection)) {\n    return\n  }\n\n  const selectedBlocks = Editor.nodes(editor, {\n    at: editor.selection,\n    match: (node) => editor.isTextBlock(node),\n    reverse: Range.isBackward(editor.selection),\n  })\n\n  let blockIndex = 0\n\n  for (const [block, blockPath] of selectedBlocks) {\n    if (block.children.length === 0) {\n      continue\n    }\n\n    if (block.children.length === 1 && block.children[0].text === '') {\n      continue\n    }\n\n    // Make sure we don't generate more keys than needed\n    const annotationKey =\n      blockIndex === 0 ? parsedAnnotation._key : context.keyGenerator()\n    const markDefs = block.markDefs ?? []\n    const existingMarkDef = markDefs.find(\n      (markDef) =>\n        markDef._type === parsedAnnotation._type &&\n        markDef._key === annotationKey,\n    )\n\n    if (existingMarkDef === undefined) {\n      Transforms.setNodes(\n        editor,\n        {\n          markDefs: [\n            ...markDefs,\n            {\n              ...parsedAnnotation,\n              _key: annotationKey,\n            },\n          ],\n        },\n        {at: blockPath},\n      )\n    }\n\n    Transforms.setNodes(editor, {}, {match: Text.isText, split: true})\n\n    const children = Node.children(editor, blockPath)\n\n    for (const [span, path] of children) {\n      if (!editor.isTextSpan(span)) {\n        continue\n      }\n\n      if (!Range.includes(editor.selection, path)) {\n        continue\n      }\n\n      const marks = span.marks ?? []\n\n      Transforms.setNodes(\n        editor,\n        {\n          marks: [...marks, annotationKey],\n        },\n        {at: path},\n      )\n    }\n\n    blockIndex++\n  }\n}\n","import type {PortableTextSpan} from '@sanity/types'\nimport {Editor, Node, Path, Range, Transforms} from 'slate'\nimport type {BehaviorOperationImplementation} from './behavior.operations'\n\nexport const removeAnnotationOperationImplementation: BehaviorOperationImplementation<\n  'annotation.remove'\n> = ({operation}) => {\n  const editor = operation.editor\n\n  if (!editor.selection) {\n    return\n  }\n\n  if (Range.isCollapsed(editor.selection)) {\n    const [block, blockPath] = Editor.node(editor, editor.selection, {\n      depth: 1,\n    })\n\n    if (!editor.isTextBlock(block)) {\n      return\n    }\n\n    const markDefs = block.markDefs ?? []\n    const potentialAnnotations = markDefs.filter(\n      (markDef) => markDef._type === operation.annotation.name,\n    )\n\n    const [selectedChild, selectedChildPath] = Editor.node(\n      editor,\n      editor.selection,\n      {\n        depth: 2,\n      },\n    )\n\n    if (!editor.isTextSpan(selectedChild)) {\n      return\n    }\n\n    const annotationToRemove = selectedChild.marks?.find((mark) =>\n      potentialAnnotations.some((markDef) => markDef._key === mark),\n    )\n\n    if (!annotationToRemove) {\n      return\n    }\n\n    const previousSpansWithSameAnnotation: Array<\n      [span: PortableTextSpan, path: Path]\n    > = []\n\n    for (const [child, childPath] of Node.children(editor, blockPath, {\n      reverse: true,\n    })) {\n      if (!editor.isTextSpan(child)) {\n        continue\n      }\n\n      if (!Path.isBefore(childPath, selectedChildPath)) {\n        continue\n      }\n\n      if (child.marks?.includes(annotationToRemove)) {\n        previousSpansWithSameAnnotation.push([child, childPath])\n      } else {\n        break\n      }\n    }\n\n    const nextSpansWithSameAnnotation: Array<\n      [span: PortableTextSpan, path: Path]\n    > = []\n\n    for (const [child, childPath] of Node.children(editor, blockPath)) {\n      if (!editor.isTextSpan(child)) {\n        continue\n      }\n\n      if (!Path.isAfter(childPath, selectedChildPath)) {\n        continue\n      }\n\n      if (child.marks?.includes(annotationToRemove)) {\n        nextSpansWithSameAnnotation.push([child, childPath])\n      } else {\n        break\n      }\n    }\n\n    for (const [child, childPath] of [\n      ...previousSpansWithSameAnnotation,\n      [selectedChild, selectedChildPath] as const,\n      ...nextSpansWithSameAnnotation,\n    ]) {\n      Transforms.setNodes(\n        editor,\n        {\n          marks: child.marks?.filter((mark) => mark !== annotationToRemove),\n        },\n        {at: childPath},\n      )\n    }\n  } else {\n    Transforms.setNodes(\n      editor,\n      {},\n      {\n        match: (node) => editor.isTextSpan(node),\n        split: true,\n        hanging: true,\n      },\n    )\n\n    const blocks = Editor.nodes(editor, {\n      at: editor.selection,\n      match: (node) => editor.isTextBlock(node),\n    })\n\n    for (const [block, blockPath] of blocks) {\n      const children = Node.children(editor, blockPath)\n\n      for (const [child, childPath] of children) {\n        if (!editor.isTextSpan(child)) {\n          continue\n        }\n\n        if (!Range.includes(editor.selection, childPath)) {\n          continue\n        }\n\n        const markDefs = block.markDefs ?? []\n        const marks = child.marks ?? []\n        const marksWithoutAnnotation = marks.filter((mark) => {\n          const markDef = markDefs.find((markDef) => markDef._key === mark)\n          return markDef?._type !== operation.annotation.name\n        })\n\n        if (marksWithoutAnnotation.length !== marks.length) {\n          Transforms.setNodes(\n            editor,\n            {\n              marks: marksWithoutAnnotation,\n            },\n            {at: childPath},\n          )\n        }\n      }\n    }\n  }\n}\n","import {Transforms, type Element as SlateElement} from 'slate'\nimport {toSlateValue} from '../internal-utils/values'\nimport {parseBlock} from '../utils/parse-blocks'\nimport type {BehaviorOperationImplementation} from './behavior.operations'\n\nexport const blockSetOperationImplementation: BehaviorOperationImplementation<\n  'block.set'\n> = ({context, operation}) => {\n  const blockIndex = operation.editor.blockIndexMap.get(operation.at[0]._key)\n\n  if (blockIndex === undefined) {\n    throw new Error(\n      `Unable to find block index for block at ${JSON.stringify(operation.at)}`,\n    )\n  }\n\n  const block = operation.editor.value.at(blockIndex)\n\n  if (!block) {\n    throw new Error(`Unable to find block at ${JSON.stringify(operation.at)}`)\n  }\n\n  const {_type, ...filteredProps} = operation.props\n\n  const updatedBlock = {\n    ...block,\n    ...filteredProps,\n  }\n\n  const parsedBlock = parseBlock({\n    context,\n    block: updatedBlock,\n    options: {\n      removeUnusedMarkDefs: false,\n      validateFields: true,\n    },\n  })\n\n  if (!parsedBlock) {\n    throw new Error(`Unable to update block at ${JSON.stringify(operation.at)}`)\n  }\n\n  const slateBlock = toSlateValue([parsedBlock], {\n    schemaTypes: context.schema,\n  })?.at(0) as SlateElement | undefined\n\n  if (!slateBlock) {\n    throw new Error(`Unable to convert block to Slate value`)\n  }\n\n  Transforms.setNodes(operation.editor, slateBlock, {at: [blockIndex]})\n}\n","import {isTextBlock} from '@portabletext/schema'\nimport {omit} from 'lodash'\nimport {Editor, Transforms} from 'slate'\nimport {KEY_TO_VALUE_ELEMENT} from '../editor/weakMaps'\nimport {toSlateRange} from '../internal-utils/to-slate-range'\nimport {fromSlateValue} from '../internal-utils/values'\nimport {parseBlock} from '../utils/parse-blocks'\nimport type {BehaviorOperationImplementation} from './behavior.operations'\n\nexport const blockUnsetOperationImplementation: BehaviorOperationImplementation<\n  'block.unset'\n> = ({context, operation}) => {\n  const location = toSlateRange({\n    context: {\n      schema: context.schema,\n      value: operation.editor.value,\n      selection: {\n        anchor: {path: operation.at, offset: 0},\n        focus: {path: operation.at, offset: 0},\n      },\n    },\n    blockIndexMap: operation.editor.blockIndexMap,\n  })\n\n  if (!location) {\n    throw new Error(\n      `Unable to convert ${JSON.stringify(operation.at)} into a Slate Range`,\n    )\n  }\n\n  const blockEntry = Editor.node(operation.editor, location, {depth: 1})\n  const block = blockEntry?.[0]\n\n  if (!block) {\n    throw new Error(`Unable to find block at ${JSON.stringify(operation.at)}`)\n  }\n\n  const parsedBlock = fromSlateValue(\n    [block],\n    context.schema.block.name,\n    KEY_TO_VALUE_ELEMENT.get(operation.editor),\n  ).at(0)\n\n  if (!parsedBlock) {\n    throw new Error(`Unable to parse block at ${JSON.stringify(operation.at)}`)\n  }\n\n  if (isTextBlock(context, parsedBlock)) {\n    const propsToRemove = operation.props.filter((prop) => prop !== '_type')\n\n    const updatedTextBlock = parseBlock({\n      context,\n      block: omit(parsedBlock, propsToRemove),\n      options: {\n        removeUnusedMarkDefs: true,\n        validateFields: true,\n      },\n    })\n\n    if (!updatedTextBlock) {\n      throw new Error(\n        `Unable to update block at ${JSON.stringify(operation.at)}`,\n      )\n    }\n\n    const propsToSet: Record<string, unknown> = {}\n\n    for (const prop of propsToRemove) {\n      if (!(prop in updatedTextBlock)) {\n        propsToSet[prop] = undefined\n      } else {\n        propsToSet[prop] = (updatedTextBlock as Record<string, unknown>)[prop]\n      }\n    }\n\n    Transforms.setNodes(operation.editor, propsToSet, {at: location})\n\n    return\n  }\n\n  const updatedBlockObject = parseBlock({\n    context,\n    block: omit(\n      parsedBlock,\n      operation.props.filter((prop) => prop !== '_type'),\n    ),\n    options: {\n      removeUnusedMarkDefs: true,\n      validateFields: true,\n    },\n  })\n\n  if (!updatedBlockObject) {\n    throw new Error(`Unable to update block at ${JSON.stringify(operation.at)}`)\n  }\n\n  const {_type, _key, ...props} = updatedBlockObject\n\n  Transforms.setNodes(\n    operation.editor,\n    {\n      _type,\n      _key,\n      value: props,\n    },\n    {at: location},\n  )\n}\n","import {Editor, Element, Transforms} from 'slate'\nimport {toSlateRange} from '../internal-utils/to-slate-range'\nimport type {BehaviorOperationImplementation} from './behavior.operations'\n\nexport const childSetOperationImplementation: BehaviorOperationImplementation<\n  'child.set'\n> = ({context, operation}) => {\n  const location = toSlateRange({\n    context: {\n      schema: context.schema,\n      value: operation.editor.value,\n      selection: {\n        anchor: {path: operation.at, offset: 0},\n        focus: {path: operation.at, offset: 0},\n      },\n    },\n    blockIndexMap: operation.editor.blockIndexMap,\n  })\n\n  if (!location) {\n    throw new Error(\n      `Unable to convert ${JSON.stringify(operation.at)} into a Slate Range`,\n    )\n  }\n\n  const childEntry = Editor.node(operation.editor, location, {depth: 2})\n  const child = childEntry?.[0]\n  const childPath = childEntry?.[1]\n\n  if (!child || !childPath) {\n    throw new Error(`Unable to find child at ${JSON.stringify(operation.at)}`)\n  }\n\n  if (operation.editor.isTextSpan(child)) {\n    const {_type, text, ...rest} = operation.props\n\n    Transforms.setNodes(\n      operation.editor,\n      {\n        ...child,\n        ...rest,\n      },\n      {at: childPath},\n    )\n\n    if (typeof text === 'string') {\n      if (child.text !== text) {\n        operation.editor.apply({\n          type: 'remove_text',\n          path: childPath,\n          offset: 0,\n          text: child.text,\n        })\n\n        operation.editor.apply({\n          type: 'insert_text',\n          path: childPath,\n          offset: 0,\n          text,\n        })\n      }\n    }\n\n    return\n  }\n\n  if (Element.isElement(child)) {\n    const definition = context.schema.inlineObjects.find(\n      (definition) => definition.name === child._type,\n    )\n\n    if (!definition) {\n      throw new Error(\n        `Unable to find schema definition for Inline Object type ${child._type}`,\n      )\n    }\n\n    const value =\n      'value' in child && typeof child.value === 'object' ? child.value : {}\n    const {_type, _key, ...rest} = operation.props\n\n    for (const prop in rest) {\n      if (!definition.fields.some((field) => field.name === prop)) {\n        delete rest[prop]\n      }\n    }\n\n    Transforms.setNodes(\n      operation.editor,\n      {\n        ...child,\n        _key: typeof _key === 'string' ? _key : child._key,\n        value: {\n          ...value,\n          ...rest,\n        },\n      },\n      {at: childPath},\n    )\n\n    return\n  }\n\n  throw new Error(\n    `Unable to determine the type of child at ${JSON.stringify(operation.at)}`,\n  )\n}\n","import {applyAll} from '@portabletext/patches'\nimport {Editor, Element, Transforms} from 'slate'\nimport {toSlateRange} from '../internal-utils/to-slate-range'\nimport type {BehaviorOperationImplementation} from './behavior.operations'\n\nexport const childUnsetOperationImplementation: BehaviorOperationImplementation<\n  'child.unset'\n> = ({context, operation}) => {\n  const location = toSlateRange({\n    context: {\n      schema: context.schema,\n      value: operation.editor.value,\n      selection: {\n        anchor: {path: operation.at, offset: 0},\n        focus: {path: operation.at, offset: 0},\n      },\n    },\n    blockIndexMap: operation.editor.blockIndexMap,\n  })\n\n  if (!location) {\n    throw new Error(\n      `Unable to convert ${JSON.stringify(operation.at)} into a Slate Range`,\n    )\n  }\n\n  const childEntry = Editor.node(operation.editor, location, {depth: 2})\n  const child = childEntry?.[0]\n  const childPath = childEntry?.[1]\n\n  if (!child || !childPath) {\n    throw new Error(`Unable to find child at ${JSON.stringify(operation.at)}`)\n  }\n\n  if (operation.editor.isTextSpan(child)) {\n    if (operation.props.includes('text')) {\n      operation.editor.apply({\n        type: 'remove_text',\n        path: childPath,\n        offset: 0,\n        text: child.text,\n      })\n    }\n\n    const newNode: Record<string, unknown> = {}\n\n    for (const prop of operation.props) {\n      if (prop === '_type') {\n        // It's not allowed to unset the _type of a span\n        continue\n      }\n\n      if (prop === '_key') {\n        newNode._key = context.keyGenerator()\n        continue\n      }\n\n      newNode[prop] = null\n    }\n\n    Transforms.setNodes(operation.editor, newNode, {at: childPath})\n\n    return\n  }\n\n  if (Element.isElement(child)) {\n    const value =\n      'value' in child && typeof child.value === 'object' ? child.value : {}\n    const patches = operation.props.map((prop) => ({\n      type: 'unset' as const,\n      path: [prop],\n    }))\n    const newValue = applyAll(value, patches)\n\n    Transforms.setNodes(\n      operation.editor,\n      {\n        ...child,\n        _key: operation.props.includes('_key')\n          ? context.keyGenerator()\n          : child._key,\n        value: newValue,\n      },\n      {at: childPath},\n    )\n\n    return\n  }\n\n  throw new Error(\n    `Unable to determine the type of child at ${JSON.stringify(operation.at)}`,\n  )\n}\n","import {Editor, Range, Text, Transforms} from 'slate'\nimport {KEY_TO_VALUE_ELEMENT} from '../editor/weakMaps'\nimport {slateRangeToSelection} from '../internal-utils/slate-utils'\nimport {toSlateRange} from '../internal-utils/to-slate-range'\nimport {fromSlateValue} from '../internal-utils/values'\nimport {getTrimmedSelection} from '../selectors/selector.get-trimmed-selection'\nimport {blockOffsetToSpanSelectionPoint} from '../utils/util.block-offset'\nimport {blockOffsetsToSelection} from '../utils/util.block-offsets-to-selection'\nimport {selectionPointToBlockOffset} from '../utils/util.selection-point-to-block-offset'\nimport type {BehaviorOperationImplementation} from './behavior.operations'\n\nexport const decoratorAddOperationImplementation: BehaviorOperationImplementation<\n  'decorator.add'\n> = ({context, operation}) => {\n  const editor = operation.editor\n  const mark = operation.decorator\n  const value = fromSlateValue(\n    editor.children,\n    context.schema.block.name,\n    KEY_TO_VALUE_ELEMENT.get(editor),\n  )\n\n  const manualAnchor = operation.at?.anchor\n    ? blockOffsetToSpanSelectionPoint({\n        context: {\n          ...context,\n          value,\n        },\n        blockOffset: operation.at.anchor,\n        direction: 'backward',\n      })\n    : undefined\n  const manualFocus = operation.at?.focus\n    ? blockOffsetToSpanSelectionPoint({\n        context: {\n          ...context,\n          value,\n        },\n        blockOffset: operation.at.focus,\n        direction: 'forward',\n      })\n    : undefined\n  const manualSelection =\n    manualAnchor && manualFocus\n      ? {\n          anchor: manualAnchor,\n          focus: manualFocus,\n        }\n      : undefined\n\n  const selection = manualSelection\n    ? (toSlateRange({\n        context: {\n          schema: context.schema,\n          value: operation.editor.value,\n          selection: manualSelection,\n        },\n        blockIndexMap: operation.editor.blockIndexMap,\n      }) ?? editor.selection)\n    : editor.selection\n\n  if (!selection) {\n    return\n  }\n\n  const editorSelection = slateRangeToSelection({\n    schema: context.schema,\n    editor,\n    range: selection,\n  })\n  const anchorOffset = editorSelection\n    ? selectionPointToBlockOffset({\n        context: {\n          ...context,\n          value,\n        },\n        selectionPoint: editorSelection.anchor,\n      })\n    : undefined\n  const focusOffset = editorSelection\n    ? selectionPointToBlockOffset({\n        context: {\n          ...context,\n          value,\n        },\n        selectionPoint: editorSelection.focus,\n      })\n    : undefined\n\n  if (!anchorOffset || !focusOffset) {\n    throw new Error('Unable to find anchor or focus offset')\n  }\n\n  if (Range.isExpanded(selection)) {\n    // Split if needed\n    Transforms.setNodes(\n      editor,\n      {},\n      {at: selection, match: Text.isText, split: true, hanging: true},\n    )\n\n    // The value might have changed after splitting\n    const newValue = fromSlateValue(\n      editor.children,\n      context.schema.block.name,\n      KEY_TO_VALUE_ELEMENT.get(editor),\n    )\n    // We need to find the new selection from the original offsets because the\n    // split operation might have changed the value.\n    const newSelection = blockOffsetsToSelection({\n      context: {\n        ...context,\n        value: newValue,\n      },\n      offsets: {anchor: anchorOffset, focus: focusOffset},\n      backward: editorSelection?.backward,\n    })\n\n    const trimmedSelection = getTrimmedSelection({\n      blockIndexMap: editor.blockIndexMap,\n      context: {\n        converters: [],\n        keyGenerator: context.keyGenerator,\n        readOnly: false,\n        schema: context.schema,\n        selection: newSelection,\n        value: newValue,\n      },\n      decoratorState: editor.decoratorState,\n    })\n\n    if (!trimmedSelection) {\n      throw new Error('Unable to find trimmed selection')\n    }\n\n    const newRange = toSlateRange({\n      context: {\n        schema: context.schema,\n        value: operation.editor.value,\n        selection: trimmedSelection,\n      },\n      blockIndexMap: operation.editor.blockIndexMap,\n    })\n\n    if (!newRange) {\n      throw new Error('Unable to find new selection')\n    }\n\n    // Use new selection to find nodes to decorate\n    const splitTextNodes = Range.isRange(newRange)\n      ? [\n          ...Editor.nodes(editor, {\n            at: newRange,\n            match: (node) => Text.isText(node),\n          }),\n        ]\n      : []\n\n    for (const [node, path] of splitTextNodes) {\n      const marks = [\n        ...(Array.isArray(node.marks) ? node.marks : []).filter(\n          (eMark: string) => eMark !== mark,\n        ),\n        mark,\n      ]\n      Transforms.setNodes(\n        editor,\n        {marks},\n        {at: path, match: Text.isText, split: true, hanging: true},\n      )\n    }\n  } else {\n    const selectedSpan = Array.from(\n      Editor.nodes(editor, {\n        at: selection,\n        match: (node) => editor.isTextSpan(node),\n      }),\n    )?.at(0)\n\n    if (!selectedSpan) {\n      return\n    }\n\n    const [block, blockPath] = Editor.node(editor, selection, {\n      depth: 1,\n    })\n    const lonelyEmptySpan =\n      editor.isTextBlock(block) &&\n      block.children.length === 1 &&\n      editor.isTextSpan(block.children[0]) &&\n      block.children[0].text === ''\n        ? block.children[0]\n        : undefined\n\n    if (lonelyEmptySpan) {\n      const existingMarks = lonelyEmptySpan.marks ?? []\n      const existingMarksWithoutDecorator = existingMarks.filter(\n        (existingMark) => existingMark !== mark,\n      )\n\n      Transforms.setNodes(\n        editor,\n        {\n          marks:\n            existingMarks.length === existingMarksWithoutDecorator.length\n              ? [...existingMarks, mark]\n              : existingMarksWithoutDecorator,\n        },\n        {\n          at: blockPath,\n          match: (node) => editor.isTextSpan(node),\n        },\n      )\n    } else {\n      editor.decoratorState[mark] = true\n    }\n  }\n\n  if (editor.selection) {\n    // Reselect\n    const selection = editor.selection\n    editor.selection = {...selection}\n  }\n}\n","import {isTextBlock} from '@portabletext/schema'\nimport {\n  deleteText,\n  Editor,\n  Element,\n  Range,\n  setSelection,\n  Transforms,\n} from 'slate'\nimport {DOMEditor} from 'slate-dom'\nimport {createPlaceholderBlock} from '../internal-utils/create-placeholder-block'\nimport {toSlateRange} from '../internal-utils/to-slate-range'\nimport type {PortableTextSlateEditor} from '../types/editor'\nimport {getBlockKeyFromSelectionPoint} from '../utils/util.selection-point'\nimport type {BehaviorOperationImplementation} from './behavior.operations'\n\nexport const deleteOperationImplementation: BehaviorOperationImplementation<\n  'delete'\n> = ({context, operation}) => {\n  const anchorBlockKey = getBlockKeyFromSelectionPoint(operation.at.anchor)\n  const focusBlockKey = getBlockKeyFromSelectionPoint(operation.at.focus)\n\n  const startBlockKey = operation.at.backward ? focusBlockKey : anchorBlockKey\n  const endBlockKey = operation.at.backward ? anchorBlockKey : focusBlockKey\n  const endOffset = operation.at.backward\n    ? operation.at.focus.offset\n    : operation.at.anchor.offset\n\n  if (!startBlockKey) {\n    throw new Error('Failed to get start block key')\n  }\n\n  if (!endBlockKey) {\n    throw new Error('Failed to get end block key')\n  }\n\n  const startBlockIndex = operation.editor.blockIndexMap.get(startBlockKey)\n\n  if (startBlockIndex === undefined) {\n    throw new Error('Failed to get start block index')\n  }\n\n  const startBlock = operation.editor.value.at(startBlockIndex)\n\n  if (!startBlock) {\n    throw new Error('Failed to get start block')\n  }\n\n  const endBlockIndex = operation.editor.blockIndexMap.get(endBlockKey)\n\n  if (endBlockIndex === undefined) {\n    throw new Error('Failed to get end block index')\n  }\n\n  const endBlock = operation.editor.value.at(endBlockIndex)\n\n  if (!endBlock) {\n    throw new Error('Failed to get end block')\n  }\n\n  if (operation.unit === 'block') {\n    Transforms.removeNodes(operation.editor, {\n      at: {\n        anchor: {path: [startBlockIndex], offset: 0},\n        focus: {path: [endBlockIndex], offset: 0},\n      },\n      mode: 'highest',\n    })\n\n    if (operation.editor.children.length === 0) {\n      Transforms.insertNodes(operation.editor, createPlaceholderBlock(context))\n    }\n\n    return\n  }\n\n  const range = toSlateRange({\n    context: {\n      schema: context.schema,\n      value: operation.editor.value,\n      selection: operation.at,\n    },\n    blockIndexMap: operation.editor.blockIndexMap,\n  })\n\n  if (!range) {\n    throw new Error(\n      `Failed to get Slate Range for selection ${JSON.stringify(operation.at)}`,\n    )\n  }\n\n  if (operation.direction === 'backward' && operation.unit === 'line') {\n    const parentBlockEntry = Editor.above(operation.editor, {\n      match: (n) => Element.isElement(n) && Editor.isBlock(operation.editor, n),\n      at: range,\n    })\n\n    if (parentBlockEntry) {\n      const [, parentBlockPath] = parentBlockEntry\n      const parentElementRange = Editor.range(\n        operation.editor,\n        parentBlockPath,\n        range.anchor,\n      )\n\n      const currentLineRange = findCurrentLineRange(\n        operation.editor,\n        parentElementRange,\n      )\n\n      if (!Range.isCollapsed(currentLineRange)) {\n        Transforms.delete(operation.editor, {at: currentLineRange})\n        return\n      }\n    }\n  }\n\n  const hanging = isTextBlock(context, endBlock) && endOffset === 0\n\n  deleteText(operation.editor, {\n    at: range,\n    reverse: operation.direction === 'backward',\n    unit: operation.unit,\n    hanging,\n  })\n\n  if (\n    operation.editor.selection &&\n    isTextBlock(context, startBlock) &&\n    isTextBlock(context, endBlock)\n  ) {\n    setSelection(operation.editor, {\n      anchor: operation.editor.selection.focus,\n      focus: operation.editor.selection.focus,\n    })\n  }\n}\n\nfunction findCurrentLineRange(\n  editor: PortableTextSlateEditor,\n  parentRange: Range,\n): Range {\n  const parentRangeBoundary = Editor.range(editor, Range.end(parentRange))\n  const positions = Array.from(Editor.positions(editor, {at: parentRange}))\n\n  let left = 0\n  let right = positions.length\n  let middle = Math.floor(right / 2)\n\n  if (\n    rangesAreOnSameLine(\n      editor,\n      Editor.range(editor, positions[left]),\n      parentRangeBoundary,\n    )\n  ) {\n    return Editor.range(editor, positions[left], parentRangeBoundary)\n  }\n\n  if (positions.length < 2) {\n    return Editor.range(\n      editor,\n      positions[positions.length - 1],\n      parentRangeBoundary,\n    )\n  }\n\n  while (middle !== positions.length && middle !== left) {\n    if (\n      rangesAreOnSameLine(\n        editor,\n        Editor.range(editor, positions[middle]),\n        parentRangeBoundary,\n      )\n    ) {\n      right = middle\n    } else {\n      left = middle\n    }\n\n    middle = Math.floor((left + right) / 2)\n  }\n\n  return Editor.range(editor, positions[left], parentRangeBoundary)\n}\n\nfunction rangesAreOnSameLine(editor: DOMEditor, range1: Range, range2: Range) {\n  const rect1 = DOMEditor.toDOMRange(editor, range1).getBoundingClientRect()\n  const rect2 = DOMEditor.toDOMRange(editor, range2).getBoundingClientRect()\n\n  return domRectsIntersect(rect1, rect2) && domRectsIntersect(rect2, rect1)\n}\n\nfunction domRectsIntersect(rect: DOMRect, compareRect: DOMRect) {\n  const middle = (compareRect.top + compareRect.bottom) / 2\n\n  return rect.top <= middle && rect.bottom >= middle\n}\n","import {isSpan} from '@portabletext/schema'\nimport {isEqual} from 'lodash'\nimport {Editor, Path, Point, Range, Transforms, type Descendant} from 'slate'\nimport {DOMEditor} from 'slate-dom'\nimport {\n  getFocusBlock,\n  getFocusChild,\n  getLastBlock,\n  getSelectionEndBlock,\n  getSelectionStartBlock,\n} from '../internal-utils/slate-utils'\nimport {isEqualToEmptyEditor, toSlateValue} from '../internal-utils/values'\nimport type {PortableTextSlateEditor} from '../types/editor'\nimport {parseBlock} from '../utils/parse-blocks'\nimport {isEmptyTextBlock} from '../utils/util.is-empty-text-block'\nimport type {\n  BehaviorOperationImplementation,\n  BehaviorOperationImplementationContext,\n} from './behavior.operations'\n\nexport const insertBlockOperationImplementation: BehaviorOperationImplementation<\n  'insert.block'\n> = ({context, operation}) => {\n  const parsedBlock = parseBlock({\n    block: operation.block,\n    context,\n    options: {\n      removeUnusedMarkDefs: true,\n      validateFields: true,\n    },\n  })\n\n  if (!parsedBlock) {\n    throw new Error(`Failed to parse block ${JSON.stringify(operation.block)}`)\n  }\n\n  const fragment = toSlateValue([parsedBlock], {schemaTypes: context.schema})[0]\n\n  if (!fragment) {\n    throw new Error(\n      `Failed to convert block to Slate fragment ${JSON.stringify(parsedBlock)}`,\n    )\n  }\n\n  insertBlock({\n    context,\n    block: fragment,\n    placement: operation.placement,\n    select: operation.select ?? 'start',\n    editor: operation.editor,\n  })\n}\n\nexport function insertBlock({\n  context,\n  block,\n  placement,\n  select,\n  editor,\n}: {\n  context: BehaviorOperationImplementationContext\n  block: Descendant\n  placement: 'auto' | 'after' | 'before'\n  select: 'start' | 'end' | 'none'\n  editor: PortableTextSlateEditor\n}) {\n  const [startBlock, startBlockPath] = getSelectionStartBlock({editor})\n  const [endBlock, endBlockPath] = getSelectionEndBlock({editor})\n\n  if (\n    !editor.selection ||\n    !startBlock ||\n    !startBlockPath ||\n    !endBlock ||\n    !endBlockPath\n  ) {\n    if (select !== 'none') {\n      DOMEditor.focus(editor)\n    }\n\n    const [lastBlock, lastBlockPath] = getLastBlock({editor})\n\n    if (placement === 'before') {\n      Transforms.insertNodes(editor, [block], {at: [0]})\n\n      if (select === 'start') {\n        Transforms.select(editor, Editor.start(editor, [0]))\n      } else if (select === 'end') {\n        Transforms.select(editor, Editor.end(editor, [0]))\n      }\n    } else if (placement === 'after') {\n      const nextPath = lastBlockPath ? [lastBlockPath[0] + 1] : [0]\n      Transforms.insertNodes(editor, [block], {at: nextPath})\n\n      if (select === 'start') {\n        Transforms.select(editor, Editor.start(editor, nextPath))\n      } else if (select === 'end') {\n        Transforms.select(editor, Editor.end(editor, nextPath))\n      }\n    } else {\n      // placement === 'auto'\n\n      if (lastBlock && isEqualToEmptyEditor([lastBlock], context.schema)) {\n        // And if the last block was an empty text block, let's remove\n        // that too\n        Transforms.removeNodes(editor, {at: lastBlockPath})\n\n        Transforms.insertNodes(editor, [block], {\n          at: lastBlockPath,\n          select: false,\n        })\n\n        Transforms.deselect(editor)\n\n        if (select === 'start') {\n          Transforms.select(editor, Editor.start(editor, lastBlockPath))\n        } else if (select === 'end') {\n          Transforms.select(editor, Editor.end(editor, lastBlockPath))\n        }\n\n        return\n      }\n\n      if (\n        editor.isTextBlock(block) &&\n        lastBlock &&\n        editor.isTextBlock(lastBlock)\n      ) {\n        const selectionBefore = Editor.end(editor, lastBlockPath)\n\n        Transforms.insertFragment(editor, [block], {\n          at: Editor.end(editor, lastBlockPath),\n        })\n\n        if (select === 'start') {\n          Transforms.select(editor, selectionBefore)\n        } else if (select === 'none') {\n          Transforms.deselect(editor)\n        }\n\n        return\n      }\n\n      const nextPath = lastBlockPath ? [lastBlockPath[0] + 1] : [0]\n\n      Transforms.insertNodes(editor, [block], {at: nextPath, select: false})\n\n      if (select === 'start') {\n        Transforms.select(editor, Editor.start(editor, nextPath))\n      } else if (select === 'end') {\n        Transforms.select(editor, Editor.end(editor, nextPath))\n      }\n    }\n  } else {\n    if (placement === 'before') {\n      const currentSelection = editor.selection\n      const selectionStartPoint = Range.start(currentSelection)\n\n      Transforms.insertNodes(editor, [block], {\n        at: [selectionStartPoint.path[0]],\n        select: false,\n      })\n\n      if (select === 'start') {\n        Transforms.select(\n          editor,\n          Editor.start(editor, [selectionStartPoint.path[0]]),\n        )\n      } else if (select === 'end') {\n        Transforms.select(\n          editor,\n          Editor.end(editor, [selectionStartPoint.path[0]]),\n        )\n      }\n    } else if (placement === 'after') {\n      const currentSelection = editor.selection\n      const selectionEndPoint = Range.end(currentSelection)\n\n      const nextPath = [selectionEndPoint.path[0] + 1]\n\n      Transforms.insertNodes(editor, [block], {\n        at: nextPath,\n        select: false,\n      })\n\n      if (select === 'start') {\n        Transforms.select(editor, Editor.start(editor, nextPath))\n      } else if (select === 'end') {\n        Transforms.select(editor, Editor.end(editor, nextPath))\n      }\n    } else {\n      // placement === 'auto'\n\n      const currentSelection = editor.selection\n      const endBlockEndPoint = Editor.start(editor, endBlockPath)\n\n      if (Range.isExpanded(currentSelection) && !editor.isTextBlock(block)) {\n        Transforms.delete(editor, {at: currentSelection})\n\n        const newSelection = editor.selection\n\n        const [focusBlock, focusBlockPath] = getFocusBlock({editor})\n\n        Transforms.insertNodes(editor, [block], {\n          voids: true,\n        })\n\n        const adjustedSelection =\n          newSelection.anchor.offset === 0\n            ? Range.transform(newSelection, {\n                type: 'insert_node',\n                node: block,\n                path: [newSelection.anchor.path[0]],\n              })\n            : newSelection\n\n        if (select === 'none' && adjustedSelection) {\n          Transforms.select(editor, adjustedSelection)\n        }\n\n        if (focusBlock && isEqualToEmptyEditor([focusBlock], context.schema)) {\n          Transforms.removeNodes(editor, {at: focusBlockPath})\n        }\n\n        return\n      }\n\n      if (editor.isTextBlock(endBlock) && editor.isTextBlock(block)) {\n        const selectionStartPoint = Range.start(currentSelection)\n\n        if (isEqualToEmptyEditor([endBlock], context.schema)) {\n          const currentSelection = editor.selection\n\n          Transforms.insertNodes(editor, [block], {\n            at: endBlockPath,\n            select: false,\n          })\n          Transforms.removeNodes(editor, {at: Path.next(endBlockPath)})\n\n          if (select === 'start') {\n            Transforms.select(editor, selectionStartPoint)\n          } else if (select === 'end') {\n            Transforms.select(editor, Editor.end(editor, endBlockPath))\n          } else {\n            Transforms.select(editor, currentSelection)\n          }\n\n          return\n        }\n\n        const endBlockChildKeys = endBlock.children.map((child) => child._key)\n        const endBlockMarkDefsKeys =\n          endBlock.markDefs?.map((markDef) => markDef._key) ?? []\n\n        // Assign new keys to markDefs with duplicate keys and keep track of\n        // the mapping between the old and new keys\n        const markDefKeyMap = new Map<string, string>()\n        const adjustedMarkDefs = block.markDefs?.map((markDef) => {\n          if (endBlockMarkDefsKeys.includes(markDef._key)) {\n            const newKey = context.keyGenerator()\n            markDefKeyMap.set(markDef._key, newKey)\n            return {\n              ...markDef,\n              _key: newKey,\n            }\n          }\n\n          return markDef\n        })\n\n        // Assign new keys to spans with duplicate keys and update any markDef\n        // key if needed\n        const adjustedChildren = block.children.map((child) => {\n          if (isSpan(context, child)) {\n            const marks =\n              child.marks?.map((mark) => {\n                const markDefKey = markDefKeyMap.get(mark)\n\n                if (markDefKey) {\n                  return markDefKey\n                }\n\n                return mark\n              }) ?? []\n\n            if (!isEqual(child.marks, marks)) {\n              return {\n                ...child,\n                _key: endBlockChildKeys.includes(child._key)\n                  ? context.keyGenerator()\n                  : child._key,\n                marks,\n              }\n            }\n          }\n\n          if (endBlockChildKeys.includes(child._key)) {\n            return {\n              ...child,\n              _key: context.keyGenerator(),\n            }\n          }\n\n          return child\n        })\n\n        // Carry over the markDefs from the incoming block to the end block\n        Transforms.setNodes(\n          editor,\n          {\n            markDefs: [\n              ...(endBlock.markDefs ?? []),\n              ...(adjustedMarkDefs ?? []),\n            ],\n          },\n          {\n            at: endBlockPath,\n          },\n        )\n\n        // If the children have changed, we need to create a new block with\n        // the adjusted children\n        const adjustedBlock = !isEqual(block.children, adjustedChildren)\n          ? {\n              ...block,\n              children: adjustedChildren as Descendant[],\n            }\n          : block\n\n        if (select === 'end') {\n          Transforms.insertFragment(editor, [adjustedBlock], {\n            voids: true,\n          })\n\n          return\n        }\n\n        Transforms.insertFragment(editor, [adjustedBlock], {\n          at: currentSelection,\n          voids: true,\n        })\n\n        if (select === 'start') {\n          Transforms.select(editor, selectionStartPoint)\n        } else {\n          if (!Point.equals(selectionStartPoint, endBlockEndPoint)) {\n            Transforms.select(editor, selectionStartPoint)\n          }\n        }\n      } else {\n        if (!editor.isTextBlock(endBlock)) {\n          Transforms.insertNodes(editor, [block], {select: false})\n\n          const nextPath = [endBlockPath[0] + 1]\n\n          if (select === 'start') {\n            Transforms.select(editor, Editor.start(editor, nextPath))\n          } else if (select === 'end') {\n            Transforms.select(editor, Editor.end(editor, nextPath))\n          }\n        } else {\n          const endBlockStartPoint = Editor.start(editor, endBlockPath)\n          const endBlockEndPoint = Editor.end(editor, endBlockPath)\n          const selectionStartPoint = Range.start(currentSelection)\n          const selectionEndPoint = Range.end(currentSelection)\n\n          if (\n            Range.isCollapsed(currentSelection) &&\n            Point.equals(selectionStartPoint, endBlockStartPoint)\n          ) {\n            Transforms.insertNodes(editor, [block], {\n              at: endBlockPath,\n              select: false,\n            })\n\n            if (select === 'start' || select === 'end') {\n              Transforms.select(editor, Editor.start(editor, endBlockPath))\n            }\n\n            if (isEmptyTextBlock(context, endBlock)) {\n              Transforms.removeNodes(editor, {at: Path.next(endBlockPath)})\n            }\n          } else if (\n            Range.isCollapsed(currentSelection) &&\n            Point.equals(selectionEndPoint, endBlockEndPoint)\n          ) {\n            const nextPath = [endBlockPath[0] + 1]\n\n            Transforms.insertNodes(editor, [block], {\n              at: nextPath,\n              select: false,\n            })\n\n            if (select === 'start' || select === 'end') {\n              Transforms.select(editor, Editor.start(editor, nextPath))\n            }\n          } else if (\n            Range.isExpanded(currentSelection) &&\n            Point.equals(selectionStartPoint, endBlockStartPoint) &&\n            Point.equals(selectionEndPoint, endBlockEndPoint)\n          ) {\n            Transforms.insertFragment(editor, [block], {\n              at: currentSelection,\n            })\n\n            if (select === 'start') {\n              Transforms.select(editor, Editor.start(editor, endBlockPath))\n            } else if (select === 'end') {\n              Transforms.select(editor, Editor.end(editor, endBlockPath))\n            }\n          } else if (\n            Range.isExpanded(currentSelection) &&\n            Point.equals(selectionStartPoint, endBlockStartPoint)\n          ) {\n            Transforms.insertFragment(editor, [block], {\n              at: currentSelection,\n            })\n\n            if (select === 'start') {\n              Transforms.select(editor, Editor.start(editor, endBlockPath))\n            } else if (select === 'end') {\n              Transforms.select(editor, Editor.end(editor, endBlockPath))\n            }\n          } else if (\n            Range.isExpanded(currentSelection) &&\n            Point.equals(selectionEndPoint, endBlockEndPoint)\n          ) {\n            Transforms.insertFragment(editor, [block], {\n              at: currentSelection,\n            })\n\n            if (select === 'start') {\n              Transforms.select(\n                editor,\n                Editor.start(editor, Path.next(endBlockPath)),\n              )\n            } else if (select === 'end') {\n              Transforms.select(\n                editor,\n                Editor.end(editor, Path.next(endBlockPath)),\n              )\n            }\n          } else {\n            const currentSelection = editor.selection\n            const [focusChild] = getFocusChild({editor})\n\n            if (focusChild && editor.isTextSpan(focusChild)) {\n              Transforms.splitNodes(editor, {\n                at: currentSelection,\n              })\n\n              Transforms.insertFragment(editor, [block], {\n                at: currentSelection,\n              })\n\n              if (select === 'start' || select === 'end') {\n                Transforms.select(editor, [endBlockPath[0] + 1])\n              } else {\n                Transforms.select(editor, currentSelection)\n              }\n            } else {\n              const nextPath = [endBlockPath[0] + 1]\n              Transforms.insertNodes(editor, [block], {\n                at: nextPath,\n                select: false,\n              })\n              Transforms.select(editor, currentSelection)\n\n              if (select === 'start') {\n                Transforms.select(editor, Editor.start(editor, nextPath))\n              } else if (select === 'end') {\n                Transforms.select(editor, Editor.end(editor, nextPath))\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n","import {isTextBlock} from '@portabletext/schema'\nimport {Transforms} from 'slate'\nimport {EDITOR_TO_PENDING_SELECTION} from 'slate-dom'\nimport {getFocusBlock, getFocusSpan} from '../internal-utils/slate-utils'\nimport {VOID_CHILD_KEY} from '../internal-utils/values'\nimport {parseInlineObject, parseSpan} from '../utils/parse-blocks'\nimport type {BehaviorOperationImplementation} from './behavior.operations'\n\nexport const insertChildOperationImplementation: BehaviorOperationImplementation<\n  'insert.child'\n> = ({context, operation}) => {\n  const focus = operation.editor.selection?.focus\n  const focusBlockIndex = focus?.path.at(0)\n  const focusChildIndex = focus?.path.at(1)\n\n  if (focusBlockIndex === undefined || focusChildIndex === undefined) {\n    throw new Error('Unable to insert child without a focus')\n  }\n\n  const [focusBlock, focusBlockPath] = getFocusBlock({editor: operation.editor})\n\n  if (!focus || !focusBlock || !focusBlockPath) {\n    throw new Error('Unable to insert child without a focus block')\n  }\n\n  if (!isTextBlock(context, focusBlock)) {\n    throw new Error('Unable to insert child into a non-text block')\n  }\n\n  const markDefs = focusBlock.markDefs ?? []\n  const markDefKeyMap = new Map<string, string>()\n  for (const markDef of markDefs) {\n    markDefKeyMap.set(markDef._key, markDef._key)\n  }\n\n  const span = parseSpan({\n    span: operation.child,\n    context,\n    markDefKeyMap,\n    options: {validateFields: true},\n  })\n\n  if (span) {\n    const [focusSpan] = getFocusSpan({editor: operation.editor})\n\n    if (focusSpan) {\n      Transforms.insertNodes(operation.editor, span, {\n        at: focus,\n        select: true,\n      })\n    } else {\n      Transforms.insertNodes(operation.editor, span, {\n        at: [focusBlockIndex, focusChildIndex + 1],\n        select: true,\n      })\n    }\n\n    // This makes sure the selection is set correctly when event handling is run\n    // through Slate's Android input handling\n    EDITOR_TO_PENDING_SELECTION.set(\n      operation.editor,\n      operation.editor.selection,\n    )\n\n    return\n  }\n\n  const inlineObject = parseInlineObject({\n    inlineObject: operation.child,\n    context,\n    options: {validateFields: true},\n  })\n\n  if (inlineObject) {\n    const {_key, _type, ...rest} = inlineObject\n\n    Transforms.insertNodes(\n      operation.editor,\n      {\n        _key,\n        _type,\n        children: [\n          {\n            _key: VOID_CHILD_KEY,\n            _type: 'span',\n            text: '',\n            marks: [],\n          },\n        ],\n        value: rest,\n        __inline: true,\n      },\n      {\n        at: [focusBlockIndex, focusChildIndex + 1],\n        select: true,\n      },\n    )\n\n    return\n  }\n\n  throw new Error('Unable to parse child')\n}\n","import {Transforms} from 'slate'\nimport type {BehaviorOperationImplementation} from './behavior.operations'\n\nexport const insertTextOperationImplementation: BehaviorOperationImplementation<\n  'insert.text'\n> = ({operation}) => {\n  Transforms.insertText(operation.editor, operation.text)\n}\n","import {Transforms} from 'slate'\nimport type {BehaviorOperationImplementation} from './behavior.operations'\n\nexport const moveBackwardOperationImplementation: BehaviorOperationImplementation<\n  'move.backward'\n> = ({operation}) => {\n  Transforms.move(operation.editor, {\n    unit: 'character',\n    distance: operation.distance,\n    reverse: true,\n  })\n}\n","import {Transforms} from 'slate'\nimport {getBlockKeyFromSelectionPoint} from '../utils/util.selection-point'\nimport type {BehaviorOperationImplementation} from './behavior.operations'\n\nexport const moveBlockOperationImplementation: BehaviorOperationImplementation<\n  'move.block'\n> = ({operation}) => {\n  const originKey = getBlockKeyFromSelectionPoint({\n    path: operation.at,\n    offset: 0,\n  })\n\n  if (!originKey) {\n    throw new Error('Failed to get block key from selection point')\n  }\n\n  const originBlockIndex = operation.editor.blockIndexMap.get(originKey)\n\n  if (originBlockIndex === undefined) {\n    throw new Error('Failed to get block index from block key')\n  }\n\n  const destinationKey = getBlockKeyFromSelectionPoint({\n    path: operation.to,\n    offset: 0,\n  })\n\n  if (!destinationKey) {\n    throw new Error('Failed to get block key from selection point')\n  }\n\n  const destinationBlockIndex =\n    operation.editor.blockIndexMap.get(destinationKey)\n\n  if (destinationBlockIndex === undefined) {\n    throw new Error('Failed to get block index from block key')\n  }\n\n  Transforms.moveNodes(operation.editor, {\n    at: [originBlockIndex],\n    to: [destinationBlockIndex],\n    mode: 'highest',\n  })\n}\n","import {Transforms} from 'slate'\nimport type {BehaviorOperationImplementation} from './behavior.operations'\n\nexport const moveForwardOperationImplementation: BehaviorOperationImplementation<\n  'move.forward'\n> = ({operation}) => {\n  Transforms.move(operation.editor, {\n    unit: 'character',\n    distance: operation.distance,\n  })\n}\n","import {Transforms} from 'slate'\nimport {IS_FOCUSED, IS_READ_ONLY} from 'slate-dom'\nimport {toSlateRange} from '../internal-utils/to-slate-range'\nimport type {BehaviorOperationImplementation} from './behavior.operations'\n\nexport const selectOperationImplementation: BehaviorOperationImplementation<\n  'select'\n> = ({context, operation}) => {\n  const newSelection = toSlateRange({\n    context: {\n      schema: context.schema,\n      value: operation.editor.value,\n      selection: operation.at,\n    },\n    blockIndexMap: operation.editor.blockIndexMap,\n  })\n\n  if (newSelection) {\n    Transforms.select(operation.editor, newSelection)\n  } else {\n    Transforms.deselect(operation.editor)\n  }\n\n  if (IS_FOCUSED.get(operation.editor) && IS_READ_ONLY.get(operation.editor)) {\n    IS_FOCUSED.set(operation.editor, false)\n  }\n}\n","import {Editor} from 'slate'\nimport type {\n  AbstractBehaviorEventType,\n  SyntheticBehaviorEvent,\n} from '../behaviors/behavior.types.event'\nimport type {EditorContext} from '../editor/editor-snapshot'\nimport {removeDecoratorOperationImplementation} from '../editor/plugins/createWithPortableTextMarkModel'\nimport {\n  historyRedoOperationImplementation,\n  historyUndoOperationImplementation,\n} from '../editor/plugins/createWithUndoRedo'\nimport type {OmitFromUnion, PickFromUnion} from '../type-utils'\nimport type {PortableTextSlateEditor} from '../types/editor'\nimport {addAnnotationOperationImplementation} from './behavior.operation.annotation.add'\nimport {removeAnnotationOperationImplementation} from './behavior.operation.annotation.remove'\nimport {blockSetOperationImplementation} from './behavior.operation.block.set'\nimport {blockUnsetOperationImplementation} from './behavior.operation.block.unset'\nimport {childSetOperationImplementation} from './behavior.operation.child.set'\nimport {childUnsetOperationImplementation} from './behavior.operation.child.unset'\nimport {decoratorAddOperationImplementation} from './behavior.operation.decorator.add'\nimport {deleteOperationImplementation} from './behavior.operation.delete'\nimport {insertBlockOperationImplementation} from './behavior.operation.insert.block'\nimport {insertChildOperationImplementation} from './behavior.operation.insert.child'\nimport {insertTextOperationImplementation} from './behavior.operation.insert.text'\nimport {moveBackwardOperationImplementation} from './behavior.operation.move.backward'\nimport {moveBlockOperationImplementation} from './behavior.operation.move.block'\nimport {moveForwardOperationImplementation} from './behavior.operation.move.forward'\nimport {selectOperationImplementation} from './behavior.operation.select'\n\nexport type BehaviorOperationImplementationContext = Pick<\n  EditorContext,\n  'keyGenerator' | 'schema'\n>\n\nexport type BehaviorOperationImplementation<\n  TBehaviorOperationType extends BehaviorOperation['type'],\n> = ({\n  context,\n  operation,\n}: {\n  context: BehaviorOperationImplementationContext\n  operation: PickFromUnion<BehaviorOperation, 'type', TBehaviorOperationType>\n}) => void\n\ntype BehaviorOperation = OmitFromUnion<\n  SyntheticBehaviorEvent,\n  'type',\n  AbstractBehaviorEventType\n> & {\n  editor: PortableTextSlateEditor\n}\n\ntype BehaviorOperationImplementations = {\n  [TBehaviorOperationType in BehaviorOperation['type']]: BehaviorOperationImplementation<TBehaviorOperationType>\n}\n\nconst behaviorOperationImplementations: BehaviorOperationImplementations = {\n  'annotation.add': addAnnotationOperationImplementation,\n  'annotation.remove': removeAnnotationOperationImplementation,\n  'block.set': blockSetOperationImplementation,\n  'block.unset': blockUnsetOperationImplementation,\n  'child.set': childSetOperationImplementation,\n  'child.unset': childUnsetOperationImplementation,\n  'decorator.add': decoratorAddOperationImplementation,\n  'decorator.remove': removeDecoratorOperationImplementation,\n  'delete': deleteOperationImplementation,\n  'history.redo': historyRedoOperationImplementation,\n  'history.undo': historyUndoOperationImplementation,\n  'insert.block': insertBlockOperationImplementation,\n  'insert.child': insertChildOperationImplementation,\n  'insert.text': insertTextOperationImplementation,\n  'move.backward': moveBackwardOperationImplementation,\n  'move.block': moveBlockOperationImplementation,\n  'move.forward': moveForwardOperationImplementation,\n  'select': selectOperationImplementation,\n}\n\nexport function performOperation({\n  context,\n  operation,\n}: {\n  context: BehaviorOperationImplementationContext\n  operation: BehaviorOperation\n}) {\n  Editor.withoutNormalizing(operation.editor, () => {\n    try {\n      switch (operation.type) {\n        case 'annotation.add': {\n          behaviorOperationImplementations['annotation.add']({\n            context,\n            operation: operation,\n          })\n          break\n        }\n        case 'annotation.remove': {\n          behaviorOperationImplementations['annotation.remove']({\n            context,\n            operation: operation,\n          })\n          break\n        }\n        case 'block.set': {\n          behaviorOperationImplementations['block.set']({\n            context,\n            operation: operation,\n          })\n          break\n        }\n        case 'block.unset': {\n          behaviorOperationImplementations['block.unset']({\n            context,\n            operation: operation,\n          })\n          break\n        }\n        case 'child.set': {\n          behaviorOperationImplementations['child.set']({\n            context,\n            operation: operation,\n          })\n          break\n        }\n        case 'child.unset': {\n          behaviorOperationImplementations['child.unset']({\n            context,\n            operation: operation,\n          })\n          break\n        }\n        case 'decorator.add': {\n          behaviorOperationImplementations['decorator.add']({\n            context,\n            operation: operation,\n          })\n          break\n        }\n        case 'decorator.remove': {\n          behaviorOperationImplementations['decorator.remove']({\n            context,\n            operation: operation,\n          })\n          break\n        }\n        case 'delete': {\n          behaviorOperationImplementations.delete({\n            context,\n            operation: operation,\n          })\n          break\n        }\n        case 'history.redo': {\n          behaviorOperationImplementations['history.redo']({\n            context,\n            operation: operation,\n          })\n          break\n        }\n        case 'history.undo': {\n          behaviorOperationImplementations['history.undo']({\n            context,\n            operation: operation,\n          })\n          break\n        }\n        case 'insert.block': {\n          behaviorOperationImplementations['insert.block']({\n            context,\n            operation: operation,\n          })\n          break\n        }\n        case 'insert.child': {\n          behaviorOperationImplementations['insert.child']({\n            context,\n            operation: operation,\n          })\n          break\n        }\n        case 'insert.text': {\n          behaviorOperationImplementations['insert.text']({\n            context,\n            operation: operation,\n          })\n          break\n        }\n        case 'move.backward': {\n          behaviorOperationImplementations['move.backward']({\n            context,\n            operation: operation,\n          })\n          break\n        }\n        case 'move.block': {\n          behaviorOperationImplementations['move.block']({\n            context,\n            operation: operation,\n          })\n          break\n        }\n        case 'move.forward': {\n          behaviorOperationImplementations['move.forward']({\n            context,\n            operation: operation,\n          })\n          break\n        }\n        default: {\n          behaviorOperationImplementations.select({\n            context,\n            operation: operation,\n          })\n          break\n        }\n      }\n    } catch (error) {\n      console.error(\n        new Error(\n          `Executing \"${operation.type}\" failed due to: ${error.message}`,\n        ),\n      )\n    }\n  })\n}\n","import type {Editor} from 'slate'\n\nconst IS_PERFORMING_OPERATION: WeakMap<Editor, boolean | undefined> =\n  new WeakMap()\n\nexport function withPerformingBehaviorOperation(\n  editor: Editor,\n  fn: () => void,\n) {\n  const prev = IS_PERFORMING_OPERATION.get(editor)\n\n  IS_PERFORMING_OPERATION.set(editor, true)\n\n  fn()\n\n  IS_PERFORMING_OPERATION.set(editor, prev)\n}\n\nexport function isPerformingBehaviorOperation(editor: Editor) {\n  return IS_PERFORMING_OPERATION.get(editor) ?? false\n}\n","import {Editor} from 'slate'\nimport {slateRangeToSelection} from '../../internal-utils/slate-utils'\nimport {performOperation} from '../../operations/behavior.operations'\nimport type {EditorActor} from '../editor-machine'\nimport {isPerformingBehaviorOperation} from '../with-performing-behavior-operation'\n\nexport function createWithEventListeners(editorActor: EditorActor) {\n  return function withEventListeners(editor: Editor) {\n    if (editorActor.getSnapshot().context.maxBlocks !== undefined) {\n      return editor\n    }\n\n    const {delete: editorDelete, select} = editor\n\n    editor.delete = (options) => {\n      if (isPerformingBehaviorOperation(editor)) {\n        editorDelete(options)\n        return\n      }\n\n      const at = options?.at ?? editor.selection\n\n      if (!at) {\n        console.error('Unexpected call to .delete(...) without `at` option')\n        return\n      }\n\n      const range = Editor.range(editor, at)\n\n      const selection = slateRangeToSelection({\n        schema: editorActor.getSnapshot().context.schema,\n        editor,\n        range,\n      })\n\n      if (!selection) {\n        console.error(\n          'Unexpected call to .delete(...) with invalid `at` option',\n        )\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'delete',\n          at: selection,\n          direction: options?.reverse ? 'backward' : 'forward',\n          unit: options?.unit,\n        },\n        editor,\n      })\n    }\n\n    editor.deleteBackward = (unit) => {\n      if (isPerformingBehaviorOperation(editor)) {\n        console.error('Unexpected call to .deleteBackward(...)')\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'delete.backward',\n          unit,\n        },\n        editor,\n      })\n      return\n    }\n\n    editor.deleteForward = (unit) => {\n      if (isPerformingBehaviorOperation(editor)) {\n        console.error('Unexpected call to .deleteForward(...)')\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'delete.forward',\n          unit,\n        },\n        editor,\n      })\n      return\n    }\n\n    editor.insertBreak = () => {\n      if (isPerformingBehaviorOperation(editor)) {\n        console.error('Unexpected call to .insertBreak(...)')\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'insert.break',\n        },\n        editor,\n      })\n      return\n    }\n\n    editor.insertData = (dataTransfer) => {\n      if (isPerformingBehaviorOperation(editor)) {\n        console.error('Unexpected call to .insertData(...)')\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'input.*',\n          originEvent: {\n            dataTransfer,\n          },\n        },\n        editor,\n      })\n    }\n\n    editor.insertSoftBreak = () => {\n      if (isPerformingBehaviorOperation(editor)) {\n        performOperation({\n          context: {\n            keyGenerator: editorActor.getSnapshot().context.keyGenerator,\n            schema: editorActor.getSnapshot().context.schema,\n          },\n          operation: {type: 'insert.text', text: '\\n', editor},\n        })\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'insert.soft break',\n        },\n        editor,\n      })\n      return\n    }\n\n    editor.insertText = (text) => {\n      if (isPerformingBehaviorOperation(editor)) {\n        performOperation({\n          context: {\n            keyGenerator: editorActor.getSnapshot().context.keyGenerator,\n            schema: editorActor.getSnapshot().context.schema,\n          },\n          operation: {type: 'insert.text', text, editor},\n        })\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'insert.text',\n          text,\n        },\n        editor,\n      })\n      return\n    }\n\n    editor.redo = () => {\n      if (isPerformingBehaviorOperation(editor)) {\n        performOperation({\n          context: {\n            keyGenerator: editorActor.getSnapshot().context.keyGenerator,\n            schema: editorActor.getSnapshot().context.schema,\n          },\n          operation: {\n            type: 'history.redo',\n            editor,\n          },\n        })\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'history.redo',\n        },\n        editor,\n      })\n      return\n    }\n\n    editor.select = (location) => {\n      if (isPerformingBehaviorOperation(editor)) {\n        select(location)\n        return\n      }\n\n      const range = Editor.range(editor, location)\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'select',\n          at: slateRangeToSelection({\n            schema: editorActor.getSnapshot().context.schema,\n            editor,\n            range,\n          }),\n        },\n        editor,\n      })\n      return\n    }\n\n    editor.setFragmentData = () => {\n      console.error('Unexpected call to .setFragmentData(...)')\n      return\n    }\n\n    editor.undo = () => {\n      if (isPerformingBehaviorOperation(editor)) {\n        performOperation({\n          context: {\n            keyGenerator: editorActor.getSnapshot().context.keyGenerator,\n            schema: editorActor.getSnapshot().context.schema,\n          },\n          operation: {\n            type: 'history.undo',\n            editor,\n          },\n        })\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'history.undo',\n        },\n        editor,\n      })\n      return\n    }\n\n    return editor\n  }\n}\n","import type {PortableTextSlateEditor} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\nimport {isChangingRemotely} from '../withChanges'\nimport {isRedoing, isUndoing} from '../withUndoRedo'\n\n/**\n * This plugin makes sure that the PTE maxBlocks prop is respected\n *\n */\nexport function createWithMaxBlocks(editorActor: EditorActor) {\n  return function withMaxBlocks(\n    editor: PortableTextSlateEditor,\n  ): PortableTextSlateEditor {\n    const {apply} = editor\n    editor.apply = (operation) => {\n      if (editorActor.getSnapshot().matches({'edit mode': 'read only'})) {\n        apply(operation)\n        return\n      }\n\n      /**\n       * We don't want to run any side effects when the editor is processing\n       * remote changes.\n       */\n      if (isChangingRemotely(editor)) {\n        apply(operation)\n        return\n      }\n\n      /**\n       * We don't want to run any side effects when the editor is undoing or\n       * redoing operations.\n       */\n      if (isUndoing(editor) || isRedoing(editor)) {\n        apply(operation)\n        return\n      }\n\n      const rows = editorActor.getSnapshot().context.maxBlocks ?? -1\n      if (rows > 0 && editor.children.length >= rows) {\n        if (\n          (operation.type === 'insert_node' ||\n            operation.type === 'split_node') &&\n          operation.path.length === 1\n        ) {\n          return\n        }\n      }\n      apply(operation)\n    }\n    return editor\n  }\n}\n","import {isSpan, isTextBlock} from '@portabletext/schema'\nimport {isEqual} from 'lodash'\nimport {Editor, Element, Node, Path, Transforms} from 'slate'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\nimport {withNormalizeNode} from '../with-normalizing-node'\nimport {isChangingRemotely} from '../withChanges'\nimport {isRedoing, isUndoing} from '../withUndoRedo'\n\n/**\n * This plugin makes sure that every new node in the editor get a new _key prop when created\n *\n */\nexport function createWithObjectKeys(editorActor: EditorActor) {\n  return function withKeys(\n    editor: PortableTextSlateEditor,\n  ): PortableTextSlateEditor {\n    const {apply, normalizeNode} = editor\n\n    // The default behavior is to always generate a new key here.\n    // For example, when undoing and redoing we want to retain the keys, but\n    // when we create a new bold span by splitting a non-bold-span we want the produced node to get a new key.\n    editor.apply = (operation) => {\n      /**\n       * We don't want to run any side effects when the editor is processing\n       * remote changes.\n       */\n      if (isChangingRemotely(editor)) {\n        apply(operation)\n        return\n      }\n\n      /**\n       * We don't want to run any side effects when the editor is undoing or\n       * redoing operations.\n       */\n      if (isUndoing(editor) || isRedoing(editor)) {\n        apply(operation)\n        return\n      }\n\n      if (operation.type === 'split_node') {\n        const existingKeys = [...Node.descendants(editor)].map(\n          ([node]) => node._key,\n        )\n\n        apply({\n          ...operation,\n          properties: {\n            ...operation.properties,\n            _key:\n              operation.properties._key === undefined ||\n              existingKeys.includes(operation.properties._key)\n                ? editorActor.getSnapshot().context.keyGenerator()\n                : operation.properties._key,\n          },\n        })\n\n        return\n      }\n\n      if (operation.type === 'insert_node') {\n        if (!Editor.isEditor(operation.node)) {\n          const existingKeys = [...Node.descendants(editor)].map(\n            ([node]) => node._key,\n          )\n\n          apply({\n            ...operation,\n            node: {\n              ...operation.node,\n              _key:\n                operation.node._key === undefined ||\n                existingKeys.includes(operation.node._key)\n                  ? editorActor.getSnapshot().context.keyGenerator()\n                  : operation.node._key,\n            },\n          })\n\n          return\n        }\n      }\n\n      if (operation.type === 'merge_node') {\n        const index = operation.path[operation.path.length - 1]\n        const prevPath = Path.previous(operation.path)\n        const prevIndex = prevPath[prevPath.length - 1]\n\n        if (operation.path.length !== 1 || prevPath.length !== 1) {\n          apply(operation)\n          return\n        }\n\n        const block = editor.value.at(index)\n        const previousBlock = editor.value.at(prevIndex)\n\n        if (!block || !previousBlock) {\n          apply(operation)\n          return\n        }\n\n        if (\n          !isTextBlock(editorActor.getSnapshot().context, block) ||\n          !isTextBlock(editorActor.getSnapshot().context, previousBlock)\n        ) {\n          apply(operation)\n          return\n        }\n\n        // If we are merging two text blocks, then we need to make sure there\n        // are no duplicate keys in the blocks. Therefore, we assign new keys\n        // to any child or markDef that shares key with other children or\n        // markDefs in the previous block.\n        const previousBlockChildKeys = previousBlock.children.map(\n          (child) => child._key,\n        )\n        const previousBlockMarkDefKeys =\n          previousBlock.markDefs?.map((markDef) => markDef._key) ?? []\n\n        // Assign new keys to markDefs with duplicate keys and keep track of\n        // the mapping between the old and new keys\n        const markDefKeyMap = new Map<string, string>()\n        const adjustedMarkDefs = block.markDefs?.map((markDef) => {\n          if (previousBlockMarkDefKeys.includes(markDef._key)) {\n            const newKey = editorActor.getSnapshot().context.keyGenerator()\n            markDefKeyMap.set(markDef._key, newKey)\n            return {\n              ...markDef,\n              _key: newKey,\n            }\n          }\n\n          return markDef\n        })\n\n        // Assign new keys to spans with duplicate keys and update any markDef\n        // key if needed\n        let childIndex = 0\n        for (const child of block.children) {\n          if (isSpan(editorActor.getSnapshot().context, child)) {\n            const marks =\n              child.marks?.map((mark) => {\n                const markDefKey = markDefKeyMap.get(mark)\n\n                if (markDefKey) {\n                  return markDefKey\n                }\n\n                return mark\n              }) ?? []\n\n            if (!isEqual(child.marks, marks)) {\n              Transforms.setNodes(\n                editor,\n                {\n                  marks,\n                },\n                {\n                  at: [index, childIndex],\n                },\n              )\n            }\n          }\n\n          if (previousBlockChildKeys.includes(child._key)) {\n            Transforms.setNodes(\n              editor,\n              {\n                _key: editorActor.getSnapshot().context.keyGenerator(),\n              },\n              {\n                at: [index, childIndex],\n              },\n            )\n          }\n          childIndex++\n        }\n\n        apply({\n          ...operation,\n          properties: {\n            ...operation.properties,\n            // Make sure the adjusted markDefs are carried along for the merge\n            // operation\n            markDefs: adjustedMarkDefs,\n          },\n        })\n        return\n      }\n\n      apply(operation)\n    }\n\n    editor.normalizeNode = (entry) => {\n      const [node, path] = entry\n      if (\n        Element.isElement(node) &&\n        node._type === editorActor.getSnapshot().context.schema.block.name\n      ) {\n        // Set key on block itself\n        if (!node._key) {\n          withNormalizeNode(editor, () => {\n            Transforms.setNodes(\n              editor,\n              {_key: editorActor.getSnapshot().context.keyGenerator()},\n              {at: path},\n            )\n          })\n          return\n        }\n        // Set keys on it's children\n        for (const [child, childPath] of Node.children(editor, path)) {\n          if (!child._key) {\n            withNormalizeNode(editor, () => {\n              Transforms.setNodes(\n                editor,\n                {_key: editorActor.getSnapshot().context.keyGenerator()},\n                {at: childPath},\n              )\n            })\n            return\n          }\n        }\n      }\n\n      withNormalizeNode(editor, () => {\n        normalizeNode(entry)\n      })\n    }\n\n    return editor\n  }\n}\n","import {\n  applyAll,\n  type DiffMatchPatch,\n  type InsertPatch,\n  type Patch,\n  type SetPatch,\n  type UnsetPatch,\n} from '@portabletext/patches'\nimport {\n  cleanupEfficiency,\n  DIFF_DELETE,\n  DIFF_EQUAL,\n  DIFF_INSERT,\n  applyPatches as diffMatchPatchApplyPatches,\n  makeDiff,\n  parsePatch,\n} from '@sanity/diff-match-patch'\nimport type {Path, PortableTextBlock, PortableTextChild} from '@sanity/types'\nimport {Element, Node, Text, Transforms, type Descendant} from 'slate'\nimport type {EditorSchema} from '../editor/editor-schema'\nimport {KEY_TO_SLATE_ELEMENT} from '../editor/weakMaps'\nimport type {PortableTextSlateEditor} from '../types/editor'\nimport {isKeyedSegment} from '../utils/util.is-keyed-segment'\nimport {isEqualToEmptyEditor, toSlateValue} from './values'\n\n/**\n * Creates a function that can apply a patch onto a PortableTextSlateEditor.\n */\nexport function createApplyPatch(\n  schema: EditorSchema,\n): (editor: PortableTextSlateEditor, patch: Patch) => boolean {\n  return (editor: PortableTextSlateEditor, patch: Patch): boolean => {\n    let changed = false\n\n    try {\n      switch (patch.type) {\n        case 'insert':\n          changed = insertPatch(editor, patch, schema)\n          break\n        case 'unset':\n          changed = unsetPatch(editor, patch)\n          break\n        case 'set':\n          changed = setPatch(editor, patch)\n          break\n        case 'diffMatchPatch':\n          changed = diffMatchPatch(editor, patch)\n          break\n      }\n    } catch (err) {\n      console.error(err)\n    }\n\n    return changed\n  }\n}\n\nfunction diffMatchPatch(\n  editor: Pick<\n    PortableTextSlateEditor,\n    'children' | 'isTextBlock' | 'apply' | 'selection' | 'onChange'\n  >,\n  patch: DiffMatchPatch,\n): boolean {\n  const block = findBlock(editor.children, patch.path)\n\n  if (!block) {\n    return false\n  }\n\n  const child = findBlockChild(block, patch.path)\n\n  if (!child) {\n    return false\n  }\n\n  const isSpanTextDiffMatchPatch =\n    block &&\n    editor.isTextBlock(block.node) &&\n    patch.path.length === 4 &&\n    patch.path[1] === 'children' &&\n    patch.path[3] === 'text'\n\n  if (!isSpanTextDiffMatchPatch || !Text.isText(child.node)) {\n    return false\n  }\n\n  const patches = parsePatch(patch.value)\n  const [newValue] = diffMatchPatchApplyPatches(patches, child.node.text, {\n    allowExceedingIndices: true,\n  })\n  const diff = cleanupEfficiency(makeDiff(child.node.text, newValue), 5)\n\n  let offset = 0\n  for (const [op, text] of diff) {\n    if (op === DIFF_INSERT) {\n      editor.apply({\n        type: 'insert_text',\n        path: [block.index, child.index],\n        offset,\n        text,\n      })\n      offset += text.length\n    } else if (op === DIFF_DELETE) {\n      editor.apply({\n        type: 'remove_text',\n        path: [block.index, child.index],\n        offset: offset,\n        text,\n      })\n    } else if (op === DIFF_EQUAL) {\n      offset += text.length\n    }\n  }\n\n  return true\n}\n\nfunction insertPatch(\n  editor: PortableTextSlateEditor,\n  patch: InsertPatch,\n  schema: EditorSchema,\n) {\n  const block = findBlock(editor.children, patch.path)\n\n  if (!block) {\n    return false\n  }\n\n  if (patch.path.length > 1 && patch.path[1] !== 'children') {\n    return false\n  }\n\n  // Insert blocks\n  if (patch.path.length === 1) {\n    const {items, position} = patch\n    const blocksToInsert = toSlateValue(\n      items as PortableTextBlock[],\n      {schemaTypes: schema},\n      KEY_TO_SLATE_ELEMENT.get(editor),\n    ) as Descendant[]\n    const targetBlockIndex = block.index\n    const normalizedIdx =\n      position === 'after' ? targetBlockIndex + 1 : targetBlockIndex\n\n    const editorWasEmptyBefore = isEqualToEmptyEditor(editor.children, schema)\n\n    Transforms.insertNodes(editor, blocksToInsert, {at: [normalizedIdx]})\n\n    if (\n      editorWasEmptyBefore &&\n      typeof patch.path[0] === 'number' &&\n      patch.path[0] === 0\n    ) {\n      Transforms.removeNodes(editor, {\n        at: [position === 'before' ? targetBlockIndex + 1 : targetBlockIndex],\n      })\n    }\n\n    return true\n  }\n\n  // Insert children\n  const {items, position} = patch\n\n  const targetChild = findBlockChild(block, patch.path)\n\n  if (!targetChild) {\n    return false\n  }\n\n  const childrenToInsert = toSlateValue(\n    [{...block.node, children: items as PortableTextChild[]}],\n    {schemaTypes: schema},\n    KEY_TO_SLATE_ELEMENT.get(editor),\n  )\n  const normalizedIdx =\n    position === 'after' ? targetChild.index + 1 : targetChild.index\n  const childInsertPath = [block.index, normalizedIdx]\n\n  if (childrenToInsert && Element.isElement(childrenToInsert[0])) {\n    Transforms.insertNodes(editor, childrenToInsert[0].children, {\n      at: childInsertPath,\n    })\n  }\n\n  return true\n}\n\nfunction setPatch(editor: PortableTextSlateEditor, patch: SetPatch) {\n  let value = patch.value\n  if (typeof patch.path[3] === 'string') {\n    value = {}\n    value[patch.path[3]] = patch.value\n  }\n\n  const block = findBlock(editor.children, patch.path)\n\n  if (!block) {\n    return false\n  }\n\n  const isTextBlock = editor.isTextBlock(block.node)\n\n  // Ignore patches targeting nested void data, like 'markDefs'\n  if (isTextBlock && patch.path.length > 1 && patch.path[1] !== 'children') {\n    return false\n  }\n\n  const child = findBlockChild(block, patch.path)\n\n  // If this is targeting a text block child\n  if (isTextBlock && child) {\n    if (Text.isText(child.node)) {\n      if (Text.isText(value)) {\n        const oldText = child.node.text\n        const newText = value.text\n        if (oldText !== newText) {\n          editor.apply({\n            type: 'remove_text',\n            path: [block.index, child.index],\n            offset: 0,\n            text: oldText,\n          })\n          editor.apply({\n            type: 'insert_text',\n            path: [block.index, child.index],\n            offset: 0,\n            text: newText,\n          })\n          // call OnChange here to emit the new selection\n          // the user's selection might be interfering with\n          editor.onChange()\n        }\n      } else {\n        // Setting non-text span property\n\n        const propPath = patch.path.slice(3)\n        const propEntry = propPath.at(0)\n        const reservedProps = ['_key', '_type', 'text']\n\n        if (propEntry === undefined) {\n          return false\n        }\n\n        if (\n          typeof propEntry === 'string' &&\n          reservedProps.includes(propEntry)\n        ) {\n          return false\n        }\n\n        const newNode = applyAll(child.node, [\n          {\n            ...patch,\n            path: propPath,\n          },\n        ])\n\n        Transforms.setNodes(editor, newNode, {at: [block.index, child.index]})\n      }\n    } else {\n      // Setting inline object property\n\n      const propPath = patch.path.slice(3)\n      const reservedProps = ['_key', '_type', 'children', '__inline']\n      const propEntry = propPath.at(0)\n\n      if (propEntry === undefined) {\n        return false\n      }\n\n      if (typeof propEntry === 'string' && reservedProps.includes(propEntry)) {\n        return false\n      }\n\n      // If the child is an inline object, we need to apply the patch to the\n      // `value` property object.\n      const value =\n        'value' in child.node && typeof child.node.value === 'object'\n          ? child.node.value\n          : {}\n\n      const newValue = applyAll(value, [\n        {\n          ...patch,\n          path: patch.path.slice(3),\n        },\n      ])\n\n      Transforms.setNodes(\n        editor,\n        {...child.node, value: newValue},\n        {at: [block.index, child.index]},\n      )\n    }\n\n    return true\n  } else if (Element.isElement(block.node) && patch.path.length === 1) {\n    const {children, ...nextRest} = value as unknown as PortableTextBlock\n    const {children: _prevChildren, ...prevRest} = block.node || {\n      children: undefined,\n    }\n\n    // Set any block properties\n    editor.apply({\n      type: 'set_node',\n      path: [block.index],\n      properties: {...prevRest},\n      newProperties: nextRest,\n    })\n\n    // Replace the children in the block\n    // Note that children must be explicitly inserted, and can't be set with set_node\n    const blockNode = block.node\n\n    blockNode.children.forEach((child, childIndex) => {\n      editor.apply({\n        type: 'remove_node',\n        path: [block.index, blockNode.children.length - 1 - childIndex],\n        node: child,\n      })\n    })\n\n    if (Array.isArray(children)) {\n      children.forEach((child, childIndex) => {\n        editor.apply({\n          type: 'insert_node',\n          path: [block.index, childIndex],\n          node: child,\n        })\n      })\n    }\n  } else if (block && 'value' in block.node) {\n    if (patch.path.length > 1 && patch.path[1] !== 'children') {\n      const newVal = applyAll(block.node.value, [\n        {\n          ...patch,\n          path: patch.path.slice(1),\n        },\n      ])\n\n      Transforms.setNodes(\n        editor,\n        {...block.node, value: newVal},\n        {at: [block.index]},\n      )\n    } else {\n      return false\n    }\n  }\n\n  return true\n}\n\nfunction unsetPatch(editor: PortableTextSlateEditor, patch: UnsetPatch) {\n  // Value\n  if (patch.path.length === 0) {\n    const previousSelection = editor.selection\n    Transforms.deselect(editor)\n\n    const children = Node.children(editor, [], {\n      reverse: true,\n    })\n\n    for (const [_, path] of children) {\n      Transforms.removeNodes(editor, {at: path})\n    }\n\n    Transforms.insertNodes(editor, editor.pteCreateTextBlock({decorators: []}))\n    if (previousSelection) {\n      Transforms.select(editor, {\n        anchor: {path: [0, 0], offset: 0},\n        focus: {path: [0, 0], offset: 0},\n      })\n    }\n    // call OnChange here to emit the new selection\n    editor.onChange()\n    return true\n  }\n\n  const block = findBlock(editor.children, patch.path)\n\n  if (!block) {\n    return false\n  }\n\n  // Single blocks\n  if (patch.path.length === 1) {\n    if (editor.children.length === 1) {\n      // `unset`ing the last block should be treated similar to `unset`ing the\n      // entire editor value\n      const previousSelection = editor.selection\n\n      Transforms.deselect(editor)\n      Transforms.removeNodes(editor, {at: [block.index]})\n      Transforms.insertNodes(\n        editor,\n        editor.pteCreateTextBlock({decorators: []}),\n      )\n\n      if (previousSelection) {\n        Transforms.select(editor, {\n          anchor: {path: [0, 0], offset: 0},\n          focus: {path: [0, 0], offset: 0},\n        })\n      }\n\n      editor.onChange()\n\n      return true\n    }\n\n    Transforms.removeNodes(editor, {at: [block.index]})\n\n    return true\n  }\n\n  const child = findBlockChild(block, patch.path)\n\n  // Unset on text block children\n  if (editor.isTextBlock(block.node) && child) {\n    if (patch.path[1] === 'children' && patch.path.length === 3) {\n      Transforms.removeNodes(editor, {at: [block.index, child.index]})\n\n      return true\n    }\n  }\n\n  if (child && !Text.isText(child.node)) {\n    // Unsetting inline object property\n\n    const propPath = patch.path.slice(3)\n    const propEntry = propPath.at(0)\n    const reservedProps = ['_key', '_type', 'children', '__inline']\n\n    if (propEntry === undefined) {\n      return false\n    }\n\n    if (typeof propEntry === 'string' && reservedProps.includes(propEntry)) {\n      // All custom properties are stored on the `value` property object.\n      // If you try to unset any of the other top-level properties it's a\n      // no-op.\n      return false\n    }\n\n    const value =\n      'value' in child.node && typeof child.node.value === 'object'\n        ? child.node.value\n        : {}\n\n    const newValue = applyAll(value, [\n      {\n        ...patch,\n        path: patch.path.slice(3),\n      },\n    ])\n\n    Transforms.setNodes(\n      editor,\n      {...child.node, value: newValue},\n      {at: [block.index, child.index]},\n    )\n\n    return true\n  }\n\n  if (child && Text.isText(child.node)) {\n    const propPath = patch.path.slice(3)\n    const propEntry = propPath.at(0)\n    const reservedProps = ['_key', '_type']\n\n    if (propEntry === undefined) {\n      return false\n    }\n\n    if (typeof propEntry === 'string' && reservedProps.includes(propEntry)) {\n      return false\n    }\n\n    if (typeof propEntry === 'string' && propEntry === 'text') {\n      editor.apply({\n        type: 'remove_text',\n        path: [block.index, child.index],\n        offset: 0,\n        text: child.node.text,\n      })\n\n      return true\n    }\n\n    const newNode = applyAll(child.node, [\n      {\n        ...patch,\n        path: propPath,\n      },\n    ])\n    const newKeys = Object.keys(newNode)\n\n    const removedProperties = Object.keys(child.node).filter(\n      (property) => !newKeys.includes(property),\n    )\n\n    Transforms.unsetNodes(editor, removedProperties, {\n      at: [block.index, child.index],\n    })\n\n    return true\n  }\n\n  if (!child) {\n    if ('value' in block.node) {\n      const newVal = applyAll(block.node.value, [\n        {\n          ...patch,\n          path: patch.path.slice(1),\n        },\n      ])\n\n      Transforms.setNodes(\n        editor,\n        {...block.node, value: newVal},\n        {at: [block.index]},\n      )\n\n      return true\n    }\n\n    return false\n  }\n\n  return false\n}\n\nfunction findBlock(\n  children: Descendant[],\n  path: Path,\n): {node: Descendant; index: number} | undefined {\n  let blockIndex = -1\n\n  const block = children.find((node: Descendant, index: number) => {\n    const isMatch = isKeyedSegment(path[0])\n      ? node._key === path[0]._key\n      : index === path[0]\n\n    if (isMatch) {\n      blockIndex = index\n    }\n\n    return isMatch\n  })\n\n  if (!block) {\n    return undefined\n  }\n\n  return {node: block, index: blockIndex}\n}\n\nfunction findBlockChild(\n  block: {node: Descendant; index: number},\n  path: Path,\n): {node: Descendant; index: number} | undefined {\n  const blockNode = block.node\n\n  if (!Element.isElement(blockNode) || path[1] !== 'children') {\n    return undefined\n  }\n\n  let childIndex = -1\n\n  const child = blockNode.children.find((node, index: number) => {\n    const isMatch = isKeyedSegment(path[2])\n      ? node._key === path[2]._key\n      : index === path[2]\n\n    if (isMatch) {\n      childIndex = index\n    }\n\n    return isMatch\n  })\n\n  if (!child) {\n    return undefined\n  }\n\n  return {\n    node: child,\n    index: childIndex,\n  }\n}\n","import {\n  diffMatchPatch,\n  insert,\n  set,\n  setIfMissing,\n  unset,\n  type InsertPosition,\n  type Patch,\n} from '@portabletext/patches'\nimport {isSpan, isTextBlock} from '@portabletext/schema'\nimport type {Path, PortableTextSpan, PortableTextTextBlock} from '@sanity/types'\nimport {get, isUndefined, omitBy} from 'lodash'\nimport {\n  Text,\n  type Descendant,\n  type InsertNodeOperation,\n  type InsertTextOperation,\n  type MergeNodeOperation,\n  type MoveNodeOperation,\n  type RemoveNodeOperation,\n  type RemoveTextOperation,\n  type SetNodeOperation,\n  type SplitNodeOperation,\n} from 'slate'\nimport type {EditorSchema} from '../editor/editor-schema'\nimport {fromSlateValue} from './values'\n\nexport function insertTextPatch(\n  schema: EditorSchema,\n  children: Descendant[],\n  operation: InsertTextOperation,\n  beforeValue: Descendant[],\n): Array<Patch> {\n  const block =\n    isTextBlock({schema}, children[operation.path[0]]) &&\n    children[operation.path[0]]\n  if (!block) {\n    throw new Error('Could not find block')\n  }\n  const textChild =\n    isTextBlock({schema}, block) &&\n    isSpan({schema}, block.children[operation.path[1]]) &&\n    (block.children[operation.path[1]] as PortableTextSpan)\n  if (!textChild) {\n    throw new Error('Could not find child')\n  }\n  const path: Path = [\n    {_key: block._key},\n    'children',\n    {_key: textChild._key},\n    'text',\n  ]\n  const prevBlock = beforeValue[operation.path[0]]\n  const prevChild =\n    isTextBlock({schema}, prevBlock) && prevBlock.children[operation.path[1]]\n  const prevText = isSpan({schema}, prevChild) ? prevChild.text : ''\n  const patch = diffMatchPatch(prevText, textChild.text, path)\n  return patch.value.length ? [patch] : []\n}\n\nexport function removeTextPatch(\n  schema: EditorSchema,\n  children: Descendant[],\n  operation: RemoveTextOperation,\n  beforeValue: Descendant[],\n): Array<Patch> {\n  const block = children[operation.path[0]]\n  if (!block) {\n    throw new Error('Could not find block')\n  }\n  const child =\n    (isTextBlock({schema}, block) && block.children[operation.path[1]]) ||\n    undefined\n  const textChild: PortableTextSpan | undefined = isSpan({schema}, child)\n    ? child\n    : undefined\n  if (child && !textChild) {\n    throw new Error('Expected span')\n  }\n  if (!textChild) {\n    throw new Error('Could not find child')\n  }\n  const path: Path = [\n    {_key: block._key},\n    'children',\n    {_key: textChild._key},\n    'text',\n  ]\n  const beforeBlock = beforeValue[operation.path[0]]\n  const prevTextChild =\n    isTextBlock({schema}, beforeBlock) &&\n    beforeBlock.children[operation.path[1]]\n  const prevText = isSpan({schema}, prevTextChild) && prevTextChild.text\n  const patch = diffMatchPatch(prevText || '', textChild.text, path)\n  return patch.value ? [patch] : []\n}\n\nexport function setNodePatch(\n  schema: EditorSchema,\n  children: Descendant[],\n  operation: SetNodeOperation,\n): Array<Patch> {\n  if (operation.path.length === 1) {\n    const block = children[operation.path[0]]\n    if (typeof block._key !== 'string') {\n      throw new Error('Expected block to have a _key')\n    }\n    const setNode = omitBy(\n      {...children[operation.path[0]], ...operation.newProperties},\n      isUndefined,\n    ) as unknown as Descendant\n    return [\n      set(fromSlateValue([setNode], schema.block.name)[0], [\n        {_key: block._key},\n      ]),\n    ]\n  } else if (operation.path.length === 2) {\n    const block = children[operation.path[0]]\n    if (isTextBlock({schema}, block)) {\n      const child = block.children[operation.path[1]]\n      if (child) {\n        const blockKey = block._key\n        const childKey = child._key\n        const patches: Patch[] = []\n        const keys = Object.keys(operation.newProperties)\n        keys.forEach((keyName) => {\n          // Special case for setting _key on a child. We have to target it by index and not the _key.\n          if (keys.length === 1 && keyName === '_key') {\n            const val = get(operation.newProperties, keyName)\n            patches.push(\n              set(val, [\n                {_key: blockKey},\n                'children',\n                block.children.indexOf(child),\n                keyName,\n              ]),\n            )\n          } else {\n            const val = get(operation.newProperties, keyName)\n            patches.push(\n              set(val, [\n                {_key: blockKey},\n                'children',\n                {_key: childKey},\n                keyName,\n              ]),\n            )\n          }\n        })\n        return patches\n      }\n      throw new Error('Could not find a valid child')\n    }\n    throw new Error('Could not find a valid block')\n  } else {\n    throw new Error(\n      `Unexpected path encountered: ${JSON.stringify(operation.path)}`,\n    )\n  }\n}\n\nexport function insertNodePatch(\n  schema: EditorSchema,\n  children: Descendant[],\n  operation: InsertNodeOperation,\n  beforeValue: Descendant[],\n): Array<Patch> {\n  const block = beforeValue[operation.path[0]]\n  if (operation.path.length === 1) {\n    const position = operation.path[0] === 0 ? 'before' : 'after'\n    const beforeBlock = beforeValue[operation.path[0] - 1]\n    const targetKey = operation.path[0] === 0 ? block?._key : beforeBlock?._key\n    if (targetKey) {\n      return [\n        insert(\n          [\n            fromSlateValue(\n              [operation.node as Descendant],\n              schema.block.name,\n            )[0],\n          ],\n          position,\n          [{_key: targetKey}],\n        ),\n      ]\n    }\n    return [\n      setIfMissing(beforeValue, []),\n      insert(\n        [fromSlateValue([operation.node as Descendant], schema.block.name)[0]],\n        'before',\n        [operation.path[0]],\n      ),\n    ]\n  } else if (\n    isTextBlock({schema}, block) &&\n    operation.path.length === 2 &&\n    children[operation.path[0]]\n  ) {\n    const position =\n      block.children.length === 0 || !block.children[operation.path[1] - 1]\n        ? 'before'\n        : 'after'\n    const node = {...operation.node} as Descendant\n    if (!node._type && Text.isText(node)) {\n      node._type = 'span'\n      node.marks = []\n    }\n    const blk = fromSlateValue(\n      [\n        {\n          _key: 'bogus',\n          _type: schema.block.name,\n          children: [node],\n        },\n      ],\n      schema.block.name,\n    )[0] as PortableTextTextBlock\n    const child = blk.children[0]\n    return [\n      insert([child], position, [\n        {_key: block._key},\n        'children',\n        block.children.length <= 1 || !block.children[operation.path[1] - 1]\n          ? 0\n          : {_key: block.children[operation.path[1] - 1]._key},\n      ]),\n    ]\n  }\n  return []\n}\n\nexport function splitNodePatch(\n  schema: EditorSchema,\n  children: Descendant[],\n  operation: SplitNodeOperation,\n  beforeValue: Descendant[],\n): Array<Patch> {\n  const patches: Patch[] = []\n  const splitBlock = children[operation.path[0]]\n  if (!isTextBlock({schema}, splitBlock)) {\n    throw new Error(\n      `Block with path ${JSON.stringify(\n        operation.path[0],\n      )} is not a text block and can't be split`,\n    )\n  }\n  if (operation.path.length === 1) {\n    const oldBlock = beforeValue[operation.path[0]]\n    if (isTextBlock({schema}, oldBlock)) {\n      const targetValue = fromSlateValue(\n        [children[operation.path[0] + 1]],\n        schema.block.name,\n      )[0]\n      if (targetValue) {\n        patches.push(insert([targetValue], 'after', [{_key: splitBlock._key}]))\n        const spansToUnset = oldBlock.children.slice(operation.position)\n        spansToUnset.forEach((span) => {\n          const path = [{_key: oldBlock._key}, 'children', {_key: span._key}]\n          patches.push(unset(path))\n        })\n      }\n    }\n    return patches\n  }\n  if (operation.path.length === 2) {\n    const splitSpan = splitBlock.children[operation.path[1]]\n    if (isSpan({schema}, splitSpan)) {\n      const targetSpans = (\n        fromSlateValue(\n          [\n            {\n              ...splitBlock,\n              children: splitBlock.children.slice(\n                operation.path[1] + 1,\n                operation.path[1] + 2,\n              ),\n            } as Descendant,\n          ],\n          schema.block.name,\n        )[0] as PortableTextTextBlock\n      ).children\n\n      patches.push(\n        insert(targetSpans, 'after', [\n          {_key: splitBlock._key},\n          'children',\n          {_key: splitSpan._key},\n        ]),\n      )\n      patches.push(\n        set(splitSpan.text, [\n          {_key: splitBlock._key},\n          'children',\n          {_key: splitSpan._key},\n          'text',\n        ]),\n      )\n    }\n    return patches\n  }\n  return patches\n}\n\nexport function removeNodePatch(\n  schema: EditorSchema,\n  beforeValue: Descendant[],\n  operation: RemoveNodeOperation,\n): Array<Patch> {\n  const block = beforeValue[operation.path[0]]\n  if (operation.path.length === 1) {\n    // Remove a single block\n    if (block && block._key) {\n      return [unset([{_key: block._key}])]\n    }\n    throw new Error('Block not found')\n  } else if (isTextBlock({schema}, block) && operation.path.length === 2) {\n    const spanToRemove = block.children[operation.path[1]]\n\n    if (spanToRemove) {\n      const spansMatchingKey = block.children.filter(\n        (span) => span._key === operation.node._key,\n      )\n\n      if (spansMatchingKey.length > 1) {\n        console.warn(\n          `Multiple spans have \\`_key\\` ${operation.node._key}. It's ambiguous which one to remove.`,\n          JSON.stringify(block, null, 2),\n        )\n        return []\n      }\n\n      return [\n        unset([{_key: block._key}, 'children', {_key: spanToRemove._key}]),\n      ]\n    }\n    return []\n  } else {\n    return []\n  }\n}\n\nexport function mergeNodePatch(\n  schema: EditorSchema,\n  children: Descendant[],\n  operation: MergeNodeOperation,\n  beforeValue: Descendant[],\n): Array<Patch> {\n  const patches: Patch[] = []\n\n  const block = beforeValue[operation.path[0]]\n  const updatedBlock = children[operation.path[0]]\n\n  if (operation.path.length === 1) {\n    if (block?._key) {\n      const newBlock = fromSlateValue(\n        [children[operation.path[0] - 1]],\n        schema.block.name,\n      )[0]\n      patches.push(set(newBlock, [{_key: newBlock._key}]))\n      patches.push(unset([{_key: block._key}]))\n    } else {\n      throw new Error('Target key not found!')\n    }\n  } else if (\n    isTextBlock({schema}, block) &&\n    isTextBlock({schema}, updatedBlock) &&\n    operation.path.length === 2\n  ) {\n    const updatedSpan =\n      updatedBlock.children[operation.path[1] - 1] &&\n      isSpan({schema}, updatedBlock.children[operation.path[1] - 1])\n        ? updatedBlock.children[operation.path[1] - 1]\n        : undefined\n    const removedSpan =\n      block.children[operation.path[1]] &&\n      isSpan({schema}, block.children[operation.path[1]])\n        ? block.children[operation.path[1]]\n        : undefined\n\n    if (updatedSpan) {\n      const spansMatchingKey = block.children.filter(\n        (span) => span._key === updatedSpan._key,\n      )\n\n      if (spansMatchingKey.length === 1) {\n        patches.push(\n          set(updatedSpan.text, [\n            {_key: block._key},\n            'children',\n            {_key: updatedSpan._key},\n            'text',\n          ]),\n        )\n      } else {\n        console.warn(\n          `Multiple spans have \\`_key\\` ${updatedSpan._key}. It's ambiguous which one to update.`,\n          JSON.stringify(block, null, 2),\n        )\n      }\n    }\n\n    if (removedSpan) {\n      const spansMatchingKey = block.children.filter(\n        (span) => span._key === removedSpan._key,\n      )\n\n      if (spansMatchingKey.length === 1) {\n        patches.push(\n          unset([{_key: block._key}, 'children', {_key: removedSpan._key}]),\n        )\n      } else {\n        console.warn(\n          `Multiple spans have \\`_key\\` ${removedSpan._key}. It's ambiguous which one to remove.`,\n          JSON.stringify(block, null, 2),\n        )\n      }\n    }\n  }\n  return patches\n}\n\nexport function moveNodePatch(\n  schema: EditorSchema,\n  beforeValue: Descendant[],\n  operation: MoveNodeOperation,\n): Array<Patch> {\n  const patches: Patch[] = []\n  const block = beforeValue[operation.path[0]]\n  const targetBlock = beforeValue[operation.newPath[0]]\n\n  if (!targetBlock) {\n    return patches\n  }\n\n  if (operation.path.length === 1) {\n    const position: InsertPosition =\n      operation.path[0] > operation.newPath[0] ? 'before' : 'after'\n    patches.push(unset([{_key: block._key}]))\n    patches.push(\n      insert([fromSlateValue([block], schema.block.name)[0]], position, [\n        {_key: targetBlock._key},\n      ]),\n    )\n  } else if (\n    operation.path.length === 2 &&\n    isTextBlock({schema}, block) &&\n    isTextBlock({schema}, targetBlock)\n  ) {\n    const child = block.children[operation.path[1]]\n    const targetChild = targetBlock.children[operation.newPath[1]]\n    const position =\n      operation.newPath[1] === targetBlock.children.length ? 'after' : 'before'\n    const childToInsert = (\n      fromSlateValue([block], schema.block.name)[0] as PortableTextTextBlock\n    ).children[operation.path[1]]\n    patches.push(unset([{_key: block._key}, 'children', {_key: child._key}]))\n    patches.push(\n      insert([childToInsert], position, [\n        {_key: targetBlock._key},\n        'children',\n        {_key: targetChild._key},\n      ]),\n    )\n  }\n  return patches\n}\n","import type {Editor} from 'slate'\n\nexport const PATCHING: WeakMap<Editor, boolean | undefined> = new WeakMap()\n\nexport function withoutPatching(editor: Editor, fn: () => void): void {\n  const prev = isPatching(editor)\n  PATCHING.set(editor, false)\n  fn()\n  PATCHING.set(editor, prev)\n}\n\nexport function isPatching(editor: Editor): boolean | undefined {\n  return PATCHING.get(editor)\n}\n","import {insert, setIfMissing, unset, type Patch} from '@portabletext/patches'\nimport {Editor, type Descendant, type Operation} from 'slate'\nimport {createApplyPatch} from '../../internal-utils/applyPatch'\nimport {debugWithName} from '../../internal-utils/debug'\nimport {\n  insertNodePatch,\n  insertTextPatch,\n  mergeNodePatch,\n  moveNodePatch,\n  removeNodePatch,\n  removeTextPatch,\n  setNodePatch,\n  splitNodePatch,\n} from '../../internal-utils/operation-to-patches'\nimport {fromSlateValue, isEqualToEmptyEditor} from '../../internal-utils/values'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\nimport type {RelayActor} from '../relay-machine'\nimport {IS_PROCESSING_REMOTE_CHANGES, KEY_TO_VALUE_ELEMENT} from '../weakMaps'\nimport {getCurrentUndoStepId} from '../with-undo-step'\nimport {withRemoteChanges} from '../withChanges'\nimport {isPatching, PATCHING, withoutPatching} from '../withoutPatching'\nimport {withoutSaving} from './createWithUndoRedo'\n\nconst debug = debugWithName('plugin:withPatches')\nconst debugVerbose = false\n\ninterface Options {\n  editorActor: EditorActor\n  relayActor: RelayActor\n  subscriptions: Array<() => () => void>\n}\n\nexport function createWithPatches({\n  editorActor,\n  relayActor,\n  subscriptions,\n}: Options): (editor: PortableTextSlateEditor) => PortableTextSlateEditor {\n  // The previous editor children are needed to figure out the _key of deleted nodes\n  // The editor.children would no longer contain that information if the node is already deleted.\n  let previousChildren: Descendant[]\n\n  const applyPatch = createApplyPatch(editorActor.getSnapshot().context.schema)\n\n  return function withPatches(editor: PortableTextSlateEditor) {\n    IS_PROCESSING_REMOTE_CHANGES.set(editor, false)\n    PATCHING.set(editor, true)\n    previousChildren = [...editor.children]\n\n    const {apply} = editor\n    let bufferedPatches: Patch[] = []\n\n    const handleBufferedRemotePatches = () => {\n      if (bufferedPatches.length === 0) {\n        return\n      }\n      const patches = bufferedPatches\n      bufferedPatches = []\n      let changed = false\n\n      withRemoteChanges(editor, () => {\n        Editor.withoutNormalizing(editor, () => {\n          withoutPatching(editor, () => {\n            withoutSaving(editor, () => {\n              for (const patch of patches) {\n                if (debug.enabled)\n                  debug(`Handling remote patch ${JSON.stringify(patch)}`)\n\n                try {\n                  changed = applyPatch(editor, patch)\n                } catch (error) {\n                  console.error(\n                    `Applying patch ${JSON.stringify(patch)} failed due to: ${error.message}`,\n                  )\n                }\n              }\n            })\n          })\n        })\n        if (changed) {\n          editor.normalize()\n          editor.onChange()\n        }\n      })\n    }\n\n    const handlePatches = ({patches}: {patches: Patch[]}) => {\n      const remotePatches = patches.filter((p) => p.origin !== 'local')\n      if (remotePatches.length === 0) {\n        return\n      }\n      bufferedPatches = bufferedPatches.concat(remotePatches)\n      handleBufferedRemotePatches()\n    }\n\n    subscriptions.push(() => {\n      debug('Subscribing to remote patches')\n      const sub = editorActor.on('patches', handlePatches)\n      return () => {\n        debug('Unsubscribing to remote patches')\n        sub.unsubscribe()\n      }\n    })\n\n    editor.apply = (operation: Operation): void | Editor => {\n      let patches: Patch[] = []\n\n      // Update previous children here before we apply\n      previousChildren = editor.children\n\n      const editorWasEmpty = isEqualToEmptyEditor(\n        previousChildren,\n        editorActor.getSnapshot().context.schema,\n      )\n\n      // Apply the operation\n      apply(operation)\n\n      const editorIsEmpty = isEqualToEmptyEditor(\n        editor.children,\n        editorActor.getSnapshot().context.schema,\n      )\n\n      if (!isPatching(editor)) {\n        if (debugVerbose && debug.enabled)\n          debug(\n            `Editor is not producing patch for operation ${operation.type}`,\n            operation,\n          )\n        return editor\n      }\n\n      // If the editor was empty and now isn't, insert the placeholder into it.\n      if (\n        editorWasEmpty &&\n        !editorIsEmpty &&\n        operation.type !== 'set_selection'\n      ) {\n        patches.push(insert(previousChildren, 'before', [0]))\n      }\n\n      switch (operation.type) {\n        case 'insert_text':\n          patches = [\n            ...patches,\n            ...insertTextPatch(\n              editorActor.getSnapshot().context.schema,\n              editor.children,\n              operation,\n              previousChildren,\n            ),\n          ]\n          break\n        case 'remove_text':\n          patches = [\n            ...patches,\n            ...removeTextPatch(\n              editorActor.getSnapshot().context.schema,\n              editor.children,\n              operation,\n              previousChildren,\n            ),\n          ]\n          break\n        case 'remove_node':\n          patches = [\n            ...patches,\n            ...removeNodePatch(\n              editorActor.getSnapshot().context.schema,\n              previousChildren,\n              operation,\n            ),\n          ]\n          break\n        case 'split_node':\n          patches = [\n            ...patches,\n            ...splitNodePatch(\n              editorActor.getSnapshot().context.schema,\n              editor.children,\n              operation,\n              previousChildren,\n            ),\n          ]\n          break\n        case 'insert_node':\n          patches = [\n            ...patches,\n            ...insertNodePatch(\n              editorActor.getSnapshot().context.schema,\n              editor.children,\n              operation,\n              previousChildren,\n            ),\n          ]\n          break\n        case 'set_node':\n          patches = [\n            ...patches,\n            ...setNodePatch(\n              editorActor.getSnapshot().context.schema,\n              editor.children,\n              operation,\n            ),\n          ]\n          break\n        case 'merge_node':\n          patches = [\n            ...patches,\n            ...mergeNodePatch(\n              editorActor.getSnapshot().context.schema,\n              editor.children,\n              operation,\n              previousChildren,\n            ),\n          ]\n          break\n        case 'move_node':\n          patches = [\n            ...patches,\n            ...moveNodePatch(\n              editorActor.getSnapshot().context.schema,\n              previousChildren,\n              operation,\n            ),\n          ]\n          break\n        default:\n        // Do nothing\n      }\n\n      // Unset the value if a operation made the editor empty\n      if (\n        !editorWasEmpty &&\n        editorIsEmpty &&\n        ['merge_node', 'set_node', 'remove_text', 'remove_node'].includes(\n          operation.type,\n        )\n      ) {\n        patches = [...patches, unset([])]\n        relayActor.send({\n          type: 'unset',\n          previousValue: fromSlateValue(\n            previousChildren,\n            editorActor.getSnapshot().context.schema.block.name,\n            KEY_TO_VALUE_ELEMENT.get(editor),\n          ),\n        })\n      }\n\n      // Prepend patches with setIfMissing if going from empty editor to something involving a patch.\n      if (editorWasEmpty && patches.length > 0) {\n        patches = [setIfMissing([], []), ...patches]\n      }\n\n      // Emit all patches\n      if (patches.length > 0) {\n        for (const patch of patches) {\n          editorActor.send({\n            type: 'internal.patch',\n            patch: {...patch, origin: 'local'},\n            operationId: getCurrentUndoStepId(editor),\n            value: editor.value,\n          })\n        }\n      }\n      return editor\n    }\n    return editor\n  }\n}\n","import {Editor} from 'slate'\nimport {debugWithName} from '../../internal-utils/debug'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\nimport {isChangingRemotely} from '../withChanges'\nimport {isRedoing, isUndoing} from '../withUndoRedo'\n\nconst debug = debugWithName('plugin:withPlaceholderBlock')\n\n/**\n * Keep a \"placeholder\" block present when the editor is empty\n *\n */\nexport function createWithPlaceholderBlock(\n  editorActor: EditorActor,\n): (editor: PortableTextSlateEditor) => PortableTextSlateEditor {\n  return function withPlaceholderBlock(\n    editor: PortableTextSlateEditor,\n  ): PortableTextSlateEditor {\n    const {apply} = editor\n\n    editor.apply = (op) => {\n      if (editorActor.getSnapshot().matches({'edit mode': 'read only'})) {\n        apply(op)\n        return\n      }\n\n      /**\n       * We don't want to run any side effects when the editor is processing\n       * remote changes.\n       */\n      if (isChangingRemotely(editor)) {\n        apply(op)\n        return\n      }\n\n      /**\n       * We don't want to run any side effects when the editor is undoing or\n       * redoing operations.\n       */\n      if (isUndoing(editor) || isRedoing(editor)) {\n        apply(op)\n        return\n      }\n\n      if (op.type === 'remove_node') {\n        const blockIndex = op.path.at(0)\n        const isLonelyBlock =\n          op.path.length === 1 &&\n          blockIndex === 0 &&\n          editor.children.length === 1\n        const isBlockObject =\n          op.node._type !== editorActor.getSnapshot().context.schema.block.name\n\n        if (isLonelyBlock && isBlockObject) {\n          debug('Adding placeholder block')\n          Editor.insertNode(editor, editor.pteCreateTextBlock({decorators: []}))\n        }\n      }\n\n      apply(op)\n    }\n\n    return editor\n  }\n}\n","import {isSpan, isTextBlock} from '@portabletext/schema'\nimport type {\n  PortableTextListBlock,\n  PortableTextSpan,\n  PortableTextTextBlock,\n} from '@sanity/types'\nimport {Editor, Transforms, type Element} from 'slate'\nimport {debugWithName} from '../../internal-utils/debug'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport {isListBlock} from '../../utils/parse-blocks'\nimport type {EditorActor} from '../editor-machine'\nimport {withNormalizeNode} from '../with-normalizing-node'\n\nconst debug = debugWithName('plugin:withSchemaTypes')\n/**\n * This plugin makes sure that schema types are recognized properly by Slate as blocks, voids, inlines\n *\n */\nexport function createWithSchemaTypes({\n  editorActor,\n}: {\n  editorActor: EditorActor\n}) {\n  return function withSchemaTypes(\n    editor: PortableTextSlateEditor,\n  ): PortableTextSlateEditor {\n    editor.isTextBlock = (value: unknown): value is PortableTextTextBlock => {\n      if (Editor.isEditor(value)) {\n        return false\n      }\n\n      return isTextBlock(editorActor.getSnapshot().context, value)\n    }\n    editor.isTextSpan = (value: unknown): value is PortableTextSpan => {\n      if (Editor.isEditor(value)) {\n        return false\n      }\n\n      return isSpan(editorActor.getSnapshot().context, value)\n    }\n    editor.isListBlock = (value: unknown): value is PortableTextListBlock => {\n      if (Editor.isEditor(value)) {\n        return false\n      }\n\n      return isListBlock(editorActor.getSnapshot().context, value)\n    }\n    editor.isVoid = (element: Element): boolean => {\n      if (Editor.isEditor(element)) {\n        return false\n      }\n\n      return (\n        editorActor.getSnapshot().context.schema.block.name !== element._type &&\n        (editorActor\n          .getSnapshot()\n          .context.schema.blockObjects.map((obj) => obj.name)\n          .includes(element._type) ||\n          editorActor\n            .getSnapshot()\n            .context.schema.inlineObjects.map((obj) => obj.name)\n            .includes(element._type))\n      )\n    }\n    editor.isInline = (element: Element): boolean => {\n      if (Editor.isEditor(element)) {\n        return false\n      }\n\n      const inlineSchemaTypes = editorActor\n        .getSnapshot()\n        .context.schema.inlineObjects.map((obj) => obj.name)\n      return (\n        inlineSchemaTypes.includes(element._type) &&\n        '__inline' in element &&\n        element.__inline === true\n      )\n    }\n\n    // Extend Slate's default normalization\n    const {normalizeNode} = editor\n    editor.normalizeNode = (entry) => {\n      const [node, path] = entry\n\n      // If text block children node is missing _type, set it to the span type\n      if (node._type === undefined && path.length === 2) {\n        debug('Setting span type on text node without a type')\n        const span = node as PortableTextSpan\n        const key =\n          span._key || editorActor.getSnapshot().context.keyGenerator()\n        withNormalizeNode(editor, () => {\n          Transforms.setNodes(\n            editor,\n            {\n              ...span,\n              _type: editorActor.getSnapshot().context.schema.span.name,\n              _key: key,\n            },\n            {at: path},\n          )\n        })\n        return\n      }\n\n      // catches cases when the children are missing keys but excludes it when the normalize is running the node as the editor object\n      if (node._key === undefined && (path.length === 1 || path.length === 2)) {\n        debug('Setting missing key on child node without a key')\n        const key = editorActor.getSnapshot().context.keyGenerator()\n        withNormalizeNode(editor, () => {\n          Transforms.setNodes(editor, {_key: key}, {at: path})\n        })\n        return\n      }\n\n      withNormalizeNode(editor, () => {\n        normalizeNode(entry)\n      })\n    }\n    return editor\n  }\n}\n","import {toSlateValue} from '../../internal-utils/values'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\n\ninterface Options {\n  editorActor: EditorActor\n}\n\n/**\n * This plugin makes various util commands available in the editor\n *\n */\nexport function createWithUtils({editorActor}: Options) {\n  return function withUtils(\n    editor: PortableTextSlateEditor,\n  ): PortableTextSlateEditor {\n    editor.pteCreateTextBlock = (options: {\n      decorators: Array<string>\n      listItem?: string\n      level?: number\n    }) => {\n      const block = toSlateValue(\n        [\n          {\n            _type: editorActor.getSnapshot().context.schema.block.name,\n            _key: editorActor.getSnapshot().context.keyGenerator(),\n            style:\n              editorActor.getSnapshot().context.schema.styles[0].name ||\n              'normal',\n            ...(options.listItem ? {listItem: options.listItem} : {}),\n            ...(options.level ? {level: options.level} : {}),\n            markDefs: [],\n            children: [\n              {\n                _type: 'span',\n                _key: editorActor.getSnapshot().context.keyGenerator(),\n                text: '',\n                marks: options.decorators.filter((decorator) =>\n                  editorActor\n                    .getSnapshot()\n                    .context.schema.decorators.find(\n                      ({name}) => name === decorator,\n                    ),\n                ),\n              },\n            ],\n          },\n        ],\n        {schemaTypes: editorActor.getSnapshot().context.schema},\n      )[0]\n      return block\n    }\n    return editor\n  }\n}\n","import {slateRangeToSelection} from '../../internal-utils/slate-utils'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\nimport {SLATE_TO_PORTABLE_TEXT_RANGE} from '../weakMaps'\n\nexport function pluginUpdateSelection({\n  editor,\n  editorActor,\n}: {\n  editor: PortableTextSlateEditor\n  editorActor: EditorActor\n}) {\n  const updateSelection = () => {\n    if (editor.selection) {\n      const existingSelection = SLATE_TO_PORTABLE_TEXT_RANGE.get(\n        editor.selection,\n      )\n\n      if (existingSelection) {\n        editorActor.send({\n          type: 'update selection',\n          selection: existingSelection,\n        })\n      } else {\n        const selection = slateRangeToSelection({\n          schema: editorActor.getSnapshot().context.schema,\n          editor,\n          range: editor.selection,\n        })\n\n        SLATE_TO_PORTABLE_TEXT_RANGE.set(editor.selection, selection)\n\n        editorActor.send({type: 'update selection', selection})\n      }\n    } else {\n      editorActor.send({type: 'update selection', selection: null})\n    }\n  }\n\n  const {onChange} = editor\n\n  editor.onChange = () => {\n    onChange()\n\n    if (!editorActor.getSnapshot().matches({setup: 'setting up'})) {\n      updateSelection()\n    }\n  }\n\n  return editor\n}\n","import type {EditorSchema} from '../editor/editor-schema'\nimport {isTypedObject} from '../utils/asserters'\n\ntype Path = Array<number>\n\nexport type PortableTextNode<TEditorSchema extends EditorSchema> =\n  | EditorNode<TEditorSchema>\n  | TextBlockNode<TEditorSchema>\n  | SpanNode<TEditorSchema>\n  | PartialSpanNode\n  | ObjectNode\n\n//////////\n\nexport type EditorNode<TEditorSchema extends EditorSchema> = {\n  children: Array<TextBlockNode<TEditorSchema> | ObjectNode>\n}\n\nexport function isEditorNode<TEditorSchema extends EditorSchema>(\n  node: unknown,\n): node is EditorNode<TEditorSchema> {\n  if (typeof node === 'object' && node !== null) {\n    return (\n      !('_type' in node) && 'children' in node && Array.isArray(node.children)\n    )\n  }\n\n  return false\n}\n\n//////////\n\nexport type TextBlockNode<TEditorSchema extends EditorSchema> = {\n  _key: string\n  _type: TEditorSchema['block']['name']\n  children: Array<SpanNode<TEditorSchema> | ObjectNode>\n  [other: string]: unknown\n}\n\nexport function isTextBlockNode<TEditorSchema extends EditorSchema>(\n  context: {schema: TEditorSchema},\n  node: unknown,\n): node is TextBlockNode<TEditorSchema> {\n  return isTypedObject(node) && node._type === context.schema.block.name\n}\n\n//////////\n\nexport type SpanNode<TEditorSchema extends EditorSchema> = {\n  _key: string\n  _type?: TEditorSchema['span']['name']\n  text: string\n  [other: string]: unknown\n}\n\nexport function isSpanNode<TEditorSchema extends EditorSchema>(\n  context: {schema: TEditorSchema},\n  node: unknown,\n): node is SpanNode<TEditorSchema> {\n  if (typeof node !== 'object' || node === null) {\n    return false\n  }\n\n  if ('children' in node) {\n    return false\n  }\n\n  if ('_type' in node) {\n    return node._type === context.schema.span.name\n  }\n\n  return 'text' in node\n}\n\n//////////\n\nexport type PartialSpanNode = {\n  text: string\n  [other: string]: unknown\n}\n\nexport function isPartialSpanNode(node: unknown): node is PartialSpanNode {\n  return (\n    typeof node === 'object' &&\n    node !== null &&\n    'text' in node &&\n    typeof node.text === 'string'\n  )\n}\n\n//////////\n\nexport type ObjectNode = {\n  _type: string\n  _key: string\n  [other: string]: unknown\n}\n\nexport function isObjectNode(\n  context: {schema: EditorSchema},\n  node: unknown,\n): node is ObjectNode {\n  return (\n    !isEditorNode(node) &&\n    !isTextBlockNode(context, node) &&\n    !isSpanNode(context, node) &&\n    !isPartialSpanNode(node)\n  )\n}\n\n/**\n *\n */\nexport function getBlock<TEditorSchema extends EditorSchema>(\n  root: EditorNode<TEditorSchema>,\n  path: Path,\n): TextBlockNode<TEditorSchema> | ObjectNode | undefined {\n  const index = path.at(0)\n\n  if (index === undefined || path.length !== 1) {\n    return undefined\n  }\n\n  return root.children.at(index)\n}\n\n/**\n * A \"node\" can either be\n * 1. The root (path length is 0)\n * 2. A block (path length is 1)\n * 3. A span (path length is 2)\n * 4. Or an inline object (path length is 2)\n */\nexport function getNode<TEditorSchema extends EditorSchema>(\n  context: {schema: TEditorSchema},\n  root: EditorNode<TEditorSchema>,\n  path: Path,\n): PortableTextNode<TEditorSchema> | undefined {\n  if (path.length === 0) {\n    return root\n  }\n\n  if (path.length === 1) {\n    return getBlock(root, path)\n  }\n\n  if (path.length === 2) {\n    const block = getBlock(root, path.slice(0, 1))\n\n    if (!block || !isTextBlockNode(context, block)) {\n      return undefined\n    }\n\n    const child = block.children.at(path[1])\n\n    if (!child) {\n      return undefined\n    }\n\n    return child\n  }\n}\n\nexport function getSpan<TEditorSchema extends EditorSchema>(\n  context: {schema: TEditorSchema},\n  root: EditorNode<TEditorSchema>,\n  path: Path,\n) {\n  const node = getNode(context, root, path)\n\n  if (node && isSpanNode(context, node)) {\n    return node\n  }\n\n  return undefined\n}\n\n/**\n * A parent can either be the root or a text block\n */\nexport function getParent<TEditorSchema extends EditorSchema>(\n  context: {schema: TEditorSchema},\n  root: EditorNode<TEditorSchema>,\n  path: Path,\n) {\n  if (path.length === 0) {\n    return undefined\n  }\n\n  const parentPath = path.slice(0, -1)\n\n  if (parentPath.length === 0) {\n    return root\n  }\n\n  const blockIndex = parentPath.at(0)\n\n  if (blockIndex === undefined || parentPath.length !== 1) {\n    return undefined\n  }\n\n  const block = root.children.at(blockIndex)\n\n  if (block && isTextBlockNode(context, block)) {\n    return block\n  }\n\n  return undefined\n}\n","import type {PortableTextBlock} from '@sanity/types'\nimport {createDraft, finishDraft, type WritableDraft} from 'immer'\nimport {Element, Path, type Node, type Operation} from 'slate'\nimport type {EditorSchema} from '../editor/editor-schema'\nimport type {EditorContext} from '../editor/editor-snapshot'\nimport type {OmitFromUnion} from '../type-utils'\nimport {\n  getBlock,\n  getNode,\n  getParent,\n  getSpan,\n  isEditorNode,\n  isObjectNode,\n  isPartialSpanNode,\n  isSpanNode,\n  isTextBlockNode,\n  type PortableTextNode,\n  type SpanNode,\n  type TextBlockNode,\n} from './portable-text-node'\n\nexport function applyOperationToPortableText(\n  context: Pick<EditorContext, 'keyGenerator' | 'schema'>,\n  value: Array<PortableTextBlock>,\n  operation: OmitFromUnion<Operation, 'type', 'set_selection'>,\n) {\n  const draft = createDraft({children: value})\n\n  try {\n    applyOperationToPortableTextDraft(context, draft, operation)\n  } catch (e) {\n    console.error(e)\n  }\n\n  return finishDraft(draft).children\n}\n\nfunction applyOperationToPortableTextDraft(\n  context: Pick<EditorContext, 'keyGenerator' | 'schema'>,\n  root: WritableDraft<{\n    children: Array<PortableTextBlock>\n  }>,\n  operation: OmitFromUnion<Operation, 'type', 'set_selection'>,\n) {\n  switch (operation.type) {\n    case 'insert_node': {\n      const {path, node: insertedNode} = operation\n      const parent = getParent(context, root, path)\n      const index = path[path.length - 1]\n\n      if (!parent) {\n        break\n      }\n\n      if (index > parent.children.length) {\n        break\n      }\n\n      if (path.length === 1) {\n        // Inserting block at the root\n\n        if (isTextBlockNode(context, insertedNode)) {\n          // Text blocks can be inserted as is\n\n          parent.children.splice(index, 0, {\n            ...insertedNode,\n            children: insertedNode.children.map((child) => {\n              if ('__inline' in child) {\n                // Except for inline object children which need to have their\n                // `value` spread onto the block\n                return {\n                  _key: child._key,\n                  _type: child._type,\n                  ...('value' in child && typeof child.value === 'object'\n                    ? child.value\n                    : {}),\n                }\n              }\n\n              return child\n            }),\n          })\n\n          break\n        }\n\n        if (Element.isElement(insertedNode) && !('__inline' in insertedNode)) {\n          // Void blocks have to have their `value` spread onto the block\n\n          parent.children.splice(index, 0, {\n            _key: insertedNode._key,\n            _type: insertedNode._type,\n            ...('value' in insertedNode &&\n            typeof insertedNode.value === 'object'\n              ? insertedNode.value\n              : {}),\n          })\n          break\n        }\n      }\n\n      if (path.length === 2) {\n        // Inserting children into blocks\n\n        if (!isTextBlockNode(context, parent)) {\n          // Only text blocks can have children\n          break\n        }\n\n        if (isPartialSpanNode(insertedNode)) {\n          // Text nodes can be inserted as is\n\n          parent.children.splice(index, 0, insertedNode)\n          break\n        }\n\n        if ('__inline' in insertedNode) {\n          // Void children have to have their `value` spread onto the block\n\n          parent.children.splice(index, 0, {\n            _key: insertedNode._key,\n            _type: insertedNode._type,\n            ...('value' in insertedNode &&\n            typeof insertedNode.value === 'object'\n              ? insertedNode.value\n              : {}),\n          })\n          break\n        }\n      }\n\n      break\n    }\n\n    case 'insert_text': {\n      const {path, offset, text} = operation\n      if (text.length === 0) break\n      const span = getSpan(context, root, path)\n\n      if (!span) {\n        break\n      }\n\n      const before = span.text.slice(0, offset)\n      const after = span.text.slice(offset)\n      span.text = before + text + after\n\n      break\n    }\n\n    case 'merge_node': {\n      const {path} = operation\n      const node = getNode(context, root, path)\n      const prevPath = Path.previous(path)\n      const prev = getNode(context, root, prevPath)\n      const parent = getParent(context, root, path)\n\n      if (!node || !prev || !parent) {\n        break\n      }\n\n      const index = path[path.length - 1]\n\n      if (isPartialSpanNode(node) && isPartialSpanNode(prev)) {\n        prev.text += node.text\n      } else if (\n        isTextBlockNode(context, node) &&\n        isTextBlockNode(context, prev)\n      ) {\n        prev.children.push(...node.children)\n      } else {\n        break\n      }\n\n      parent.children.splice(index, 1)\n\n      break\n    }\n\n    case 'move_node': {\n      const {path, newPath} = operation\n\n      if (Path.isAncestor(path, newPath)) {\n        break\n      }\n\n      const node = getNode(context, root, path)\n      const parent = getParent(context, root, path)\n      const index = path[path.length - 1]\n\n      if (!node || !parent) {\n        break\n      }\n\n      // This is tricky, but since the `path` and `newPath` both refer to\n      // the same snapshot in time, there's a mismatch. After either\n      // removing the original position, the second step's path can be out\n      // of date. So instead of using the `op.newPath` directly, we\n      // transform `op.path` to ascertain what the `newPath` would be after\n      // the operation was applied.\n      parent.children.splice(index, 1)\n      const truePath = Path.transform(path, operation)!\n      const newParent = getNode(context, root, Path.parent(truePath))\n      const newIndex = truePath[truePath.length - 1]\n\n      if (!newParent) {\n        break\n      }\n\n      if (!('children' in newParent)) {\n        break\n      }\n\n      if (!Array.isArray(newParent.children)) {\n        break\n      }\n\n      newParent.children.splice(newIndex, 0, node)\n\n      break\n    }\n\n    case 'remove_node': {\n      const {path} = operation\n      const index = path[path.length - 1]\n      const parent = getParent(context, root, path)\n      parent?.children.splice(index, 1)\n\n      break\n    }\n\n    case 'remove_text': {\n      const {path, offset, text} = operation\n\n      if (text.length === 0) {\n        break\n      }\n\n      const span = getSpan(context, root, path)\n\n      if (!span) {\n        break\n      }\n\n      const before = span.text.slice(0, offset)\n      const after = span.text.slice(offset + text.length)\n      span.text = before + after\n\n      break\n    }\n\n    case 'set_node': {\n      const {path, properties, newProperties} = operation\n\n      const node = getNode(context, root, path)\n\n      if (!node) {\n        break\n      }\n\n      if (isEditorNode(node)) {\n        break\n      }\n\n      if (isObjectNode(context, node)) {\n        const valueBefore = (\n          'value' in properties && typeof properties.value === 'object'\n            ? properties.value\n            : {}\n        ) as Partial<Node>\n        const valueAfter = (\n          'value' in newProperties && typeof newProperties.value === 'object'\n            ? newProperties.value\n            : {}\n        ) as Partial<Node>\n\n        for (const key in newProperties) {\n          if (key === 'value') {\n            continue\n          }\n\n          const value = newProperties[key as keyof Partial<Node>]\n\n          if (value == null) {\n            delete node[<keyof PortableTextNode<EditorSchema>>key]\n          } else {\n            node[<keyof PortableTextNode<EditorSchema>>key] = value\n          }\n        }\n\n        for (const key in properties) {\n          if (key === 'value') {\n            continue\n          }\n\n          if (!newProperties.hasOwnProperty(key)) {\n            delete node[<keyof PortableTextNode<EditorSchema>>key]\n          }\n        }\n\n        for (const key in valueAfter) {\n          const value = valueAfter[key as keyof Partial<Node>]\n\n          if (value == null) {\n            delete node[<keyof PortableTextNode<EditorSchema>>key]\n          } else {\n            node[<keyof PortableTextNode<EditorSchema>>key] = value\n          }\n        }\n\n        for (const key in valueBefore) {\n          if (!valueAfter.hasOwnProperty(key)) {\n            delete node[<keyof PortableTextNode<EditorSchema>>key]\n          }\n        }\n\n        break\n      }\n\n      if (isTextBlockNode(context, node)) {\n        for (const key in newProperties) {\n          if (key === 'children' || key === 'text') {\n            break\n          }\n\n          const value = newProperties[key as keyof Partial<Node>]\n\n          if (value == null) {\n            delete node[<keyof Partial<Node>>key]\n          } else {\n            node[<keyof Partial<Node>>key] = value\n          }\n        }\n\n        // properties that were previously defined, but are now missing, must be deleted\n        for (const key in properties) {\n          if (!newProperties.hasOwnProperty(key)) {\n            delete node[<keyof Partial<Node>>key]\n          }\n        }\n\n        break\n      }\n\n      if (isPartialSpanNode(node)) {\n        for (const key in newProperties) {\n          if (key === 'text') {\n            break\n          }\n\n          const value = newProperties[key as keyof Partial<Node>]\n\n          if (value == null) {\n            delete node[<keyof PortableTextNode<EditorSchema>>key]\n          } else {\n            node[<keyof PortableTextNode<EditorSchema>>key] = value\n          }\n        }\n\n        // properties that were previously defined, but are now missing, must be deleted\n        for (const key in properties) {\n          if (!newProperties.hasOwnProperty(key)) {\n            delete node[<keyof PortableTextNode<EditorSchema>>key]\n          }\n        }\n\n        break\n      }\n\n      break\n    }\n\n    case 'split_node': {\n      const {path, position, properties} = operation\n\n      if (path.length === 0) {\n        break\n      }\n\n      const parent = getParent(context, root, path)\n      const index = path[path.length - 1]\n\n      if (!parent) {\n        break\n      }\n\n      if (isEditorNode(parent)) {\n        const block = getBlock(root, path)\n\n        if (!block || !isTextBlockNode(context, block)) {\n          break\n        }\n\n        const before = block.children.slice(0, position)\n        const after = block.children.slice(position)\n        block.children = before\n\n        // _key is deliberately left out\n        const newTextBlockNode = {\n          ...properties,\n          children: after,\n          _type: context.schema.block.name,\n        } as unknown as TextBlockNode<EditorSchema>\n\n        parent.children.splice(index + 1, 0, newTextBlockNode)\n\n        break\n      }\n\n      if (isTextBlockNode(context, parent)) {\n        const node = getNode(context, root, path)\n\n        if (!node || !isSpanNode(context, node)) {\n          break\n        }\n\n        const before = node.text.slice(0, position)\n        const after = node.text.slice(position)\n        node.text = before\n\n        // _key is deliberately left out\n        const newSpanNode = {\n          ...properties,\n          text: after,\n        } as unknown as SpanNode<EditorSchema>\n\n        parent.children.splice(index + 1, 0, newSpanNode)\n      }\n\n      break\n    }\n  }\n\n  return root\n}\n","import {applyOperationToPortableText} from '../../internal-utils/apply-operation-to-portable-text'\nimport {buildIndexMaps} from '../../internal-utils/build-index-maps'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport type {EditorContext} from '../editor-snapshot'\n\nexport function pluginUpdateValue(\n  context: Pick<EditorContext, 'keyGenerator' | 'schema'>,\n  editor: PortableTextSlateEditor,\n) {\n  const {apply} = editor\n\n  editor.apply = (operation) => {\n    if (operation.type === 'set_selection') {\n      apply(operation)\n      return\n    }\n\n    editor.value = applyOperationToPortableText(\n      context,\n      editor.value,\n      operation,\n    )\n\n    if (operation.type === 'insert_text' || operation.type === 'remove_text') {\n      // Inserting and removing text has no effect on index maps so there is\n      // no need to rebuild those.\n      apply(operation)\n      return\n    }\n\n    buildIndexMaps(\n      {\n        schema: context.schema,\n        value: editor.value,\n      },\n      {\n        blockIndexMap: editor.blockIndexMap,\n        listIndexMap: editor.listIndexMap,\n      },\n    )\n\n    apply(operation)\n  }\n\n  return editor\n}\n","import type {BaseOperation, Editor, Node, NodeEntry} from 'slate'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\nimport type {RelayActor} from '../relay-machine'\nimport {createWithEventListeners} from './create-with-event-listeners'\nimport {createWithMaxBlocks} from './createWithMaxBlocks'\nimport {createWithObjectKeys} from './createWithObjectKeys'\nimport {createWithPatches} from './createWithPatches'\nimport {createWithPlaceholderBlock} from './createWithPlaceholderBlock'\nimport {createWithPortableTextMarkModel} from './createWithPortableTextMarkModel'\nimport {createWithSchemaTypes} from './createWithSchemaTypes'\nimport {createWithUndoRedo} from './createWithUndoRedo'\nimport {createWithUtils} from './createWithUtils'\nimport {pluginUpdateSelection} from './slate-plugin.update-selection'\nimport {pluginUpdateValue} from './slate-plugin.update-value'\n\nexport interface OriginalEditorFunctions {\n  apply: (operation: BaseOperation) => void\n  onChange: () => void\n  normalizeNode: (entry: NodeEntry<Node>) => void\n}\n\ntype PluginsOptions = {\n  editorActor: EditorActor\n  relayActor: RelayActor\n  subscriptions: Array<() => () => void>\n}\n\nexport const withPlugins = <T extends Editor>(\n  editor: T,\n  options: PluginsOptions,\n): PortableTextSlateEditor => {\n  const e = editor as T & PortableTextSlateEditor\n  const {editorActor, relayActor} = options\n  const withObjectKeys = createWithObjectKeys(editorActor)\n  const withSchemaTypes = createWithSchemaTypes({\n    editorActor,\n  })\n  const withPatches = createWithPatches({\n    editorActor,\n    relayActor,\n    subscriptions: options.subscriptions,\n  })\n  const withMaxBlocks = createWithMaxBlocks(editorActor)\n  const withUndoRedo = createWithUndoRedo({\n    editorActor,\n    subscriptions: options.subscriptions,\n  })\n  const withPortableTextMarkModel = createWithPortableTextMarkModel(editorActor)\n\n  const withPlaceholderBlock = createWithPlaceholderBlock(editorActor)\n\n  const withUtils = createWithUtils({\n    editorActor,\n  })\n  const withEventListeners = createWithEventListeners(editorActor)\n\n  // Ordering is important here, selection dealing last, data manipulation in the middle and core model stuff first.\n  return withEventListeners(\n    withSchemaTypes(\n      withObjectKeys(\n        withPortableTextMarkModel(\n          withPlaceholderBlock(\n            withUtils(\n              withMaxBlocks(\n                withUndoRedo(\n                  withPatches(\n                    pluginUpdateValue(\n                      editorActor.getSnapshot().context,\n                      pluginUpdateSelection({\n                        editorActor,\n                        editor: e,\n                      }),\n                    ),\n                  ),\n                ),\n              ),\n            ),\n          ),\n        ),\n      ),\n    ),\n  )\n}\n","import {createEditor, type Descendant} from 'slate'\nimport {withReact} from 'slate-react'\nimport {buildIndexMaps} from '../internal-utils/build-index-maps'\nimport {createPlaceholderBlock} from '../internal-utils/create-placeholder-block'\nimport {debugWithName} from '../internal-utils/debug'\nimport {toSlateValue} from '../internal-utils/values'\nimport type {PortableTextSlateEditor} from '../types/editor'\nimport type {EditorActor} from './editor-machine'\nimport {withPlugins} from './plugins/with-plugins'\nimport type {RelayActor} from './relay-machine'\nimport {KEY_TO_SLATE_ELEMENT, KEY_TO_VALUE_ELEMENT} from './weakMaps'\n\nconst debug = debugWithName('setup')\n\ntype SlateEditorConfig = {\n  editorActor: EditorActor\n  relayActor: RelayActor\n  subscriptions: Array<() => () => void>\n}\n\nexport type SlateEditor = {\n  instance: PortableTextSlateEditor\n  initialValue: Array<Descendant>\n}\n\nexport function createSlateEditor(config: SlateEditorConfig): SlateEditor {\n  debug('Creating new Slate editor instance')\n\n  const instance = withPlugins(withReact(createEditor()), {\n    editorActor: config.editorActor,\n    relayActor: config.relayActor,\n    subscriptions: config.subscriptions,\n  })\n\n  KEY_TO_VALUE_ELEMENT.set(instance, {})\n  KEY_TO_SLATE_ELEMENT.set(instance, {})\n\n  instance.decoratedRanges = []\n  instance.decoratorState = {}\n\n  const placeholderBlock = createPlaceholderBlock(\n    config.editorActor.getSnapshot().context,\n  )\n  instance.value = [placeholderBlock]\n  instance.blockIndexMap = new Map<string, number>()\n  instance.listIndexMap = new Map<string, number>()\n\n  buildIndexMaps(\n    {\n      schema: config.editorActor.getSnapshot().context.schema,\n      value: instance.value,\n    },\n    {\n      blockIndexMap: instance.blockIndexMap,\n      listIndexMap: instance.listIndexMap,\n    },\n  )\n\n  const initialValue = toSlateValue(instance.value, {\n    schemaTypes: config.editorActor.getSnapshot().context.schema,\n  })\n\n  const slateEditor: SlateEditor = {\n    instance,\n    initialValue,\n  }\n\n  return slateEditor\n}\n","import {Editor} from 'slate'\nimport {DOMEditor} from 'slate-dom'\nimport type {BehaviorEvent} from '../behaviors/behavior.types.event'\nimport {toSlateRange} from '../internal-utils/to-slate-range'\nimport type {PickFromUnion} from '../type-utils'\nimport type {PortableTextSlateEditor} from '../types/editor'\nimport type {EditorSnapshot} from './editor-snapshot'\n\nexport type EditorDom = {\n  getBlockNodes: (snapshot: EditorSnapshot) => Array<Node>\n  getChildNodes: (snapshot: EditorSnapshot) => Array<Node>\n  /**\n   * Let the Editor set the drag ghost. This is to be sure that it will get\n   * properly removed again when the drag ends.\n   */\n  setDragGhost: ({\n    event,\n    ghost,\n  }: {\n    event: PickFromUnion<BehaviorEvent, 'type', 'drag.dragstart'>\n    ghost: {\n      element: HTMLElement\n      x: number\n      y: number\n    }\n  }) => void\n}\n\nexport function createEditorDom(\n  sendBack: (event: {type: 'set drag ghost'; ghost: HTMLElement}) => void,\n  slateEditor: PortableTextSlateEditor,\n): EditorDom {\n  return {\n    getBlockNodes: (snapshot) => getBlockNodes(slateEditor, snapshot),\n    getChildNodes: (snapshot) => getChildNodes(slateEditor, snapshot),\n    setDragGhost: ({event, ghost}) => setDragGhost({sendBack, event, ghost}),\n  }\n}\n\nfunction getBlockNodes(\n  slateEditor: PortableTextSlateEditor,\n  snapshot: EditorSnapshot,\n) {\n  if (!snapshot.context.selection) {\n    return []\n  }\n\n  const range = toSlateRange(snapshot)\n\n  if (!range) {\n    return []\n  }\n\n  try {\n    const blockEntries = Array.from(\n      Editor.nodes(slateEditor, {\n        at: range,\n        mode: 'highest',\n        match: (n) => !Editor.isEditor(n),\n      }),\n    )\n\n    return blockEntries.map(([blockNode]) =>\n      DOMEditor.toDOMNode(slateEditor, blockNode),\n    )\n  } catch {\n    return []\n  }\n}\n\nfunction getChildNodes(\n  slateEditor: PortableTextSlateEditor,\n  snapshot: EditorSnapshot,\n) {\n  if (!snapshot.context.selection) {\n    return []\n  }\n\n  const range = toSlateRange(snapshot)\n\n  if (!range) {\n    return []\n  }\n\n  try {\n    const childEntries = Array.from(\n      Editor.nodes(slateEditor, {\n        at: range,\n        mode: 'lowest',\n        match: (n) => !Editor.isEditor(n),\n      }),\n    )\n\n    return childEntries.map(([childNode]) =>\n      DOMEditor.toDOMNode(slateEditor, childNode),\n    )\n  } catch {\n    return []\n  }\n}\n\nfunction setDragGhost({\n  sendBack,\n  event,\n  ghost,\n}: {\n  sendBack: (event: {type: 'set drag ghost'; ghost: HTMLElement}) => void\n  event: PickFromUnion<BehaviorEvent, 'type', 'drag.dragstart'>\n  ghost: {\n    element: HTMLElement\n    x: number\n    y: number\n  }\n}) {\n  event.originEvent.dataTransfer.setDragImage(ghost.element, ghost.x, ghost.y)\n\n  sendBack({\n    type: 'set drag ghost',\n    ghost: ghost.element,\n  })\n}\n","import {getCaretWordSelection} from '../selectors/selector.get-caret-word-selection'\nimport {isActiveAnnotation} from '../selectors/selector.is-active-annotation'\nimport {isSelectionCollapsed} from '../selectors/selector.is-selection-collapsed'\nimport {isSelectionExpanded} from '../selectors/selector.is-selection-expanded'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nconst addAnnotationOnCollapsedSelection = defineBehavior({\n  on: 'annotation.add',\n  guard: ({snapshot}) => {\n    if (!isSelectionCollapsed(snapshot)) {\n      return false\n    }\n\n    const caretWordSelection = getCaretWordSelection(snapshot)\n\n    if (\n      !caretWordSelection ||\n      !isSelectionExpanded({\n        ...snapshot,\n        context: {\n          ...snapshot.context,\n          selection: caretWordSelection,\n        },\n      })\n    ) {\n      return false\n    }\n\n    return {caretWordSelection}\n  },\n  actions: [\n    ({event}, {caretWordSelection}) => [\n      raise({type: 'select', at: caretWordSelection}),\n      raise({type: 'annotation.add', annotation: event.annotation}),\n    ],\n  ],\n})\n\n/**\n * By default, same-type annotations can overlap. This Core Behavior ensures\n * that annotations of the same type are mutually exclusive.\n */\nconst preventOverlappingAnnotations = defineBehavior({\n  // Given an `annotation.add` event\n  on: 'annotation.add',\n  // When the annotation is active in the selection\n  guard: ({snapshot, event}) =>\n    isActiveAnnotation(event.annotation.name, {mode: 'partial'})(snapshot),\n  // Then the existing annotation is removed\n  actions: [\n    ({event}) => [\n      raise({type: 'annotation.remove', annotation: event.annotation}),\n      raise(event),\n    ],\n  ],\n})\n\nexport const coreAnnotationBehaviors = [\n  addAnnotationOnCollapsedSelection,\n  preventOverlappingAnnotations,\n]\n","import {\n  bold,\n  code,\n  createKeyboardShortcut,\n  italic,\n  redo,\n  underline,\n  undo,\n} from '@portabletext/keyboard-shortcuts'\n\nexport const defaultKeyboardShortcuts = {\n  arrowDown: createKeyboardShortcut({\n    default: [\n      {\n        key: 'ArrowDown',\n        alt: false,\n        ctrl: false,\n        meta: false,\n        shift: false,\n      },\n    ],\n  }),\n  arrowUp: createKeyboardShortcut({\n    default: [\n      {\n        key: 'ArrowUp',\n        alt: false,\n        ctrl: false,\n        meta: false,\n        shift: false,\n      },\n    ],\n  }),\n  backspace: createKeyboardShortcut({\n    default: [\n      {\n        key: 'Backspace',\n        alt: false,\n        ctrl: false,\n        meta: false,\n        shift: false,\n      },\n    ],\n  }),\n  break: createKeyboardShortcut({\n    default: [\n      {\n        key: 'Enter',\n        shift: false,\n      },\n    ],\n  }),\n  lineBreak: createKeyboardShortcut({\n    default: [\n      {\n        key: 'Enter',\n        shift: true,\n      },\n    ],\n  }),\n  decorators: {\n    strong: bold,\n    em: italic,\n    underline: underline,\n    code: code,\n  },\n  delete: createKeyboardShortcut({\n    default: [\n      {\n        key: 'Delete',\n        alt: false,\n        ctrl: false,\n        meta: false,\n        shift: false,\n      },\n    ],\n  }),\n  history: {\n    undo,\n    redo,\n  },\n  tab: createKeyboardShortcut({\n    default: [\n      {\n        key: 'Tab',\n        alt: false,\n        ctrl: false,\n        meta: false,\n        shift: false,\n      },\n    ],\n  }),\n  shiftTab: createKeyboardShortcut({\n    default: [\n      {\n        key: 'Tab',\n        alt: false,\n        ctrl: false,\n        meta: false,\n        shift: true,\n      },\n    ],\n  }),\n}\n","import {isTextBlock} from '@portabletext/schema'\nimport {defaultKeyboardShortcuts} from '../keyboard-shortcuts/default-keyboard-shortcuts'\nimport {getFocusBlockObject} from '../selectors/selector.get-focus-block-object'\nimport {getFocusTextBlock} from '../selectors/selector.get-focus-text-block'\nimport {getNextBlock} from '../selectors/selector.get-next-block'\nimport {getPreviousBlock} from '../selectors/selector.get-previous-block'\nimport {isSelectionCollapsed} from '../selectors/selector.is-selection-collapsed'\nimport {isEmptyTextBlock} from '../utils/util.is-empty-text-block'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nconst arrowDownOnLonelyBlockObject = defineBehavior({\n  on: 'keyboard.keydown',\n  guard: ({snapshot, event}) => {\n    const isArrowDown = defaultKeyboardShortcuts.arrowDown.guard(\n      event.originEvent,\n    )\n\n    if (!isArrowDown) {\n      return false\n    }\n\n    const collapsedSelection = isSelectionCollapsed(snapshot)\n\n    if (!collapsedSelection) {\n      return false\n    }\n\n    const focusBlockObject = getFocusBlockObject(snapshot)\n    const nextBlock = getNextBlock(snapshot)\n\n    return focusBlockObject && !nextBlock\n  },\n  actions: [\n    ({snapshot}) => [\n      raise({\n        type: 'insert.block',\n        block: {\n          _type: snapshot.context.schema.block.name,\n        },\n        placement: 'after',\n      }),\n    ],\n  ],\n})\n\nconst arrowUpOnLonelyBlockObject = defineBehavior({\n  on: 'keyboard.keydown',\n  guard: ({snapshot, event}) => {\n    const isArrowUp = defaultKeyboardShortcuts.arrowUp.guard(event.originEvent)\n\n    if (!isArrowUp) {\n      return false\n    }\n\n    const collapsedSelection = isSelectionCollapsed(snapshot)\n\n    if (!collapsedSelection) {\n      return false\n    }\n\n    const focusBlockObject = getFocusBlockObject(snapshot)\n    const previousBlock = getPreviousBlock(snapshot)\n\n    return focusBlockObject && !previousBlock\n  },\n  actions: [\n    ({snapshot}) => [\n      raise({\n        type: 'insert.block',\n        block: {\n          _type: snapshot.context.schema.block.name,\n        },\n        placement: 'before',\n      }),\n    ],\n  ],\n})\n\nconst breakingBlockObject = defineBehavior({\n  on: 'insert.break',\n  guard: ({snapshot}) => {\n    const focusBlockObject = getFocusBlockObject(snapshot)\n    const collapsedSelection = isSelectionCollapsed(snapshot)\n\n    return collapsedSelection && focusBlockObject !== undefined\n  },\n  actions: [\n    ({snapshot}) => [\n      raise({\n        type: 'insert.block',\n        block: {\n          _type: snapshot.context.schema.block.name,\n        },\n        placement: 'after',\n      }),\n    ],\n  ],\n})\n\nconst clickingAboveLonelyBlockObject = defineBehavior({\n  on: 'mouse.click',\n  guard: ({snapshot, event}) => {\n    if (snapshot.context.readOnly) {\n      return false\n    }\n\n    if (snapshot.context.selection && !isSelectionCollapsed(snapshot)) {\n      return false\n    }\n\n    const focusBlockObject = getFocusBlockObject({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection: event.position.selection,\n      },\n    })\n    const previousBlock = getPreviousBlock({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection: event.position.selection,\n      },\n    })\n\n    return (\n      event.position.isEditor &&\n      event.position.block === 'start' &&\n      focusBlockObject &&\n      !previousBlock\n    )\n  },\n  actions: [\n    ({snapshot, event}) => [\n      raise({\n        type: 'select',\n        at: event.position.selection,\n      }),\n      raise({\n        type: 'insert.block',\n        block: {\n          _type: snapshot.context.schema.block.name,\n        },\n        placement: 'before',\n        select: 'start',\n      }),\n    ],\n  ],\n})\n\nconst clickingBelowLonelyBlockObject = defineBehavior({\n  on: 'mouse.click',\n  guard: ({snapshot, event}) => {\n    if (snapshot.context.readOnly) {\n      return false\n    }\n\n    if (snapshot.context.selection && !isSelectionCollapsed(snapshot)) {\n      return false\n    }\n\n    const focusBlockObject = getFocusBlockObject({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection: event.position.selection,\n      },\n    })\n    const nextBlock = getNextBlock({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection: event.position.selection,\n      },\n    })\n\n    return (\n      event.position.isEditor &&\n      event.position.block === 'end' &&\n      focusBlockObject &&\n      !nextBlock\n    )\n  },\n  actions: [\n    ({snapshot, event}) => [\n      raise({\n        type: 'select',\n        at: event.position.selection,\n      }),\n      raise({\n        type: 'insert.block',\n        block: {\n          _type: snapshot.context.schema.block.name,\n        },\n        placement: 'after',\n        select: 'start',\n      }),\n    ],\n  ],\n})\n\nconst deletingEmptyTextBlockAfterBlockObject = defineBehavior({\n  on: 'delete.backward',\n  guard: ({snapshot}) => {\n    const focusTextBlock = getFocusTextBlock(snapshot)\n    const selectionCollapsed = isSelectionCollapsed(snapshot)\n    const previousBlock = getPreviousBlock(snapshot)\n\n    if (!focusTextBlock || !selectionCollapsed || !previousBlock) {\n      return false\n    }\n\n    if (\n      isEmptyTextBlock(snapshot.context, focusTextBlock.node) &&\n      !isTextBlock(snapshot.context, previousBlock.node)\n    ) {\n      return {focusTextBlock, previousBlock}\n    }\n\n    return false\n  },\n  actions: [\n    (_, {focusTextBlock, previousBlock}) => [\n      raise({\n        type: 'delete.block',\n        at: focusTextBlock.path,\n      }),\n      raise({\n        type: 'select',\n        at: {\n          anchor: {path: previousBlock.path, offset: 0},\n          focus: {path: previousBlock.path, offset: 0},\n        },\n      }),\n    ],\n  ],\n})\n\nconst deletingEmptyTextBlockBeforeBlockObject = defineBehavior({\n  on: 'delete.forward',\n  guard: ({snapshot}) => {\n    const focusTextBlock = getFocusTextBlock(snapshot)\n    const selectionCollapsed = isSelectionCollapsed(snapshot)\n    const nextBlock = getNextBlock(snapshot)\n\n    if (!focusTextBlock || !selectionCollapsed || !nextBlock) {\n      return false\n    }\n\n    if (\n      isEmptyTextBlock(snapshot.context, focusTextBlock.node) &&\n      !isTextBlock(snapshot.context, nextBlock.node)\n    ) {\n      return {focusTextBlock, nextBlock}\n    }\n\n    return false\n  },\n  actions: [\n    (_, {focusTextBlock, nextBlock}) => [\n      raise({\n        type: 'delete.block',\n        at: focusTextBlock.path,\n      }),\n      raise({\n        type: 'select',\n        at: {\n          anchor: {path: nextBlock.path, offset: 0},\n          focus: {path: nextBlock.path, offset: 0},\n        },\n      }),\n    ],\n  ],\n})\n\nexport const coreBlockObjectBehaviors = {\n  arrowDownOnLonelyBlockObject,\n  arrowUpOnLonelyBlockObject,\n  breakingBlockObject,\n  clickingAboveLonelyBlockObject,\n  clickingBelowLonelyBlockObject,\n  deletingEmptyTextBlockAfterBlockObject,\n  deletingEmptyTextBlockBeforeBlockObject,\n}\n","import {defaultKeyboardShortcuts} from '../keyboard-shortcuts/default-keyboard-shortcuts'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nexport const coreDecoratorBehaviors = {\n  strongShortcut: defineBehavior({\n    on: 'keyboard.keydown',\n    guard: ({snapshot, event}) =>\n      defaultKeyboardShortcuts.decorators.strong.guard(event.originEvent) &&\n      snapshot.context.schema.decorators.some(\n        (decorator) => decorator.name === 'strong',\n      ),\n    actions: [() => [raise({type: 'decorator.toggle', decorator: 'strong'})]],\n  }),\n  emShortcut: defineBehavior({\n    on: 'keyboard.keydown',\n    guard: ({snapshot, event}) =>\n      defaultKeyboardShortcuts.decorators.em.guard(event.originEvent) &&\n      snapshot.context.schema.decorators.some(\n        (decorator) => decorator.name === 'em',\n      ),\n    actions: [() => [raise({type: 'decorator.toggle', decorator: 'em'})]],\n  }),\n  underlineShortcut: defineBehavior({\n    on: 'keyboard.keydown',\n    guard: ({snapshot, event}) =>\n      defaultKeyboardShortcuts.decorators.underline.guard(event.originEvent) &&\n      snapshot.context.schema.decorators.some(\n        (decorator) => decorator.name === 'underline',\n      ),\n    actions: [\n      () => [raise({type: 'decorator.toggle', decorator: 'underline'})],\n    ],\n  }),\n  codeShortcut: defineBehavior({\n    on: 'keyboard.keydown',\n    guard: ({snapshot, event}) =>\n      defaultKeyboardShortcuts.decorators.code.guard(event.originEvent) &&\n      snapshot.context.schema.decorators.some(\n        (decorator) => decorator.name === 'code',\n      ),\n    actions: [() => [raise({type: 'decorator.toggle', decorator: 'code'})]],\n  }),\n}\n","export function getCompoundClientRect(nodes: Array<Node>): DOMRect {\n  if (nodes.length === 0) {\n    return new DOMRect(0, 0, 0, 0)\n  }\n\n  const elements = nodes.filter((node) => node instanceof Element)\n\n  const firstRect = elements.at(0)?.getBoundingClientRect()\n\n  if (!firstRect) {\n    return new DOMRect(0, 0, 0, 0)\n  }\n\n  let left = firstRect.left\n  let top = firstRect.top\n  let right = firstRect.right\n  let bottom = firstRect.bottom\n\n  for (let i = 1; i < elements.length; i++) {\n    const rect = elements[i].getBoundingClientRect()\n    left = Math.min(left, rect.left)\n    top = Math.min(top, rect.top)\n    right = Math.max(right, rect.right)\n    bottom = Math.max(bottom, rect.bottom)\n  }\n\n  return new DOMRect(left, top, right - left, bottom - top)\n}\n","import {getCompoundClientRect} from '../internal-utils/compound-client-rect'\nimport {getDragSelection} from '../selectors/drag-selection'\nimport {getSelectedBlocks} from '../selectors/selector.get-selected-blocks'\nimport {isOverlappingSelection} from '../selectors/selector.is-overlapping-selection'\nimport {isSelectingEntireBlocks} from '../selectors/selector.is-selecting-entire-blocks'\nimport {effect, forward, raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nexport const coreDndBehaviors = [\n  /**\n   * Core Behavior that:\n   * 1. Calculates and selects a \"drag selection\"\n   * 2. Constructs and sets a drag ghost element\n   * 3. Forwards the dragstart event\n   */\n  defineBehavior({\n    on: 'drag.dragstart',\n    guard: ({snapshot, dom, event}) => {\n      const dragSelection = getDragSelection({\n        snapshot,\n        eventSelection: event.position.selection,\n      })\n      const selectingEntireBlocks = isSelectingEntireBlocks({\n        ...snapshot,\n        context: {\n          ...snapshot.context,\n          selection: dragSelection,\n        },\n      })\n      const draggedDomNodes = {\n        blockNodes: dom.getBlockNodes({\n          ...snapshot,\n          context: {\n            ...snapshot.context,\n            selection: dragSelection,\n          },\n        }),\n        childNodes: dom.getChildNodes({\n          ...snapshot,\n          context: {\n            ...snapshot.context,\n            selection: dragSelection,\n          },\n        }),\n      }\n\n      return {\n        dragSelection,\n        draggedDomNodes,\n        selectingEntireBlocks,\n      }\n    },\n    actions: [\n      (\n        {dom, event},\n        {dragSelection, draggedDomNodes, selectingEntireBlocks},\n      ) => {\n        const dragGhost = document.createElement('div')\n\n        if (selectingEntireBlocks) {\n          // Clone the DOM Nodes so they won't be visually clipped by scroll-containers etc.\n          const clonedBlockNodes = draggedDomNodes.blockNodes.map((node) =>\n            node.cloneNode(true),\n          )\n\n          for (const block of clonedBlockNodes) {\n            if (block instanceof HTMLElement) {\n              block.style.position = 'relative'\n            }\n            dragGhost.appendChild(block)\n          }\n\n          // A custom drag ghost element can be configured using this data attribute\n          const customGhost = dragGhost.querySelector(\n            '[data-pt-drag-ghost-element]',\n          )\n          if (customGhost) {\n            dragGhost.replaceChildren(customGhost)\n          }\n\n          // Setting the `data-dragged` attribute so the consumer can style the element while it’s dragged\n          dragGhost.setAttribute('data-dragged', '')\n\n          dragGhost.style.position = 'absolute'\n          dragGhost.style.left = '-99999px'\n          dragGhost.style.boxSizing = 'border-box'\n          document.body.appendChild(dragGhost)\n\n          if (customGhost) {\n            const customGhostRect = customGhost.getBoundingClientRect()\n            const x = event.originEvent.clientX - customGhostRect.left\n            const y = event.originEvent.clientY - customGhostRect.top\n            dragGhost.style.width = `${customGhostRect.width}px`\n            dragGhost.style.height = `${customGhostRect.height}px`\n\n            return [\n              raise({\n                type: 'select',\n                at: dragSelection,\n              }),\n              effect(() => {\n                dom.setDragGhost({\n                  event,\n                  ghost: {\n                    element: dragGhost,\n                    x,\n                    y,\n                  },\n                })\n              }),\n              forward(event),\n            ]\n          } else {\n            const blocksDomRect = getCompoundClientRect(\n              draggedDomNodes.blockNodes,\n            )\n            const x = event.originEvent.clientX - blocksDomRect.left\n            const y = event.originEvent.clientY - blocksDomRect.top\n            dragGhost.style.width = `${blocksDomRect.width}px`\n            dragGhost.style.height = `${blocksDomRect.height}px`\n\n            return [\n              raise({\n                type: 'select',\n                at: dragSelection,\n              }),\n              effect(() => {\n                dom.setDragGhost({\n                  event,\n                  ghost: {element: dragGhost, x, y},\n                })\n              }),\n              forward(event),\n            ]\n          }\n        } else {\n          const clonedChildNodes = draggedDomNodes.childNodes.map((node) =>\n            node.cloneNode(true),\n          )\n\n          for (const child of clonedChildNodes) {\n            dragGhost.appendChild(child)\n          }\n\n          dragGhost.style.position = 'absolute'\n          dragGhost.style.left = '-99999px'\n          dragGhost.style.boxSizing = 'border-box'\n          document.body.appendChild(dragGhost)\n\n          const childrenDomRect = getCompoundClientRect(\n            draggedDomNodes.childNodes,\n          )\n          const x = event.originEvent.clientX - childrenDomRect.left\n          const y = event.originEvent.clientY - childrenDomRect.top\n          dragGhost.style.width = `${childrenDomRect.width}px`\n          dragGhost.style.height = `${childrenDomRect.height}px`\n\n          return [\n            raise({\n              type: 'select',\n              at: dragSelection,\n            }),\n            effect(() => {\n              dom.setDragGhost({\n                event,\n                ghost: {element: dragGhost, x, y},\n              })\n            }),\n            forward(event),\n          ]\n        }\n      },\n    ],\n  }),\n\n  /**\n   * When dragging over the drag origin, we don't want to show the caret in the\n   * text.\n   */\n  defineBehavior({\n    on: 'drag.dragover',\n    guard: ({snapshot, event}) => {\n      const dragOrigin = event.dragOrigin\n      const draggingOverDragOrigin = dragOrigin\n        ? isOverlappingSelection(event.position.selection)({\n            ...snapshot,\n            context: {\n              ...snapshot.context,\n              selection: dragOrigin.selection,\n            },\n          })\n        : false\n\n      return draggingOverDragOrigin\n    },\n    actions: [],\n  }),\n\n  /**\n   * If the drop position overlaps the drag origin, then the event should be\n   * cancelled.\n   */\n  defineBehavior({\n    on: 'drag.drop',\n    guard: ({snapshot, event}) => {\n      const dragOrigin = event.dragOrigin\n      const dropPosition = event.position.selection\n      const droppingOnDragOrigin = dragOrigin\n        ? isOverlappingSelection(dropPosition)({\n            ...snapshot,\n            context: {\n              ...snapshot.context,\n              selection: dragOrigin.selection,\n            },\n          })\n        : false\n      return droppingOnDragOrigin\n    },\n    actions: [],\n  }),\n  /**\n   * If we drop and have access to a drag origin, then we can deserialize\n   * without creating a new selection.\n   */\n  defineBehavior({\n    on: 'drag.drop',\n    guard: ({event}) => event.dragOrigin !== undefined,\n    actions: [\n      ({event}) => [\n        raise({\n          type: 'deserialize',\n          originEvent: event,\n        }),\n      ],\n    ],\n  }),\n  /**\n   * Otherwise, we should to create a new selection.\n   */\n  defineBehavior({\n    on: 'drag.drop',\n    actions: [\n      ({event}) => [\n        raise({\n          type: 'select',\n          at: event.position.selection,\n        }),\n        raise({\n          type: 'deserialize',\n          originEvent: event,\n        }),\n      ],\n    ],\n  }),\n\n  /**\n   * Core Behavior that uses the drag origin to mimic a move operation during\n   * internal dragging.\n   */\n  defineBehavior({\n    on: 'deserialization.success',\n    guard: ({snapshot, event}) => {\n      if (\n        event.originEvent.type !== 'drag.drop' ||\n        event.originEvent.dragOrigin === undefined\n      ) {\n        return false\n      }\n\n      const dragOrigin = event.originEvent.dragOrigin\n      const dragSelection = getDragSelection({\n        eventSelection: dragOrigin.selection,\n        snapshot,\n      })\n      const dropPosition = event.originEvent.position.selection\n      const droppingOnDragOrigin = dragOrigin\n        ? isOverlappingSelection(dropPosition)({\n            ...snapshot,\n            context: {\n              ...snapshot.context,\n              selection: dragSelection,\n            },\n          })\n        : false\n\n      const draggingEntireBlocks = isSelectingEntireBlocks({\n        ...snapshot,\n        context: {\n          ...snapshot.context,\n          selection: dragSelection,\n        },\n      })\n\n      const draggedBlocks = getSelectedBlocks({\n        ...snapshot,\n        context: {\n          ...snapshot.context,\n          selection: dragSelection,\n        },\n      })\n\n      if (!droppingOnDragOrigin) {\n        return {\n          dropPosition,\n          draggingEntireBlocks,\n          draggedBlocks,\n          dragOrigin,\n          originEvent: event.originEvent,\n        }\n      }\n\n      return false\n    },\n    actions: [\n      (\n        {event},\n        {\n          draggingEntireBlocks,\n          draggedBlocks,\n          dragOrigin,\n          dropPosition,\n          originEvent,\n        },\n      ) => [\n        raise({\n          type: 'select',\n          at: dropPosition,\n        }),\n        ...(draggingEntireBlocks\n          ? draggedBlocks.map((block) =>\n              raise({\n                type: 'delete.block',\n                at: block.path,\n              }),\n            )\n          : [\n              raise({\n                type: 'delete',\n                at: dragOrigin.selection,\n              }),\n            ]),\n        raise({\n          type: 'insert.blocks',\n          blocks: event.data,\n          placement: draggingEntireBlocks\n            ? originEvent.position.block === 'start'\n              ? 'before'\n              : originEvent.position.block === 'end'\n                ? 'after'\n                : 'auto'\n            : 'auto',\n        }),\n      ],\n    ],\n  }),\n]\n","import {getActiveAnnotationsMarks} from '../selectors/selector.get-active-annotation-marks'\nimport {getActiveDecorators} from '../selectors/selector.get-active-decorators'\nimport {getFocusSpan} from '../selectors/selector.get-focus-span'\nimport {getMarkState} from '../selectors/selector.get-mark-state'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nexport const coreInsertBehaviors = [\n  defineBehavior({\n    on: 'insert.text',\n    guard: ({snapshot}) => {\n      const focusSpan = getFocusSpan(snapshot)\n\n      if (!focusSpan) {\n        return false\n      }\n\n      const markState = getMarkState(snapshot)\n      const activeDecorators = getActiveDecorators(snapshot)\n      const activeAnnotations = getActiveAnnotationsMarks(snapshot)\n\n      if (markState && markState.state === 'unchanged') {\n        const markStateDecorators = (markState.marks ?? []).filter((mark) =>\n          snapshot.context.schema.decorators\n            .map((decorator) => decorator.name)\n            .includes(mark),\n        )\n\n        if (\n          markStateDecorators.length === activeDecorators.length &&\n          markStateDecorators.every((mark) => activeDecorators.includes(mark))\n        ) {\n          return false\n        }\n      }\n\n      return {activeDecorators, activeAnnotations}\n    },\n    actions: [\n      ({snapshot, event}, {activeDecorators, activeAnnotations}) => [\n        raise({\n          type: 'insert.child',\n          child: {\n            _type: snapshot.context.schema.span.name,\n            text: event.text,\n            marks: [...activeDecorators, ...activeAnnotations],\n          },\n        }),\n      ],\n    ],\n  }),\n]\n","import {getFirstBlock} from '../selectors/selector.get-first-block'\nimport {getFocusInlineObject} from '../selectors/selector.get-focus-inline-object'\nimport {getFocusSpan} from '../selectors/selector.get-focus-span'\nimport {getFocusTextBlock} from '../selectors/selector.get-focus-text-block'\nimport {getLastBlock} from '../selectors/selector.get-last-block'\nimport {getSelectedBlocks} from '../selectors/selector.get-selected-blocks'\nimport {getSelectionEndBlock} from '../selectors/selector.get-selection-end-block'\nimport {getSelectionStartBlock} from '../selectors/selector.get-selection-start-block'\nimport {isAtTheEndOfBlock} from '../selectors/selector.is-at-the-end-of-block'\nimport {isAtTheStartOfBlock} from '../selectors/selector.is-at-the-start-of-block'\nimport {isSelectionCollapsed} from '../selectors/selector.is-selection-collapsed'\nimport {isSelectionExpanded} from '../selectors/selector.is-selection-expanded'\nimport {getBlockEndPoint} from '../utils/util.get-block-end-point'\nimport {getBlockStartPoint} from '../utils/util.get-block-start-point'\nimport {getSelectionEndPoint} from '../utils/util.get-selection-end-point'\nimport {getSelectionStartPoint} from '../utils/util.get-selection-start-point'\nimport {isEqualSelectionPoints} from '../utils/util.is-equal-selection-points'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nconst breakingAtTheEndOfTextBlock = defineBehavior({\n  on: 'insert.break',\n  guard: ({snapshot}) => {\n    const focusTextBlock = getFocusTextBlock(snapshot)\n    const selectionCollapsed = isSelectionCollapsed(snapshot)\n\n    if (!snapshot.context.selection || !focusTextBlock || !selectionCollapsed) {\n      return false\n    }\n\n    const atTheEndOfBlock = isAtTheEndOfBlock(focusTextBlock)(snapshot)\n\n    const focusListItem = focusTextBlock.node.listItem\n    const focusLevel = focusTextBlock.node.level\n\n    if (atTheEndOfBlock) {\n      return {focusListItem, focusLevel}\n    }\n\n    return false\n  },\n  actions: [\n    ({snapshot}, {focusListItem, focusLevel}) => [\n      raise({\n        type: 'insert.block',\n        block: {\n          _type: snapshot.context.schema.block.name,\n          children: [\n            {\n              _type: snapshot.context.schema.span.name,\n              text: '',\n              marks: [],\n            },\n          ],\n          markDefs: [],\n          listItem: focusListItem,\n          level: focusLevel,\n          style: snapshot.context.schema.styles[0]?.name,\n        },\n        placement: 'after',\n      }),\n    ],\n  ],\n})\n\nconst breakingAtTheStartOfTextBlock = defineBehavior({\n  on: 'insert.break',\n  guard: ({snapshot}) => {\n    const focusTextBlock = getFocusTextBlock(snapshot)\n    const selectionCollapsed = isSelectionCollapsed(snapshot)\n\n    if (!snapshot.context.selection || !focusTextBlock || !selectionCollapsed) {\n      return false\n    }\n\n    const focusSpan = getFocusSpan(snapshot)\n\n    const focusDecorators = focusSpan?.node.marks?.filter(\n      (mark) =>\n        snapshot.context.schema.decorators.some(\n          (decorator) => decorator.name === mark,\n        ) ?? [],\n    )\n    const focusAnnotations =\n      focusSpan?.node.marks?.filter(\n        (mark) =>\n          !snapshot.context.schema.decorators.some(\n            (decorator) => decorator.name === mark,\n          ),\n      ) ?? []\n    const focusListItem = focusTextBlock.node.listItem\n    const focusLevel = focusTextBlock.node.level\n\n    const atTheStartOfBlock = isAtTheStartOfBlock(focusTextBlock)(snapshot)\n\n    if (atTheStartOfBlock) {\n      return {focusAnnotations, focusDecorators, focusListItem, focusLevel}\n    }\n\n    return false\n  },\n  actions: [\n    (\n      {snapshot},\n      {focusAnnotations, focusDecorators, focusListItem, focusLevel},\n    ) => [\n      raise({\n        type: 'insert.block',\n        block: {\n          _type: snapshot.context.schema.block.name,\n          children: [\n            {\n              _type: snapshot.context.schema.span.name,\n              marks: focusAnnotations.length === 0 ? focusDecorators : [],\n              text: '',\n            },\n          ],\n          listItem: focusListItem,\n          level: focusLevel,\n          style: snapshot.context.schema.styles[0]?.name,\n        },\n        placement: 'before',\n        select: 'none',\n      }),\n    ],\n  ],\n})\n\nconst breakingEntireDocument = defineBehavior({\n  on: 'insert.break',\n  guard: ({snapshot}) => {\n    if (!snapshot.context.selection) {\n      return false\n    }\n\n    if (!isSelectionExpanded(snapshot)) {\n      return false\n    }\n\n    const firstBlock = getFirstBlock(snapshot)\n    const lastBlock = getLastBlock(snapshot)\n\n    if (!firstBlock || !lastBlock) {\n      return false\n    }\n\n    const firstBlockStartPoint = getBlockStartPoint({\n      context: snapshot.context,\n      block: firstBlock,\n    })\n    const selectionStartPoint = getSelectionStartPoint(\n      snapshot.context.selection,\n    )\n    const lastBlockEndPoint = getBlockEndPoint({\n      context: snapshot.context,\n      block: lastBlock,\n    })\n    const selectionEndPoint = getSelectionEndPoint(snapshot.context.selection)\n\n    if (\n      isEqualSelectionPoints(firstBlockStartPoint, selectionStartPoint) &&\n      isEqualSelectionPoints(lastBlockEndPoint, selectionEndPoint)\n    ) {\n      return {selection: snapshot.context.selection}\n    }\n\n    return false\n  },\n  actions: [\n    (_, {selection}) => [\n      raise({\n        type: 'delete',\n        at: selection,\n      }),\n    ],\n  ],\n})\n\nconst breakingEntireBlocks = defineBehavior({\n  on: 'insert.break',\n  guard: ({snapshot}) => {\n    if (!snapshot.context.selection) {\n      return false\n    }\n\n    if (!isSelectionExpanded(snapshot)) {\n      return false\n    }\n\n    const selectedBlocks = getSelectedBlocks(snapshot)\n    const selectionStartBlock = getSelectionStartBlock(snapshot)\n    const selectionEndBlock = getSelectionEndBlock(snapshot)\n\n    if (!selectionStartBlock || !selectionEndBlock) {\n      return false\n    }\n\n    const startBlockStartPoint = getBlockStartPoint({\n      context: snapshot.context,\n      block: selectionStartBlock,\n    })\n    const selectionStartPoint = getSelectionStartPoint(\n      snapshot.context.selection,\n    )\n    const endBlockEndPoint = getBlockEndPoint({\n      context: snapshot.context,\n      block: selectionEndBlock,\n    })\n    const selectionEndPoint = getSelectionEndPoint(snapshot.context.selection)\n\n    if (\n      isEqualSelectionPoints(selectionStartPoint, startBlockStartPoint) &&\n      isEqualSelectionPoints(selectionEndPoint, endBlockEndPoint)\n    ) {\n      return {selectedBlocks}\n    }\n\n    return false\n  },\n  actions: [\n    ({snapshot}, {selectedBlocks}) => [\n      raise({\n        type: 'insert.block',\n        block: {\n          _type: snapshot.context.schema.block.name,\n          children: [\n            {\n              _type: snapshot.context.schema.span.name,\n              text: '',\n              marks: [],\n            },\n          ],\n        },\n        placement: 'before',\n        select: 'start',\n      }),\n      ...selectedBlocks.map((block) =>\n        raise({\n          type: 'delete.block',\n          at: block.path,\n        }),\n      ),\n    ],\n  ],\n})\n\nconst breakingInlineObject = defineBehavior({\n  on: 'insert.break',\n  guard: ({snapshot}) => {\n    const selectionCollapsed = isSelectionCollapsed(snapshot)\n    const focusInlineObject = getFocusInlineObject(snapshot)\n\n    return selectionCollapsed && focusInlineObject\n  },\n  actions: [\n    () => [raise({type: 'move.forward', distance: 1}), raise({type: 'split'})],\n  ],\n})\n\nexport const coreInsertBreakBehaviors = {\n  breakingAtTheEndOfTextBlock,\n  breakingAtTheStartOfTextBlock,\n  breakingEntireDocument,\n  breakingEntireBlocks,\n  breakingInlineObject,\n}\n","import {isTextBlock} from '@portabletext/schema'\nimport type {PortableTextBlock} from '@sanity/types'\nimport type {EditorContext} from '../editor/editor-snapshot'\nimport {isSelectionCollapsed} from './util.is-selection-collapsed'\nimport {getChildKeyFromSelectionPoint} from './util.selection-point'\n\nexport function isAtTheBeginningOfBlock({\n  context,\n  block,\n}: {\n  context: EditorContext\n  block: PortableTextBlock\n}) {\n  if (!isTextBlock(context, block)) {\n    return false\n  }\n\n  if (!context.selection) {\n    return false\n  }\n\n  if (!isSelectionCollapsed(context.selection)) {\n    return false\n  }\n\n  const focusSpanKey = getChildKeyFromSelectionPoint(context.selection.focus)\n\n  return (\n    focusSpanKey === block.children[0]._key &&\n    context.selection.focus.offset === 0\n  )\n}\n","import {isTextBlock} from '@portabletext/schema'\nimport {defaultKeyboardShortcuts} from '../keyboard-shortcuts/default-keyboard-shortcuts'\nimport {getFocusListBlock} from '../selectors/selector.get-focus-list-block'\nimport {getFocusSpan} from '../selectors/selector.get-focus-span'\nimport {getFocusTextBlock} from '../selectors/selector.get-focus-text-block'\nimport {getNextBlock} from '../selectors/selector.get-next-block'\nimport {getPreviousBlock} from '../selectors/selector.get-previous-block'\nimport {getSelectedBlocks} from '../selectors/selector.get-selected-blocks'\nimport {getSelectionEndPoint} from '../selectors/selector.get-selection-end-point'\nimport {getSelectionStartPoint} from '../selectors/selector.get-selection-start-point'\nimport {isSelectionCollapsed} from '../selectors/selector.is-selection-collapsed'\nimport {isListBlock} from '../utils/parse-blocks'\nimport {isAtTheBeginningOfBlock} from '../utils/util.at-the-beginning-of-block'\nimport {getBlockEndPoint} from '../utils/util.get-block-end-point'\nimport {getBlockStartPoint} from '../utils/util.get-block-start-point'\nimport {isEmptyTextBlock} from '../utils/util.is-empty-text-block'\nimport {isEqualSelectionPoints} from '../utils/util.is-equal-selection-points'\nimport {sliceTextBlock} from '../utils/util.slice-text-block'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nconst MAX_LIST_LEVEL = 10\n\nconst clearListOnBackspace = defineBehavior({\n  on: 'delete.backward',\n  guard: ({snapshot}) => {\n    const focusTextBlock = getFocusTextBlock(snapshot)\n\n    if (!focusTextBlock) {\n      return false\n    }\n\n    if (focusTextBlock.node.level !== 1) {\n      return false\n    }\n\n    if (\n      !isAtTheBeginningOfBlock({\n        context: snapshot.context,\n        block: focusTextBlock.node,\n      })\n    ) {\n      return false\n    }\n\n    return {focusTextBlock}\n  },\n  actions: [\n    (_, {focusTextBlock}) => [\n      raise({\n        type: 'block.unset',\n        props: ['listItem', 'level'],\n        at: focusTextBlock.path,\n      }),\n    ],\n  ],\n})\n\nconst unindentListOnBackspace = defineBehavior({\n  on: 'delete.backward',\n  guard: ({snapshot}) => {\n    const selectionCollapsed = isSelectionCollapsed(snapshot)\n    const focusTextBlock = getFocusTextBlock(snapshot)\n    const focusSpan = getFocusSpan(snapshot)\n\n    if (!selectionCollapsed || !focusTextBlock || !focusSpan) {\n      return false\n    }\n\n    const atTheBeginningOfBLock =\n      focusTextBlock.node.children[0]._key === focusSpan.node._key &&\n      snapshot.context.selection?.focus.offset === 0\n\n    if (\n      atTheBeginningOfBLock &&\n      focusTextBlock.node.level !== undefined &&\n      focusTextBlock.node.level > 1\n    ) {\n      return {focusTextBlock, level: focusTextBlock.node.level - 1}\n    }\n\n    return false\n  },\n  actions: [\n    (_, {focusTextBlock, level}) => [\n      raise({\n        type: 'block.set',\n        props: {level},\n        at: focusTextBlock.path,\n      }),\n    ],\n  ],\n})\n\n/**\n * Hitting Delete in an empty list item would delete it by default. Instead,\n * then text block below should be merged into it, preserving the list\n * properties.\n */\nconst mergeTextIntoListOnDelete = defineBehavior({\n  on: 'delete.forward',\n  guard: ({snapshot}) => {\n    const focusListBlock = getFocusListBlock(snapshot)\n    const nextBlock = getNextBlock(snapshot)\n\n    if (!focusListBlock || !nextBlock) {\n      return false\n    }\n\n    if (!isTextBlock(snapshot.context, nextBlock.node)) {\n      return false\n    }\n\n    if (!isEmptyTextBlock(snapshot.context, focusListBlock.node)) {\n      return false\n    }\n\n    return {focusListBlock, nextBlock}\n  },\n  actions: [\n    (_, {nextBlock}) => [\n      raise({\n        type: 'insert.block',\n        block: nextBlock.node,\n        placement: 'auto',\n        select: 'start',\n      }),\n      raise({\n        type: 'delete.block',\n        at: nextBlock.path,\n      }),\n    ],\n  ],\n})\n\n/**\n * Hitting Backspace before an empty list item would delete it by default.\n * Instead, the text block below should be merged into it, preserving the list\n * properties.\n */\nconst mergeTextIntoListOnBackspace = defineBehavior({\n  on: 'delete.backward',\n  guard: ({snapshot}) => {\n    const focusTextBlock = getFocusTextBlock(snapshot)\n    const previousBlock = getPreviousBlock(snapshot)\n\n    if (!focusTextBlock || !previousBlock) {\n      return false\n    }\n\n    if (\n      !isAtTheBeginningOfBlock({\n        context: snapshot.context,\n        block: focusTextBlock.node,\n      })\n    ) {\n      return false\n    }\n\n    if (!isListBlock(snapshot.context, previousBlock.node)) {\n      return false\n    }\n\n    if (!isEmptyTextBlock(snapshot.context, previousBlock.node)) {\n      return false\n    }\n\n    const previousBlockEndPoint = getBlockEndPoint({\n      context: snapshot.context,\n      block: previousBlock,\n    })\n\n    return {focusTextBlock, previousBlockEndPoint}\n  },\n  actions: [\n    (_, {focusTextBlock, previousBlockEndPoint}) => [\n      raise({\n        type: 'select',\n        at: {\n          anchor: previousBlockEndPoint,\n          focus: previousBlockEndPoint,\n        },\n      }),\n      raise({\n        type: 'insert.block',\n        block: focusTextBlock.node,\n        placement: 'auto',\n        select: 'start',\n      }),\n      raise({\n        type: 'delete.block',\n        at: focusTextBlock.path,\n      }),\n    ],\n  ],\n})\n\n/**\n * When performing a delete operation where the start point of the operation is\n * at the start of a list item and the end point of the operation is in another\n * list item, we make sure the preserve the first list item. Otherwise, the\n * default behavior would be to preserve the last item.\n */\nconst deletingListFromStart = defineBehavior({\n  on: 'delete',\n  guard: ({snapshot, event}) => {\n    const blocksToDelete = getSelectedBlocks({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection: event.at,\n      },\n    })\n\n    if (blocksToDelete.length < 2) {\n      return false\n    }\n\n    const startBlock = blocksToDelete.at(0)?.node\n    const middleBlocks = blocksToDelete.slice(1, -1)\n    const endBlock = blocksToDelete.at(-1)?.node\n\n    if (\n      !isListBlock(snapshot.context, startBlock) ||\n      !isListBlock(snapshot.context, endBlock)\n    ) {\n      // It's that any block in between isn't a list item, but the first and\n      // last blocks have to be list items for this Behavior to take effect.\n      return false\n    }\n\n    const deleteStartPoint = getSelectionStartPoint({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection: event.at,\n      },\n    })\n    const deleteEndPoint = getSelectionEndPoint({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection: event.at,\n      },\n    })\n\n    if (!deleteStartPoint || !deleteEndPoint) {\n      return false\n    }\n\n    const startBlockStartPoint = getBlockStartPoint({\n      context: snapshot.context,\n      block: {\n        node: startBlock,\n        path: [{_key: startBlock._key}],\n      },\n    })\n\n    if (!isEqualSelectionPoints(deleteStartPoint, startBlockStartPoint)) {\n      // If we aren't deleting from the beginning of the first list item, then\n      // there is no need to proceed. The default delete Behavior will suffice.\n      return false\n    }\n\n    const startBlockEndPoint = getBlockEndPoint({\n      context: snapshot.context,\n      block: {\n        node: startBlock,\n        path: [{_key: startBlock._key}],\n      },\n    })\n    const endBlockEndPoint = getBlockEndPoint({\n      context: snapshot.context,\n      block: {\n        node: endBlock,\n        path: [{_key: endBlock._key}],\n      },\n    })\n    const slicedEndBlock = sliceTextBlock({\n      context: {\n        schema: snapshot.context.schema,\n        selection: {\n          anchor: deleteEndPoint,\n          focus: endBlockEndPoint,\n        },\n      },\n      block: endBlock,\n    })\n\n    return {\n      startBlockStartPoint,\n      startBlockEndPoint,\n      middleBlocks,\n      endBlock,\n      slicedEndBlock,\n    }\n  },\n  actions: [\n    (\n      _,\n      {\n        startBlockStartPoint,\n        startBlockEndPoint,\n        middleBlocks,\n        endBlock,\n        slicedEndBlock,\n      },\n    ) => [\n      // All block in between can safely be deleted.\n      ...middleBlocks.map((block) =>\n        raise({type: 'delete.block', at: block.path}),\n      ),\n      // The last block is deleted as well.\n      raise({type: 'delete.block', at: [{_key: endBlock._key}]}),\n      // But in case the delete operation didn't reach all the way to the end\n      // of it, we first place the caret at the end of the start block...\n      raise({\n        type: 'select',\n        at: {\n          anchor: startBlockEndPoint,\n          focus: startBlockEndPoint,\n        },\n      }),\n      // ...and insert the rest of the end block at the end of it.\n      raise({\n        type: 'insert.block',\n        block: slicedEndBlock,\n        placement: 'auto',\n        select: 'none',\n      }),\n      // And finally, we delete the original text of the start block.\n      raise({\n        type: 'delete',\n        at: {anchor: startBlockStartPoint, focus: startBlockEndPoint},\n      }),\n    ],\n  ],\n})\n\n/**\n * Hitting Enter in an empty list item would create a new list item below by\n * default. Instead, the list properties should be cleared.\n */\nconst clearListOnEnter = defineBehavior({\n  on: 'insert.break',\n  guard: ({snapshot}) => {\n    const selectionCollapsed = isSelectionCollapsed(snapshot)\n    const focusListBlock = getFocusListBlock(snapshot)\n\n    if (\n      !selectionCollapsed ||\n      !focusListBlock ||\n      !isEmptyTextBlock(snapshot.context, focusListBlock.node)\n    ) {\n      return false\n    }\n\n    return {focusListBlock}\n  },\n  actions: [\n    (_, {focusListBlock}) => [\n      raise({\n        type: 'block.unset',\n        props: ['listItem', 'level'],\n        at: focusListBlock.path,\n      }),\n    ],\n  ],\n})\n\n/**\n * Hitting Tab should indent the list item.\n */\nconst indentListOnTab = defineBehavior({\n  on: 'keyboard.keydown',\n  guard: ({snapshot, event}) => {\n    const isTab = defaultKeyboardShortcuts.tab.guard(event.originEvent)\n\n    if (!isTab) {\n      return false\n    }\n\n    const selectedBlocks = getSelectedBlocks(snapshot)\n    const selectedListBlocks = selectedBlocks.flatMap((block) =>\n      isListBlock(snapshot.context, block.node)\n        ? [\n            {\n              node: block.node,\n              path: block.path,\n            },\n          ]\n        : [],\n    )\n\n    if (selectedListBlocks.length === selectedBlocks.length) {\n      return {selectedListBlocks}\n    }\n\n    return false\n  },\n  actions: [\n    (_, {selectedListBlocks}) =>\n      selectedListBlocks.map((selectedListBlock) =>\n        raise({\n          type: 'block.set',\n          props: {\n            level: Math.min(\n              MAX_LIST_LEVEL,\n              Math.max(1, selectedListBlock.node.level + 1),\n            ),\n          },\n          at: selectedListBlock.path,\n        }),\n      ),\n  ],\n})\n\n/**\n * Hitting Shift+Tab should unindent the list item.\n */\nconst unindentListOnShiftTab = defineBehavior({\n  on: 'keyboard.keydown',\n  guard: ({snapshot, event}) => {\n    const isShiftTab = defaultKeyboardShortcuts.shiftTab.guard(\n      event.originEvent,\n    )\n\n    if (!isShiftTab) {\n      return false\n    }\n\n    const selectedBlocks = getSelectedBlocks(snapshot)\n    const selectedListBlocks = selectedBlocks.flatMap((block) =>\n      isListBlock(snapshot.context, block.node)\n        ? [\n            {\n              node: block.node,\n              path: block.path,\n            },\n          ]\n        : [],\n    )\n\n    if (selectedListBlocks.length === selectedBlocks.length) {\n      return {selectedListBlocks}\n    }\n\n    return false\n  },\n  actions: [\n    (_, {selectedListBlocks}) =>\n      selectedListBlocks.map((selectedListBlock) =>\n        raise({\n          type: 'block.set',\n          props: {\n            level: Math.min(\n              MAX_LIST_LEVEL,\n              Math.max(1, selectedListBlock.node.level - 1),\n            ),\n          },\n          at: selectedListBlock.path,\n        }),\n      ),\n  ],\n})\n\n/**\n * An inserted list inherits the `level` from the list item where it's\n * inserted. The entire list tree is adjusted to match the new level.\n */\nconst inheritListLevel = defineBehavior({\n  on: 'insert.blocks',\n  guard: ({snapshot, event}) => {\n    const focusListBlock = getFocusListBlock(snapshot)\n\n    if (!focusListBlock) {\n      return false\n    }\n\n    const firstInsertedBlock = event.blocks.at(0)\n    const secondInsertedBlock = event.blocks.at(1)\n    const insertedListBlock = isListBlock(snapshot.context, firstInsertedBlock)\n      ? firstInsertedBlock\n      : isListBlock(snapshot.context, secondInsertedBlock)\n        ? secondInsertedBlock\n        : undefined\n\n    if (!insertedListBlock) {\n      return false\n    }\n\n    const levelDifference = focusListBlock.node.level - insertedListBlock.level\n\n    if (levelDifference === 0) {\n      return false\n    }\n\n    return {levelDifference, insertedListBlock}\n  },\n  actions: [\n    ({snapshot, event}, {levelDifference, insertedListBlock}) => {\n      let adjustLevel = true\n      let listStartBlockFound = false\n\n      return [\n        raise({\n          ...event,\n          blocks: event.blocks.map((block) => {\n            if (block._key === insertedListBlock._key) {\n              listStartBlockFound = true\n            }\n\n            if (!adjustLevel) {\n              return block\n            }\n\n            if (\n              listStartBlockFound &&\n              adjustLevel &&\n              isListBlock(snapshot.context, block)\n            ) {\n              return {\n                ...block,\n                level: Math.min(\n                  MAX_LIST_LEVEL,\n                  Math.max(1, block.level + levelDifference),\n                ),\n              }\n            }\n\n            if (listStartBlockFound) {\n              adjustLevel = false\n            }\n\n            return block\n          }),\n        }),\n      ]\n    },\n  ],\n})\n\n/**\n * An inserted list inherits the `listItem` from the list item at the level\n * it's inserted.\n */\nconst inheritListItem = defineBehavior({\n  on: 'insert.blocks',\n  guard: ({snapshot, event}) => {\n    const focusListBlock = getFocusListBlock(snapshot)\n\n    if (!focusListBlock) {\n      return false\n    }\n\n    if (isEmptyTextBlock(snapshot.context, focusListBlock.node)) {\n      return false\n    }\n\n    const firstInsertedBlock = event.blocks.at(0)\n    const secondInsertedBlock = event.blocks.at(1)\n    const insertedListBlock = isListBlock(snapshot.context, firstInsertedBlock)\n      ? firstInsertedBlock\n      : isListBlock(snapshot.context, secondInsertedBlock)\n        ? secondInsertedBlock\n        : undefined\n\n    if (!insertedListBlock) {\n      return false\n    }\n\n    if (focusListBlock.node.level !== insertedListBlock.level) {\n      return false\n    }\n\n    if (focusListBlock.node.listItem === insertedListBlock.listItem) {\n      return false\n    }\n\n    return {listItem: focusListBlock.node.listItem, insertedListBlock}\n  },\n  actions: [\n    ({snapshot, event}, {listItem, insertedListBlock}) => {\n      let adjustListItem = true\n      let listStartBlockFound = false\n\n      return [\n        raise({\n          ...event,\n          blocks: event.blocks.map((block) => {\n            if (block._key === insertedListBlock._key) {\n              listStartBlockFound = true\n            }\n\n            if (!adjustListItem) {\n              return block\n            }\n\n            if (\n              listStartBlockFound &&\n              adjustListItem &&\n              isListBlock(snapshot.context, block)\n            ) {\n              return {\n                ...block,\n                listItem:\n                  block.level === insertedListBlock.level\n                    ? listItem\n                    : block.listItem,\n              }\n            }\n\n            if (listStartBlockFound) {\n              adjustListItem = false\n            }\n\n            return block\n          }),\n        }),\n      ]\n    },\n  ],\n})\n\n/**\n * An inserted text block inherits the `listItem` and `level` from the list\n * item where it's inserted.\n */\nconst inheritListProperties = defineBehavior({\n  on: 'insert.block',\n  guard: ({snapshot, event}) => {\n    if (event.placement !== 'auto') {\n      return false\n    }\n\n    if (event.block._type !== snapshot.context.schema.block.name) {\n      return false\n    }\n\n    if (event.block.listItem !== undefined) {\n      return false\n    }\n\n    const focusListBlock = getFocusListBlock(snapshot)\n\n    if (!focusListBlock) {\n      return false\n    }\n\n    if (!isEmptyTextBlock(snapshot.context, focusListBlock.node)) {\n      return false\n    }\n\n    return {\n      level: focusListBlock.node.level,\n      listItem: focusListBlock.node.listItem,\n    }\n  },\n  actions: [\n    ({event}, {level, listItem}) => [\n      raise({\n        ...event,\n        block: {\n          ...event.block,\n          level,\n          listItem,\n        },\n      }),\n    ],\n  ],\n})\n\nexport const coreListBehaviors = {\n  clearListOnBackspace,\n  unindentListOnBackspace,\n  mergeTextIntoListOnDelete,\n  mergeTextIntoListOnBackspace,\n  deletingListFromStart,\n  clearListOnEnter,\n  indentListOnTab,\n  unindentListOnShiftTab,\n  inheritListLevel,\n  inheritListItem,\n  inheritListProperties,\n}\n","import {corePriority} from '../priority/priority.core'\nimport {coreAnnotationBehaviors} from './behavior.core.annotations'\nimport {coreBlockObjectBehaviors} from './behavior.core.block-objects'\nimport {coreDecoratorBehaviors} from './behavior.core.decorators'\nimport {coreDndBehaviors} from './behavior.core.dnd'\nimport {coreInsertBehaviors} from './behavior.core.insert'\nimport {coreInsertBreakBehaviors} from './behavior.core.insert-break'\nimport {coreListBehaviors} from './behavior.core.lists'\n\nexport const coreBehaviorsConfig = [\n  ...coreAnnotationBehaviors,\n  coreDecoratorBehaviors.strongShortcut,\n  coreDecoratorBehaviors.emShortcut,\n  coreDecoratorBehaviors.underlineShortcut,\n  coreDecoratorBehaviors.codeShortcut,\n  ...coreDndBehaviors,\n  coreBlockObjectBehaviors.clickingAboveLonelyBlockObject,\n  coreBlockObjectBehaviors.clickingBelowLonelyBlockObject,\n  coreBlockObjectBehaviors.arrowDownOnLonelyBlockObject,\n  coreBlockObjectBehaviors.arrowUpOnLonelyBlockObject,\n  coreBlockObjectBehaviors.breakingBlockObject,\n  coreBlockObjectBehaviors.deletingEmptyTextBlockAfterBlockObject,\n  coreBlockObjectBehaviors.deletingEmptyTextBlockBeforeBlockObject,\n  ...coreInsertBehaviors,\n  coreListBehaviors.clearListOnBackspace,\n  coreListBehaviors.unindentListOnBackspace,\n  coreListBehaviors.mergeTextIntoListOnDelete,\n  coreListBehaviors.mergeTextIntoListOnBackspace,\n  coreListBehaviors.deletingListFromStart,\n  coreListBehaviors.clearListOnEnter,\n  coreListBehaviors.indentListOnTab,\n  coreListBehaviors.unindentListOnShiftTab,\n  coreListBehaviors.inheritListLevel,\n  coreListBehaviors.inheritListItem,\n  coreListBehaviors.inheritListProperties,\n  coreInsertBreakBehaviors.breakingAtTheEndOfTextBlock,\n  coreInsertBreakBehaviors.breakingAtTheStartOfTextBlock,\n  coreInsertBreakBehaviors.breakingEntireDocument,\n  coreInsertBreakBehaviors.breakingEntireBlocks,\n  coreInsertBreakBehaviors.breakingInlineObject,\n].map((behavior) => ({\n  behavior,\n  priority: corePriority,\n}))\n","import {Editor} from 'slate'\n\nexport function withoutNormalizingConditional(\n  editor: Editor,\n  predicate: () => boolean,\n  fn: () => void,\n) {\n  if (predicate()) {\n    Editor.withoutNormalizing(editor, fn)\n  } else {\n    fn()\n  }\n}\n","import {getFocusTextBlock} from '../selectors/selector.get-focus-text-block'\nimport {isActiveAnnotation} from '../selectors/selector.is-active-annotation'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nexport const abstractAnnotationBehaviors = [\n  defineBehavior({\n    on: 'annotation.set',\n    guard: ({snapshot, event}) => {\n      const blockKey = event.at[0]._key\n      const markDefKey = event.at[2]._key\n\n      const block = getFocusTextBlock({\n        ...snapshot,\n        context: {\n          ...snapshot.context,\n          selection: {\n            anchor: {\n              path: [{_key: blockKey}],\n              offset: 0,\n            },\n            focus: {\n              path: [{_key: blockKey}],\n              offset: 0,\n            },\n          },\n        },\n      })\n\n      if (!block) {\n        return false\n      }\n\n      const updatedMarkDefs = block.node.markDefs?.map((markDef) => {\n        if (markDef._key === markDefKey) {\n          return {\n            ...markDef,\n            ...event.props,\n          }\n        }\n\n        return markDef\n      })\n\n      return {blockKey, updatedMarkDefs}\n    },\n    actions: [\n      (_, {blockKey, updatedMarkDefs}) => [\n        raise({\n          type: 'block.set',\n          at: [{_key: blockKey}],\n          props: {markDefs: updatedMarkDefs},\n        }),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'annotation.toggle',\n    guard: ({snapshot, event}) =>\n      isActiveAnnotation(event.annotation.name)(snapshot),\n    actions: [\n      ({event}) => [\n        raise({type: 'annotation.remove', annotation: event.annotation}),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'annotation.toggle',\n    guard: ({snapshot, event}) =>\n      !isActiveAnnotation(event.annotation.name)(snapshot),\n    actions: [\n      ({event}) => [\n        raise({type: 'annotation.add', annotation: event.annotation}),\n      ],\n    ],\n  }),\n]\n","import {isActiveDecorator} from '../selectors/selector.is-active-decorator'\nimport {blockOffsetsToSelection} from '../utils/util.block-offsets-to-selection'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nexport const abstractDecoratorBehaviors = [\n  defineBehavior({\n    on: 'decorator.toggle',\n    guard: ({snapshot, event}) => isActiveDecorator(event.decorator)(snapshot),\n    actions: [\n      ({event}) => [\n        raise({type: 'decorator.remove', decorator: event.decorator}),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'decorator.toggle',\n    guard: ({snapshot, event}) => {\n      const manualSelection = event.at\n        ? blockOffsetsToSelection({\n            context: snapshot.context,\n            offsets: event.at,\n          })\n        : null\n\n      if (manualSelection) {\n        return !isActiveDecorator(event.decorator)({\n          ...snapshot,\n          context: {\n            ...snapshot.context,\n            selection: manualSelection,\n          },\n        })\n      }\n\n      return !isActiveDecorator(event.decorator)(snapshot)\n    },\n    actions: [\n      ({event}) => [\n        raise({\n          ...event,\n          type: 'decorator.add',\n        }),\n      ],\n    ],\n  }),\n]\n","import {isSpan, isTextBlock} from '@portabletext/schema'\nimport {getFocusChild} from '../selectors/selector.get-focus-child'\nimport {getFocusTextBlock} from '../selectors/selector.get-focus-text-block'\nimport {getNextBlock} from '../selectors/selector.get-next-block'\nimport {getPreviousBlock} from '../selectors/selector.get-previous-block'\nimport {getTrimmedSelection} from '../selectors/selector.get-trimmed-selection'\nimport {isAtTheEndOfBlock} from '../selectors/selector.is-at-the-end-of-block'\nimport {isAtTheStartOfBlock} from '../selectors/selector.is-at-the-start-of-block'\nimport {blockOffsetsToSelection} from '../utils/util.block-offsets-to-selection'\nimport {getBlockEndPoint} from '../utils/util.get-block-end-point'\nimport {getBlockStartPoint} from '../utils/util.get-block-start-point'\nimport {isEmptyTextBlock} from '../utils/util.is-empty-text-block'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nexport const abstractDeleteBehaviors = [\n  defineBehavior({\n    on: 'delete.backward',\n    guard: ({snapshot}) => {\n      if (!snapshot.context.selection) {\n        return false\n      }\n\n      return {selection: snapshot.context.selection}\n    },\n    actions: [\n      ({event}, {selection}) => [\n        raise({\n          type: 'delete',\n          direction: 'backward',\n          unit: event.unit,\n          at: selection,\n        }),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'delete',\n    guard: ({snapshot, event}) => {\n      if (event.direction !== 'backward') {\n        return false\n      }\n\n      const previousBlock = getPreviousBlock(snapshot)\n      const focusTextBlock = getFocusTextBlock(snapshot)\n\n      if (!previousBlock || !focusTextBlock) {\n        return false\n      }\n\n      if (!isAtTheStartOfBlock(focusTextBlock)(snapshot)) {\n        return false\n      }\n\n      const previousBlockEndPoint = getBlockEndPoint({\n        context: snapshot.context,\n        block: previousBlock,\n      })\n\n      if (!isTextBlock(snapshot.context, previousBlock.node)) {\n        return false\n      }\n\n      return {previousBlockEndPoint, focusTextBlock}\n    },\n    actions: [\n      (_, {previousBlockEndPoint, focusTextBlock}) => [\n        raise({\n          type: 'delete.block',\n          at: focusTextBlock.path,\n        }),\n        raise({\n          type: 'select',\n          at: {\n            anchor: previousBlockEndPoint,\n            focus: previousBlockEndPoint,\n          },\n        }),\n        raise({\n          type: 'insert.block',\n          block: focusTextBlock.node,\n          placement: 'auto',\n          select: 'start',\n        }),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'delete.forward',\n    guard: ({snapshot}) => {\n      if (!snapshot.context.selection) {\n        return false\n      }\n\n      return {selection: snapshot.context.selection}\n    },\n    actions: [\n      ({event}, {selection}) => [\n        raise({\n          type: 'delete',\n          direction: 'forward',\n          unit: event.unit,\n          at: selection,\n        }),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'delete',\n    guard: ({snapshot, event}) => {\n      if (event.direction !== 'forward') {\n        return false\n      }\n\n      const nextBlock = getNextBlock({\n        ...snapshot,\n        context: {\n          ...snapshot.context,\n          selection: event.at,\n        },\n      })\n      const focusTextBlock = getFocusTextBlock({\n        ...snapshot,\n        context: {\n          ...snapshot.context,\n          selection: event.at,\n        },\n      })\n\n      if (!nextBlock || !focusTextBlock) {\n        return false\n      }\n\n      if (!isEmptyTextBlock(snapshot.context, focusTextBlock.node)) {\n        return false\n      }\n\n      const nextBlockStartPoint = getBlockStartPoint({\n        context: snapshot.context,\n        block: nextBlock,\n      })\n\n      return {focusTextBlock, nextBlockStartPoint}\n    },\n    actions: [\n      (_, {focusTextBlock, nextBlockStartPoint}) => [\n        raise({\n          type: 'delete.block',\n          at: focusTextBlock.path,\n        }),\n        raise({\n          type: 'select',\n          at: {\n            anchor: nextBlockStartPoint,\n            focus: nextBlockStartPoint,\n          },\n        }),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'delete',\n    guard: ({snapshot, event}) => {\n      if (event.direction !== 'forward') {\n        return false\n      }\n\n      const nextBlock = getNextBlock(snapshot)\n      const focusTextBlock = getFocusTextBlock(snapshot)\n\n      if (!nextBlock || !focusTextBlock) {\n        return false\n      }\n\n      if (!isAtTheEndOfBlock(focusTextBlock)(snapshot)) {\n        return false\n      }\n\n      if (!isTextBlock(snapshot.context, nextBlock.node)) {\n        return false\n      }\n\n      return {nextBlock}\n    },\n    actions: [\n      (_, {nextBlock}) => [\n        raise({\n          type: 'delete.block',\n          at: nextBlock.path,\n        }),\n        raise({\n          type: 'insert.block',\n          block: nextBlock.node,\n          placement: 'auto',\n          select: 'none',\n        }),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'delete.block',\n    actions: [\n      ({event}) => [\n        raise({\n          type: 'delete',\n          at: {\n            anchor: {\n              path: event.at,\n              offset: 0,\n            },\n            focus: {\n              path: event.at,\n              offset: 0,\n            },\n          },\n          unit: 'block',\n        }),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'delete.child',\n    guard: ({snapshot, event}) => {\n      const focusChild = getFocusChild({\n        ...snapshot,\n        context: {\n          ...snapshot.context,\n          selection: {\n            anchor: {\n              path: event.at,\n              offset: 0,\n            },\n            focus: {\n              path: event.at,\n              offset: 0,\n            },\n          },\n        },\n      })\n\n      if (!focusChild) {\n        return false\n      }\n\n      if (isSpan(snapshot.context, focusChild.node)) {\n        return {\n          selection: {\n            anchor: {\n              path: event.at,\n              offset: 0,\n            },\n            focus: {\n              path: event.at,\n              offset: focusChild.node.text.length,\n            },\n          },\n        }\n      }\n\n      return {\n        selection: {\n          anchor: {\n            path: event.at,\n            offset: 0,\n          },\n          focus: {\n            path: event.at,\n            offset: 0,\n          },\n        },\n      }\n    },\n    actions: [(_, {selection}) => [raise({type: 'delete', at: selection})]],\n  }),\n  defineBehavior({\n    on: 'delete.text',\n    guard: ({snapshot, event}) => {\n      const selection = blockOffsetsToSelection({\n        context: snapshot.context,\n        offsets: event.at,\n      })\n\n      if (!selection) {\n        return false\n      }\n\n      const trimmedSelection = getTrimmedSelection({\n        ...snapshot,\n        context: {\n          ...snapshot.context,\n          value: snapshot.context.value,\n          selection,\n        },\n      })\n\n      if (!trimmedSelection) {\n        return false\n      }\n\n      return {\n        selection: trimmedSelection,\n      }\n    },\n    actions: [(_, {selection}) => [raise({type: 'delete', at: selection})]],\n  }),\n]\n","import {isTextBlock} from '@portabletext/schema'\nimport {getActiveAnnotations} from '../selectors/selector.get-active-annotations'\nimport {getActiveDecorators} from '../selectors/selector.get-active-decorators'\nimport {getFocusTextBlock} from '../selectors/selector.get-focus-text-block'\nimport {getTextBlockText} from '../utils/util.get-text-block-text'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nexport const abstractDeserializeBehaviors = [\n  defineBehavior({\n    on: 'deserialize',\n    guard: ({event}) => {\n      const portableText = event.originEvent.originEvent.dataTransfer.getData(\n        'application/x-portable-text',\n      )\n\n      if (portableText) {\n        return {\n          type: 'deserialize.data',\n          mimeType: 'application/x-portable-text',\n          data: portableText,\n          originEvent: event.originEvent,\n        } as const\n      }\n\n      const json =\n        event.originEvent.originEvent.dataTransfer.getData('application/json')\n\n      if (json) {\n        return {\n          type: 'deserialize.data',\n          mimeType: 'application/json',\n          data: json,\n          originEvent: event.originEvent,\n        } as const\n      }\n\n      const html =\n        event.originEvent.originEvent.dataTransfer.getData('text/html')\n\n      if (html) {\n        return {\n          type: 'deserialize.data',\n          mimeType: 'text/html',\n          data: html,\n          originEvent: event.originEvent,\n        } as const\n      }\n\n      const text =\n        event.originEvent.originEvent.dataTransfer.getData('text/plain')\n\n      if (text) {\n        return {\n          type: 'deserialize.data',\n          mimeType: 'text/plain',\n          data: text,\n          originEvent: event.originEvent,\n        } as const\n      }\n\n      return false\n    },\n    actions: [(_, deserializeEvent) => [raise(deserializeEvent)]],\n  }),\n  defineBehavior({\n    on: 'deserialize',\n    actions: [\n      ({event}) => [\n        raise({\n          type: 'deserialization.failure',\n          mimeType: '*/*',\n          reason: 'No Behavior was able to handle the incoming data',\n          originEvent: event.originEvent,\n        }),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'deserialize.data',\n    guard: ({snapshot, event}) => {\n      const converter = snapshot.context.converters.find(\n        (converter) => converter.mimeType === event.mimeType,\n      )\n\n      if (!converter) {\n        return false\n      }\n\n      return converter.deserialize({\n        snapshot,\n        event: {\n          type: 'deserialize',\n          data: event.data,\n        },\n      })\n    },\n    actions: [\n      ({event}, deserializeEvent) => [\n        raise({\n          ...deserializeEvent,\n          originEvent: event.originEvent,\n        }),\n      ],\n    ],\n  }),\n  /**\n   * If we are pasting text/plain into a text block then we can probably\n   * assume that the intended behavior is that the pasted text inherits\n   * formatting from the text it's pasted into.\n   */\n  defineBehavior({\n    on: 'deserialization.success',\n    guard: ({snapshot, event}) => {\n      const focusTextBlock = getFocusTextBlock(snapshot)\n\n      if (\n        focusTextBlock &&\n        event.mimeType === 'text/plain' &&\n        event.originEvent.type === 'clipboard.paste'\n      ) {\n        const activeDecorators = getActiveDecorators(snapshot)\n        const activeAnnotations = getActiveAnnotations(snapshot)\n\n        return {\n          activeAnnotations,\n          activeDecorators,\n          textRuns: event.data.flatMap((block) =>\n            isTextBlock(snapshot.context, block)\n              ? [getTextBlockText(block)]\n              : [],\n          ),\n        }\n      }\n\n      return false\n    },\n    actions: [\n      (_, {activeAnnotations, activeDecorators, textRuns}) =>\n        textRuns.flatMap((textRun, index) =>\n          index !== textRuns.length - 1\n            ? [\n                raise({\n                  type: 'insert.span',\n                  text: textRun,\n                  decorators: activeDecorators,\n                  annotations: activeAnnotations.map(\n                    ({_key, _type, ...value}) => ({\n                      name: _type,\n                      value,\n                    }),\n                  ),\n                }),\n                raise({type: 'insert.break'}),\n              ]\n            : [\n                raise({\n                  type: 'insert.span',\n                  text: textRun,\n                  decorators: activeDecorators,\n                  annotations: activeAnnotations.map(\n                    ({_key, _type, ...value}) => ({\n                      name: _type,\n                      value,\n                    }),\n                  ),\n                }),\n              ],\n        ),\n    ],\n  }),\n  defineBehavior({\n    on: 'deserialization.success',\n    actions: [\n      ({event}) => [\n        raise({\n          type: 'insert.blocks',\n          blocks: event.data,\n          placement: 'auto',\n        }),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'deserialization.failure',\n    guard: ({event}) => {\n      if (event.mimeType === 'application/x-portable-text') {\n        const json =\n          event.originEvent.originEvent.dataTransfer.getData('application/json')\n\n        if (json) {\n          return {\n            type: 'deserialize.data',\n            mimeType: 'application/json',\n            data: json,\n            originEvent: event.originEvent,\n          } as const\n        }\n      }\n\n      if (event.mimeType === 'application/json') {\n        const html =\n          event.originEvent.originEvent.dataTransfer.getData('text/html')\n\n        if (html) {\n          return {\n            type: 'deserialize.data',\n            mimeType: 'text/html',\n            data: html,\n            originEvent: event.originEvent,\n          } as const\n        }\n      }\n\n      if (event.mimeType === 'text/html') {\n        const text =\n          event.originEvent.originEvent.dataTransfer.getData('text/plain')\n\n        if (text) {\n          return {\n            type: 'deserialize.data',\n            mimeType: 'text/plain',\n            data: text,\n            originEvent: event.originEvent,\n          } as const\n        }\n      }\n\n      return false\n    },\n    actions: [(_, deserializeDataEvent) => [raise(deserializeDataEvent)]],\n  }),\n  defineBehavior({\n    on: 'deserialization.failure',\n    actions: [\n      ({event}) => [\n        {\n          type: 'effect',\n          effect: () => {\n            console.warn(\n              `Deserialization of ${event.mimeType} failed with reason \"${event.reason}\"`,\n            )\n          },\n        },\n      ],\n    ],\n  }),\n]\n","import {getFocusTextBlock} from '../selectors/selector.get-focus-text-block'\nimport {getLastBlock} from '../selectors/selector.get-last-block'\nimport {isSelectionCollapsed} from '../utils'\nimport {getBlockEndPoint} from '../utils/util.get-block-end-point'\nimport {getBlockStartPoint} from '../utils/util.get-block-start-point'\nimport {isEmptyTextBlock} from '../utils/util.is-empty-text-block'\nimport {isEqualSelectionPoints} from '../utils/util.is-equal-selection-points'\nimport {sliceTextBlock} from '../utils/util.slice-text-block'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nexport const abstractInsertBehaviors = [\n  defineBehavior({\n    on: 'insert.blocks',\n    guard: ({event}) => {\n      const onlyBlock =\n        event.blocks.length === 1 ? event.blocks.at(0) : undefined\n\n      if (!onlyBlock) {\n        return false\n      }\n\n      return {onlyBlock}\n    },\n    actions: [\n      ({event}, {onlyBlock}) => [\n        raise({\n          type: 'insert.block',\n          block: onlyBlock,\n          placement: event.placement,\n          select: event.select ?? 'end',\n        }),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'insert.blocks',\n    guard: ({snapshot, event}) => {\n      if (event.placement !== 'before') {\n        return false\n      }\n\n      const firstBlockKey =\n        event.blocks.at(0)?._key ?? snapshot.context.keyGenerator()\n      const lastBlockKey =\n        event.blocks.at(-1)?._key ?? snapshot.context.keyGenerator()\n\n      return {firstBlockKey, lastBlockKey}\n    },\n    actions: [\n      ({snapshot, event}, {firstBlockKey, lastBlockKey}) => [\n        ...event.blocks.map((block, index) =>\n          raise({\n            type: 'insert.block',\n            block,\n            placement: index === 0 ? 'before' : 'after',\n            select: index !== event.blocks.length - 1 ? 'end' : 'none',\n          }),\n        ),\n        ...(event.select === 'none'\n          ? [\n              raise({\n                type: 'select',\n                at: snapshot.context.selection,\n              }),\n            ]\n          : event.select === 'start'\n            ? [\n                raise({\n                  type: 'select.block',\n                  at: [{_key: firstBlockKey}],\n                  select: 'start',\n                }),\n              ]\n            : [\n                raise({\n                  type: 'select.block',\n                  at: [{_key: lastBlockKey}],\n                  select: 'end',\n                }),\n              ]),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'insert.blocks',\n    guard: ({snapshot, event}) => {\n      if (event.placement !== 'after') {\n        return false\n      }\n\n      const firstBlockKey =\n        event.blocks.at(0)?._key ?? snapshot.context.keyGenerator()\n      const lastBlockKey =\n        event.blocks.at(-1)?._key ?? snapshot.context.keyGenerator()\n\n      return {firstBlockKey, lastBlockKey}\n    },\n    actions: [\n      ({snapshot, event}, {firstBlockKey, lastBlockKey}) => [\n        ...event.blocks.map((block, index) =>\n          raise({\n            type: 'insert.block',\n            block,\n            placement: 'after',\n            select: index !== event.blocks.length - 1 ? 'end' : 'none',\n          }),\n        ),\n        ...(event.select === 'none'\n          ? [\n              raise({\n                type: 'select',\n                at: snapshot.context.selection,\n              }),\n            ]\n          : event.select === 'start'\n            ? [\n                raise({\n                  type: 'select.block',\n                  at: [{_key: firstBlockKey}],\n                  select: 'start',\n                }),\n              ]\n            : [\n                raise({\n                  type: 'select.block',\n                  at: [{_key: lastBlockKey}],\n                  select: 'end',\n                }),\n              ]),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'insert.blocks',\n    guard: ({snapshot, event}) => {\n      if (event.placement !== 'auto') {\n        return false\n      }\n\n      const focusTextBlock = getFocusTextBlock(snapshot)\n\n      if (!focusTextBlock) {\n        return false\n      }\n\n      if (!isEmptyTextBlock(snapshot.context, focusTextBlock.node)) {\n        return false\n      }\n\n      const firstBlockKey =\n        event.blocks.at(0)?._key ?? snapshot.context.keyGenerator()\n      const lastBlockKey =\n        event.blocks.at(-1)?._key ?? snapshot.context.keyGenerator()\n\n      return {focusTextBlock, firstBlockKey, lastBlockKey}\n    },\n    actions: [\n      ({event}, {firstBlockKey, lastBlockKey}) => [\n        ...event.blocks.map((block, index) =>\n          raise({\n            type: 'insert.block',\n            block,\n            placement: index === 0 ? 'auto' : 'after',\n            select: index !== event.blocks.length - 1 ? 'end' : 'none',\n          }),\n        ),\n        ...(event.select === 'none' || event.select === 'start'\n          ? [\n              raise({\n                type: 'select.block',\n                at: [{_key: firstBlockKey}],\n                select: 'start',\n              }),\n            ]\n          : [\n              raise({\n                type: 'select.block',\n                at: [{_key: lastBlockKey}],\n                select: 'end',\n              }),\n            ]),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'insert.blocks',\n    guard: ({snapshot, event}) => {\n      if (event.placement !== 'auto') {\n        return false\n      }\n\n      const focusTextBlock = getFocusTextBlock(snapshot)\n\n      if (!focusTextBlock || !snapshot.context.selection) {\n        return false\n      }\n\n      const focusBlockStartPoint = getBlockStartPoint({\n        context: snapshot.context,\n        block: focusTextBlock,\n      })\n      const focusBlockEndPoint = getBlockEndPoint({\n        context: snapshot.context,\n        block: focusTextBlock,\n      })\n      const focusTextBlockAfter = sliceTextBlock({\n        context: {\n          schema: snapshot.context.schema,\n          selection: {\n            anchor: snapshot.context.selection.focus,\n            focus: focusBlockEndPoint,\n          },\n        },\n        block: focusTextBlock.node,\n      })\n      const firstBlockKey =\n        event.blocks.at(0)?._key ?? snapshot.context.keyGenerator()\n\n      return {\n        firstBlockKey,\n        focusBlockStartPoint,\n        focusBlockEndPoint,\n        focusTextBlockAfter,\n        selection: snapshot.context.selection,\n      }\n    },\n    actions: [\n      (\n        {event},\n        {\n          focusBlockEndPoint,\n          focusTextBlockAfter,\n          selection,\n          firstBlockKey,\n          focusBlockStartPoint,\n        },\n      ) => [\n        ...event.blocks.flatMap((block, index) =>\n          index === 0\n            ? [\n                ...(isEqualSelectionPoints(selection.focus, focusBlockEndPoint)\n                  ? []\n                  : [\n                      raise({\n                        type: 'delete',\n                        at: {\n                          anchor: selection.focus,\n                          focus: focusBlockEndPoint,\n                        },\n                      }),\n                    ]),\n                raise({\n                  type: 'insert.block',\n                  block,\n                  placement: 'auto',\n                  select: 'end',\n                }),\n              ]\n            : index === event.blocks.length - 1\n              ? [\n                  raise({\n                    type: 'insert.block',\n                    block,\n                    placement: 'after',\n                    select: 'end',\n                  }),\n                  raise({\n                    type: 'insert.block',\n                    block: focusTextBlockAfter,\n                    placement: 'auto',\n                    select: event.select === 'end' ? 'none' : 'end',\n                  }),\n                ]\n              : [\n                  raise({\n                    type: 'insert.block',\n                    block,\n                    placement: 'after',\n                    select: 'end',\n                  }),\n                ],\n        ),\n        ...(event.select === 'none'\n          ? [\n              raise({\n                type: 'select',\n                at: selection,\n              }),\n            ]\n          : event.select === 'start'\n            ? [\n                isEqualSelectionPoints(selection.focus, focusBlockStartPoint)\n                  ? raise({\n                      type: 'select.block',\n                      at: [{_key: firstBlockKey}],\n                      select: 'start',\n                    })\n                  : raise({\n                      type: 'select',\n                      at: {\n                        anchor: selection.focus,\n                        focus: selection.focus,\n                      },\n                    }),\n              ]\n            : []),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'insert.blocks',\n    guard: ({event}) => event.placement === 'auto',\n    actions: [\n      ({event}) =>\n        event.blocks.map((block, index) =>\n          raise({\n            type: 'insert.block',\n            block,\n            placement: index === 0 ? 'auto' : 'after',\n            select: event.select ?? 'end',\n          }),\n        ),\n    ],\n  }),\n  defineBehavior({\n    on: 'insert.break',\n    actions: [() => [raise({type: 'split'})]],\n  }),\n  defineBehavior({\n    on: 'insert.child',\n    guard: ({snapshot}) => {\n      const lastBlock = getLastBlock(snapshot)\n\n      if (!lastBlock) {\n        return false\n      }\n\n      if (snapshot.context.selection) {\n        return false\n      }\n\n      const lastBlockEndPoint = getBlockEndPoint({\n        context: snapshot.context,\n        block: lastBlock,\n      })\n\n      return {lastBlockEndPoint}\n    },\n    actions: [\n      ({event}, {lastBlockEndPoint}) => [\n        raise({\n          type: 'select',\n          at: {\n            anchor: lastBlockEndPoint,\n            focus: lastBlockEndPoint,\n          },\n        }),\n        raise(event),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'insert.child',\n    guard: ({snapshot}) => {\n      const focusTextBlock = getFocusTextBlock(snapshot)\n\n      return snapshot.context.selection && !focusTextBlock\n    },\n    actions: [\n      ({snapshot, event}) => [\n        raise({\n          type: 'insert.block',\n          block: {\n            _type: snapshot.context.schema.block.name,\n            children: [\n              {\n                _type: snapshot.context.schema.span.name,\n                text: '',\n                marks: [],\n              },\n            ],\n          },\n          placement: 'auto',\n          select: 'end',\n        }),\n        raise(event),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'insert.inline object',\n    actions: [\n      ({event}) => [\n        raise({\n          type: 'insert.child',\n          child: {\n            _type: event.inlineObject.name,\n            ...event.inlineObject.value,\n          },\n        }),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'insert.soft break',\n    actions: [() => [raise({type: 'insert.text', text: '\\n'})]],\n  }),\n  defineBehavior({\n    on: 'insert.span',\n    guard: ({snapshot}) => !getFocusTextBlock(snapshot),\n    actions: [\n      ({snapshot, event}) => [\n        raise({\n          type: 'insert.block',\n          block: {\n            _type: snapshot.context.schema.block.name,\n            children: [\n              {\n                _type: snapshot.context.schema.span.name,\n                text: '',\n                marks: [],\n              },\n            ],\n          },\n          placement: 'auto',\n          select: 'end',\n        }),\n        raise(event),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'insert.span',\n    guard: ({snapshot, event}) => {\n      const focusTextBlock = getFocusTextBlock(snapshot)\n      const markDefs =\n        event.annotations?.map((annotation) => ({\n          _type: annotation.name,\n          _key: snapshot.context.keyGenerator(),\n          ...annotation.value,\n        })) ?? []\n\n      return {markDefs, focusTextBlock}\n    },\n    actions: [\n      ({snapshot, event}, {markDefs, focusTextBlock}) => [\n        ...(focusTextBlock\n          ? [\n              raise({\n                type: 'block.set',\n                at: focusTextBlock.path,\n                props: {\n                  markDefs: [\n                    ...(focusTextBlock.node.markDefs ?? []),\n                    ...markDefs,\n                  ],\n                },\n              }),\n            ]\n          : []),\n        raise({\n          type: 'insert.child',\n          child: {\n            _type: snapshot.context.schema.span.name,\n            text: event.text,\n            marks: [\n              ...(event.decorators ?? []),\n              ...markDefs.map((markDef) => markDef._key),\n            ],\n          },\n        }),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'insert.text',\n    guard: ({snapshot}) => {\n      const selection = snapshot.context.selection\n\n      if (!selection || isSelectionCollapsed(selection)) {\n        return false\n      }\n\n      return {selection}\n    },\n    actions: [\n      ({event}, {selection}) => [\n        raise({type: 'delete', at: selection}),\n        raise(event),\n      ],\n    ],\n  }),\n]\n","import {createKeyboardShortcut} from '@portabletext/keyboard-shortcuts'\nimport {isTextBlock} from '@portabletext/schema'\nimport {defaultKeyboardShortcuts} from '../keyboard-shortcuts/default-keyboard-shortcuts'\nimport {getFocusBlock} from '../selectors/selector.get-focus-block'\nimport {getFocusInlineObject} from '../selectors/selector.get-focus-inline-object'\nimport {getPreviousBlock} from '../selectors/selector.get-previous-block'\nimport {isSelectionCollapsed} from '../selectors/selector.is-selection-collapsed'\nimport {isSelectionExpanded} from '../selectors/selector.is-selection-expanded'\nimport {getBlockEndPoint} from '../utils/util.get-block-end-point'\nimport {isEmptyTextBlock} from '../utils/util.is-empty-text-block'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nconst shiftLeft = createKeyboardShortcut({\n  default: [\n    {\n      key: 'ArrowLeft',\n      shift: true,\n      meta: false,\n      ctrl: false,\n      alt: false,\n    },\n  ],\n})\n\nexport const abstractKeyboardBehaviors = [\n  /**\n   * When Backspace is pressed on an inline object, Slate will raise a\n   * `delete.backward` event with `unit: 'block'`. This is wrong and this\n   * Behavior adjusts that.\n   */\n  defineBehavior({\n    on: 'keyboard.keydown',\n    guard: ({snapshot, event}) =>\n      defaultKeyboardShortcuts.backspace.guard(event.originEvent) &&\n      isSelectionCollapsed(snapshot) &&\n      getFocusInlineObject(snapshot),\n    actions: [() => [raise({type: 'delete.backward', unit: 'character'})]],\n  }),\n  /**\n   * When Delete is pressed on an inline object, Slate will raise a\n   * `delete.forward` event with `unit: 'block'`. This is wrong and this\n   * Behavior adjusts that.\n   */\n  defineBehavior({\n    on: 'keyboard.keydown',\n    guard: ({snapshot, event}) =>\n      defaultKeyboardShortcuts.delete.guard(event.originEvent) &&\n      isSelectionCollapsed(snapshot) &&\n      getFocusInlineObject(snapshot),\n    actions: [() => [raise({type: 'delete.forward', unit: 'character'})]],\n  }),\n\n  /**\n   * Allow raising an `insert.break` event when pressing Enter on an inline\n   * object.\n   */\n  defineBehavior({\n    on: 'keyboard.keydown',\n    guard: ({snapshot, event}) =>\n      defaultKeyboardShortcuts.break.guard(event.originEvent) &&\n      isSelectionCollapsed(snapshot) &&\n      getFocusInlineObject(snapshot),\n    actions: [() => [raise({type: 'insert.break'})]],\n  }),\n\n  /**\n   * On Firefox, Enter might collapse the selection. To mitigate this, we\n   * `raise` an `insert.break` event manually.\n   */\n  defineBehavior({\n    on: 'keyboard.keydown',\n    guard: ({snapshot, event}) =>\n      defaultKeyboardShortcuts.break.guard(event.originEvent) &&\n      isSelectionExpanded(snapshot),\n    actions: [() => [raise({type: 'insert.break'})]],\n  }),\n\n  /**\n   * On WebKit, Shift+Enter results in an `insertParagraph` input event rather\n   * than an `insertLineBreak` input event. This Behavior makes sure we catch\n   * that `keyboard.keydown` event beforehand and raise an `insert.soft break` manually.\n   */\n  defineBehavior({\n    on: 'keyboard.keydown',\n    guard: ({event}) =>\n      defaultKeyboardShortcuts.lineBreak.guard(event.originEvent),\n    actions: [() => [raise({type: 'insert.soft break'})]],\n  }),\n\n  /**\n   * Manual handling of undo shortcuts.\n   */\n  defineBehavior({\n    on: 'keyboard.keydown',\n    guard: ({event}) =>\n      defaultKeyboardShortcuts.history.undo.guard(event.originEvent),\n    actions: [() => [raise({type: 'history.undo'})]],\n  }),\n\n  /**\n   * Manual handling of redo shortcuts.\n   */\n  defineBehavior({\n    on: 'keyboard.keydown',\n    guard: ({event}) =>\n      defaultKeyboardShortcuts.history.redo.guard(event.originEvent),\n    actions: [() => [raise({type: 'history.redo'})]],\n  }),\n\n  /**\n   * Fix edge case where Shift+ArrowLeft didn't reduce a selection hanging\n   * onto an empty text block.\n   */\n  defineBehavior({\n    on: 'keyboard.keydown',\n    guard: ({snapshot, event}) => {\n      if (!snapshot.context.selection || !shiftLeft.guard(event.originEvent)) {\n        return false\n      }\n\n      const focusBlock = getFocusBlock(snapshot)\n\n      if (!focusBlock) {\n        return false\n      }\n\n      const previousBlock = getPreviousBlock({\n        ...snapshot,\n        context: {\n          ...snapshot.context,\n          selection: {\n            anchor: {\n              path: focusBlock.path,\n              offset: 0,\n            },\n            focus: {\n              path: focusBlock.path,\n              offset: 0,\n            },\n          },\n        },\n      })\n\n      if (!previousBlock) {\n        return false\n      }\n\n      const hanging =\n        isTextBlock(snapshot.context, focusBlock.node) &&\n        snapshot.context.selection.focus.offset === 0\n\n      if (hanging && isEmptyTextBlock(snapshot.context, focusBlock.node)) {\n        return {previousBlock, selection: snapshot.context.selection}\n      }\n\n      return false\n    },\n    actions: [\n      ({snapshot}, {previousBlock, selection}) => [\n        raise({\n          type: 'select',\n          at: {\n            anchor: selection.anchor,\n            focus: getBlockEndPoint({\n              context: snapshot.context,\n              block: previousBlock,\n            }),\n          },\n        }),\n      ],\n    ],\n  }),\n]\n","import {getSelectedTextBlocks} from '../selectors/selector.get-selected-text-blocks'\nimport {isActiveListItem} from '../selectors/selector.is-active-list-item'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nexport const abstractListItemBehaviors = [\n  defineBehavior({\n    on: 'list item.add',\n    guard: ({snapshot, event}) => {\n      if (\n        !snapshot.context.schema.lists.some(\n          (list) => list.name === event.listItem,\n        )\n      ) {\n        return false\n      }\n\n      const selectedTextBlocks = getSelectedTextBlocks(snapshot)\n\n      return {selectedTextBlocks}\n    },\n    actions: [\n      ({event}, {selectedTextBlocks}) =>\n        selectedTextBlocks.map((block) =>\n          raise({\n            type: 'block.set',\n            at: block.path,\n            props: {\n              level: block.node.level ?? 1,\n              listItem: event.listItem,\n            },\n          }),\n        ),\n    ],\n  }),\n  defineBehavior({\n    on: 'list item.remove',\n    guard: ({snapshot}) => {\n      const selectedTextBlocks = getSelectedTextBlocks(snapshot)\n\n      return {selectedTextBlocks}\n    },\n    actions: [\n      (_, {selectedTextBlocks}) =>\n        selectedTextBlocks.map((block) =>\n          raise({\n            type: 'block.unset',\n            at: block.path,\n            props: ['level', 'listItem'],\n          }),\n        ),\n    ],\n  }),\n  defineBehavior({\n    on: 'list item.toggle',\n    guard: ({snapshot, event}) => isActiveListItem(event.listItem)(snapshot),\n    actions: [\n      ({event}) => [\n        raise({type: 'list item.remove', listItem: event.listItem}),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'list item.toggle',\n    guard: ({snapshot, event}) => !isActiveListItem(event.listItem)(snapshot),\n    actions: [\n      ({event}) => [raise({type: 'list item.add', listItem: event.listItem})],\n    ],\n  }),\n]\n","import {getNextBlock} from '../selectors/selector.get-next-block'\nimport {getPreviousBlock} from '../selectors/selector.get-previous-block'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nexport const abstractMoveBehaviors = [\n  defineBehavior({\n    on: 'move.block up',\n    guard: ({snapshot, event}) => {\n      const previousBlock = getPreviousBlock({\n        ...snapshot,\n        context: {\n          ...snapshot.context,\n          selection: {\n            anchor: {\n              path: event.at,\n              offset: 0,\n            },\n            focus: {\n              path: event.at,\n              offset: 0,\n            },\n          },\n        },\n      })\n\n      if (previousBlock) {\n        return {previousBlock}\n      }\n\n      return false\n    },\n    actions: [\n      ({event}, {previousBlock}) => [\n        raise({\n          type: 'move.block',\n          at: event.at,\n          to: previousBlock.path,\n        }),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'move.block down',\n    guard: ({snapshot, event}) => {\n      const nextBlock = getNextBlock({\n        ...snapshot,\n        context: {\n          ...snapshot.context,\n          selection: {\n            anchor: {\n              path: event.at,\n              offset: 0,\n            },\n            focus: {\n              path: event.at,\n              offset: 0,\n            },\n          },\n        },\n      })\n\n      if (nextBlock) {\n        return {nextBlock}\n      }\n\n      return false\n    },\n    actions: [\n      ({event}, {nextBlock}) => [\n        raise({\n          type: 'move.block',\n          at: event.at,\n          to: nextBlock.path,\n        }),\n      ],\n    ],\n  }),\n]\n","import {getFocusBlock} from '../selectors/selector.get-focus-block'\nimport {getNextBlock} from '../selectors/selector.get-next-block'\nimport {getPreviousBlock} from '../selectors/selector.get-previous-block'\nimport {getBlockEndPoint} from '../utils/util.get-block-end-point'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nexport const abstractSelectBehaviors = [\n  defineBehavior({\n    on: 'select.block',\n    guard: ({snapshot, event}) => {\n      if (event.select !== 'end') {\n        return false\n      }\n\n      const block = getFocusBlock({\n        ...snapshot,\n        context: {\n          ...snapshot.context,\n          selection: {\n            anchor: {\n              path: event.at,\n              offset: 0,\n            },\n            focus: {\n              path: event.at,\n              offset: 0,\n            },\n          },\n        },\n      })\n\n      if (!block) {\n        return false\n      }\n\n      const blockEndPoint = getBlockEndPoint({\n        context: snapshot.context,\n        block,\n      })\n\n      return {blockEndPoint}\n    },\n    actions: [\n      (_, {blockEndPoint}) => [\n        raise({\n          type: 'select',\n          at: {\n            anchor: blockEndPoint,\n            focus: blockEndPoint,\n          },\n        }),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'select.block',\n    actions: [\n      ({event}) => [\n        raise({\n          type: 'select',\n          at: {\n            anchor: {\n              path: event.at,\n              offset: 0,\n            },\n            focus: {\n              path: event.at,\n              offset: 0,\n            },\n          },\n        }),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'select.previous block',\n    guard: ({snapshot}) => {\n      const previousBlock = getPreviousBlock(snapshot)\n\n      if (!previousBlock) {\n        return false\n      }\n\n      return {previousBlock}\n    },\n    actions: [\n      ({event}, {previousBlock}) => [\n        raise({\n          type: 'select.block',\n          at: previousBlock.path,\n          select: event.select,\n        }),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'select.next block',\n    guard: ({snapshot}) => {\n      const nextBlock = getNextBlock(snapshot)\n\n      if (!nextBlock) {\n        return false\n      }\n\n      return {nextBlock}\n    },\n    actions: [\n      ({event}, {nextBlock}) => [\n        raise({\n          type: 'select.block',\n          at: nextBlock.path,\n          select: event.select,\n        }),\n      ],\n    ],\n  }),\n]\n","import {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nexport const abstractSerializeBehaviors = [\n  defineBehavior({\n    on: 'serialize',\n    actions: [\n      ({event}) => [\n        raise({\n          type: 'serialize.data',\n          mimeType: 'application/x-portable-text',\n          originEvent: event.originEvent,\n        }),\n        raise({\n          type: 'serialize.data',\n          mimeType: 'application/json',\n          originEvent: event.originEvent,\n        }),\n        raise({\n          type: 'serialize.data',\n          mimeType: 'text/html',\n          originEvent: event.originEvent,\n        }),\n        raise({\n          type: 'serialize.data',\n          mimeType: 'text/plain',\n          originEvent: event.originEvent,\n        }),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'serialize.data',\n    guard: ({snapshot, event}) => {\n      const converter = snapshot.context.converters.find(\n        (converter) => converter.mimeType === event.mimeType,\n      )\n\n      if (!converter) {\n        return false\n      }\n\n      return converter.serialize({\n        snapshot,\n        event: {\n          type: 'serialize',\n          originEvent: event.originEvent.type,\n        },\n      })\n    },\n    actions: [\n      ({event}, serializeEvent) => [\n        raise({\n          ...serializeEvent,\n          originEvent: event.originEvent,\n        }),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'serialization.success',\n    actions: [\n      ({event}) => [\n        {\n          type: 'effect',\n          effect: () => {\n            event.originEvent.originEvent.dataTransfer.setData(\n              event.mimeType,\n              event.data,\n            )\n          },\n        },\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'serialization.failure',\n    actions: [\n      ({event}) => [\n        {\n          type: 'effect',\n          effect: () => {\n            console.warn(\n              `Serialization of ${event.mimeType} failed with reason \"${event.reason}\"`,\n            )\n          },\n        },\n      ],\n    ],\n  }),\n]\n","import {isTextBlock} from '@portabletext/schema'\nimport {getFocusBlockObject} from '../selectors/selector.get-focus-block-object'\nimport {getFocusInlineObject} from '../selectors/selector.get-focus-inline-object'\nimport {getFocusTextBlock} from '../selectors/selector.get-focus-text-block'\nimport {getSelectedValue} from '../selectors/selector.get-selected-value'\nimport {getSelectionEndBlock} from '../selectors/selector.get-selection-end-block'\nimport {getSelectionStartBlock} from '../selectors/selector.get-selection-start-block'\nimport {parseBlock} from '../utils/parse-blocks'\nimport {getBlockEndPoint} from '../utils/util.get-block-end-point'\nimport {getBlockStartPoint} from '../utils/util.get-block-start-point'\nimport {getSelectionEndPoint} from '../utils/util.get-selection-end-point'\nimport {getSelectionStartPoint} from '../utils/util.get-selection-start-point'\nimport {isSelectionCollapsed} from '../utils/util.is-selection-collapsed'\nimport {sliceTextBlock} from '../utils/util.slice-text-block'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nexport const abstractSplitBehaviors = [\n  /**\n   * You can't split an inline object.\n   */\n  defineBehavior({\n    on: 'split',\n    guard: ({snapshot}) =>\n      isSelectionCollapsed(snapshot.context.selection) &&\n      getFocusInlineObject(snapshot),\n    actions: [],\n  }),\n\n  /**\n   * You can't split a block object.\n   */\n  defineBehavior({\n    on: 'split',\n    guard: ({snapshot}) =>\n      isSelectionCollapsed(snapshot.context.selection) &&\n      getFocusBlockObject(snapshot),\n    actions: [],\n  }),\n\n  defineBehavior({\n    on: 'split',\n    guard: ({snapshot}) => {\n      const selection = snapshot.context.selection\n\n      if (!selection || isSelectionCollapsed(selection)) {\n        return false\n      }\n\n      const selectionStartBlock = getSelectionStartBlock(snapshot)\n      const selectionEndBlock = getSelectionEndBlock(snapshot)\n\n      if (!selectionStartBlock || !selectionEndBlock) {\n        return false\n      }\n\n      if (\n        !isTextBlock(snapshot.context, selectionStartBlock.node) &&\n        isTextBlock(snapshot.context, selectionEndBlock.node)\n      ) {\n        return {selection}\n      }\n\n      return false\n    },\n    actions: [(_, {selection}) => [raise({type: 'delete', at: selection})]],\n  }),\n\n  defineBehavior({\n    on: 'split',\n    guard: ({snapshot}) => {\n      const selection = snapshot.context.selection\n\n      if (!selection || isSelectionCollapsed(selection)) {\n        return false\n      }\n\n      const selectionStartBlock = getSelectionStartBlock(snapshot)\n      const selectionEndBlock = getSelectionEndBlock(snapshot)\n\n      if (!selectionStartBlock || !selectionEndBlock) {\n        return false\n      }\n\n      if (selectionStartBlock.node._key === selectionEndBlock.node._key) {\n        return false\n      }\n\n      const startPoint = getSelectionStartPoint(selection)\n      const startBlockEndPoint = getBlockEndPoint({\n        context: snapshot.context,\n        block: selectionStartBlock,\n      })\n      const endPoint = getSelectionEndPoint(selection)\n      const endBlockStartPoint = getBlockStartPoint({\n        context: snapshot.context,\n        block: selectionEndBlock,\n      })\n\n      const selectedValue = getSelectedValue(snapshot)\n\n      const blocksInBetween = selectedValue.filter(\n        (block) =>\n          block._key !== selectionStartBlock.node._key &&\n          block._key !== selectionEndBlock.node._key,\n      )\n\n      return {\n        startPoint,\n        startBlockEndPoint,\n        endPoint,\n        endBlockStartPoint,\n        blocksInBetween,\n      }\n    },\n    actions: [\n      (\n        _,\n        {\n          startPoint,\n          startBlockEndPoint,\n          endPoint,\n          endBlockStartPoint,\n          blocksInBetween,\n        },\n      ) => [\n        raise({\n          type: 'delete',\n          at: {anchor: startPoint, focus: startBlockEndPoint},\n        }),\n        ...blocksInBetween.map((block) =>\n          raise({type: 'delete.block', at: [{_key: block._key}]}),\n        ),\n        raise({\n          type: 'delete',\n          at: {anchor: endBlockStartPoint, focus: endPoint},\n        }),\n      ],\n    ],\n  }),\n\n  defineBehavior({\n    on: 'split',\n    guard: ({snapshot}) => {\n      const selection = snapshot.context.selection\n\n      if (!selection || isSelectionCollapsed(selection)) {\n        return false\n      }\n\n      return {selection}\n    },\n    actions: [\n      (_, {selection}) => [\n        raise({type: 'delete', at: selection}),\n        raise({type: 'split'}),\n      ],\n    ],\n  }),\n\n  defineBehavior({\n    on: 'split',\n    guard: ({snapshot}) => {\n      const selection = snapshot.context.selection\n\n      if (!selection || !isSelectionCollapsed(selection)) {\n        return false\n      }\n\n      const selectionStartPoint = getSelectionStartPoint(selection)\n\n      const focusTextBlock = getFocusTextBlock(snapshot)\n\n      if (!focusTextBlock) {\n        return false\n      }\n\n      const blockEndPoint = getBlockEndPoint({\n        context: snapshot.context,\n        block: focusTextBlock,\n      })\n\n      const newTextBlockSelection = {\n        anchor: selectionStartPoint,\n        focus: blockEndPoint,\n      }\n\n      const newTextBlock = parseBlock({\n        block: sliceTextBlock({\n          context: {\n            ...snapshot.context,\n            selection: newTextBlockSelection,\n          },\n          block: focusTextBlock.node,\n        }),\n        context: snapshot.context,\n        options: {\n          removeUnusedMarkDefs: true,\n          validateFields: false,\n        },\n      })\n\n      if (!newTextBlock) {\n        return false\n      }\n\n      return {\n        newTextBlock,\n        newTextBlockSelection,\n      }\n    },\n    actions: [\n      (_, {newTextBlock, newTextBlockSelection}) =>\n        isSelectionCollapsed(newTextBlockSelection)\n          ? [\n              raise({\n                type: 'insert.block',\n                block: newTextBlock,\n                placement: 'after',\n                select: 'start',\n              }),\n            ]\n          : [\n              raise({type: 'delete', at: newTextBlockSelection}),\n              raise({\n                type: 'insert.block',\n                block: newTextBlock,\n                placement: 'after',\n                select: 'start',\n              }),\n            ],\n    ],\n  }),\n]\n","import {getSelectedTextBlocks} from '../selectors/selector.get-selected-text-blocks'\nimport {isActiveStyle} from '../selectors/selector.is-active-style'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nexport const abstractStyleBehaviors = [\n  defineBehavior({\n    on: 'style.add',\n    guard: ({snapshot}) => {\n      const selectedTextBlocks = getSelectedTextBlocks(snapshot)\n\n      return {selectedTextBlocks}\n    },\n    actions: [\n      ({event}, {selectedTextBlocks}) =>\n        selectedTextBlocks.map((block) =>\n          raise({\n            type: 'block.set',\n            at: block.path,\n            props: {\n              style: event.style,\n            },\n          }),\n        ),\n    ],\n  }),\n  defineBehavior({\n    on: 'style.remove',\n    guard: ({snapshot}) => {\n      const selectedTextBlocks = getSelectedTextBlocks(snapshot)\n\n      return {selectedTextBlocks}\n    },\n    actions: [\n      (_, {selectedTextBlocks}) =>\n        selectedTextBlocks.map((block) =>\n          raise({\n            type: 'block.unset',\n            at: block.path,\n            props: ['style'],\n          }),\n        ),\n    ],\n  }),\n  defineBehavior({\n    on: 'style.toggle',\n    guard: ({snapshot, event}) => isActiveStyle(event.style)(snapshot),\n    actions: [({event}) => [raise({type: 'style.remove', style: event.style})]],\n  }),\n  defineBehavior({\n    on: 'style.toggle',\n    guard: ({snapshot, event}) => !isActiveStyle(event.style)(snapshot),\n    actions: [({event}) => [raise({type: 'style.add', style: event.style})]],\n  }),\n]\n","import {getFocusSpan} from '../selectors/selector.get-focus-span'\nimport {isSelectionCollapsed} from '../selectors/selector.is-selection-collapsed'\nimport {isSelectionExpanded} from '../selectors/selector.is-selection-expanded'\nimport {abstractAnnotationBehaviors} from './behavior.abstract.annotation'\nimport {abstractDecoratorBehaviors} from './behavior.abstract.decorator'\nimport {abstractDeleteBehaviors} from './behavior.abstract.delete'\nimport {abstractDeserializeBehaviors} from './behavior.abstract.deserialize'\nimport {abstractInsertBehaviors} from './behavior.abstract.insert'\nimport {abstractKeyboardBehaviors} from './behavior.abstract.keyboard'\nimport {abstractListItemBehaviors} from './behavior.abstract.list-item'\nimport {abstractMoveBehaviors} from './behavior.abstract.move'\nimport {abstractSelectBehaviors} from './behavior.abstract.select'\nimport {abstractSerializeBehaviors} from './behavior.abstract.serialize'\nimport {abstractSplitBehaviors} from './behavior.abstract.split'\nimport {abstractStyleBehaviors} from './behavior.abstract.style'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nexport const abstractBehaviors = [\n  defineBehavior({\n    on: 'clipboard.copy',\n    guard: ({snapshot}) => {\n      const focusSpan = getFocusSpan(snapshot)\n      const selectionCollapsed = isSelectionCollapsed(snapshot)\n\n      return focusSpan && selectionCollapsed\n    },\n    actions: [],\n  }),\n  defineBehavior({\n    on: 'clipboard.copy',\n    actions: [\n      ({event}) => [\n        raise({\n          type: 'serialize',\n          originEvent: event,\n        }),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'clipboard.cut',\n    guard: ({snapshot}) => {\n      const focusSpan = getFocusSpan(snapshot)\n      const selectionCollapsed = isSelectionCollapsed(snapshot)\n\n      return focusSpan && selectionCollapsed\n    },\n    actions: [],\n  }),\n  defineBehavior({\n    on: 'clipboard.cut',\n    guard: ({snapshot}) => {\n      return snapshot.context.selection\n        ? {\n            selection: snapshot.context.selection,\n          }\n        : false\n    },\n    actions: [\n      ({event}, {selection}) => [\n        raise({\n          type: 'serialize',\n          originEvent: event,\n        }),\n        raise({\n          type: 'delete',\n          at: selection,\n        }),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'drag.dragstart',\n    actions: [\n      ({event}) => [\n        raise({\n          type: 'serialize',\n          originEvent: event,\n        }),\n      ],\n    ],\n  }),\n\n  defineBehavior({\n    on: 'clipboard.paste',\n    guard: ({snapshot}) => {\n      return snapshot.context.selection && isSelectionExpanded(snapshot)\n        ? {selection: snapshot.context.selection}\n        : false\n    },\n    actions: [\n      ({event}, {selection}) => [\n        raise({\n          type: 'delete',\n          at: selection,\n        }),\n        raise({\n          type: 'deserialize',\n          originEvent: event,\n        }),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'clipboard.paste',\n    actions: [\n      ({event}) => [\n        raise({\n          type: 'deserialize',\n          originEvent: event,\n        }),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'input.*',\n    actions: [\n      ({event}) => [\n        raise({\n          type: 'deserialize',\n          originEvent: event,\n        }),\n      ],\n    ],\n  }),\n  ...abstractAnnotationBehaviors,\n  ...abstractDecoratorBehaviors,\n  ...abstractDeleteBehaviors,\n  ...abstractDeserializeBehaviors,\n  ...abstractInsertBehaviors,\n  ...abstractKeyboardBehaviors,\n  ...abstractListItemBehaviors,\n  ...abstractMoveBehaviors,\n  ...abstractStyleBehaviors,\n  ...abstractSelectBehaviors,\n  ...abstractSerializeBehaviors,\n  ...abstractSplitBehaviors,\n]\n","import type {PortableTextBlock} from '@sanity/types'\nimport type {EventPosition} from '../internal-utils/event-position'\nimport type {MIMEType} from '../internal-utils/mime-type'\nimport type {OmitFromUnion, PickFromUnion, StrictExtract} from '../type-utils'\nimport type {BlockOffset} from '../types/block-offset'\nimport type {\n  BlockWithOptionalKey,\n  ChildWithOptionalKey,\n} from '../types/block-with-optional-key'\nimport type {EditorSelection} from '../types/editor'\nimport type {AnnotationPath, BlockPath, ChildPath} from '../types/paths'\n\n/**\n * @beta\n */\nexport type BehaviorEvent =\n  | SyntheticBehaviorEvent\n  | NativeBehaviorEvent\n  | CustomBehaviorEvent\n\nexport type BehaviorEventTypeNamespace =\n  | SyntheticBehaviorEventNamespace\n  | NativeBehaviorEventNamespace\n  | CustomBehaviorEventNamespace\n\ntype NamespacedBehaviorEventType<\n  TNamespace extends BehaviorEventTypeNamespace | '',\n> = TNamespace extends ''\n  ? BehaviorEvent['type']\n  : Extract<BehaviorEvent['type'], TNamespace | `${TNamespace}.${string}`>\n\n/**************************************\n * External events\n **************************************/\n\ntype ExternalBehaviorEventNamespace = 'blur' | 'focus' | 'insert'\n\ntype ExternalBehaviorEventType<\n  TNamespace extends ExternalBehaviorEventNamespace,\n  TType extends string = '',\n> = TType extends '' ? `${TNamespace}` : `${TNamespace}.${TType}`\n\nexport type ExternalBehaviorEvent =\n  | {\n      type: ExternalBehaviorEventType<'blur'>\n    }\n  | {\n      type: ExternalBehaviorEventType<'focus'>\n    }\n  | {\n      type: ExternalBehaviorEventType<'insert', 'block object'>\n      placement: InsertPlacement\n      blockObject: {\n        name: string\n        value?: {[prop: string]: unknown}\n      }\n    }\n  | BehaviorEvent\n\n/**************************************\n * Synthetic events\n **************************************/\n\nconst syntheticBehaviorEventTypes = [\n  'annotation.add',\n  'annotation.remove',\n  'block.set',\n  'block.unset',\n  'child.set',\n  'child.unset',\n  'decorator.add',\n  'decorator.remove',\n  'delete',\n  'history.redo',\n  'history.undo',\n  'insert.block',\n  'insert.child',\n  'insert.text',\n  'move.backward',\n  'move.block',\n  'move.forward',\n  'select',\n] as const\n\ntype SyntheticBehaviorEventType =\n  | (typeof syntheticBehaviorEventTypes)[number]\n  | (typeof abstractBehaviorEventTypes)[number]\n\ntype SyntheticBehaviorEventNamespace =\n  ExtractNamespace<SyntheticBehaviorEventType>\n\n/**\n * @beta\n */\nexport type SyntheticBehaviorEvent =\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'annotation.add'>\n      annotation: {\n        name: string\n        value: {[prop: string]: unknown}\n      }\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'annotation.remove'>\n      annotation: {\n        name: string\n      }\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'block.set'>\n      at: BlockPath\n      props: Record<string, unknown>\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'block.unset'>\n      at: BlockPath\n      props: Array<string>\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'child.set'>\n      at: ChildPath\n      props: {[prop: string]: unknown}\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'child.unset'>\n      at: ChildPath\n      props: Array<string>\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'decorator.add'>\n      decorator: string\n      at?: {\n        anchor: BlockOffset\n        focus: BlockOffset\n      }\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'decorator.remove'>\n      decorator: string\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'delete'>\n      at: NonNullable<EditorSelection>\n      /**\n       * Defaults to forward deletion.\n       */\n      direction?: 'backward' | 'forward'\n      /**\n       * Defaults to character deletion.\n       */\n      unit?: 'character' | 'word' | 'line' | 'block'\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'history.redo'>\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'history.undo'>\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'insert.block'>\n      block: BlockWithOptionalKey\n      placement: InsertPlacement\n      select?: 'start' | 'end' | 'none'\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'insert.child'>\n      child: ChildWithOptionalKey\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'insert.text'>\n      text: string\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'move.backward'>\n      distance: number\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'move.block'>\n      at: BlockPath\n      to: BlockPath\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'move.forward'>\n      distance: number\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'select'>\n      at: EditorSelection\n    }\n  | AbstractBehaviorEvent\n\n/**\n * @beta\n */\nexport type InsertPlacement = 'auto' | 'after' | 'before'\n\nexport function isSyntheticBehaviorEvent(\n  event: BehaviorEvent,\n): event is OmitFromUnion<\n  SyntheticBehaviorEvent,\n  'type',\n  AbstractBehaviorEventType\n> {\n  return (\n    !isCustomBehaviorEvent(event) &&\n    !isNativeBehaviorEvent(event) &&\n    !isAbstractBehaviorEvent(event)\n  )\n}\n\n/**************************************\n * Abstract events\n **************************************/\n\nconst abstractBehaviorEventTypes = [\n  'annotation.set',\n  'annotation.toggle',\n  'decorator.toggle',\n  'delete.backward',\n  'delete.block',\n  'delete.child',\n  'delete.forward',\n  'delete.text',\n  'deserialize',\n  'deserialize.data',\n  'deserialization.success',\n  'deserialization.failure',\n  'insert.blocks',\n  'insert.break',\n  'insert.inline object',\n  'insert.soft break',\n  'insert.span',\n  'list item.add',\n  'list item.remove',\n  'list item.toggle',\n  'move.block down',\n  'move.block up',\n  'select.block',\n  'select.previous block',\n  'select.next block',\n  'serialize',\n  'serialize.data',\n  'serialization.success',\n  'serialization.failure',\n  'split',\n  'style.add',\n  'style.remove',\n  'style.toggle',\n] as const\n\nexport type AbstractBehaviorEventType =\n  (typeof abstractBehaviorEventTypes)[number]\n\ntype AbstractBehaviorEvent =\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'annotation.set'>\n      at: AnnotationPath\n      props: Record<string, unknown>\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'annotation.toggle'>\n      annotation: {\n        name: string\n        value: {[prop: string]: unknown}\n      }\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'decorator.toggle'>\n      decorator: string\n      at?: {anchor: BlockOffset; focus: BlockOffset}\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'delete.backward'>\n      unit: 'character' | 'word' | 'line' | 'block'\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'delete.block'>\n      at: BlockPath\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'delete.child'>\n      at: ChildPath\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'delete.forward'>\n      unit: 'character' | 'word' | 'line' | 'block'\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'delete.text'>\n      at: {\n        anchor: BlockOffset\n        focus: BlockOffset\n      }\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'deserialize'>\n      originEvent:\n        | PickFromUnion<\n            NativeBehaviorEvent,\n            'type',\n            'drag.drop' | 'clipboard.paste'\n          >\n        | InputBehaviorEvent\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'deserialize.data'>\n      mimeType: MIMEType\n      data: string\n      originEvent:\n        | PickFromUnion<\n            NativeBehaviorEvent,\n            'type',\n            'drag.drop' | 'clipboard.paste'\n          >\n        | InputBehaviorEvent\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'serialize'>\n      originEvent: PickFromUnion<\n        NativeBehaviorEvent,\n        'type',\n        'clipboard.copy' | 'clipboard.cut' | 'drag.dragstart'\n      >\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'serialize.data'>\n      mimeType: MIMEType\n      originEvent: PickFromUnion<\n        NativeBehaviorEvent,\n        'type',\n        'clipboard.copy' | 'clipboard.cut' | 'drag.dragstart'\n      >\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'deserialization.success'>\n      mimeType: MIMEType\n      data: Array<PortableTextBlock>\n      originEvent:\n        | PickFromUnion<\n            NativeBehaviorEvent,\n            'type',\n            'drag.drop' | 'clipboard.paste'\n          >\n        | InputBehaviorEvent\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'deserialization.failure'>\n      mimeType: MIMEType\n      reason: string\n      originEvent:\n        | PickFromUnion<\n            NativeBehaviorEvent,\n            'type',\n            'drag.drop' | 'clipboard.paste'\n          >\n        | InputBehaviorEvent\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'serialization.success'>\n      mimeType: MIMEType\n      data: string\n      originEvent: PickFromUnion<\n        NativeBehaviorEvent,\n        'type',\n        'clipboard.copy' | 'clipboard.cut' | 'drag.dragstart'\n      >\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'serialization.failure'>\n      mimeType: MIMEType\n      reason: string\n      originEvent: PickFromUnion<\n        NativeBehaviorEvent,\n        'type',\n        'clipboard.copy' | 'clipboard.cut' | 'drag.dragstart'\n      >\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'insert.blocks'>\n      blocks: Array<BlockWithOptionalKey>\n      placement: InsertPlacement\n      select?: 'start' | 'end' | 'none'\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'insert.break'>\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'insert.inline object'>\n      inlineObject: {\n        name: string\n        value?: {[prop: string]: unknown}\n      }\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'insert.soft break'>\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'insert.span'>\n      text: string\n      annotations?: Array<{\n        name: string\n        value: {[prop: string]: unknown}\n      }>\n      decorators?: Array<string>\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'list item.add'>\n      listItem: string\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'list item.remove'>\n      listItem: string\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'list item.toggle'>\n      listItem: string\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'move.block down'>\n      at: BlockPath\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'move.block up'>\n      at: BlockPath\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'select.block'>\n      at: BlockPath\n      select?: 'start' | 'end'\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'select.previous block'>\n      select?: 'start' | 'end'\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'select.next block'>\n      select?: 'start' | 'end'\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'split'>\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'style.add'>\n      style: string\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'style.remove'>\n      style: string\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'style.toggle'>\n      style: string\n    }\n\nexport function isAbstractBehaviorEvent(\n  event: BehaviorEvent,\n): event is AbstractBehaviorEvent {\n  return (abstractBehaviorEventTypes as readonly string[]).includes(event.type)\n}\n\n/**************************************\n * Native events\n **************************************/\n\nconst nativeBehaviorEventTypes = [\n  'clipboard.copy',\n  'clipboard.cut',\n  'clipboard.paste',\n  'drag.dragstart',\n  'drag.drag',\n  'drag.dragend',\n  'drag.dragenter',\n  'drag.dragover',\n  'drag.dragleave',\n  'drag.drop',\n  'input.*',\n  'keyboard.keydown',\n  'keyboard.keyup',\n  'mouse.click',\n] as const\n\ntype NativeBehaviorEventType = (typeof nativeBehaviorEventTypes)[number]\n\ntype NativeBehaviorEventNamespace = ExtractNamespace<NativeBehaviorEventType>\n\nexport function isNativeBehaviorEvent(\n  event: BehaviorEvent,\n): event is NativeBehaviorEvent {\n  return (nativeBehaviorEventTypes as readonly string[]).includes(event.type)\n}\n\n/**\n * @beta\n */\nexport type NativeBehaviorEvent =\n  | ClipboardBehaviorEvent\n  | DragBehaviorEvent\n  | InputBehaviorEvent\n  | KeyboardBehaviorEvent\n  | MouseBehaviorEvent\n\ntype ClipboardBehaviorEvent =\n  | {\n      type: StrictExtract<NativeBehaviorEventType, 'clipboard.copy'>\n      originEvent: {\n        dataTransfer: DataTransfer\n      }\n      position: Pick<EventPosition, 'selection'>\n    }\n  | {\n      type: StrictExtract<NativeBehaviorEventType, 'clipboard.cut'>\n      originEvent: {\n        dataTransfer: DataTransfer\n      }\n      position: Pick<EventPosition, 'selection'>\n    }\n  | {\n      type: StrictExtract<NativeBehaviorEventType, 'clipboard.paste'>\n      originEvent: {\n        dataTransfer: DataTransfer\n      }\n      position: Pick<EventPosition, 'selection'>\n    }\n\ntype DragBehaviorEvent =\n  | {\n      type: StrictExtract<NativeBehaviorEventType, 'drag.dragstart'>\n      originEvent: {\n        clientX: number\n        clientY: number\n        dataTransfer: DataTransfer\n      }\n      position: Pick<EventPosition, 'selection'>\n    }\n  | {\n      type: StrictExtract<NativeBehaviorEventType, 'drag.drag'>\n      originEvent: {\n        dataTransfer: DataTransfer\n      }\n    }\n  | {\n      type: StrictExtract<NativeBehaviorEventType, 'drag.dragend'>\n      originEvent: {\n        dataTransfer: DataTransfer\n      }\n    }\n  | {\n      type: StrictExtract<NativeBehaviorEventType, 'drag.dragenter'>\n      originEvent: {\n        dataTransfer: DataTransfer\n      }\n      position: EventPosition\n    }\n  | {\n      type: StrictExtract<NativeBehaviorEventType, 'drag.dragover'>\n      originEvent: {\n        dataTransfer: DataTransfer\n      }\n      dragOrigin?: Pick<EventPosition, 'selection'>\n      position: EventPosition\n    }\n  | {\n      type: StrictExtract<NativeBehaviorEventType, 'drag.drop'>\n      originEvent: {\n        dataTransfer: DataTransfer\n      }\n      dragOrigin?: Pick<EventPosition, 'selection'>\n      position: EventPosition\n    }\n  | {\n      type: StrictExtract<NativeBehaviorEventType, 'drag.dragleave'>\n      originEvent: {\n        dataTransfer: DataTransfer\n      }\n    }\n\n/**\n * Used to represent native InputEvents that hold a DataTransfer object.\n *\n * These can either be one of:\n *\n * - insertFromPaste\n * - insertFromPasteAsQuotation\n * - insertFromDrop\n * - insertReplacementText\n * - insertFromYank\n */\nexport type InputBehaviorEvent = {\n  type: StrictExtract<NativeBehaviorEventType, 'input.*'>\n  originEvent: {\n    dataTransfer: DataTransfer\n  }\n}\n\nexport type KeyboardBehaviorEvent =\n  | {\n      type: StrictExtract<NativeBehaviorEventType, 'keyboard.keydown'>\n      originEvent: Pick<\n        KeyboardEvent,\n        'key' | 'code' | 'altKey' | 'ctrlKey' | 'metaKey' | 'shiftKey'\n      >\n    }\n  | {\n      type: StrictExtract<NativeBehaviorEventType, 'keyboard.keyup'>\n      originEvent: Pick<\n        KeyboardEvent,\n        'key' | 'code' | 'altKey' | 'ctrlKey' | 'metaKey' | 'shiftKey'\n      >\n    }\n\nexport type MouseBehaviorEvent = {\n  type: StrictExtract<NativeBehaviorEventType, 'mouse.click'>\n  position: EventPosition\n}\n\n/**************************************\n * Custom events\n **************************************/\n\ntype CustomBehaviorEventNamespace = 'custom'\n\ntype CustomBehaviorEventType<\n  TNamespace extends CustomBehaviorEventNamespace,\n  TType extends string = '',\n> = TType extends '' ? `${TNamespace}` : `${TNamespace}.${TType}`\n\n/**\n * @beta\n */\nexport type CustomBehaviorEvent<\n  TPayload extends Record<string, unknown> = Record<string, unknown>,\n  TType extends string = string,\n  TInternalType extends CustomBehaviorEventType<\n    'custom',\n    TType\n  > = CustomBehaviorEventType<'custom', TType>,\n> = {\n  type: TInternalType\n} & TPayload\n\nexport function isCustomBehaviorEvent(\n  event: BehaviorEvent,\n): event is CustomBehaviorEvent {\n  return event.type.startsWith('custom.')\n}\n\n/**************************************\n * Resolve behavior event\n **************************************/\n\nexport type ResolveBehaviorEvent<\n  TBehaviorEventType extends\n    | '*'\n    | `${BehaviorEventTypeNamespace}.*`\n    | BehaviorEvent['type'],\n  TPayload extends Record<string, unknown> = Record<string, unknown>,\n> = TBehaviorEventType extends '*'\n  ? BehaviorEvent\n  : TBehaviorEventType extends `${infer TNamespace}.*`\n    ? TNamespace extends BehaviorEventTypeNamespace\n      ? PickFromUnion<\n          BehaviorEvent,\n          'type',\n          NamespacedBehaviorEventType<TNamespace>\n        >\n      : never\n    : TBehaviorEventType extends `custom.${infer TType}`\n      ? CustomBehaviorEvent<TPayload, TType>\n      : TBehaviorEventType extends BehaviorEvent['type']\n        ? PickFromUnion<BehaviorEvent, 'type', TBehaviorEventType>\n        : never\n\ntype ExtractNamespace<TType extends string> =\n  TType extends `${infer Namespace}.${string}` ? Namespace : TType\n","import {createEditorDom} from '../editor/editor-dom'\nimport type {EditorSchema} from '../editor/editor-schema'\nimport type {EditorSnapshot} from '../editor/editor-snapshot'\nimport {withPerformingBehaviorOperation} from '../editor/with-performing-behavior-operation'\nimport {clearUndoStep, createUndoStep} from '../editor/with-undo-step'\nimport {withoutNormalizingConditional} from '../editor/without-normalizing-conditional'\nimport {debugWithName} from '../internal-utils/debug'\nimport {performOperation} from '../operations/behavior.operations'\nimport type {PortableTextSlateEditor} from '../types/editor'\nimport {abstractBehaviors} from './behavior.abstract'\nimport type {BehaviorAction} from './behavior.types.action'\nimport type {Behavior} from './behavior.types.behavior'\nimport {\n  isAbstractBehaviorEvent,\n  isCustomBehaviorEvent,\n  isNativeBehaviorEvent,\n  isSyntheticBehaviorEvent,\n  type BehaviorEvent,\n  type ExternalBehaviorEvent,\n} from './behavior.types.event'\n\nconst debug = debugWithName('behaviors:event')\n\nfunction eventCategory(event: BehaviorEvent) {\n  return isNativeBehaviorEvent(event)\n    ? 'native'\n    : isAbstractBehaviorEvent(event)\n      ? 'synthetic'\n      : isCustomBehaviorEvent(event)\n        ? 'custom'\n        : 'synthetic'\n}\n\nexport function performEvent({\n  mode,\n  behaviors,\n  remainingEventBehaviors,\n  event,\n  editor,\n  keyGenerator,\n  schema,\n  getSnapshot,\n  nativeEvent,\n  sendBack,\n}: {\n  mode: 'send' | 'raise' | 'execute' | 'forward'\n  behaviors: Array<Behavior>\n  remainingEventBehaviors: Array<Behavior>\n  event: BehaviorEvent\n  editor: PortableTextSlateEditor\n  keyGenerator: () => string\n  schema: EditorSchema\n  getSnapshot: () => EditorSnapshot\n  nativeEvent:\n    | {\n        preventDefault: () => void\n      }\n    | undefined\n  sendBack: (\n    event: {type: 'set drag ghost'; ghost: HTMLElement} | ExternalBehaviorEvent,\n  ) => void\n}) {\n  if (mode === 'send' && !isNativeBehaviorEvent(event)) {\n    createUndoStep(editor)\n  }\n\n  debug(`(${mode}:${eventCategory(event)})`, JSON.stringify(event, null, 2))\n\n  const eventBehaviors = [\n    ...remainingEventBehaviors,\n    ...abstractBehaviors,\n  ].filter((behavior) => {\n    // Catches all events\n    if (behavior.on === '*') {\n      return true\n    }\n\n    const [listenedNamespace] =\n      behavior.on.includes('*') && behavior.on.includes('.')\n        ? behavior.on.split('.')\n        : [undefined]\n    const [eventNamespace] = event.type.includes('.')\n      ? event.type.split('.')\n      : [undefined]\n\n    // Handles scenarios like a Behavior listening for `select.*` and the event\n    // `select.block` is fired.\n    if (\n      listenedNamespace !== undefined &&\n      eventNamespace !== undefined &&\n      listenedNamespace === eventNamespace\n    ) {\n      return true\n    }\n\n    // Handles scenarios like a Behavior listening for `select.*` and the event\n    // `select` is fired.\n    if (\n      listenedNamespace !== undefined &&\n      eventNamespace === undefined &&\n      listenedNamespace === event.type\n    ) {\n      return true\n    }\n\n    return behavior.on === event.type\n  })\n\n  if (eventBehaviors.length === 0 && isSyntheticBehaviorEvent(event)) {\n    nativeEvent?.preventDefault()\n\n    if (mode === 'send') {\n      clearUndoStep(editor)\n    }\n\n    withPerformingBehaviorOperation(editor, () => {\n      debug(`(execute:${eventCategory(event)})`, JSON.stringify(event, null, 2))\n\n      performOperation({\n        context: {\n          keyGenerator,\n          schema,\n        },\n        operation: {\n          ...event,\n          editor,\n        },\n      })\n    })\n\n    editor.onChange()\n\n    return\n  }\n\n  const guardSnapshot = getSnapshot()\n\n  let nativeEventPrevented = false\n  let defaultBehaviorOverwritten = false\n  let eventBehaviorIndex = -1\n\n  for (const eventBehavior of eventBehaviors) {\n    eventBehaviorIndex++\n\n    let shouldRun = false\n\n    try {\n      shouldRun =\n        eventBehavior.guard === undefined ||\n        eventBehavior.guard({\n          snapshot: guardSnapshot,\n          event,\n          dom: createEditorDom(sendBack, editor),\n        })\n    } catch (error) {\n      console.error(\n        new Error(\n          `Evaluating guard for \"${event.type}\" failed due to: ${error.message}`,\n        ),\n      )\n    }\n\n    if (!shouldRun) {\n      continue\n    }\n\n    // This Behavior now \"owns\" the event and we can consider the default\n    // action prevented\n    defaultBehaviorOverwritten = true\n\n    if (eventBehavior.actions.length === 0) {\n      nativeEventPrevented = true\n    }\n\n    let actionSetIndex = -1\n\n    for (const actionSet of eventBehavior.actions) {\n      actionSetIndex++\n\n      const actionsSnapshot = getSnapshot()\n\n      let actions: Array<BehaviorAction> = []\n\n      try {\n        actions = actionSet(\n          {\n            snapshot: actionsSnapshot,\n            event,\n            dom: createEditorDom(sendBack, editor),\n          },\n          shouldRun,\n        )\n      } catch (error) {\n        console.error(\n          new Error(\n            `Evaluating actions for \"${event.type}\" failed due to: ${error.message}`,\n          ),\n        )\n      }\n\n      if (actions.length === 0) {\n        continue\n      }\n\n      nativeEventPrevented =\n        actions.some(\n          (action) => action.type === 'raise' || action.type === 'execute',\n        ) || !actions.some((action) => action.type === 'forward')\n\n      let undoStepCreated = false\n\n      if (actionSetIndex > 0) {\n        // Since there are multiple action sets\n        createUndoStep(editor)\n\n        undoStepCreated = true\n      }\n\n      if (\n        !undoStepCreated &&\n        actions.some((action) => action.type === 'execute')\n      ) {\n        // Since at least one action is about to `execute` changes in the editor,\n        // we set up a new undo step.\n        // All actions performed recursively from now will be squashed into this\n        // undo step\n        createUndoStep(editor)\n\n        undoStepCreated = true\n      }\n\n      const actionTypes = actions.map((action) => action.type)\n      const uniqueActionTypes = new Set(actionTypes)\n\n      // The set of actions are all `raise` actions\n      const raiseGroup =\n        actionTypes.length > 1 &&\n        uniqueActionTypes.size === 1 &&\n        uniqueActionTypes.has('raise')\n\n      // The set of actions are all `execute` actions\n      const executeGroup =\n        actionTypes.length > 1 &&\n        uniqueActionTypes.size === 1 &&\n        uniqueActionTypes.has('execute')\n\n      withoutNormalizingConditional(\n        editor,\n        () => raiseGroup || executeGroup,\n        () => {\n          for (const action of actions) {\n            if (action.type === 'effect') {\n              try {\n                action.effect({\n                  send: sendBack,\n                })\n              } catch (error) {\n                console.error(\n                  new Error(\n                    `Executing effect as a result of \"${event.type}\" failed due to: ${error.message}`,\n                  ),\n                )\n              }\n\n              continue\n            }\n\n            if (action.type === 'forward') {\n              const remainingEventBehaviors = eventBehaviors.slice(\n                eventBehaviorIndex + 1,\n              )\n\n              performEvent({\n                mode: mode === 'execute' ? 'execute' : 'forward',\n                behaviors,\n                remainingEventBehaviors: remainingEventBehaviors,\n                event: action.event,\n                editor,\n                keyGenerator,\n                schema,\n                getSnapshot,\n                nativeEvent,\n                sendBack,\n              })\n\n              continue\n            }\n\n            if (action.type === 'raise') {\n              performEvent({\n                mode: mode === 'execute' ? 'execute' : 'raise',\n                behaviors,\n                remainingEventBehaviors:\n                  mode === 'execute' ? remainingEventBehaviors : behaviors,\n                event: action.event,\n                editor,\n                keyGenerator,\n                schema,\n                getSnapshot,\n                nativeEvent,\n                sendBack,\n              })\n\n              continue\n            }\n\n            performEvent({\n              mode: 'execute',\n              behaviors,\n              remainingEventBehaviors: [],\n              event: action.event,\n              editor,\n              keyGenerator,\n              schema,\n              getSnapshot,\n              nativeEvent: undefined,\n              sendBack,\n            })\n          }\n        },\n      )\n\n      if (undoStepCreated) {\n        clearUndoStep(editor)\n      }\n    }\n\n    break\n  }\n\n  if (!defaultBehaviorOverwritten && isSyntheticBehaviorEvent(event)) {\n    nativeEvent?.preventDefault()\n\n    if (mode === 'send') {\n      clearUndoStep(editor)\n    }\n\n    withPerformingBehaviorOperation(editor, () => {\n      debug(`(execute:${eventCategory(event)})`, JSON.stringify(event, null, 2))\n\n      performOperation({\n        context: {keyGenerator, schema},\n        operation: {\n          ...event,\n          editor,\n        },\n      })\n    })\n\n    editor.onChange()\n  } else if (nativeEventPrevented) {\n    nativeEvent?.preventDefault()\n  }\n}\n","import type {EditorPriority} from './priority.types'\n\nexport function sortByPriority<\n  T extends {\n    priority?: EditorPriority\n  },\n>(items: Array<T>): Array<T> {\n  if (items.length === 0) {\n    return []\n  }\n\n  // Separate items with and without priority\n  const itemsWithPriority = items.filter(\n    (item): item is T & {priority: EditorPriority} =>\n      item.priority !== undefined,\n  )\n  const itemsWithoutPriority = items.filter(\n    (item) => item.priority === undefined,\n  )\n\n  if (itemsWithPriority.length === 0) {\n    return items\n  }\n\n  // Create a map of items by their priority ID\n  const itemsByPriorityId = new Map(\n    itemsWithPriority.map((item) => [item.priority.id, item]),\n  )\n\n  // Build the dependency graph\n  const graph = new Map<string, Set<string>>()\n  const inDegree = new Map<string, number>()\n\n  // Helper function to ensure a node exists in the graph\n  function ensureNode(id: string) {\n    if (!graph.has(id)) {\n      graph.set(id, new Set())\n      inDegree.set(id, 0)\n    }\n  }\n\n  // Initialize graph and in-degree for all items\n  for (const item of itemsWithPriority) {\n    const id = item.priority.id\n    ensureNode(id)\n  }\n\n  // Helper function to add an edge to the graph\n  function addEdge(fromId: string, toId: string) {\n    if (!graph.has(fromId) || !graph.has(toId)) return\n    graph.get(fromId)?.add(toId)\n    inDegree.set(toId, (inDegree.get(toId) ?? 0) + 1)\n  }\n\n  // Add edges based on references\n  for (const item of itemsWithPriority) {\n    const id = item.priority.id\n    const visited = new Set<string>()\n    let ref = item.priority.reference\n\n    while (ref) {\n      const refId = ref.priority.id\n      ensureNode(refId)\n\n      // Check for cyclic reference\n      if (visited.has(refId)) {\n        throw new Error('Circular dependency detected in priorities')\n      }\n      visited.add(refId)\n\n      if (ref.importance === 'higher') {\n        // Reference must come before current item\n        addEdge(id, refId)\n      } else {\n        // Current item must come before reference\n        addEdge(refId, id)\n      }\n\n      ref = ref.priority.reference\n    }\n  }\n\n  const queue: string[] = []\n\n  // Find all nodes with no incoming edges\n  for (const [id, degree] of inDegree) {\n    if (degree === 0) {\n      queue.push(id)\n    }\n  }\n\n  const result: T[] = []\n\n  // Perform topological sort\n  while (queue.length > 0) {\n    const currentId = queue.shift()!\n    const currentItem = itemsByPriorityId.get(currentId)\n    if (currentItem) {\n      result.push(currentItem)\n    }\n\n    // Decrease in-degree of neighbors\n    for (const neighborId of graph.get(currentId) ?? []) {\n      const newDegree = (inDegree.get(neighborId) ?? 0) - 1\n      inDegree.set(neighborId, newDegree)\n      if (newDegree === 0) {\n        queue.push(neighborId)\n      }\n    }\n  }\n\n  // Add any remaining items that weren't processed\n  for (const item of itemsWithPriority) {\n    if (!result.includes(item)) {\n      result.push(item)\n    }\n  }\n\n  // Append items without priority at the end in their original order\n  return [...result, ...itemsWithoutPriority]\n}\n","import type {PortableTextBlock} from '@sanity/types'\nimport type {Converter} from '../converters/converter.types'\nimport {slateRangeToSelection} from '../internal-utils/slate-utils'\nimport type {EditorSelection, PortableTextSlateEditor} from '../types/editor'\nimport type {EditorSchema} from './editor-schema'\n\n/**\n * @public\n */\nexport type EditorContext = {\n  converters: Array<Converter>\n  keyGenerator: () => string\n  readOnly: boolean\n  schema: EditorSchema\n  selection: EditorSelection\n  value: Array<PortableTextBlock>\n}\n\n/**\n * @public\n */\nexport type EditorSnapshot = {\n  context: EditorContext\n  blockIndexMap: Map<string, number>\n  /**\n   * @beta\n   * Subject to change\n   */\n  decoratorState: Record<string, boolean | undefined>\n}\n\nexport function createEditorSnapshot({\n  converters,\n  editor,\n  keyGenerator,\n  readOnly,\n  schema,\n}: {\n  converters: Array<Converter>\n  editor: PortableTextSlateEditor\n  keyGenerator: () => string\n  readOnly: boolean\n  schema: EditorSchema\n}) {\n  const selection = editor.selection\n    ? slateRangeToSelection({\n        schema,\n        editor,\n        range: editor.selection,\n      })\n    : null\n\n  const context = {\n    converters,\n    keyGenerator,\n    readOnly,\n    schema,\n    selection,\n    value: editor.value,\n  } satisfies EditorContext\n\n  return {\n    blockIndexMap: editor.blockIndexMap,\n    context,\n    decoratorState: editor.decoratorState,\n  } satisfies EditorSnapshot\n}\n","import type {Patch} from '@portabletext/patches'\nimport type {PortableTextBlock} from '@sanity/types'\nimport {Transforms} from 'slate'\nimport {ReactEditor} from 'slate-react'\nimport {\n  assertEvent,\n  assign,\n  emit,\n  enqueueActions,\n  setup,\n  type ActorRefFrom,\n} from 'xstate'\nimport type {BehaviorConfig} from '../behaviors/behavior.config'\nimport {coreBehaviorsConfig} from '../behaviors/behavior.core'\nimport {performEvent} from '../behaviors/behavior.perform-event'\nimport type {\n  BehaviorEvent,\n  ExternalBehaviorEvent,\n} from '../behaviors/behavior.types.event'\nimport type {Converter} from '../converters/converter.types'\nimport {debugWithName} from '../internal-utils/debug'\nimport type {EventPosition} from '../internal-utils/event-position'\nimport {sortByPriority} from '../priority/priority.sort'\nimport type {NamespaceEvent, OmitFromUnion} from '../type-utils'\nimport type {\n  EditorSelection,\n  PortableTextMemberSchemaTypes,\n  PortableTextSlateEditor,\n} from '../types/editor'\nimport type {EditorSchema} from './editor-schema'\nimport {createEditorSnapshot} from './editor-snapshot'\nimport type {\n  EditorEmittedEvent,\n  MutationEvent,\n  PatchEvent,\n} from './relay-machine'\nimport {isNormalizingNode} from './with-normalizing-node'\n\nexport * from 'xstate/guards'\n\nconst debug = debugWithName('editor machine')\n\n/**\n * @public\n */\nexport type PatchesEvent = {\n  type: 'patches'\n  patches: Array<Patch>\n  snapshot: Array<PortableTextBlock> | undefined\n}\n\n/**\n * @public\n */\nexport type ExternalEditorEvent =\n  | {\n      type: 'update readOnly'\n      readOnly: boolean\n    }\n  | {\n      type: 'update maxBlocks'\n      maxBlocks: number | undefined\n    }\n  | PatchesEvent\n\ntype InternalPatchEvent = NamespaceEvent<PatchEvent, 'internal'> & {\n  operationId?: string\n  value: Array<PortableTextBlock>\n}\n\n/**\n * @internal\n */\nexport type EditorActor = ActorRefFrom<typeof editorMachine>\n\n/**\n * @internal\n */\nexport type InternalEditorEvent =\n  | ExternalEditorEvent\n  | {\n      type: 'add behavior'\n      behaviorConfig: BehaviorConfig\n    }\n  | {\n      type: 'remove behavior'\n      behaviorConfig: BehaviorConfig\n    }\n  | {\n      type: 'blur'\n      editor: PortableTextSlateEditor\n    }\n  | {\n      type: 'focus'\n      editor: PortableTextSlateEditor\n    }\n  | {\n      type: 'update selection'\n      selection: EditorSelection\n    }\n  | {\n      type: 'done syncing value'\n    }\n  | {\n      type: 'syncing value'\n    }\n  | {\n      type: 'behavior event'\n      behaviorEvent: BehaviorEvent\n      editor: PortableTextSlateEditor\n      nativeEvent?: {preventDefault: () => void}\n    }\n  | MutationEvent\n  | InternalPatchEvent\n  | {\n      type: 'set drag ghost'\n      ghost: HTMLElement\n    }\n  | {\n      type: 'dragstart'\n      ghost?: HTMLElement\n      origin: Pick<EventPosition, 'selection'>\n    }\n  | {type: 'dragend'}\n  | {type: 'drop'}\n  | {type: 'add slate editor'; editor: PortableTextSlateEditor}\n\n/**\n * @internal\n */\nexport type InternalEditorEmittedEvent =\n  | OmitFromUnion<EditorEmittedEvent, 'type', 'patch'>\n  | InternalPatchEvent\n  | PatchesEvent\n\nexport function rerouteExternalBehaviorEvent({\n  event,\n  slateEditor,\n}: {\n  event: ExternalBehaviorEvent\n  slateEditor: PortableTextSlateEditor\n}): InternalEditorEvent {\n  switch (event.type) {\n    case 'blur':\n      return {\n        type: 'blur',\n        editor: slateEditor,\n      }\n\n    case 'focus':\n      return {\n        type: 'focus',\n        editor: slateEditor,\n      }\n\n    case 'insert.block object':\n      return {\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'insert.block',\n          block: {\n            _type: event.blockObject.name,\n            ...(event.blockObject.value ?? {}),\n          },\n          placement: event.placement,\n        },\n        editor: slateEditor,\n      }\n\n    default:\n      return {\n        type: 'behavior event',\n        behaviorEvent: event,\n        editor: slateEditor,\n      }\n  }\n}\n\n/**\n * @internal\n */\nexport const editorMachine = setup({\n  types: {\n    context: {} as {\n      behaviors: Set<BehaviorConfig>\n      behaviorsSorted: boolean\n      converters: Set<Converter>\n      getLegacySchema: () => PortableTextMemberSchemaTypes\n      keyGenerator: () => string\n      pendingEvents: Array<InternalPatchEvent | MutationEvent>\n      pendingIncomingPatchesEvents: Array<PatchesEvent>\n      schema: EditorSchema\n      initialReadOnly: boolean\n      maxBlocks: number | undefined\n      selection: EditorSelection\n      initialValue: Array<PortableTextBlock> | undefined\n      internalDrag?: {\n        origin: Pick<EventPosition, 'selection'>\n      }\n      dragGhost?: HTMLElement\n      slateEditor?: PortableTextSlateEditor\n    },\n    events: {} as InternalEditorEvent,\n    emitted: {} as InternalEditorEmittedEvent,\n    input: {} as {\n      converters?: Array<Converter>\n      getLegacySchema: () => PortableTextMemberSchemaTypes\n      keyGenerator: () => string\n      maxBlocks?: number\n      readOnly?: boolean\n      schema: EditorSchema\n      initialValue?: Array<PortableTextBlock>\n    },\n    tags: {} as 'dragging internally',\n  },\n  actions: {\n    'add behavior to context': assign({\n      behaviors: ({context, event}) => {\n        assertEvent(event, 'add behavior')\n\n        return new Set([...context.behaviors, event.behaviorConfig])\n      },\n      behaviorsSorted: false,\n    }),\n    'remove behavior from context': assign({\n      behaviors: ({context, event}) => {\n        assertEvent(event, 'remove behavior')\n\n        context.behaviors.delete(event.behaviorConfig)\n\n        return new Set([...context.behaviors])\n      },\n    }),\n    'add slate editor to context': assign({\n      slateEditor: ({context, event}) => {\n        return event.type === 'add slate editor'\n          ? event.editor\n          : context.slateEditor\n      },\n    }),\n    'emit patch event': emit(({event}) => {\n      assertEvent(event, 'internal.patch')\n      return event\n    }),\n    'emit mutation event': emit(({event}) => {\n      assertEvent(event, 'mutation')\n      return event\n    }),\n    'emit read only': emit({type: 'read only'}),\n    'emit editable': emit({type: 'editable'}),\n    'defer event': assign({\n      pendingEvents: ({context, event}) => {\n        assertEvent(event, ['internal.patch', 'mutation'])\n        return [...context.pendingEvents, event]\n      },\n    }),\n    'emit pending events': enqueueActions(({context, enqueue}) => {\n      for (const event of context.pendingEvents) {\n        enqueue.emit(event)\n      }\n    }),\n    'emit ready': emit({type: 'ready'}),\n    'clear pending events': assign({\n      pendingEvents: [],\n    }),\n    'defer incoming patches': assign({\n      pendingIncomingPatchesEvents: ({context, event}) => {\n        return event.type === 'patches'\n          ? [...context.pendingIncomingPatchesEvents, event]\n          : context.pendingIncomingPatchesEvents\n      },\n    }),\n    'emit pending incoming patches': enqueueActions(({context, enqueue}) => {\n      for (const event of context.pendingIncomingPatchesEvents) {\n        enqueue.emit(event)\n      }\n    }),\n    'clear pending incoming patches': assign({\n      pendingIncomingPatchesEvents: [],\n    }),\n    'handle blur': ({event}) => {\n      assertEvent(event, 'blur')\n\n      try {\n        ReactEditor.blur(event.editor)\n      } catch (error) {\n        console.error(new Error(`Failed to blur editor: ${error.message}`))\n      }\n    },\n    'handle focus': ({context}) => {\n      if (!context.slateEditor) {\n        console.error('No Slate editor found to focus')\n        return\n      }\n\n      try {\n        const currentSelection = context.slateEditor.selection\n        ReactEditor.focus(context.slateEditor)\n        if (currentSelection) {\n          Transforms.select(context.slateEditor, currentSelection)\n        }\n      } catch (error) {\n        console.error(new Error(`Failed to focus editor: ${error.message}`))\n      }\n    },\n    'handle behavior event': ({context, event, self}) => {\n      assertEvent(event, ['behavior event'])\n\n      try {\n        const behaviors = [...context.behaviors.values()].map(\n          (config) => config.behavior,\n        )\n\n        performEvent({\n          mode: 'send',\n          behaviors,\n          remainingEventBehaviors: behaviors,\n          event: event.behaviorEvent,\n          editor: event.editor,\n          keyGenerator: context.keyGenerator,\n          schema: context.schema,\n          getSnapshot: () =>\n            createEditorSnapshot({\n              converters: [...context.converters],\n              editor: event.editor,\n              keyGenerator: context.keyGenerator,\n              readOnly: self.getSnapshot().matches({'edit mode': 'read only'}),\n              schema: context.schema,\n            }),\n          nativeEvent: event.nativeEvent,\n          sendBack: (eventSentBack) => {\n            if (eventSentBack.type === 'set drag ghost') {\n              self.send(eventSentBack)\n              return\n            }\n\n            self.send(\n              rerouteExternalBehaviorEvent({\n                event: eventSentBack,\n                slateEditor: event.editor,\n              }),\n            )\n          },\n        })\n      } catch (error) {\n        console.error(\n          new Error(\n            `Raising \"${event.behaviorEvent.type}\" failed due to: ${error.message}`,\n          ),\n        )\n      }\n    },\n    'sort behaviors': assign({\n      behaviors: ({context}) =>\n        !context.behaviorsSorted\n          ? new Set(sortByPriority([...context.behaviors.values()]))\n          : context.behaviors,\n      behaviorsSorted: true,\n    }),\n  },\n  guards: {\n    'slate is busy': ({context}) => {\n      if (!context.slateEditor) {\n        return false\n      }\n\n      return context.slateEditor.operations.length > 0\n    },\n    'slate is normalizing node': ({context}) => {\n      if (!context.slateEditor) {\n        return false\n      }\n\n      return isNormalizingNode(context.slateEditor)\n    },\n  },\n}).createMachine({\n  id: 'editor',\n  context: ({input}) => ({\n    behaviors: new Set(coreBehaviorsConfig),\n    behaviorsSorted: false,\n    converters: new Set(input.converters ?? []),\n    getLegacySchema: input.getLegacySchema,\n    keyGenerator: input.keyGenerator,\n    pendingEvents: [],\n    pendingIncomingPatchesEvents: [],\n    schema: input.schema,\n    selection: null,\n    initialReadOnly: input.readOnly ?? false,\n    maxBlocks: input.maxBlocks,\n    initialValue: input.initialValue,\n  }),\n  on: {\n    'add behavior': {actions: 'add behavior to context'},\n    'remove behavior': {actions: 'remove behavior from context'},\n    'update maxBlocks': {\n      actions: assign({maxBlocks: ({event}) => event.maxBlocks}),\n    },\n    'add slate editor': {actions: 'add slate editor to context'},\n    'update selection': {\n      actions: [\n        assign({selection: ({event}) => event.selection}),\n        emit(({event}) => ({...event, type: 'selection'})),\n      ],\n    },\n    'set drag ghost': {\n      actions: assign({dragGhost: ({event}) => event.ghost}),\n    },\n  },\n  type: 'parallel',\n  states: {\n    'edit mode': {\n      initial: 'read only',\n      states: {\n        'read only': {\n          initial: 'determine initial edit mode',\n          on: {\n            'behavior event': {\n              actions: ['sort behaviors', 'handle behavior event'],\n              guard: ({event}) =>\n                event.behaviorEvent.type === 'clipboard.copy' ||\n                event.behaviorEvent.type === 'mouse.click' ||\n                event.behaviorEvent.type === 'serialize' ||\n                event.behaviorEvent.type === 'serialization.failure' ||\n                event.behaviorEvent.type === 'serialization.success' ||\n                event.behaviorEvent.type === 'select',\n            },\n          },\n          states: {\n            'determine initial edit mode': {\n              entry: [\n                () => {\n                  debug(\n                    'entry: edit mode->read only->determine initial edit mode',\n                  )\n                },\n              ],\n              exit: [\n                () => {\n                  debug(\n                    'exit: edit mode->read only->determine initial edit mode',\n                  )\n                },\n              ],\n              on: {\n                'done syncing value': [\n                  {\n                    target: '#editor.edit mode.read only.read only',\n                    guard: ({context}) => context.initialReadOnly,\n                  },\n                  {\n                    target: '#editor.edit mode.editable',\n                  },\n                ],\n              },\n            },\n            'read only': {\n              entry: [\n                () => {\n                  debug('entry: edit mode->read only->read only')\n                },\n              ],\n              exit: [\n                () => {\n                  debug('exit: edit mode->read only->read only')\n                },\n              ],\n              on: {\n                'update readOnly': {\n                  guard: ({event}) => !event.readOnly,\n                  target: '#editor.edit mode.editable',\n                  actions: ['emit editable'],\n                },\n              },\n            },\n          },\n        },\n        'editable': {\n          on: {\n            'update readOnly': {\n              guard: ({event}) => event.readOnly,\n              target: '#editor.edit mode.read only.read only',\n              actions: ['emit read only'],\n            },\n            'behavior event': {\n              actions: ['sort behaviors', 'handle behavior event'],\n            },\n            'blur': {\n              actions: 'handle blur',\n            },\n            'focus': {\n              target: '.focusing',\n              actions: [assign({slateEditor: ({event}) => event.editor})],\n            },\n          },\n          initial: 'idle',\n          states: {\n            'idle': {\n              entry: [\n                () => {\n                  debug('entry: edit mode->editable->idle')\n                },\n              ],\n              exit: [\n                () => {\n                  debug('exit: edit mode->editable-idle')\n                },\n              ],\n              on: {\n                dragstart: {\n                  actions: [\n                    assign({\n                      internalDrag: ({event}) => ({\n                        origin: event.origin,\n                      }),\n                    }),\n                  ],\n                  target: 'dragging internally',\n                },\n              },\n            },\n            'focusing': {\n              initial: 'checking if busy',\n              states: {\n                'checking if busy': {\n                  entry: [\n                    () => {\n                      debug(\n                        'entry: edit mode->editable->focusing->checking if busy',\n                      )\n                    },\n                  ],\n                  exit: [\n                    () => {\n                      debug(\n                        'exit: edit mode->editable->focusing->checking if busy',\n                      )\n                    },\n                  ],\n                  always: [\n                    {\n                      guard: 'slate is busy',\n                      target: 'busy',\n                    },\n                    {\n                      target: '#editor.edit mode.editable.idle',\n                      actions: ['handle focus'],\n                    },\n                  ],\n                },\n                'busy': {\n                  entry: [\n                    () => {\n                      debug('entry: edit mode->editable->focusing-busy')\n                    },\n                  ],\n                  exit: [\n                    () => {\n                      debug('exit: edit mode->editable->focusing->busy')\n                    },\n                  ],\n                  after: {\n                    10: {\n                      target: 'checking if busy',\n                    },\n                  },\n                },\n              },\n            },\n            'dragging internally': {\n              entry: [\n                () => {\n                  debug('entry: edit mode->editable->dragging internally')\n                },\n              ],\n              exit: [\n                () => {\n                  debug('exit: edit mode->editable->dragging internally')\n                },\n                ({context}) => {\n                  if (context.dragGhost) {\n                    try {\n                      context.dragGhost.parentNode?.removeChild(\n                        context.dragGhost,\n                      )\n                    } catch (error) {\n                      console.error(\n                        new Error(\n                          `Removing the drag ghost failed due to: ${error.message}`,\n                        ),\n                      )\n                    }\n                  }\n                },\n                assign({dragGhost: undefined}),\n                assign({internalDrag: undefined}),\n              ],\n              tags: ['dragging internally'],\n              on: {\n                dragend: {target: 'idle'},\n                drop: {target: 'idle'},\n              },\n            },\n          },\n        },\n      },\n    },\n    'setup': {\n      initial: 'setting up',\n      states: {\n        'setting up': {\n          entry: [\n            () => {\n              debug('entry: setup->setting up')\n            },\n          ],\n          exit: [\n            () => {\n              debug('exit: setup->setting up')\n            },\n            'emit ready',\n            'emit pending incoming patches',\n            'clear pending incoming patches',\n          ],\n          on: {\n            'internal.patch': {\n              actions: 'defer event',\n            },\n            'mutation': {\n              actions: 'defer event',\n            },\n            'done syncing value': {\n              target: 'set up',\n            },\n            'patches': {\n              actions: ['defer incoming patches'],\n            },\n          },\n        },\n        'set up': {\n          type: 'parallel',\n          states: {\n            'value sync': {\n              initial: 'idle',\n              states: {\n                'idle': {\n                  entry: [\n                    () => {\n                      debug('entry: setup->set up->value sync->idle')\n                    },\n                  ],\n                  exit: [\n                    () => {\n                      debug('exit: setup->set up->value sync->idle')\n                    },\n                  ],\n                  on: {\n                    'patches': {\n                      actions: [emit(({event}) => event)],\n                    },\n                    'syncing value': {\n                      target: 'syncing value',\n                    },\n                  },\n                },\n                'syncing value': {\n                  entry: [\n                    () => {\n                      debug('entry: setup->set up->value sync->syncing value')\n                    },\n                  ],\n                  exit: [\n                    () => {\n                      debug('exit: setup->set up->value sync->syncing value')\n                    },\n                    'emit pending incoming patches',\n                    'clear pending incoming patches',\n                  ],\n                  on: {\n                    'patches': {\n                      actions: ['defer incoming patches'],\n                    },\n                    'done syncing value': {\n                      target: 'idle',\n                    },\n                  },\n                },\n              },\n            },\n            'writing': {\n              initial: 'pristine',\n              states: {\n                pristine: {\n                  initial: 'idle',\n                  states: {\n                    idle: {\n                      entry: [\n                        () => {\n                          debug('entry: setup->set up->writing->pristine->idle')\n                        },\n                      ],\n                      exit: [\n                        () => {\n                          debug('exit: setup->set up->writing->pristine->idle')\n                        },\n                      ],\n                      on: {\n                        'internal.patch': [\n                          {\n                            guard: 'slate is normalizing node',\n                            actions: 'defer event',\n                          },\n                          {\n                            actions: 'defer event',\n                            target: '#editor.setup.set up.writing.dirty',\n                          },\n                        ],\n                        'mutation': [\n                          {\n                            guard: 'slate is normalizing node',\n                            actions: 'defer event',\n                          },\n                          {\n                            actions: 'defer event',\n                            target: '#editor.setup.set up.writing.dirty',\n                          },\n                        ],\n                      },\n                    },\n                  },\n                },\n                dirty: {\n                  entry: [\n                    () => {\n                      debug('entry: setup->set up->writing->dirty')\n                    },\n                    'emit pending events',\n                    'clear pending events',\n                  ],\n                  exit: [\n                    () => {\n                      debug('exit: setup->set up->writing->dirty')\n                    },\n                  ],\n                  on: {\n                    'internal.patch': {\n                      actions: 'emit patch event',\n                    },\n                    'mutation': {\n                      actions: 'emit mutation event',\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n})\n","import type {Patch} from '@portabletext/patches'\nimport type {PortableTextBlock} from '@sanity/types'\nimport {Editor} from 'slate'\nimport type {ActorRefFrom} from 'xstate'\nimport {\n  and,\n  assertEvent,\n  assign,\n  emit,\n  enqueueActions,\n  fromCallback,\n  not,\n  raise,\n  setup,\n  type AnyEventObject,\n} from 'xstate'\nimport {debugWithName} from '../internal-utils/debug'\nimport type {PortableTextSlateEditor} from '../types/editor'\nimport type {EditorSchema} from './editor-schema'\nimport type {PatchEvent} from './relay-machine'\n\nconst debug = debugWithName('mutation-machine')\n\nexport type MutationActor = ActorRefFrom<typeof mutationMachine>\n\n/**\n * Makes sure editor mutation events are debounced\n */\nexport const mutationMachine = setup({\n  types: {\n    context: {} as {\n      pendingMutations: Array<{\n        operationId?: string\n        value: Array<PortableTextBlock> | undefined\n        patches: Array<Patch>\n      }>\n      pendingPatchEvents: Array<PatchEvent>\n      readOnly: boolean\n      schema: EditorSchema\n      slateEditor: PortableTextSlateEditor\n    },\n    events: {} as\n      | {\n          type: 'emit changes'\n        }\n      | {\n          type: 'patch'\n          patch: Patch\n          operationId?: string\n          value: Array<PortableTextBlock>\n        }\n      | {\n          type: 'typing'\n        }\n      | {\n          type: 'not typing'\n        }\n      | {\n          type: 'update readOnly'\n          readOnly: boolean\n        },\n    input: {} as {\n      readOnly: boolean\n      schema: EditorSchema\n      slateEditor: PortableTextSlateEditor\n    },\n    emitted: {} as\n      | {\n          type: 'has pending mutations'\n        }\n      | {\n          type: 'mutation'\n          patches: Array<Patch>\n          snapshot: Array<PortableTextBlock> | undefined\n        }\n      | PatchEvent,\n  },\n  actions: {\n    'assign readOnly': assign({\n      readOnly: ({context, event}) =>\n        event.type === 'update readOnly' ? event.readOnly : context.readOnly,\n    }),\n    'emit patch': emit(({event}) => {\n      assertEvent(event, 'patch')\n      return {type: 'patch' as const, patch: event.patch}\n    }),\n    'emit has pending mutations': emit({type: 'has pending mutations'}),\n    'emit mutations': enqueueActions(({context, enqueue}) => {\n      for (const bulk of context.pendingMutations) {\n        enqueue.emit({\n          type: 'mutation',\n          patches: bulk.patches,\n          snapshot: bulk.value,\n        })\n      }\n    }),\n    'clear pending mutations': assign({\n      pendingMutations: [],\n    }),\n    'defer mutation': assign({\n      pendingMutations: ({context, event}) => {\n        assertEvent(event, 'patch')\n\n        if (context.pendingMutations.length === 0) {\n          return [\n            {\n              operationId: event.operationId,\n              value: event.value,\n              patches: [event.patch],\n            },\n          ]\n        }\n\n        const lastBulk = context.pendingMutations.at(-1)\n\n        if (lastBulk && lastBulk.operationId === event.operationId) {\n          return context.pendingMutations.slice(0, -1).concat({\n            value: event.value,\n            operationId: lastBulk.operationId,\n            patches: [...lastBulk.patches, event.patch],\n          })\n        }\n\n        return context.pendingMutations.concat({\n          value: event.value,\n          operationId: event.operationId,\n          patches: [event.patch],\n        })\n      },\n    }),\n    'clear pending patch events': assign({\n      pendingPatchEvents: [],\n    }),\n    'defer patch': assign({\n      pendingPatchEvents: ({context, event}) =>\n        event.type === 'patch'\n          ? [...context.pendingPatchEvents, event]\n          : context.pendingPatchEvents,\n    }),\n    'emit pending patch events': enqueueActions(({context, enqueue}) => {\n      for (const event of context.pendingPatchEvents) {\n        enqueue.emit(event)\n      }\n    }),\n  },\n  actors: {\n    'type listener': fromCallback<\n      AnyEventObject,\n      {slateEditor: PortableTextSlateEditor},\n      {type: 'typing'} | {type: 'not typing'}\n    >(({input, sendBack}) => {\n      const originalApply = input.slateEditor.apply\n\n      input.slateEditor.apply = (op) => {\n        if (op.type === 'insert_text' || op.type === 'remove_text') {\n          sendBack({type: 'typing'})\n        } else {\n          sendBack({type: 'not typing'})\n        }\n        originalApply(op)\n      }\n\n      return () => {\n        input.slateEditor.apply = originalApply\n      }\n    }),\n    'mutation interval': fromCallback(({sendBack}) => {\n      const interval = setInterval(\n        () => {\n          sendBack({type: 'emit changes'})\n        },\n        process.env.NODE_ENV === 'test' ? 250 : 1000,\n      )\n\n      return () => {\n        clearInterval(interval)\n      }\n    }),\n  },\n  guards: {\n    'is read-only': ({context}) => context.readOnly,\n    'slate is normalizing': ({context}) =>\n      Editor.isNormalizing(context.slateEditor),\n  },\n  delays: {\n    'type debounce': 250,\n  },\n}).createMachine({\n  id: 'mutation',\n  context: ({input}) => ({\n    pendingMutations: [],\n    pendingPatchEvents: [],\n    readOnly: input.readOnly,\n    schema: input.schema,\n    slateEditor: input.slateEditor,\n  }),\n  on: {\n    'update readOnly': {\n      actions: ['assign readOnly'],\n    },\n  },\n  type: 'parallel',\n  states: {\n    typing: {\n      initial: 'idle',\n      invoke: {\n        src: 'type listener',\n        input: ({context}) => ({slateEditor: context.slateEditor}),\n      },\n      states: {\n        idle: {\n          entry: [\n            () => {\n              debug('entry: typing->idle')\n            },\n          ],\n          exit: [\n            () => {\n              debug('exit: typing->idle')\n              debug('entry: typing->typing')\n            },\n          ],\n          on: {\n            typing: {\n              target: 'typing',\n            },\n          },\n        },\n        typing: {\n          after: {\n            'type debounce': {\n              target: 'idle',\n              actions: [\n                raise({type: 'emit changes'}),\n                () => {\n                  debug('exit: typing->typing')\n                },\n              ],\n            },\n          },\n          on: {\n            'not typing': {\n              target: 'idle',\n              actions: [raise({type: 'emit changes'})],\n            },\n            'typing': {\n              target: 'typing',\n              reenter: true,\n            },\n          },\n        },\n      },\n    },\n    mutations: {\n      initial: 'idle',\n      states: {\n        'idle': {\n          entry: [\n            () => {\n              debug('entry: mutations->idle')\n            },\n          ],\n          exit: [\n            () => {\n              debug('exit: mutations->idle')\n            },\n          ],\n          on: {\n            patch: [\n              {\n                guard: 'is read-only',\n                actions: ['defer patch', 'defer mutation'],\n                target: 'has pending mutations',\n              },\n              {\n                actions: ['emit patch', 'defer mutation'],\n                target: 'has pending mutations',\n              },\n            ],\n          },\n        },\n        'has pending mutations': {\n          entry: [\n            () => {\n              debug('entry: mutations->has pending mutations')\n            },\n            'emit has pending mutations',\n          ],\n          exit: [\n            () => {\n              debug('exit: mutations->has pending mutations')\n            },\n          ],\n          invoke: {\n            src: 'mutation interval',\n          },\n          on: {\n            'emit changes': {\n              guard: and([not('is read-only'), 'slate is normalizing']),\n              target: 'idle',\n              actions: [\n                'emit pending patch events',\n                'clear pending patch events',\n                'emit mutations',\n                'clear pending mutations',\n              ],\n            },\n            'patch': [\n              {\n                guard: 'is read-only',\n                actions: ['defer patch', 'defer mutation'],\n              },\n              {\n                actions: ['emit patch', 'defer mutation'],\n              },\n            ],\n          },\n        },\n      },\n    },\n  },\n})\n","import {isTextBlock} from '@portabletext/schema'\nimport type {\n  Path,\n  PortableTextBlock,\n  PortableTextChild,\n  PortableTextObject,\n  PortableTextTextBlock,\n} from '@sanity/types'\nimport {\n  Editor,\n  Node,\n  Range,\n  Element as SlateElement,\n  Text,\n  Transforms,\n} from 'slate'\nimport type {DOMNode} from 'slate-dom'\nimport {ReactEditor} from 'slate-react'\nimport {buildIndexMaps} from '../../internal-utils/build-index-maps'\nimport {createPlaceholderBlock} from '../../internal-utils/create-placeholder-block'\nimport {debugWithName} from '../../internal-utils/debug'\nimport {\n  isListItemActive,\n  isStyleActive,\n  slateRangeToSelection,\n} from '../../internal-utils/slate-utils'\nimport {toSlateRange} from '../../internal-utils/to-slate-range'\nimport {fromSlateValue, toSlateValue} from '../../internal-utils/values'\nimport {getActiveAnnotationsMarks} from '../../selectors/selector.get-active-annotation-marks'\nimport {getActiveDecorators} from '../../selectors/selector.get-active-decorators'\nimport {getFocusBlock} from '../../selectors/selector.get-focus-block'\nimport {getFocusSpan} from '../../selectors/selector.get-focus-span'\nimport {getSelectedValue} from '../../selectors/selector.get-selected-value'\nimport {isActiveAnnotation} from '../../selectors/selector.is-active-annotation'\nimport type {\n  EditableAPI,\n  EditableAPIDeleteOptions,\n  EditorSelection,\n  PortableTextSlateEditor,\n} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\nimport {getEditorSnapshot} from '../editor-selector'\nimport {KEY_TO_VALUE_ELEMENT, SLATE_TO_PORTABLE_TEXT_RANGE} from '../weakMaps'\n\nconst debug = debugWithName('API:editable')\n\nexport function createEditableAPI(\n  editor: PortableTextSlateEditor,\n  editorActor: EditorActor,\n) {\n  const types = editorActor.getSnapshot().context.schema\n\n  const editableApi: EditableAPI = {\n    focus: (): void => {\n      editorActor.send({\n        type: 'focus',\n        editor,\n      })\n    },\n    blur: (): void => {\n      editorActor.send({\n        type: 'blur',\n        editor,\n      })\n    },\n    toggleMark: (mark: string): void => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'decorator.toggle',\n          decorator: mark,\n        },\n        editor,\n      })\n    },\n    toggleList: (listItem: string): void => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'list item.toggle',\n          listItem,\n        },\n        editor,\n      })\n    },\n    toggleBlockStyle: (style: string): void => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'style.toggle',\n          style,\n        },\n        editor,\n      })\n    },\n    isMarkActive: (mark: string): boolean => {\n      const snapshot = getEditorSnapshot({\n        editorActorSnapshot: editorActor.getSnapshot(),\n        slateEditorInstance: editor,\n      })\n\n      const activeDecorators = getActiveDecorators(snapshot)\n\n      return activeDecorators.includes(mark)\n    },\n    marks: (): string[] => {\n      const snapshot = getEditorSnapshot({\n        editorActorSnapshot: editorActor.getSnapshot(),\n        slateEditorInstance: editor,\n      })\n\n      const activeAnnotations = getActiveAnnotationsMarks(snapshot)\n      const activeDecorators = getActiveDecorators(snapshot)\n\n      return [...activeAnnotations, ...activeDecorators]\n    },\n    undo: (): void => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'history.undo',\n        },\n        editor,\n      })\n    },\n    redo: (): void => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'history.redo',\n        },\n        editor,\n      })\n    },\n    select: (selection: EditorSelection): void => {\n      const slateSelection = toSlateRange({\n        context: {\n          schema: editorActor.getSnapshot().context.schema,\n          value: editor.value,\n          selection,\n        },\n        blockIndexMap: editor.blockIndexMap,\n      })\n\n      if (slateSelection) {\n        Transforms.select(editor, slateSelection)\n      } else {\n        Transforms.deselect(editor)\n      }\n\n      editor.onChange()\n    },\n    focusBlock: (): PortableTextBlock | undefined => {\n      if (editor.selection) {\n        const block = Node.descendant(\n          editor,\n          editor.selection.focus.path.slice(0, 1),\n        )\n        if (block) {\n          return fromSlateValue(\n            [block],\n            types.block.name,\n            KEY_TO_VALUE_ELEMENT.get(editor),\n          )[0]\n        }\n      }\n      return undefined\n    },\n    focusChild: (): PortableTextChild | undefined => {\n      if (editor.selection) {\n        const block = Node.descendant(\n          editor,\n          editor.selection.focus.path.slice(0, 1),\n        )\n        if (block && editor.isTextBlock(block)) {\n          const ptBlock = fromSlateValue(\n            [block],\n            types.block.name,\n            KEY_TO_VALUE_ELEMENT.get(editor),\n          )[0] as PortableTextTextBlock\n          return ptBlock.children[editor.selection.focus.path[1]]\n        }\n      }\n      return undefined\n    },\n    insertChild: <TSchemaType extends {name: string}>(\n      type: TSchemaType,\n      value?: {[prop: string]: any},\n    ): Path => {\n      if (type.name !== types.span.name) {\n        editorActor.send({\n          type: 'behavior event',\n          behaviorEvent: {\n            type: 'insert.inline object',\n            inlineObject: {\n              name: type.name,\n              value,\n            },\n          },\n          editor,\n        })\n\n        return editor.selection\n          ? (slateRangeToSelection({\n              schema: editorActor.getSnapshot().context.schema,\n              editor,\n              range: editor.selection,\n            })?.focus.path ?? [])\n          : []\n      }\n\n      if (!editor.selection) {\n        throw new Error('The editor has no selection')\n      }\n      const [focusBlock] = Array.from(\n        Editor.nodes(editor, {\n          at: editor.selection.focus.path.slice(0, 1),\n          match: (n) => n._type === types.block.name,\n        }),\n      )[0] || [undefined]\n      if (!focusBlock) {\n        throw new Error('No focused text block')\n      }\n      if (\n        type.name !== types.span.name &&\n        !types.inlineObjects.some((t) => t.name === type.name)\n      ) {\n        throw new Error(\n          'This type cannot be inserted as a child to a text block',\n        )\n      }\n      const block = toSlateValue(\n        [\n          {\n            _key: editorActor.getSnapshot().context.keyGenerator(),\n            _type: types.block.name,\n            children: [\n              {\n                _key: editorActor.getSnapshot().context.keyGenerator(),\n                _type: type.name,\n                ...(value ? value : {}),\n              },\n            ],\n          },\n        ],\n        {schemaTypes: editorActor.getSnapshot().context.schema},\n      )[0] as unknown as SlateElement\n      const child = block.children[0]\n      const focusChildPath = editor.selection.focus.path.slice(0, 2)\n      const isSpanNode = child._type === types.span.name\n      const focusNode = Node.get(editor, focusChildPath)\n\n      // If we are inserting a span, and currently have focus on an inline object,\n      // move the selection to the next span (guaranteed by normalizing rules) before inserting it.\n      if (isSpanNode && focusNode._type !== types.span.name) {\n        debug(\n          'Inserting span child next to inline object child, moving selection + 1',\n        )\n        editor.move({distance: 1, unit: 'character'})\n      }\n\n      Transforms.insertNodes(editor, child, {\n        select: true,\n        at: editor.selection,\n      })\n      editor.onChange()\n\n      return editor.selection\n        ? (slateRangeToSelection({\n            schema: editorActor.getSnapshot().context.schema,\n            editor,\n            range: editor.selection,\n          })?.focus.path ?? [])\n        : []\n    },\n    insertBlock: <TSchemaType extends {name: string}>(\n      type: TSchemaType,\n      value?: {[prop: string]: any},\n    ): Path => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'insert.block',\n          block: {\n            _type: type.name,\n            ...(value ? value : {}),\n          },\n          placement: 'auto',\n        },\n        editor,\n      })\n\n      return editor.selection\n        ? (slateRangeToSelection({\n            schema: editorActor.getSnapshot().context.schema,\n            editor,\n            range: editor.selection,\n          })?.focus.path ?? [])\n        : []\n    },\n    hasBlockStyle: (style: string): boolean => {\n      try {\n        return isStyleActive({editor, style})\n      } catch {\n        // This is fine.\n        return false\n      }\n    },\n    hasListStyle: (listItem: string): boolean => {\n      try {\n        return isListItemActive({editor, listItem})\n      } catch {\n        // This is fine.\n        return false\n      }\n    },\n    isVoid: (element: PortableTextBlock | PortableTextChild) => {\n      return ![types.block.name, types.span.name].includes(element._type)\n    },\n    findByPath: (\n      path: Path,\n    ): [\n      PortableTextBlock | PortableTextChild | undefined,\n      Path | undefined,\n    ] => {\n      const slatePath = toSlateRange({\n        context: {\n          schema: editorActor.getSnapshot().context.schema,\n          value: editor.value,\n          selection: {focus: {path, offset: 0}, anchor: {path, offset: 0}},\n        },\n        blockIndexMap: editor.blockIndexMap,\n      })\n\n      if (slatePath) {\n        const [block, blockPath] = Editor.node(\n          editor,\n          slatePath.focus.path.slice(0, 1),\n        )\n        if (block && blockPath && typeof block._key === 'string') {\n          if (path.length === 1 && slatePath.focus.path.length === 1) {\n            return [\n              fromSlateValue([block], types.block.name)[0],\n              [{_key: block._key}],\n            ]\n          }\n          const ptBlock = fromSlateValue(\n            [block],\n            types.block.name,\n            KEY_TO_VALUE_ELEMENT.get(editor),\n          )[0]\n          if (editor.isTextBlock(ptBlock)) {\n            const ptChild = ptBlock.children[slatePath.focus.path[1]]\n            if (ptChild) {\n              return [\n                ptChild,\n                [{_key: block._key}, 'children', {_key: ptChild._key}],\n              ]\n            }\n          }\n        }\n      }\n      return [undefined, undefined]\n    },\n    findDOMNode: (\n      element: PortableTextBlock | PortableTextChild,\n    ): DOMNode | undefined => {\n      let node: DOMNode | undefined\n      try {\n        const [item] = Array.from(\n          Editor.nodes(editor, {\n            at: [],\n            match: (n) => n._key === element._key,\n          }) || [],\n        )[0] || [undefined]\n        node = ReactEditor.toDOMNode(editor, item)\n      } catch {\n        // Nothing\n      }\n      return node\n    },\n    activeAnnotations: (): PortableTextObject[] => {\n      if (!editor.selection || editor.selection.focus.path.length < 2) {\n        return []\n      }\n      try {\n        const activeAnnotations: PortableTextObject[] = []\n        const spans = Editor.nodes(editor, {\n          at: editor.selection,\n          match: (node) =>\n            Text.isText(node) &&\n            node.marks !== undefined &&\n            Array.isArray(node.marks) &&\n            node.marks.length > 0,\n        })\n        for (const [span, path] of spans) {\n          const [block] = Editor.node(editor, path, {depth: 1})\n          if (editor.isTextBlock(block)) {\n            block.markDefs?.forEach((def) => {\n              if (\n                Text.isText(span) &&\n                span.marks &&\n                Array.isArray(span.marks) &&\n                span.marks.includes(def._key)\n              ) {\n                activeAnnotations.push(def)\n              }\n            })\n          }\n        }\n        return activeAnnotations\n      } catch {\n        return []\n      }\n    },\n    isAnnotationActive: (\n      annotationType: PortableTextObject['_type'],\n    ): boolean => {\n      const snapshot = getEditorSnapshot({\n        editorActorSnapshot: editorActor.getSnapshot(),\n        slateEditorInstance: editor,\n      })\n\n      return isActiveAnnotation(annotationType)(snapshot)\n    },\n    addAnnotation: (type, value) => {\n      const snapshotBefore = getEditorSnapshot({\n        editorActorSnapshot: editorActor.getSnapshot(),\n        slateEditorInstance: editor,\n      })\n      const selectedValueBefore = getSelectedValue(snapshotBefore)\n      const focusSpanBefore = getFocusSpan(snapshotBefore)\n      const markDefsBefore = selectedValueBefore.flatMap((block) => {\n        if (isTextBlock(snapshotBefore.context, block)) {\n          return block.markDefs ?? []\n        }\n\n        return []\n      })\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'annotation.add',\n          annotation: {name: type.name, value: value ?? {}},\n        },\n        editor,\n      })\n\n      const snapshotAfter = getEditorSnapshot({\n        editorActorSnapshot: editorActor.getSnapshot(),\n        slateEditorInstance: editor,\n      })\n\n      const selectedValueAfter = getSelectedValue(snapshotAfter)\n      const focusBlockAfter = getFocusBlock(snapshotAfter)\n      const focusSpanAfter = getFocusSpan(snapshotAfter)\n\n      const newMarkDefKeysOnFocusSpan = focusSpanAfter?.node.marks?.filter(\n        (mark) =>\n          !focusSpanBefore?.node.marks?.includes(mark) &&\n          !snapshotAfter.context.schema.decorators\n            .map((decorator) => decorator.name)\n            .includes(mark),\n      )\n      const markDefsAfter = selectedValueAfter.flatMap((block) => {\n        if (isTextBlock(snapshotAfter.context, block)) {\n          return (\n            block.markDefs?.map((markDef) => ({\n              markDef,\n              path: [{_key: block._key}, 'markDefs', {_key: markDef._key}],\n            })) ?? []\n          )\n        }\n\n        return []\n      })\n      const markDefs = markDefsAfter.filter(\n        (markDef) =>\n          !markDefsBefore.some(\n            (markDefBefore) => markDefBefore._key === markDef.markDef._key,\n          ),\n      )\n      const spanPath = focusSpanAfter?.path\n      const markDef = markDefs.find((markDef) =>\n        newMarkDefKeysOnFocusSpan?.some(\n          (mark) => mark === markDef.markDef._key,\n        ),\n      )\n\n      if (focusBlockAfter && spanPath && markDef) {\n        return {\n          markDefPath: markDef.path,\n          markDefPaths: markDefs.map((markDef) => markDef.path),\n          spanPath,\n        }\n      }\n    },\n    delete: (\n      selection: EditorSelection,\n      options?: EditableAPIDeleteOptions,\n    ): void => {\n      if (selection) {\n        const range = toSlateRange({\n          context: {\n            schema: editorActor.getSnapshot().context.schema,\n            value: editor.value,\n            selection,\n          },\n          blockIndexMap: editor.blockIndexMap,\n        })\n        const hasRange =\n          range && range.anchor.path.length > 0 && range.focus.path.length > 0\n        if (!hasRange) {\n          throw new Error('Invalid range')\n        }\n        if (range) {\n          if (!options?.mode || options?.mode === 'selected') {\n            debug(`Deleting content in selection`)\n            Transforms.delete(editor, {\n              at: range,\n              hanging: true,\n              voids: true,\n            })\n            editor.onChange()\n            return\n          }\n          if (options?.mode === 'blocks') {\n            debug(`Deleting blocks touched by selection`)\n            Transforms.removeNodes(editor, {\n              at: range,\n              voids: true,\n              match: (node) => {\n                return (\n                  editor.isTextBlock(node) ||\n                  (!editor.isTextBlock(node) && SlateElement.isElement(node))\n                )\n              },\n            })\n          }\n          if (options?.mode === 'children') {\n            debug(`Deleting children touched by selection`)\n            Transforms.removeNodes(editor, {\n              at: range,\n              voids: true,\n              match: (node) => {\n                return (\n                  node._type === types.span.name || // Text children\n                  (!editor.isTextBlock(node) && SlateElement.isElement(node)) // inline blocks\n                )\n              },\n            })\n          }\n          // If the editor was emptied, insert a placeholder block\n          // directly into the editor's children. We don't want to do this\n          // through a Transform (because that would trigger a change event\n          // that would insert the placeholder into the actual value\n          // which should remain empty)\n          if (editor.children.length === 0) {\n            const placeholderBlock = createPlaceholderBlock(\n              editorActor.getSnapshot().context,\n            )\n            editor.children = [placeholderBlock]\n            editor.value = [placeholderBlock]\n\n            buildIndexMaps(\n              {\n                schema: editorActor.getSnapshot().context.schema,\n                value: editor.value,\n              },\n              {\n                blockIndexMap: editor.blockIndexMap,\n                listIndexMap: editor.listIndexMap,\n              },\n            )\n          }\n\n          editor.onChange()\n        }\n      }\n    },\n    removeAnnotation: <TSchemaType extends {name: string}>(\n      type: TSchemaType,\n    ): void => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'annotation.remove',\n          annotation: {name: type.name},\n        },\n        editor,\n      })\n    },\n    getSelection: (): EditorSelection | null => {\n      let ptRange: EditorSelection = null\n      if (editor.selection) {\n        const existing = SLATE_TO_PORTABLE_TEXT_RANGE.get(editor.selection)\n        if (existing) {\n          return existing\n        }\n        ptRange = slateRangeToSelection({\n          schema: editorActor.getSnapshot().context.schema,\n          editor,\n          range: editor.selection,\n        })\n        SLATE_TO_PORTABLE_TEXT_RANGE.set(editor.selection, ptRange)\n      }\n      return ptRange\n    },\n    getValue: () => {\n      return fromSlateValue(\n        editor.children,\n        types.block.name,\n        KEY_TO_VALUE_ELEMENT.get(editor),\n      )\n    },\n    isCollapsedSelection: () => {\n      return !!editor.selection && Range.isCollapsed(editor.selection)\n    },\n    isExpandedSelection: () => {\n      return !!editor.selection && Range.isExpanded(editor.selection)\n    },\n    insertBreak: () => {\n      editor.insertBreak()\n      editor.onChange()\n    },\n    getFragment: () => {\n      return fromSlateValue(editor.getFragment(), types.block.name)\n    },\n    isSelectionsOverlapping: (\n      selectionA: EditorSelection,\n      selectionB: EditorSelection,\n    ) => {\n      // Convert the selections to Slate ranges\n      const rangeA = toSlateRange({\n        context: {\n          schema: editorActor.getSnapshot().context.schema,\n          value: editor.value,\n          selection: selectionA,\n        },\n        blockIndexMap: editor.blockIndexMap,\n      })\n      const rangeB = toSlateRange({\n        context: {\n          schema: editorActor.getSnapshot().context.schema,\n          value: editor.value,\n          selection: selectionB,\n        },\n        blockIndexMap: editor.blockIndexMap,\n      })\n\n      // Make sure the ranges are valid\n      const isValidRanges = Range.isRange(rangeA) && Range.isRange(rangeB)\n\n      // Check if the ranges are overlapping\n      const isOverlapping = isValidRanges && Range.includes(rangeA, rangeB)\n\n      return isOverlapping\n    },\n  }\n\n  return editableApi\n}\n","import type {Patch} from '@portabletext/patches'\nimport type {PortableTextBlock} from '@sanity/types'\nimport type {FocusEvent} from 'react'\nimport {assign, emit, setup, type ActorRefFrom} from 'xstate'\nimport type {EditorSelection, InvalidValueResolution} from '../types/editor'\n\n/**\n * @public\n */\nexport type EditorEmittedEvent =\n  | {\n      type: 'blurred'\n      event: FocusEvent<HTMLDivElement, Element>\n    }\n  | {\n      /**\n       * @deprecated Will be removed in the next major version\n       */\n      type: 'done loading'\n    }\n  | {\n      type: 'editable'\n    }\n  | ErrorEvent\n  | {\n      type: 'focused'\n      event: FocusEvent<HTMLDivElement, Element>\n    }\n  | {\n      type: 'invalid value'\n      resolution: InvalidValueResolution | null\n      value: Array<PortableTextBlock> | undefined\n    }\n  | {\n      /**\n       * @deprecated Will be removed in the next major version\n       */\n      type: 'loading'\n    }\n  | MutationEvent\n  | PatchEvent\n  | {\n      type: 'read only'\n    }\n  | {\n      type: 'ready'\n    }\n  | {\n      type: 'selection'\n      selection: EditorSelection\n    }\n  | {\n      type: 'value changed'\n      value: Array<PortableTextBlock> | undefined\n    }\n\n/**\n * @deprecated The event is no longer emitted\n */\ntype ErrorEvent = {\n  type: 'error'\n  name: string\n  description: string\n  data: unknown\n}\n\nexport type InternalEditorEmittedEvent = EditorEmittedEvent | UnsetEvent\n\n/**\n * @public\n */\nexport type MutationEvent = {\n  type: 'mutation'\n  patches: Array<Patch>\n  /**\n   * @deprecated Use `value` instead\n   */\n  snapshot: Array<PortableTextBlock> | undefined\n  value: Array<PortableTextBlock> | undefined\n}\n\nexport type PatchEvent = {\n  type: 'patch'\n  patch: Patch\n}\n\nexport type UnsetEvent = {\n  /**\n   * @deprecated Use `'patch'` events instead\n   */\n  type: 'unset'\n  previousValue: Array<PortableTextBlock>\n}\n\nexport type RelayActor = ActorRefFrom<typeof relayMachine>\n\nexport const relayMachine = setup({\n  types: {\n    context: {} as {\n      prevSelection: EditorSelection\n      lastEventWasFocused: boolean\n    },\n    events: {} as InternalEditorEmittedEvent,\n    emitted: {} as InternalEditorEmittedEvent,\n  },\n}).createMachine({\n  id: 'relay',\n  context: {\n    prevSelection: null,\n    lastEventWasFocused: false,\n  },\n  on: {\n    'focused': {\n      actions: [\n        assign({\n          lastEventWasFocused: true,\n        }),\n        emit(({event}) => event),\n      ],\n    },\n    'selection': [\n      {\n        guard: ({context}) => context.lastEventWasFocused,\n        actions: [\n          assign({\n            prevSelection: ({event}) => event.selection,\n          }),\n          emit(({event}) => event),\n          assign({\n            lastEventWasFocused: false,\n          }),\n        ],\n      },\n      {\n        guard: ({context, event}) => context.prevSelection !== event.selection,\n        actions: [\n          assign({\n            prevSelection: ({event}) => event.selection,\n          }),\n          emit(({event}) => event),\n          assign({\n            lastEventWasFocused: false,\n          }),\n        ],\n      },\n    ],\n    '*': {\n      actions: [\n        emit(({event}) => event),\n        assign({\n          lastEventWasFocused: false,\n        }),\n      ],\n    },\n  },\n})\n","import {insert, set, setIfMissing, unset} from '@portabletext/patches'\nimport {isTextBlock} from '@portabletext/schema'\nimport type {\n  PortableTextBlock,\n  PortableTextSpan,\n  PortableTextTextBlock,\n} from '@sanity/types'\nimport {flatten, isPlainObject, uniq} from 'lodash'\nimport type {EditorSchema} from '../editor/editor-schema'\nimport type {InvalidValueResolution} from '../types/editor'\n\nexport interface Validation {\n  valid: boolean\n  resolution: InvalidValueResolution | null\n  value: PortableTextBlock[] | undefined\n}\n\nexport function validateValue(\n  value: PortableTextBlock[] | undefined,\n  types: EditorSchema,\n  keyGenerator: () => string,\n): Validation {\n  let resolution: InvalidValueResolution | null = null\n  let valid = true\n  const validChildTypes = [\n    types.span.name,\n    ...types.inlineObjects.map((t) => t.name),\n  ]\n  const validBlockTypes = [\n    types.block.name,\n    ...types.blockObjects.map((t) => t.name),\n  ]\n\n  // Undefined is allowed\n  if (value === undefined) {\n    return {valid: true, resolution: null, value}\n  }\n  // Only lengthy arrays are allowed in the editor.\n  if (!Array.isArray(value) || value.length === 0) {\n    return {\n      valid: false,\n      resolution: {\n        patches: [unset([])],\n        description:\n          'Editor value must be an array of Portable Text blocks, or undefined.',\n        action: 'Unset the value',\n        item: value,\n\n        i18n: {\n          description:\n            'inputs.portable-text.invalid-value.not-an-array.description',\n          action: 'inputs.portable-text.invalid-value.not-an-array.action',\n        },\n      },\n      value,\n    }\n  }\n  if (\n    value.some((blk: PortableTextBlock, index: number): boolean => {\n      // Is the block an object?\n      if (!isPlainObject(blk)) {\n        resolution = {\n          patches: [unset([index])],\n          description: `Block must be an object, got ${String(blk)}`,\n          action: `Unset invalid item`,\n          item: blk,\n\n          i18n: {\n            description:\n              'inputs.portable-text.invalid-value.not-an-object.description',\n            action: 'inputs.portable-text.invalid-value.not-an-object.action',\n            values: {index},\n          },\n        }\n        return true\n      }\n      // Test that every block has a _key prop\n      if (!blk._key || typeof blk._key !== 'string') {\n        resolution = {\n          patches: [set({...blk, _key: keyGenerator()}, [index])],\n          description: `Block at index ${index} is missing required _key.`,\n          action: 'Set the block with a random _key value',\n          item: blk,\n\n          i18n: {\n            description:\n              'inputs.portable-text.invalid-value.missing-key.description',\n            action: 'inputs.portable-text.invalid-value.missing-key.action',\n            values: {index},\n          },\n        }\n        return true\n      }\n      // Test that every block has valid _type\n      if (!blk._type || !validBlockTypes.includes(blk._type)) {\n        // Special case where block type is set to default 'block', but the block type is named something else according to the schema.\n        if (blk._type === 'block') {\n          const currentBlockTypeName = types.block.name\n          resolution = {\n            patches: [\n              set({...blk, _type: currentBlockTypeName}, [{_key: blk._key}]),\n            ],\n            description: `Block with _key '${blk._key}' has invalid type name '${blk._type}'. According to the schema, the block type name is '${currentBlockTypeName}'`,\n            action: `Use type '${currentBlockTypeName}'`,\n            item: blk,\n\n            i18n: {\n              description:\n                'inputs.portable-text.invalid-value.incorrect-block-type.description',\n              action:\n                'inputs.portable-text.invalid-value.incorrect-block-type.action',\n              values: {key: blk._key, expectedTypeName: currentBlockTypeName},\n            },\n          }\n          return true\n        }\n\n        // If the block has no `_type`, but aside from that is a valid Portable Text block\n        if (\n          !blk._type &&\n          isTextBlock({schema: types}, {...blk, _type: types.block.name})\n        ) {\n          resolution = {\n            patches: [\n              set({...blk, _type: types.block.name}, [{_key: blk._key}]),\n            ],\n            description: `Block with _key '${blk._key}' is missing a type name. According to the schema, the block type name is '${types.block.name}'`,\n            action: `Use type '${types.block.name}'`,\n            item: blk,\n\n            i18n: {\n              description:\n                'inputs.portable-text.invalid-value.missing-block-type.description',\n              action:\n                'inputs.portable-text.invalid-value.missing-block-type.action',\n              values: {key: blk._key, expectedTypeName: types.block.name},\n            },\n          }\n          return true\n        }\n\n        if (!blk._type) {\n          resolution = {\n            patches: [unset([{_key: blk._key}])],\n            description: `Block with _key '${blk._key}' is missing an _type property`,\n            action: 'Remove the block',\n            item: blk,\n\n            i18n: {\n              description:\n                'inputs.portable-text.invalid-value.missing-type.description',\n              action: 'inputs.portable-text.invalid-value.missing-type.action',\n              values: {key: blk._key},\n            },\n          }\n          return true\n        }\n\n        resolution = {\n          patches: [unset([{_key: blk._key}])],\n          description: `Block with _key '${blk._key}' has invalid _type '${blk._type}'`,\n          action: 'Remove the block',\n          item: blk,\n\n          i18n: {\n            description:\n              'inputs.portable-text.invalid-value.disallowed-type.description',\n            action: 'inputs.portable-text.invalid-value.disallowed-type.action',\n            values: {key: blk._key, typeName: blk._type},\n          },\n        }\n        return true\n      }\n\n      // Test regular text blocks\n      if (blk._type === types.block.name) {\n        const textBlock = blk as PortableTextTextBlock\n        // Test that it has a valid children property (array)\n        if (textBlock.children && !Array.isArray(textBlock.children)) {\n          resolution = {\n            patches: [set({children: []}, [{_key: textBlock._key}])],\n            description: `Text block with _key '${textBlock._key}' has a invalid required property 'children'.`,\n            action: 'Reset the children property',\n            item: textBlock,\n\n            i18n: {\n              description:\n                'inputs.portable-text.invalid-value.missing-or-invalid-children.description',\n              action:\n                'inputs.portable-text.invalid-value.missing-or-invalid-children.action',\n              values: {key: textBlock._key},\n            },\n          }\n          return true\n        }\n        // Test that children is set and lengthy\n        if (\n          textBlock.children === undefined ||\n          (Array.isArray(textBlock.children) && textBlock.children.length === 0)\n        ) {\n          const newSpan = {\n            _type: types.span.name,\n            _key: keyGenerator(),\n            text: '',\n            marks: [],\n          }\n          resolution = {\n            autoResolve: true,\n            patches: [\n              setIfMissing([], [{_key: blk._key}, 'children']),\n              insert([newSpan], 'after', [{_key: blk._key}, 'children', 0]),\n            ],\n            description: `Children for text block with _key '${blk._key}' is empty.`,\n            action: 'Insert an empty text',\n            item: blk,\n\n            i18n: {\n              description:\n                'inputs.portable-text.invalid-value.empty-children.description',\n              action:\n                'inputs.portable-text.invalid-value.empty-children.action',\n              values: {key: blk._key},\n            },\n          }\n          return true\n        }\n\n        const allUsedMarks = uniq(\n          flatten(\n            textBlock.children\n              .filter((cld) => cld._type === types.span.name)\n              .map((cld) => cld.marks || []),\n          ) as string[],\n        )\n\n        // Test that all markDefs are in use (remove orphaned markDefs)\n        if (Array.isArray(blk.markDefs) && blk.markDefs.length > 0) {\n          const unusedMarkDefs: string[] = uniq(\n            blk.markDefs\n              .map((def) => def._key)\n              .filter((key) => !allUsedMarks.includes(key)),\n          )\n          if (unusedMarkDefs.length > 0) {\n            resolution = {\n              autoResolve: true,\n              patches: unusedMarkDefs.map((markDefKey) =>\n                unset([{_key: blk._key}, 'markDefs', {_key: markDefKey}]),\n              ),\n              description: `Block contains orphaned data (unused mark definitions): ${unusedMarkDefs.join(\n                ', ',\n              )}.`,\n              action: 'Remove unused mark definition item',\n              item: blk,\n              i18n: {\n                description:\n                  'inputs.portable-text.invalid-value.orphaned-mark-defs.description',\n                action:\n                  'inputs.portable-text.invalid-value.orphaned-mark-defs.action',\n                values: {\n                  key: blk._key,\n                  unusedMarkDefs: unusedMarkDefs.map((m) => m.toString()),\n                },\n              },\n            }\n            return true\n          }\n        }\n\n        // Test that every annotation mark used has a definition\n        const annotationMarks = allUsedMarks.filter(\n          (mark) => !types.decorators.map((dec) => dec.name).includes(mark),\n        )\n        const orphanedMarks = annotationMarks.filter(\n          (mark) =>\n            textBlock.markDefs === undefined ||\n            !textBlock.markDefs.find((def) => def._key === mark),\n        )\n        if (orphanedMarks.length > 0) {\n          const spanChildren = textBlock.children.filter(\n            (cld) =>\n              cld._type === types.span.name &&\n              Array.isArray(cld.marks) &&\n              cld.marks.some((mark) => orphanedMarks.includes(mark)),\n          ) as PortableTextSpan[]\n          if (spanChildren) {\n            const orphaned = orphanedMarks.join(', ')\n            resolution = {\n              autoResolve: true,\n              patches: spanChildren.map((child) => {\n                return set(\n                  (child.marks || []).filter(\n                    (cMrk) => !orphanedMarks.includes(cMrk),\n                  ),\n                  [{_key: blk._key}, 'children', {_key: child._key}, 'marks'],\n                )\n              }),\n              description: `Block with _key '${blk._key}' contains marks (${orphaned}) not supported by the current content model.`,\n              action: 'Remove invalid marks',\n              item: blk,\n\n              i18n: {\n                description:\n                  'inputs.portable-text.invalid-value.orphaned-marks.description',\n                action:\n                  'inputs.portable-text.invalid-value.orphaned-marks.action',\n                values: {\n                  key: blk._key,\n                  orphanedMarks: orphanedMarks.map((m) => m.toString()),\n                },\n              },\n            }\n            return true\n          }\n        }\n\n        // Test every child\n        if (\n          textBlock.children.some((child, cIndex: number) => {\n            if (!isPlainObject(child)) {\n              resolution = {\n                patches: [unset([{_key: blk._key}, 'children', cIndex])],\n                description: `Child at index '${cIndex}' in block with key '${blk._key}' is not an object.`,\n                action: 'Remove the item',\n                item: blk,\n\n                i18n: {\n                  description:\n                    'inputs.portable-text.invalid-value.non-object-child.description',\n                  action:\n                    'inputs.portable-text.invalid-value.non-object-child.action',\n                  values: {key: blk._key, index: cIndex},\n                },\n              }\n              return true\n            }\n\n            if (!child._key || typeof child._key !== 'string') {\n              const newChild = {...child, _key: keyGenerator()}\n              resolution = {\n                autoResolve: true,\n                patches: [\n                  set(newChild, [{_key: blk._key}, 'children', cIndex]),\n                ],\n                description: `Child at index ${cIndex} is missing required _key in block with _key ${blk._key}.`,\n                action: 'Set a new random _key on the object',\n                item: blk,\n\n                i18n: {\n                  description:\n                    'inputs.portable-text.invalid-value.missing-child-key.description',\n                  action:\n                    'inputs.portable-text.invalid-value.missing-child-key.action',\n                  values: {key: blk._key, index: cIndex},\n                },\n              }\n              return true\n            }\n\n            // Verify that children have valid types\n            if (!child._type) {\n              resolution = {\n                patches: [\n                  unset([{_key: blk._key}, 'children', {_key: child._key}]),\n                ],\n                description: `Child with _key '${child._key}' in block with key '${blk._key}' is missing '_type' property.`,\n                action: 'Remove the object',\n                item: blk,\n\n                i18n: {\n                  description:\n                    'inputs.portable-text.invalid-value.missing-child-type.description',\n                  action:\n                    'inputs.portable-text.invalid-value.missing-child-type.action',\n                  values: {key: blk._key, childKey: child._key},\n                },\n              }\n              return true\n            }\n\n            if (!validChildTypes.includes(child._type)) {\n              resolution = {\n                patches: [\n                  unset([{_key: blk._key}, 'children', {_key: child._key}]),\n                ],\n                description: `Child with _key '${child._key}' in block with key '${blk._key}' has invalid '_type' property (${child._type}).`,\n                action: 'Remove the object',\n                item: blk,\n\n                i18n: {\n                  description:\n                    'inputs.portable-text.invalid-value.disallowed-child-type.description',\n                  action:\n                    'inputs.portable-text.invalid-value.disallowed-child-type.action',\n                  values: {\n                    key: blk._key,\n                    childKey: child._key,\n                    childType: child._type,\n                  },\n                },\n              }\n              return true\n            }\n\n            // Verify that spans have .text property that is a string\n            if (\n              child._type === types.span.name &&\n              typeof child.text !== 'string'\n            ) {\n              resolution = {\n                patches: [\n                  set({...child, text: ''}, [\n                    {_key: blk._key},\n                    'children',\n                    {_key: child._key},\n                  ]),\n                ],\n                description: `Child with _key '${child._key}' in block with key '${blk._key}' has missing or invalid text property!`,\n                action: `Write an empty text property to the object`,\n                item: blk,\n\n                i18n: {\n                  description:\n                    'inputs.portable-text.invalid-value.invalid-span-text.description',\n                  action:\n                    'inputs.portable-text.invalid-value.invalid-span-text.action',\n                  values: {key: blk._key, childKey: child._key},\n                },\n              }\n              return true\n            }\n            return false\n          })\n        ) {\n          valid = false\n        }\n      }\n      return false\n    })\n  ) {\n    valid = false\n  }\n  return {valid, resolution, value}\n}\n","import type {Patch} from '@portabletext/patches'\nimport type {PortableTextBlock} from '@sanity/types'\nimport {isEqual} from 'lodash'\nimport {\n  deleteText,\n  Editor,\n  Text,\n  Transforms,\n  type Descendant,\n  type Node,\n} from 'slate'\nimport {\n  and,\n  assertEvent,\n  assign,\n  emit,\n  fromCallback,\n  not,\n  raise,\n  setup,\n  type AnyEventObject,\n  type CallbackLogicFunction,\n} from 'xstate'\nimport type {ActorRefFrom} from 'xstate'\nimport {debugWithName} from '../internal-utils/debug'\nimport {validateValue} from '../internal-utils/validateValue'\nimport {toSlateValue, VOID_CHILD_KEY} from '../internal-utils/values'\nimport type {PickFromUnion} from '../type-utils'\nimport type {\n  InvalidValueResolution,\n  PortableTextSlateEditor,\n} from '../types/editor'\nimport type {EditorSchema} from './editor-schema'\nimport {withoutSaving} from './plugins/createWithUndoRedo'\nimport {isChangingRemotely, withRemoteChanges} from './withChanges'\nimport {withoutPatching} from './withoutPatching'\n\nconst debug = debugWithName('sync machine')\n\ntype SyncValueEvent =\n  | {\n      type: 'patch'\n      patch: Patch\n    }\n  | {\n      type: 'invalid value'\n      resolution: InvalidValueResolution | null\n      value: Array<PortableTextBlock> | undefined\n    }\n  | {\n      type: 'value changed'\n      value: Array<PortableTextBlock> | undefined\n    }\n  | {\n      type: 'done syncing'\n      value: Array<PortableTextBlock> | undefined\n    }\n\nconst syncValueCallback: CallbackLogicFunction<\n  AnyEventObject,\n  SyncValueEvent,\n  {\n    context: {\n      keyGenerator: () => string\n      previousValue: Array<PortableTextBlock> | undefined\n      readOnly: boolean\n      schema: EditorSchema\n    }\n    slateEditor: PortableTextSlateEditor\n    streamBlocks: boolean\n    value: Array<PortableTextBlock> | undefined\n  }\n> = ({sendBack, input}) => {\n  updateValue({\n    context: input.context,\n    sendBack,\n    slateEditor: input.slateEditor,\n    value: input.value,\n    streamBlocks: input.streamBlocks,\n  })\n}\n\nconst syncValueLogic = fromCallback(syncValueCallback)\n\nexport type SyncActor = ActorRefFrom<typeof syncMachine>\n\n/**\n * Sync value with the editor state\n *\n * Normally nothing here should apply, and the editor and the real world are perfectly aligned.\n *\n * Inconsistencies could happen though, so we need to check the editor state when the value changes.\n *\n * For performance reasons, it makes sense to also do the content validation here, as we already\n * iterate over the value and can validate only the new content that is actually changed.\n *\n * @internal\n */\nexport const syncMachine = setup({\n  types: {\n    context: {} as {\n      initialValue: Array<PortableTextBlock> | undefined\n      initialValueSynced: boolean\n      isProcessingLocalChanges: boolean\n      keyGenerator: () => string\n      schema: EditorSchema\n      readOnly: boolean\n      slateEditor: PortableTextSlateEditor\n      pendingValue: Array<PortableTextBlock> | undefined\n      previousValue: Array<PortableTextBlock> | undefined\n    },\n    input: {} as {\n      initialValue: Array<PortableTextBlock> | undefined\n      keyGenerator: () => string\n      schema: EditorSchema\n      readOnly: boolean\n      slateEditor: PortableTextSlateEditor\n    },\n    events: {} as\n      | {\n          type: 'has pending mutations'\n        }\n      | {\n          type: 'mutation'\n        }\n      | {\n          type: 'update value'\n          value: Array<PortableTextBlock> | undefined\n        }\n      | {\n          type: 'update readOnly'\n          readOnly: boolean\n        }\n      | SyncValueEvent,\n    emitted: {} as\n      | PickFromUnion<\n          SyncValueEvent,\n          'type',\n          'invalid value' | 'patch' | 'value changed'\n        >\n      | {type: 'done syncing value'}\n      | {type: 'syncing value'},\n  },\n  actions: {\n    'assign initial value synced': assign({\n      initialValueSynced: true,\n    }),\n    'assign readOnly': assign({\n      readOnly: ({event}) => {\n        assertEvent(event, 'update readOnly')\n        return event.readOnly\n      },\n    }),\n    'assign pending value': assign({\n      pendingValue: ({event}) => {\n        assertEvent(event, 'update value')\n        return event.value\n      },\n    }),\n    'clear pending value': assign({\n      pendingValue: undefined,\n    }),\n    'assign previous value': assign({\n      previousValue: ({event}) => {\n        assertEvent(event, 'done syncing')\n        return event.value\n      },\n    }),\n    'emit done syncing value': emit({\n      type: 'done syncing value',\n    }),\n    'emit syncing value': emit({\n      type: 'syncing value',\n    }),\n  },\n  guards: {\n    'initial value synced': ({context}) => context.initialValueSynced,\n    'is busy': ({context}) => {\n      const isProcessingLocalChanges = context.isProcessingLocalChanges\n      const isChanging = isChangingRemotely(context.slateEditor) ?? false\n      const isBusy = isProcessingLocalChanges || isChanging\n\n      debug('isBusy', {isBusy, isProcessingLocalChanges, isChanging})\n\n      return isBusy\n    },\n    'is empty value': ({event}) => {\n      return event.type === 'update value' && event.value === undefined\n    },\n    'is empty array': ({event}) => {\n      return (\n        event.type === 'update value' &&\n        Array.isArray(event.value) &&\n        event.value.length === 0\n      )\n    },\n    'is new value': ({context, event}) => {\n      return (\n        event.type === 'update value' && context.previousValue !== event.value\n      )\n    },\n    'value changed while syncing': ({context, event}) => {\n      assertEvent(event, 'done syncing')\n      return context.pendingValue !== event.value\n    },\n    'pending value equals previous value': ({context}) => {\n      return isEqual(context.pendingValue, context.previousValue)\n    },\n  },\n  actors: {\n    'sync value': syncValueLogic,\n  },\n}).createMachine({\n  id: 'sync',\n  context: ({input}) => ({\n    initialValue: input.initialValue,\n    initialValueSynced: false,\n    isProcessingLocalChanges: false,\n    keyGenerator: input.keyGenerator,\n    schema: input.schema,\n    readOnly: input.readOnly,\n    slateEditor: input.slateEditor,\n    pendingValue: undefined,\n    previousValue: undefined,\n  }),\n  entry: [\n    raise(({context}) => {\n      return {type: 'update value', value: context.initialValue}\n    }),\n  ],\n  on: {\n    'has pending mutations': {\n      actions: assign({\n        isProcessingLocalChanges: true,\n      }),\n    },\n    'mutation': {\n      actions: assign({\n        isProcessingLocalChanges: false,\n      }),\n    },\n    'update readOnly': {\n      actions: ['assign readOnly'],\n    },\n  },\n  initial: 'idle',\n  states: {\n    idle: {\n      entry: [\n        () => {\n          debug('entry: syncing->idle')\n        },\n      ],\n      exit: [\n        () => {\n          debug('exit: syncing->idle')\n        },\n      ],\n      on: {\n        'update value': [\n          {\n            guard: and(['is empty value', not('initial value synced')]),\n            actions: ['assign initial value synced', 'emit done syncing value'],\n          },\n          {\n            guard: and(['is empty array', not('initial value synced')]),\n            actions: [\n              'assign initial value synced',\n              emit({type: 'value changed', value: []}),\n              'emit done syncing value',\n            ],\n          },\n          {\n            guard: and(['is busy', 'is new value']),\n            target: 'busy',\n            actions: ['assign pending value'],\n          },\n          {\n            guard: 'is new value',\n            target: 'syncing',\n            actions: ['assign pending value'],\n          },\n          {\n            guard: not('initial value synced'),\n            actions: [\n              () => {\n                debug('no new value – setting initial value as synced')\n              },\n              'assign initial value synced',\n              'emit done syncing value',\n            ],\n          },\n          {\n            actions: [\n              () => {\n                debug('no new value and initial value already synced')\n              },\n            ],\n          },\n        ],\n      },\n    },\n    busy: {\n      entry: [\n        () => {\n          debug('entry: syncing->busy')\n        },\n      ],\n      exit: [\n        () => {\n          debug('exit: syncing->busy')\n        },\n      ],\n      after: {\n        1000: [\n          {\n            guard: 'is busy',\n            target: '.',\n            reenter: true,\n            actions: [\n              () => {\n                debug('reenter: syncing->busy')\n              },\n            ],\n          },\n          {\n            target: 'syncing',\n          },\n        ],\n      },\n      on: {\n        'update value': [\n          {\n            guard: 'is new value',\n            actions: ['assign pending value'],\n          },\n        ],\n      },\n    },\n    syncing: {\n      entry: [\n        () => {\n          debug('entry: syncing->syncing')\n        },\n        'emit syncing value',\n      ],\n      exit: [\n        () => {\n          debug('exit: syncing->syncing')\n        },\n        'emit done syncing value',\n      ],\n      invoke: {\n        src: 'sync value',\n        id: 'sync value',\n        input: ({context}) => {\n          return {\n            context: {\n              keyGenerator: context.keyGenerator,\n              previousValue: context.previousValue,\n              readOnly: context.readOnly,\n              schema: context.schema,\n            },\n            slateEditor: context.slateEditor,\n            streamBlocks: !context.initialValueSynced,\n            value: context.pendingValue,\n          }\n        },\n      },\n      on: {\n        'update value': {\n          guard: 'is new value',\n          actions: ['assign pending value'],\n        },\n        'patch': {\n          actions: [emit(({event}) => event)],\n        },\n        'invalid value': {\n          actions: [emit(({event}) => event)],\n        },\n        'value changed': {\n          actions: [emit(({event}) => event)],\n        },\n        'done syncing': [\n          {\n            guard: 'value changed while syncing',\n            actions: ['assign previous value', 'assign initial value synced'],\n            target: 'syncing',\n            reenter: true,\n          },\n          {\n            target: 'idle',\n            actions: [\n              'clear pending value',\n              'assign previous value',\n              'assign initial value synced',\n            ],\n          },\n        ],\n      },\n    },\n  },\n})\n\nasync function updateValue({\n  context,\n  sendBack,\n  slateEditor,\n  streamBlocks,\n  value,\n}: {\n  context: {\n    keyGenerator: () => string\n    previousValue: Array<PortableTextBlock> | undefined\n    readOnly: boolean\n    schema: EditorSchema\n  }\n  sendBack: (event: SyncValueEvent) => void\n  slateEditor: PortableTextSlateEditor\n  streamBlocks: boolean\n  value: PortableTextBlock[] | undefined\n}) {\n  let doneSyncing = false\n  let isChanged = false\n  let isValid = true\n\n  const hadSelection = !!slateEditor.selection\n\n  // If empty value, remove everything in the editor and insert a placeholder block\n  if (!value || value.length === 0) {\n    debug('Value is empty')\n    Editor.withoutNormalizing(slateEditor, () => {\n      withoutSaving(slateEditor, () => {\n        withRemoteChanges(slateEditor, () => {\n          withoutPatching(slateEditor, () => {\n            if (doneSyncing) {\n              return\n            }\n\n            if (hadSelection) {\n              Transforms.deselect(slateEditor)\n            }\n\n            const childrenLength = slateEditor.children.length\n\n            slateEditor.children.forEach((_, index) => {\n              Transforms.removeNodes(slateEditor, {\n                at: [childrenLength - 1 - index],\n              })\n            })\n\n            Transforms.insertNodes(\n              slateEditor,\n              slateEditor.pteCreateTextBlock({decorators: []}),\n              {at: [0]},\n            )\n\n            // Add a new selection in the top of the document\n            if (hadSelection) {\n              Transforms.select(slateEditor, [0, 0])\n            }\n          })\n        })\n      })\n    })\n    isChanged = true\n  }\n  // Remove, replace or add nodes according to what is changed.\n  if (value && value.length > 0) {\n    const slateValueFromProps = toSlateValue(value, {\n      schemaTypes: context.schema,\n    })\n\n    if (streamBlocks) {\n      await new Promise<void>((resolve) => {\n        Editor.withoutNormalizing(slateEditor, () => {\n          withRemoteChanges(slateEditor, () => {\n            withoutPatching(slateEditor, () => {\n              if (doneSyncing) {\n                resolve()\n                return\n              }\n\n              isChanged = removeExtraBlocks({\n                slateEditor,\n                slateValueFromProps,\n              })\n\n              const processBlocks = async () => {\n                for await (const [\n                  currentBlock,\n                  currentBlockIndex,\n                ] of getStreamedBlocks({\n                  slateValue: slateValueFromProps,\n                })) {\n                  const {blockChanged, blockValid} = syncBlock({\n                    context,\n                    sendBack,\n                    block: currentBlock,\n                    index: currentBlockIndex,\n                    slateEditor,\n                    value,\n                  })\n\n                  isChanged = blockChanged || isChanged\n                  isValid = isValid && blockValid\n\n                  if (!isValid) {\n                    break\n                  }\n                }\n\n                resolve()\n              }\n\n              processBlocks()\n            })\n          })\n        })\n      })\n    } else {\n      Editor.withoutNormalizing(slateEditor, () => {\n        withRemoteChanges(slateEditor, () => {\n          withoutPatching(slateEditor, () => {\n            if (doneSyncing) {\n              return\n            }\n\n            isChanged = removeExtraBlocks({\n              slateEditor,\n              slateValueFromProps,\n            })\n\n            let index = 0\n\n            for (const currentBlock of slateValueFromProps) {\n              const {blockChanged, blockValid} = syncBlock({\n                context,\n                sendBack,\n                block: currentBlock,\n                index,\n                slateEditor,\n                value,\n              })\n\n              isChanged = blockChanged || isChanged\n              isValid = isValid && blockValid\n\n              if (!blockValid) {\n                break\n              }\n\n              index++\n            }\n          })\n        })\n      })\n    }\n  }\n\n  if (!isValid) {\n    debug('Invalid value, returning')\n    doneSyncing = true\n    sendBack({type: 'done syncing', value})\n    return\n  }\n\n  if (isChanged) {\n    debug('Server value changed, syncing editor')\n    try {\n      slateEditor.onChange()\n    } catch (err) {\n      console.error(err)\n      sendBack({\n        type: 'invalid value',\n        resolution: null,\n        value,\n      })\n      doneSyncing = true\n      sendBack({type: 'done syncing', value})\n      return\n    }\n    if (hadSelection && !slateEditor.selection) {\n      Transforms.select(slateEditor, {\n        anchor: {path: [0, 0], offset: 0},\n        focus: {path: [0, 0], offset: 0},\n      })\n      slateEditor.onChange()\n    }\n    sendBack({type: 'value changed', value})\n  } else {\n    debug('Server value and editor value is equal, no need to sync.')\n  }\n\n  doneSyncing = true\n  sendBack({type: 'done syncing', value})\n}\n\nfunction removeExtraBlocks({\n  slateEditor,\n  slateValueFromProps,\n}: {\n  slateEditor: PortableTextSlateEditor\n  slateValueFromProps: Array<Descendant>\n}) {\n  let isChanged = false\n  const childrenLength = slateEditor.children.length\n\n  // Remove blocks that have become superfluous\n  if (slateValueFromProps.length < childrenLength) {\n    for (let i = childrenLength - 1; i > slateValueFromProps.length - 1; i--) {\n      Transforms.removeNodes(slateEditor, {\n        at: [i],\n      })\n    }\n    isChanged = true\n  }\n  return isChanged\n}\n\nasync function* getStreamedBlocks({\n  slateValue,\n}: {\n  slateValue: Array<Descendant>\n}) {\n  let index = 0\n  for await (const block of slateValue) {\n    if (index % 10 === 0) {\n      await new Promise<void>((resolve) => setTimeout(resolve, 0))\n    }\n    yield [block, index] as const\n    index++\n  }\n}\n\nfunction syncBlock({\n  context,\n  sendBack,\n  block,\n  index,\n  slateEditor,\n  value,\n}: {\n  context: {\n    keyGenerator: () => string\n    previousValue: Array<PortableTextBlock> | undefined\n    readOnly: boolean\n    schema: EditorSchema\n  }\n  sendBack: (event: SyncValueEvent) => void\n  block: Descendant\n  index: number\n  slateEditor: PortableTextSlateEditor\n  value: Array<PortableTextBlock>\n}) {\n  let blockChanged = false\n  let blockValid = true\n  const currentBlock = block\n  const currentBlockIndex = index\n  const oldBlock = slateEditor.children[currentBlockIndex]\n  const hasChanges = oldBlock && !isEqual(currentBlock, oldBlock)\n\n  Editor.withoutNormalizing(slateEditor, () => {\n    withRemoteChanges(slateEditor, () => {\n      withoutPatching(slateEditor, () => {\n        if (hasChanges && blockValid) {\n          const validationValue = [value[currentBlockIndex]]\n          const validation = validateValue(\n            validationValue,\n            context.schema,\n            context.keyGenerator,\n          )\n          // Resolve validations that can be resolved automatically, without involving the user (but only if the value was changed)\n          if (\n            !validation.valid &&\n            validation.resolution?.autoResolve &&\n            validation.resolution?.patches.length > 0\n          ) {\n            // Only apply auto resolution if the value has been populated before and is different from the last one.\n            if (\n              !context.readOnly &&\n              context.previousValue &&\n              context.previousValue !== value\n            ) {\n              // Give a console warning about the fact that it did an auto resolution\n              console.warn(\n                `${validation.resolution.action} for block with _key '${validationValue[0]._key}'. ${validation.resolution?.description}`,\n              )\n              validation.resolution.patches.forEach((patch) => {\n                sendBack({type: 'patch', patch})\n              })\n            }\n          }\n          if (validation.valid || validation.resolution?.autoResolve) {\n            if (oldBlock._key === currentBlock._key) {\n              if (debug.enabled) debug('Updating block', oldBlock, currentBlock)\n              _updateBlock(\n                slateEditor,\n                currentBlock,\n                oldBlock,\n                currentBlockIndex,\n              )\n            } else {\n              if (debug.enabled)\n                debug('Replacing block', oldBlock, currentBlock)\n              _replaceBlock(slateEditor, currentBlock, currentBlockIndex)\n            }\n            blockChanged = true\n          } else {\n            sendBack({\n              type: 'invalid value',\n              resolution: validation.resolution,\n              value,\n            })\n            blockValid = false\n          }\n        }\n\n        if (!oldBlock && blockValid) {\n          const validationValue = [value[currentBlockIndex]]\n          const validation = validateValue(\n            validationValue,\n            context.schema,\n            context.keyGenerator,\n          )\n          if (debug.enabled)\n            debug(\n              'Validating and inserting new block in the end of the value',\n              currentBlock,\n            )\n          if (validation.valid || validation.resolution?.autoResolve) {\n            Transforms.insertNodes(slateEditor, currentBlock, {\n              at: [currentBlockIndex],\n            })\n          } else {\n            debug('Invalid', validation)\n            sendBack({\n              type: 'invalid value',\n              resolution: validation.resolution,\n              value,\n            })\n            blockValid = false\n          }\n        }\n      })\n    })\n  })\n\n  return {blockChanged, blockValid}\n}\n\n/**\n * This code is moved out of the above algorithm to keep complexity down.\n * @internal\n */\nfunction _replaceBlock(\n  slateEditor: PortableTextSlateEditor,\n  currentBlock: Descendant,\n  currentBlockIndex: number,\n) {\n  // While replacing the block and the current selection focus is on the replaced block,\n  // temporarily deselect the editor then optimistically try to restore the selection afterwards.\n  const currentSelection = slateEditor.selection\n  const selectionFocusOnBlock =\n    currentSelection && currentSelection.focus.path[0] === currentBlockIndex\n  if (selectionFocusOnBlock) {\n    Transforms.deselect(slateEditor)\n  }\n  Transforms.removeNodes(slateEditor, {at: [currentBlockIndex]})\n  Transforms.insertNodes(slateEditor, currentBlock, {at: [currentBlockIndex]})\n  slateEditor.onChange()\n  if (selectionFocusOnBlock) {\n    Transforms.select(slateEditor, currentSelection)\n  }\n}\n\n/**\n * This code is moved out of the above algorithm to keep complexity down.\n * @internal\n */\nfunction _updateBlock(\n  slateEditor: PortableTextSlateEditor,\n  currentBlock: Descendant,\n  oldBlock: Descendant,\n  currentBlockIndex: number,\n) {\n  // Update the root props on the block\n  Transforms.setNodes(slateEditor, currentBlock as Partial<Node>, {\n    at: [currentBlockIndex],\n  })\n  // Text block's need to have their children updated as well (setNode does not target a node's children)\n  if (\n    slateEditor.isTextBlock(currentBlock) &&\n    slateEditor.isTextBlock(oldBlock)\n  ) {\n    const oldBlockChildrenLength = oldBlock.children.length\n    if (currentBlock.children.length < oldBlockChildrenLength) {\n      // Remove any children that have become superfluous\n      Array.from(\n        Array(oldBlockChildrenLength - currentBlock.children.length),\n      ).forEach((_, index) => {\n        const childIndex = oldBlockChildrenLength - 1 - index\n        if (childIndex > 0) {\n          debug('Removing child')\n          Transforms.removeNodes(slateEditor, {\n            at: [currentBlockIndex, childIndex],\n          })\n        }\n      })\n    }\n    currentBlock.children.forEach(\n      (currentBlockChild, currentBlockChildIndex) => {\n        const oldBlockChild = oldBlock.children[currentBlockChildIndex]\n        const isChildChanged = !isEqual(currentBlockChild, oldBlockChild)\n        const isTextChanged = !isEqual(\n          currentBlockChild.text,\n          oldBlockChild?.text,\n        )\n        const path = [currentBlockIndex, currentBlockChildIndex]\n        if (isChildChanged) {\n          // Update if this is the same child\n          if (currentBlockChild._key === oldBlockChild?._key) {\n            debug('Updating changed child', currentBlockChild, oldBlockChild)\n            Transforms.setNodes(\n              slateEditor,\n              currentBlockChild as Partial<Node>,\n              {\n                at: path,\n              },\n            )\n            const isSpanNode =\n              Text.isText(currentBlockChild) &&\n              currentBlockChild._type === 'span' &&\n              Text.isText(oldBlockChild) &&\n              oldBlockChild._type === 'span'\n            if (isSpanNode && isTextChanged) {\n              if (oldBlockChild.text.length > 0) {\n                deleteText(slateEditor, {\n                  at: {\n                    focus: {path, offset: 0},\n                    anchor: {path, offset: oldBlockChild.text.length},\n                  },\n                })\n              }\n              Transforms.insertText(slateEditor, currentBlockChild.text, {\n                at: path,\n              })\n              slateEditor.onChange()\n            } else if (!isSpanNode) {\n              // If it's a inline block, also update the void text node key\n              debug('Updating changed inline object child', currentBlockChild)\n              Transforms.setNodes(\n                slateEditor,\n                {_key: VOID_CHILD_KEY},\n                {\n                  at: [...path, 0],\n                  voids: true,\n                },\n              )\n            }\n            // Replace the child if _key's are different\n          } else if (oldBlockChild) {\n            debug('Replacing child', currentBlockChild)\n            Transforms.removeNodes(slateEditor, {\n              at: [currentBlockIndex, currentBlockChildIndex],\n            })\n            Transforms.insertNodes(slateEditor, currentBlockChild as Node, {\n              at: [currentBlockIndex, currentBlockChildIndex],\n            })\n            slateEditor.onChange()\n            // Insert it if it didn't exist before\n          } else if (!oldBlockChild) {\n            debug('Inserting new child', currentBlockChild)\n            Transforms.insertNodes(slateEditor, currentBlockChild as Node, {\n              at: [currentBlockIndex, currentBlockChildIndex],\n            })\n            slateEditor.onChange()\n          }\n        }\n      },\n    )\n  }\n}\n","import {\n  compileSchemaDefinitionToPortableTextMemberSchemaTypes,\n  createPortableTextMemberSchemaTypes,\n  portableTextMemberSchemaTypesToSchema,\n} from '@portabletext/sanity-bridge'\nimport {compileSchema} from '@portabletext/schema'\nimport {createActor} from 'xstate'\nimport {createCoreConverters} from '../converters/converters.core'\nimport type {Editor, EditorConfig} from '../editor'\nimport {debugWithName} from '../internal-utils/debug'\nimport {compileType} from '../internal-utils/schema'\nimport {fromSlateValue} from '../internal-utils/values'\nimport {corePriority} from '../priority/priority.core'\nimport {createEditorPriority} from '../priority/priority.types'\nimport type {EditableAPI, PortableTextSlateEditor} from '../types/editor'\nimport {defaultKeyGenerator} from '../utils/key-generator'\nimport {createSlateEditor, type SlateEditor} from './create-slate-editor'\nimport {createEditorDom} from './editor-dom'\nimport type {EditorActor} from './editor-machine'\nimport {editorMachine, rerouteExternalBehaviorEvent} from './editor-machine'\nimport {getEditorSnapshot} from './editor-selector'\nimport {mutationMachine, type MutationActor} from './mutation-machine'\nimport {createEditableAPI} from './plugins/createWithEditableAPI'\nimport {relayMachine, type RelayActor} from './relay-machine'\nimport {syncMachine, type SyncActor} from './sync-machine'\nimport {KEY_TO_VALUE_ELEMENT} from './weakMaps'\n\nconst debug = debugWithName('setup')\n\nexport type InternalEditor = Editor & {\n  _internal: {\n    editable: EditableAPI\n    editorActor: EditorActor\n    slateEditor: SlateEditor\n  }\n}\n\nexport function createInternalEditor(config: EditorConfig): {\n  actors: {\n    editorActor: EditorActor\n    mutationActor: MutationActor\n    relayActor: RelayActor\n    syncActor: SyncActor\n  }\n  editor: InternalEditor\n  subscriptions: Array<() => () => void>\n} {\n  debug('Creating new Editor instance')\n\n  const subscriptions: Array<() => () => void> = []\n  const editorActor = createActor(editorMachine, {\n    input: editorConfigToMachineInput(config),\n  })\n  const relayActor = createActor(relayMachine)\n  const slateEditor = createSlateEditor({\n    editorActor,\n    relayActor,\n    subscriptions,\n  })\n  const editable = createEditableAPI(slateEditor.instance, editorActor)\n  const {mutationActor, syncActor} = createActors({\n    editorActor,\n    relayActor,\n    slateEditor: slateEditor.instance,\n    subscriptions,\n  })\n\n  const editor = {\n    dom: createEditorDom(\n      (event) => editorActor.send(event),\n      slateEditor.instance,\n    ),\n    getSnapshot: () =>\n      getEditorSnapshot({\n        editorActorSnapshot: editorActor.getSnapshot(),\n        slateEditorInstance: slateEditor.instance,\n      }),\n    registerBehavior: (behaviorConfig) => {\n      const priority = createEditorPriority({\n        name: 'custom',\n        reference: {\n          priority: corePriority,\n          importance: 'higher',\n        },\n      })\n      const behaviorConfigWithPriority = {\n        ...behaviorConfig,\n        priority,\n      }\n\n      editorActor.send({\n        type: 'add behavior',\n        behaviorConfig: behaviorConfigWithPriority,\n      })\n\n      return () => {\n        editorActor.send({\n          type: 'remove behavior',\n          behaviorConfig: behaviorConfigWithPriority,\n        })\n      }\n    },\n    send: (event) => {\n      switch (event.type) {\n        case 'update value':\n          syncActor.send(event)\n          break\n\n        case 'update readOnly':\n        case 'patches':\n        case 'update maxBlocks':\n          editorActor.send(event)\n          break\n\n        default:\n          editorActor.send(\n            rerouteExternalBehaviorEvent({\n              event,\n              slateEditor: slateEditor.instance,\n            }),\n          )\n      }\n    },\n    on: (event, listener) => {\n      const subscription = relayActor.on(event, (event) => {\n        switch (event.type) {\n          case 'blurred':\n          case 'done loading':\n          case 'editable':\n          case 'focused':\n          case 'invalid value':\n          case 'loading':\n          case 'mutation':\n          case 'patch':\n          case 'read only':\n          case 'ready':\n          case 'selection':\n          case 'value changed':\n            listener(event)\n            break\n        }\n      })\n\n      return subscription\n    },\n    _internal: {\n      editable,\n      editorActor,\n      slateEditor,\n    },\n  } satisfies InternalEditor\n\n  return {\n    actors: {\n      editorActor,\n      mutationActor,\n      relayActor,\n      syncActor,\n    },\n    editor,\n    subscriptions,\n  }\n}\n\nfunction editorConfigToMachineInput(config: EditorConfig) {\n  const {legacySchema, schema} = compileSchemasFromEditorConfig(config)\n\n  return {\n    converters: createCoreConverters(legacySchema),\n    getLegacySchema: () => legacySchema,\n    keyGenerator: config.keyGenerator ?? defaultKeyGenerator,\n    maxBlocks: config.maxBlocks,\n    readOnly: config.readOnly,\n    schema,\n    initialValue: config.initialValue,\n  } as const\n}\n\nfunction compileSchemasFromEditorConfig(config: EditorConfig) {\n  const legacySchema = config.schemaDefinition\n    ? compileSchemaDefinitionToPortableTextMemberSchemaTypes(\n        config.schemaDefinition,\n      )\n    : createPortableTextMemberSchemaTypes(\n        config.schema.hasOwnProperty('jsonType')\n          ? config.schema\n          : compileType(config.schema),\n      )\n  const schema = config.schemaDefinition\n    ? compileSchema(config.schemaDefinition)\n    : portableTextMemberSchemaTypesToSchema(legacySchema)\n\n  return {\n    legacySchema,\n    schema,\n  }\n}\n\nfunction createActors(config: {\n  editorActor: EditorActor\n  relayActor: RelayActor\n  slateEditor: PortableTextSlateEditor\n  subscriptions: Array<() => () => void>\n}): {\n  mutationActor: MutationActor\n  syncActor: SyncActor\n} {\n  debug('Creating new Actors')\n\n  const mutationActor = createActor(mutationMachine, {\n    input: {\n      readOnly: config.editorActor\n        .getSnapshot()\n        .matches({'edit mode': 'read only'}),\n      schema: config.editorActor.getSnapshot().context.schema,\n      slateEditor: config.slateEditor,\n    },\n  })\n\n  const syncActor = createActor(syncMachine, {\n    input: {\n      initialValue: config.editorActor.getSnapshot().context.initialValue,\n      keyGenerator: config.editorActor.getSnapshot().context.keyGenerator,\n      readOnly: config.editorActor\n        .getSnapshot()\n        .matches({'edit mode': 'read only'}),\n      schema: config.editorActor.getSnapshot().context.schema,\n      slateEditor: config.slateEditor,\n    },\n  })\n\n  config.subscriptions.push(() => {\n    const subscription = mutationActor.on('*', (event) => {\n      if (event.type === 'has pending mutations') {\n        syncActor.send({type: 'has pending mutations'})\n      }\n      if (event.type === 'mutation') {\n        syncActor.send({type: 'mutation'})\n        config.editorActor.send({\n          type: 'mutation',\n          patches: event.patches,\n          snapshot: event.snapshot,\n          value: event.snapshot,\n        })\n      }\n      if (event.type === 'patch') {\n        config.relayActor.send(event)\n      }\n    })\n\n    return () => {\n      subscription.unsubscribe()\n    }\n  })\n\n  config.subscriptions.push(() => {\n    const subscription = syncActor.on('*', (event) => {\n      switch (event.type) {\n        case 'invalid value':\n          config.relayActor.send(event)\n          break\n        case 'value changed':\n          config.relayActor.send(event)\n          break\n        case 'patch':\n          config.editorActor.send({\n            ...event,\n            type: 'internal.patch',\n            value: fromSlateValue(\n              config.slateEditor.children,\n              config.editorActor.getSnapshot().context.schema.block.name,\n              KEY_TO_VALUE_ELEMENT.get(config.slateEditor),\n            ),\n          })\n          break\n\n        default:\n          config.editorActor.send(event)\n      }\n    })\n\n    return () => {\n      subscription.unsubscribe()\n    }\n  })\n\n  config.subscriptions.push(() => {\n    const subscription = config.editorActor.subscribe((snapshot) => {\n      if (snapshot.matches({'edit mode': 'read only'})) {\n        mutationActor.send({type: 'update readOnly', readOnly: true})\n        syncActor.send({type: 'update readOnly', readOnly: true})\n      } else {\n        mutationActor.send({type: 'update readOnly', readOnly: false})\n        syncActor.send({type: 'update readOnly', readOnly: false})\n      }\n    })\n\n    return () => {\n      subscription.unsubscribe()\n    }\n  })\n\n  config.subscriptions.push(() => {\n    const subscription = config.editorActor.on('*', (event) => {\n      switch (event.type) {\n        case 'editable':\n        case 'mutation':\n        case 'ready':\n        case 'read only':\n        case 'selection':\n          config.relayActor.send(event)\n          break\n        case 'internal.patch':\n          mutationActor.send({...event, type: 'patch'})\n          break\n      }\n    })\n\n    return () => {\n      subscription.unsubscribe()\n    }\n  })\n\n  return {\n    mutationActor,\n    syncActor,\n  }\n}\n","import type {EditorChange} from '../types/editor'\nimport type {InternalEditorEmittedEvent} from './relay-machine'\n\nexport function eventToChange(\n  event: InternalEditorEmittedEvent,\n): EditorChange | undefined {\n  switch (event.type) {\n    case 'blurred': {\n      return {type: 'blur', event: event.event}\n    }\n    case 'patch':\n      return event\n    case 'loading': {\n      return {type: 'loading', isLoading: true}\n    }\n    case 'done loading': {\n      return {type: 'loading', isLoading: false}\n    }\n    case 'focused': {\n      return {type: 'focus', event: event.event}\n    }\n    case 'value changed': {\n      return {type: 'value', value: event.value}\n    }\n    case 'invalid value': {\n      return {\n        type: 'invalidValue',\n        resolution: event.resolution,\n        value: event.value,\n      }\n    }\n    case 'mutation': {\n      return event\n    }\n    case 'ready': {\n      return event\n    }\n    case 'selection': {\n      return event\n    }\n    case 'unset': {\n      return event\n    }\n  }\n}\n","import type {\n  ArrayDefinition,\n  ArraySchemaType,\n  Path,\n  PortableTextBlock,\n  PortableTextChild,\n  PortableTextObject,\n} from '@sanity/types'\nimport {\n  Component,\n  useEffect,\n  type MutableRefObject,\n  type PropsWithChildren,\n} from 'react'\nimport {Subject} from 'rxjs'\nimport {Slate} from 'slate-react'\nimport {debugWithName} from '../internal-utils/debug'\nimport {stopActor} from '../internal-utils/stop-actor'\nimport type {\n  AddedAnnotationPaths,\n  EditableAPI,\n  EditableAPIDeleteOptions,\n  EditorChange,\n  EditorChanges,\n  EditorSelection,\n  PatchObservable,\n  PortableTextMemberSchemaTypes,\n} from '../types/editor'\nimport {createInternalEditor, type InternalEditor} from './create-editor'\nimport {EditorActorContext} from './editor-actor-context'\nimport type {EditorActor} from './editor-machine'\nimport {eventToChange} from './event-to-change'\nimport {PortableTextEditorContext} from './hooks/usePortableTextEditor'\nimport type {MutationActor} from './mutation-machine'\nimport {RelayActorContext} from './relay-actor-context'\nimport type {RelayActor} from './relay-machine'\nimport type {SyncActor} from './sync-machine'\n\nconst debug = debugWithName('component:PortableTextEditor')\n\n/**\n * Props for the PortableTextEditor component\n *\n * @public\n * @deprecated Use `EditorProvider` instead\n */\nexport type PortableTextEditorProps<\n  TEditor extends InternalEditor | undefined = undefined,\n> = PropsWithChildren<\n  TEditor extends InternalEditor\n    ? {\n        /**\n         * @internal\n         */\n        editor: TEditor\n      }\n    : {\n        editor?: undefined\n\n        /**\n         * Function that gets called when the editor changes the value\n         */\n        onChange: (change: EditorChange) => void\n\n        /**\n         * Schema type for the portable text field\n         */\n        schemaType: ArraySchemaType<PortableTextBlock> | ArrayDefinition\n\n        /**\n         * Maximum number of blocks to allow within the editor\n         */\n        maxBlocks?: number | string\n\n        /**\n         * Function used to generate keys for array items (`_key`)\n         */\n        keyGenerator?: () => string\n\n        /**\n         * Observable of local and remote patches for the edited value.\n         */\n        patches$?: PatchObservable\n\n        /**\n         * Backward compatibility (renamed to patches$).\n         */\n        incomingPatches$?: PatchObservable\n\n        /**\n         * Whether or not the editor should be in read-only mode\n         */\n        readOnly?: boolean\n\n        /**\n         * The current value of the portable text field\n         */\n        value?: PortableTextBlock[]\n\n        /**\n         * A ref to the editor instance\n         */\n        editorRef?: MutableRefObject<PortableTextEditor | null>\n      }\n>\n\n/**\n * The main Portable Text Editor component.\n * @public\n * @deprecated Use `EditorProvider` instead\n */\nexport class PortableTextEditor extends Component<\n  PortableTextEditorProps<InternalEditor | undefined>\n> {\n  public static displayName = 'PortableTextEditor'\n  /**\n   * An observable of all the editor changes.\n   */\n  public change$: EditorChanges = new Subject()\n  /**\n   * A lookup table for all the relevant schema types for this portable text type.\n   */\n  public schemaTypes: PortableTextMemberSchemaTypes\n  /**\n   * The editor instance\n   */\n  private editor: InternalEditor\n  /*\n   * The editor API (currently implemented with Slate).\n   */\n  private editable: EditableAPI\n\n  private actors?: {\n    editorActor: EditorActor\n    mutationActor: MutationActor\n    relayActor: RelayActor\n    syncActor: SyncActor\n  }\n\n  private subscriptions: Array<() => () => void> = []\n  private unsubscribers: Array<() => void> = []\n\n  constructor(props: PortableTextEditorProps) {\n    super(props)\n\n    if (props.editor) {\n      this.editor = props.editor as InternalEditor\n      this.schemaTypes = this.editor._internal.editorActor\n        .getSnapshot()\n        .context.getLegacySchema()\n    } else {\n      const {actors, editor, subscriptions} = createInternalEditor({\n        initialValue: props.value,\n        keyGenerator: props.keyGenerator,\n        maxBlocks:\n          props.maxBlocks === undefined\n            ? undefined\n            : Number.parseInt(props.maxBlocks.toString(), 10),\n        readOnly: props.readOnly,\n        schema: props.schemaType,\n      })\n\n      this.subscriptions = subscriptions\n      this.actors = actors\n\n      this.editor = editor\n      this.schemaTypes = actors.editorActor\n        .getSnapshot()\n        .context.getLegacySchema()\n    }\n\n    this.editable = this.editor._internal.editable\n  }\n\n  componentDidMount(): void {\n    if (!this.actors) {\n      return\n    }\n\n    for (const subscription of this.subscriptions) {\n      this.unsubscribers.push(subscription())\n    }\n\n    const relayActorSubscription = this.actors.relayActor.on('*', (event) => {\n      const change = eventToChange(event)\n\n      if (!change) {\n        return\n      }\n\n      if (!this.props.editor) {\n        this.props.onChange(change)\n      }\n\n      this.change$.next(change)\n    })\n\n    this.unsubscribers.push(relayActorSubscription.unsubscribe)\n\n    this.actors.editorActor.start()\n    this.actors.mutationActor.start()\n    this.actors.relayActor.start()\n    this.actors.syncActor.start()\n  }\n\n  componentDidUpdate(prevProps: PortableTextEditorProps) {\n    // Set up the schema type lookup table again if the source schema type changes\n    if (\n      !this.props.editor &&\n      !prevProps.editor &&\n      this.props.schemaType !== prevProps.schemaType\n    ) {\n      console.warn('Updating schema type is no longer supported')\n    }\n\n    if (!this.props.editor && !prevProps.editor) {\n      if (this.props.readOnly !== prevProps.readOnly) {\n        this.editor._internal.editorActor.send({\n          type: 'update readOnly',\n          readOnly: this.props.readOnly ?? false,\n        })\n      }\n\n      if (this.props.maxBlocks !== prevProps.maxBlocks) {\n        this.editor._internal.editorActor.send({\n          type: 'update maxBlocks',\n          maxBlocks:\n            this.props.maxBlocks === undefined\n              ? undefined\n              : Number.parseInt(this.props.maxBlocks.toString(), 10),\n        })\n      }\n\n      if (this.props.value !== prevProps.value) {\n        this.editor.send({\n          type: 'update value',\n          value: this.props.value,\n        })\n      }\n\n      if (\n        this.props.editorRef !== prevProps.editorRef &&\n        this.props.editorRef\n      ) {\n        this.props.editorRef.current = this\n      }\n    }\n  }\n\n  componentWillUnmount(): void {\n    for (const unsubscribe of this.unsubscribers) {\n      unsubscribe()\n    }\n\n    if (this.actors) {\n      stopActor(this.actors.editorActor)\n      stopActor(this.actors.mutationActor)\n      stopActor(this.actors.relayActor)\n      stopActor(this.actors.syncActor)\n    }\n  }\n\n  public setEditable = (editable: EditableAPI) => {\n    this.editor._internal.editable = {\n      ...this.editor._internal.editable,\n      ...editable,\n    }\n  }\n\n  render() {\n    const legacyPatches = !this.props.editor\n      ? (this.props.incomingPatches$ ?? this.props.patches$)\n      : undefined\n\n    return (\n      <>\n        {legacyPatches ? (\n          <RoutePatchesObservableToEditorActor\n            editorActor={this.editor._internal.editorActor}\n            patches$={legacyPatches}\n          />\n        ) : null}\n        <EditorActorContext.Provider value={this.editor._internal.editorActor}>\n          <RelayActorContext.Provider value={this.actors!.relayActor}>\n            <Slate\n              editor={this.editor._internal.slateEditor.instance}\n              initialValue={this.editor._internal.slateEditor.initialValue}\n            >\n              <PortableTextEditorContext.Provider value={this}>\n                {this.props.children}\n              </PortableTextEditorContext.Provider>\n            </Slate>\n          </RelayActorContext.Provider>\n        </EditorActorContext.Provider>\n      </>\n    )\n  }\n\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const isActive = useEditorSelector(editor, selectors.getActiveAnnotations)\n   * ```\n   */\n  static activeAnnotations = (\n    editor: PortableTextEditor,\n  ): PortableTextObject[] => {\n    return editor && editor.editable ? editor.editable.activeAnnotations() : []\n  }\n\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const isActive = useEditorSelector(editor, selectors.isActiveAnnotation(...))\n   * ```\n   */\n  static isAnnotationActive = (\n    editor: PortableTextEditor,\n    annotationType: PortableTextObject['_type'],\n  ): boolean => {\n    return editor && editor.editable\n      ? editor.editable.isAnnotationActive(annotationType)\n      : false\n  }\n\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'annotation.add',\n   *  annotation: {\n   *    name: '...',\n   *    value: {...},\n   *  }\n   * })\n   * ```\n   */\n  static addAnnotation = <TSchemaType extends {name: string}>(\n    editor: PortableTextEditor,\n    type: TSchemaType,\n    value?: {[prop: string]: unknown},\n  ): AddedAnnotationPaths | undefined =>\n    editor.editable?.addAnnotation(type, value)\n\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'blur',\n   * })\n   * ```\n   */\n  static blur = (editor: PortableTextEditor): void => {\n    debug('Host blurred')\n    editor.editable?.blur()\n  }\n\n  static delete = (\n    editor: PortableTextEditor,\n    selection: EditorSelection,\n    options?: EditableAPIDeleteOptions,\n  ) => editor.editable?.delete(selection, options)\n\n  static findDOMNode = (\n    editor: PortableTextEditor,\n    element: PortableTextBlock | PortableTextChild,\n  ) => {\n    return editor.editable?.findDOMNode(element)\n  }\n\n  static findByPath = (editor: PortableTextEditor, path: Path) => {\n    return editor.editable?.findByPath(path) || []\n  }\n\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'focus',\n   * })\n   * ```\n   */\n  static focus = (editor: PortableTextEditor): void => {\n    debug('Host requesting focus')\n    editor.editable?.focus()\n  }\n\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const focusBlock = useEditorSelector(editor, selectors.getFocusBlock)\n   * ```\n   */\n  static focusBlock = (editor: PortableTextEditor) => {\n    return editor.editable?.focusBlock()\n  }\n\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const focusChild = useEditorSelector(editor, selectors.getFocusChild)\n   * ```\n   */\n  static focusChild = (\n    editor: PortableTextEditor,\n  ): PortableTextChild | undefined => {\n    return editor.editable?.focusChild()\n  }\n\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const selection = useEditorSelector(editor, selectors.getSelection)\n   * ```\n   */\n  static getSelection = (editor: PortableTextEditor) => {\n    return editor.editable ? editor.editable.getSelection() : null\n  }\n\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const value = useEditorSelector(editor, selectors.getValue)\n   * ```\n   */\n  static getValue = (editor: PortableTextEditor) => {\n    return editor.editable?.getValue()\n  }\n\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const isActive = useEditorSelector(editor, selectors.isActiveStyle(...))\n   * ```\n   */\n  static hasBlockStyle = (editor: PortableTextEditor, blockStyle: string) => {\n    return editor.editable?.hasBlockStyle(blockStyle)\n  }\n\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const isActive = useEditorSelector(editor, selectors.isActiveListItem(...))\n   * ```\n   */\n  static hasListStyle = (editor: PortableTextEditor, listStyle: string) => {\n    return editor.editable?.hasListStyle(listStyle)\n  }\n\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const isSelectionCollapsed = useEditorSelector(editor, selectors.isSelectionCollapsed)\n   * ```\n   */\n  static isCollapsedSelection = (editor: PortableTextEditor) =>\n    editor.editable?.isCollapsedSelection()\n\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const isSelectionExpanded = useEditorSelector(editor, selectors.isSelectionExpanded)\n   * ```\n   */\n  static isExpandedSelection = (editor: PortableTextEditor) =>\n    editor.editable?.isExpandedSelection()\n\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const isActive = useEditorSelector(editor, selectors.isActiveDecorator(...))\n   * ```\n   */\n  static isMarkActive = (editor: PortableTextEditor, mark: string) =>\n    editor.editable?.isMarkActive(mark)\n\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'insert.span',\n   *  text: '...',\n   *  annotations: [{name: '...', value: {...}}],\n   *  decorators: ['...'],\n   * })\n   * editor.send({\n   *  type: 'insert.inline object',\n   *  inlineObject: {\n   *    name: '...',\n   *    value: {...},\n   *  },\n   * })\n   * ```\n   */\n  static insertChild = <TSchemaType extends {name: string}>(\n    editor: PortableTextEditor,\n    type: TSchemaType,\n    value?: {[prop: string]: unknown},\n  ): Path | undefined => {\n    debug(`Host inserting child`)\n    return editor.editable?.insertChild(type, value)\n  }\n\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'insert.block object',\n   *  blockObject: {\n   *    name: '...',\n   *    value: {...},\n   *  },\n   *  placement: 'auto' | 'after' | 'before',\n   * })\n   * ```\n   */\n  static insertBlock = <TSchemaType extends {name: string}>(\n    editor: PortableTextEditor,\n    type: TSchemaType,\n    value?: {[prop: string]: unknown},\n  ): Path | undefined => {\n    return editor.editable?.insertBlock(type, value)\n  }\n\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'insert.break',\n   * })\n   * ```\n   */\n  static insertBreak = (editor: PortableTextEditor): void => {\n    return editor.editable?.insertBreak()\n  }\n\n  static isVoid = (\n    editor: PortableTextEditor,\n    element: PortableTextBlock | PortableTextChild,\n  ) => {\n    return editor.editable?.isVoid(element)\n  }\n\n  static isObjectPath = (_editor: PortableTextEditor, path: Path): boolean => {\n    if (!path || !Array.isArray(path)) return false\n    const isChildObjectEditPath = path.length > 3 && path[1] === 'children'\n    const isBlockObjectEditPath = path.length > 1 && path[1] !== 'children'\n    return isBlockObjectEditPath || isChildObjectEditPath\n  }\n\n  static marks = (editor: PortableTextEditor) => {\n    return editor.editable?.marks()\n  }\n\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'select',\n   *  selection: {...},\n   * })\n   * ```\n   */\n  static select = (\n    editor: PortableTextEditor,\n    selection: EditorSelection | null,\n  ) => {\n    debug(`Host setting selection`, selection)\n    editor.editable?.select(selection)\n  }\n\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'annotation.remove',\n   *  annotation: {\n   *    name: '...',\n   *  },\n   * })\n   * ```\n   */\n  static removeAnnotation = <TSchemaType extends {name: string}>(\n    editor: PortableTextEditor,\n    type: TSchemaType,\n  ) => editor.editable?.removeAnnotation(type)\n\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'style.toggle',\n   *  style: '...',\n   * })\n   * ```\n   */\n  static toggleBlockStyle = (\n    editor: PortableTextEditor,\n    blockStyle: string,\n  ) => {\n    debug(`Host is toggling block style`)\n    return editor.editable?.toggleBlockStyle(blockStyle)\n  }\n\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'list item.toggle',\n   *  listItem: '...',\n   * })\n   * ```\n   */\n  static toggleList = (editor: PortableTextEditor, listStyle: string): void => {\n    return editor.editable?.toggleList(listStyle)\n  }\n\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'decorator.toggle',\n   *  decorator: '...',\n   * })\n   * ```\n   */\n  static toggleMark = (editor: PortableTextEditor, mark: string): void => {\n    debug(`Host toggling mark`, mark)\n    editor.editable?.toggleMark(mark)\n  }\n\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const selectedSlice = useEditorSelector(editor, selectors.getSelectedSlice)\n   * ```\n   */\n  static getFragment = (\n    editor: PortableTextEditor,\n  ): PortableTextBlock[] | undefined => {\n    return editor.editable?.getFragment()\n  }\n\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *   type: 'history.undo',\n   * })\n   * ```\n   */\n  static undo = (editor: PortableTextEditor): void => {\n    debug('Host undoing')\n    editor.editable?.undo()\n  }\n\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *   type: 'history.redo',\n   * })\n   * ```\n   */\n  static redo = (editor: PortableTextEditor): void => {\n    debug('Host redoing')\n    editor.editable?.redo()\n  }\n\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const isOverlapping = useEditorSelector(editor, selectors.isOverlappingSelection(selectionB))\n   * ```\n   */\n  static isSelectionsOverlapping = (\n    editor: PortableTextEditor,\n    selectionA: EditorSelection,\n    selectionB: EditorSelection,\n  ) => {\n    return editor.editable?.isSelectionsOverlapping(selectionA, selectionB)\n  }\n}\n\nfunction RoutePatchesObservableToEditorActor(props: {\n  editorActor: EditorActor\n  patches$: PatchObservable\n}) {\n  useEffect(() => {\n    const subscription = props.patches$.subscribe((payload) => {\n      props.editorActor.send({\n        type: 'patches',\n        ...payload,\n      })\n    })\n\n    return () => {\n      subscription.unsubscribe()\n    }\n  }, [props.editorActor, props.patches$])\n\n  return null\n}\n","import type React from 'react'\nimport {useEffect, useState} from 'react'\nimport {Slate} from 'slate-react'\nimport type {EditorConfig} from '../editor'\nimport {stopActor} from '../internal-utils/stop-actor'\nimport {createInternalEditor} from './create-editor'\nimport {EditorActorContext} from './editor-actor-context'\nimport {EditorContext} from './editor-context'\nimport {eventToChange} from './event-to-change'\nimport {PortableTextEditorContext} from './hooks/usePortableTextEditor'\nimport {\n  PortableTextEditor,\n  type PortableTextEditorProps,\n} from './PortableTextEditor'\nimport {RelayActorContext} from './relay-actor-context'\n\n/**\n * @public\n */\nexport type EditorProviderProps = {\n  initialConfig: EditorConfig\n  children?: React.ReactNode\n}\n\n/**\n * @public\n * The EditorProvider component is used to set up the editor context and configure the Portable Text Editor.\n * @example\n * ```tsx\n * import {EditorProvider} from '@portabletext/editor'\n *\n * function App() {\n *  return (\n *    <EditorProvider initialConfig={{ ... }} >\n *      ...\n *    </EditorProvider>\n *  )\n * }\n *\n * ```\n * @group Components\n */\nexport function EditorProvider(props: EditorProviderProps) {\n  const [{internalEditor, portableTextEditor}] = useState(() => {\n    const internalEditor = createInternalEditor(props.initialConfig)\n    const portableTextEditor = new PortableTextEditor({\n      editor: internalEditor.editor,\n    } as unknown as PortableTextEditorProps)\n\n    return {internalEditor, portableTextEditor}\n  })\n\n  useEffect(() => {\n    const unsubscribers: Array<() => void> = []\n\n    for (const subscription of internalEditor.subscriptions) {\n      unsubscribers.push(subscription())\n    }\n\n    const relayActorSubscription = internalEditor.actors.relayActor.on(\n      '*',\n      (event) => {\n        const change = eventToChange(event)\n\n        if (change) {\n          portableTextEditor.change$.next(change)\n        }\n      },\n    )\n    unsubscribers.push(relayActorSubscription.unsubscribe)\n\n    internalEditor.actors.editorActor.start()\n    internalEditor.actors.editorActor.send({\n      type: 'add slate editor',\n      editor: internalEditor.editor._internal.slateEditor.instance,\n    })\n    internalEditor.actors.mutationActor.start()\n    internalEditor.actors.relayActor.start()\n    internalEditor.actors.syncActor.start()\n\n    return () => {\n      for (const unsubscribe of unsubscribers) {\n        unsubscribe()\n      }\n\n      stopActor(internalEditor.actors.editorActor)\n      stopActor(internalEditor.actors.mutationActor)\n      stopActor(internalEditor.actors.relayActor)\n      stopActor(internalEditor.actors.syncActor)\n    }\n  }, [internalEditor, portableTextEditor])\n\n  return (\n    <EditorContext.Provider value={internalEditor.editor}>\n      <EditorActorContext.Provider value={internalEditor.actors.editorActor}>\n        <RelayActorContext.Provider value={internalEditor.actors.relayActor}>\n          <Slate\n            editor={internalEditor.editor._internal.slateEditor.instance}\n            initialValue={\n              internalEditor.editor._internal.slateEditor.initialValue\n            }\n          >\n            <PortableTextEditorContext.Provider value={portableTextEditor}>\n              {props.children}\n            </PortableTextEditorContext.Provider>\n          </Slate>\n        </RelayActorContext.Provider>\n      </EditorActorContext.Provider>\n    </EditorContext.Provider>\n  )\n}\n","import {startTransition, useContext, useEffect, useState} from 'react'\nimport type {EditorSelection} from '../../types/editor'\nimport {EditorActorContext} from '../editor-actor-context'\n\n/**\n * @deprecated Use `useEditorSelector` to get the current editor selection.\n * @public\n * Get the current editor selection from the React context.\n */\nexport const usePortableTextEditorSelection = (): EditorSelection => {\n  const editorActor = useContext(EditorActorContext)\n  const [selection, setSelection] = useState<EditorSelection>(null)\n\n  useEffect(() => {\n    const subscription = editorActor.on('selection', (event) => {\n      // Set the selection state in a transition, we don't need the state immediately.\n      startTransition(() => {\n        setSelection(event.selection)\n      })\n    })\n\n    return () => {\n      subscription.unsubscribe()\n    }\n  }, [editorActor])\n\n  return selection\n}\n"],"names":["EditorEventListener","props","$","_c","editor","useEditor","t0","t1","on","subscription","unsubscribe","useEffect","rootName","debug","debugWithName","name","namespace","enabled","VOID_CHILD_KEY","keepObjectEquality","object","keyMap","value","_key","isEqual","toSlateValue","schemaTypes","Array","isArray","map","block","_type","rest","textBlock","hasInlines","hasMissingStyle","style","hasMissingMarkDefs","markDefs","hasMissingChildren","children","child","cType","cKey","cRest","text","marks","__inline","Element","isElement","styles","fromSlateValue","textBlockType","Error","_cType","v","k","t","_i","blockValue","isEqualToEmptyEditor","undefined","length","Text","isText","join","getFocusBlock","selection","Editor","node","focus","path","slice","getFocusSpan","focusBlock","isTextBlock","isTextSpan","getSelectionStartBlock","selectionStartPoint","Range","start","getPointBlock","point","getSelectionEndBlock","selectionEndPoint","end","getFocusChild","focusBlockPath","childIndex","at","focusChild","Node","getPointChild","blockPath","pointChild","getFirstBlock","firstBlockPath","getLastBlock","lastBlockPath","getNodeBlock","schema","isEditor","isBlockElement","elementToBlock","element","parent","from","nodes","mode","match","n","some","isInline","blockObjects","blockObject","isListItemActive","listItem","selectedBlocks","every","isListBlock","isStyleActive","slateRangeToSelection","range","anchorBlock","anchor","anchorChild","offset","backward","isBackward","push","getEventPosition","editorActor","slateEditor","event","getSnapshot","matches","setup","eventNode","getEventNode","eventBlock","context","eventPositionBlock","getEventPositionBlock","eventSelection","getEventSelection","getBlockStartPoint","getBlockEndPoint","eventSelectionFocusBlockKey","getBlockKeyFromSelectionPoint","isSelectionCollapsed","DOMEditor","hasTarget","target","toSlateNode","firstBlock","firstBlockRect","toDOMNode","getBoundingClientRect","pageY","top","lastBlock","lastBlockRef","bottom","elementRect","height","Math","abs","getSlateRangeFromEvent","isDOMNode","window","getWindow","domRange","document","caretPositionFromPoint","position","clientX","clientY","createRange","setStart","offsetNode","setEnd","caretRangeFromPoint","console","warn","toSlateRange","exactMatch","suppressThrow","normalizePoint","newPath","newOffset","blockKey","childKey","find","blk","cld","normalizeSelection","newAnchor","newFocus","snapshot","isEqualSelectionPoints","anchorPoint","toSlateSelectionPoint","focusPoint","selectionPoint","direction","blockIndex","blockIndexMap","get","getChildKeyFromSelectionPoint","spanSelectionPoint","blockOffsetToSpanSelectionPoint","blockOffset","childPath","pathChild","isSpan","concat","min","EditorActorContext","createContext","DropIndicator","Symbol","for","width","borderBottom","zIndex","RenderDefaultBlockObject","userSelect","RenderDefaultInlineObject","inlineObject","createEditorPriority","config","id","defaultKeyGenerator","reference","corePriority","getDragSelection","dragSelection","getFocusInlineObject","draggingCollapsedSelection","draggedTextBlock","getFocusTextBlock","draggedSpan","getSelectedBlocks","isSelectionExpanded","selectionStartBlock","selectionEndBlock","isOverlappingSelection","createCoreBlockElementBehaviorsConfig","key","onSetDragPositionBlock","behavior","defineBehavior","guard","dropFocusBlock","dragOrigin","draggedBlock","isSelectingEntireBlocks","actions","type","effect","priority","importance","forward","useCoreBlockElementBehaviors","useContext","t2","behaviorConfigs","behaviorConfig","send","behaviorConfig_0","RenderBlockObject","dragPositionBlock","setDragPositionBlock","useState","blockObjectRef","useRef","selected","useSelected","isCollapsed","focused","useSlateSelector","legacySchema","t3","schemaType","legacySchemaType","error","t4","t5","readOnly","t6","renderBlock","RenderBlock","t7","t8","t9","attributes","editorElementRef","RenderInlineObject","inlineObjectRef","useSlateStatic","inlineObjects","findPath","inlineObject_0","display","renderChild","RenderChild","annotations","RenderTextBlock","blockRef","editor_0","listIndexMap","listIndex","renderStyle","legacyStyleSchemaType","renderListItem","lists","list","legacyListItemSchemaType","level","t10","t11","t12","t13","t14","t15","t16","spellCheck","RenderListItem","RenderStyle","RenderElement","useSelector","_temp","_temp2","slateStatic","s_0","s","getLegacySchema","defaultCompare","a","b","useEditorSelector","selector","compare","editorActorSnapshot","getEditorSnapshot","slateEditorInstance","_internal","instance","converters","keyGenerator","decoratorState","RenderSpan","spanRef","leaf","focusedSpan","editorActorSnapshot_0","snapshot_0","spanSelection","parent_0","block_0","annotationMarkDefs","renderAnnotation","renderDecorator","decoratorSchemaTypes","decorators","uniq","filter","mark","includes","flatMap","mark_0","markDef_0","markDef","mark_1","legacyDecoratorSchemaType","dec","annotationMarkDef","legacyAnnotationSchemaType","_child","span","decorator","RenderAnnotation","RenderDecorator","PLACEHOLDER_STYLE","pointerEvents","left","right","RenderLeaf","renderedSpan","renderPlaceholder","placeholder","rangeDecoration","component","RenderText","PortableTextEditorContext","usePortableTextEditor","IS_MAC","test","navigator","userAgent","modifiers","alt","control","meta","shift","aliases","add","break","cmd","command","ctl","ctrl","del","down","esc","ins","mod","opt","option","return","space","spacebar","up","win","windows","keyCodes","isHotkey","hotkey","compareHotkey","parseHotkey","parsedHotkey","altKey","ctrlKey","metaKey","shiftKey","hotkeySegments","replace","split","rawHotkeySegment","optional","endsWith","hotkeySegment","keyName","toKeyName","modifier","alias","code","TypeError","keyCode","toKeyCode","toLowerCase","toUpperCase","charCodeAt","createWithHotkeys","portableTextEditor","hotkeysFromOptions","reservedHotkeys","activeHotkeys","pteWithHotKeys","Object","keys","forEach","cat","nativeEvent","preventDefault","possibleMark","behaviorEvent","possibleCommand","moveRangeByOperation","operation","Point","transform","equals","slateOperationCallback","input","sendBack","originalApply","apply","op","rangeDecorationsMachine","types","events","assign","pendingRangeDecorations","rangeDecorations","set up initial range decorations","rangeDecorationState","slateRange","isRange","onMoved","newSelection","origin","decoratedRanges","update range decorations","move range decorations","decoratedRange","newRange","newRangeSelection","decorate","fn","createDecorate","actors","fromCallback","guards","has pending range decorations","has range decorations","has different decorations","existingRangeDecorations","payload","newRangeDecorations","not read only","should skip setup","skipSetup","createMachine","invoke","src","initial","states","always","and","entry","_","Path","intersection","RelayActorContext","validateSelectionSetup","pending operations","operations","validateSelectionAction","createAction","validateSelection","editorElement","validateSelectionMachine","idle","waiting","after","reenter","root","ReactEditor","findDocumentOrShadowRoot","activeElement","domSelection","getSelection","rangeCount","existingDOMRange","getRangeAt","newDOMRange","toDOMRange","startOffset","endOffset","removeAllRanges","addRange","Transforms","deselect","select","onChange","IS_PROCESSING_REMOTE_CHANGES","WeakMap","KEY_TO_SLATE_ELEMENT","KEY_TO_VALUE_ELEMENT","SLATE_TO_PORTABLE_TEXT_RANGE","PortableTextEditable","forwardRef","forwardedRef","hotkeys","onBeforeInput","onBlur","onClick","onCopy","onCut","onDrag","onDragEnd","onDragEnter","onDragLeave","onDragOver","onDragStart","onDrop","onFocus","onPaste","propsSelection","restProps","scrollSelectionIntoView","hasInvalidValue","setHasInvalidValue","relayActor","useSlate","validateSelectionActor","useActorRef","rangeDecorationsActor","bb0","eProps","renderElement","leafProps","renderLeaf","renderText","_temp3","JSON","stringify","normalizedSelection","_temp4","restoreSelectionFromProps","onReady","onInvalidValue","onValueChanged","t17","clipboardData","stopPropagation","originEvent","dataTransfer","handleCopy","t18","event_0","selection_0","position_0","handleCut","t19","event_1","onPasteResult","Promise","resolve","then","result_1","result","insert","selection_1","position_1","blocks","parseBlocks","options","removeUnusedMarkDefs","validateFields","placement","catch","_temp5","finally","selection_2","position_2","handlePaste","t20","event_2","isDefaultPrevented","handleOnFocus","t21","event_3","isPropagationStopped","position_3","handleClick","t22","event_4","handleOnBlur","t23","event_5","handleOnBeforeInput","t24","event_6","onKeyDown","handleKeyDown","t25","event_7","onKeyUp","handleKeyUp","t26","bb1","noop","t27","_editor","scrollSelectionIntoViewToSlate","t28","onDragEnd_0","onDrop_0","addEventListener","removeEventListener","t29","event_8","position_4","handleDragStart","t30","event_9","handleDrag","t31","event_10","handleDragEnd","t32","event_11","position_6","handleDragEnter","t33","event_12","position_7","internalDrag","handleDragOver","t34","event_13","position_8","handleDrop","t35","event_14","handleDragLeave","t36","current","mutationObserver","MutationObserver","observe","attributeOldValue","characterData","childList","subtree","disconnect","callbackRef","t37","SlateEditable","className","displayName","props_0","o","forEachActor","actorRef","callback","values","stopActor","persistedSnapshots","ref","observers","Set","systemSnapshot","system","stop","_snapshot","_processingStatus","converterJson","mimeType","serialize","portableTextConverter","converter","reason","deserialize","converterPortableText","getSelectedValue","data","parse","parsedBlocks","parsedBlock","parseBlock","createConverterTextHtml","html","toHTML","onMissingComponent","components","unknownType","htmlToBlocks","portableText","unstable_whitespaceOnPasteMode","createConverterTextPlain","inlineObjectType","title","blockObjectType","textToHtml","escapeHtml","line","entityMap","str","String","createCoreConverters","compileType","rawType","Schema","compile","levelIndexMaps","Map","buildIndexMaps","clear","previousListItem","set","levelIndexMap","levelsToDelete","delete","levelCounter","createPlaceholderBlock","getPreviousSpan","spanPath","previousSpan","reverse","isBefore","getNextSpan","nextSpan","isAfter","IS_NORMALIZING_NODE","withNormalizeNode","prev","isNormalizingNode","withRemoteChanges","isChangingRemotely","IS_UDOING","IS_REDOING","withUndoing","isUndoing","setIsUndoing","withRedoing","isRedoing","setIsRedoing","createWithPortableTextMarkModel","normalizeNode","nodeEntry","nextNode","mergeNodes","voids","setNodes","orphanedAnnotations","def","markDefKeys","newMarkDefs","has","properties","newProperties","previousSelectionIsCollapsed","newSelectionIsCollapsed","focusSpan","newFocusSpan","movedToNextSpan","movedToPreviousSpan","isExpanded","depth","spanHasAnnotations","deletingFromTheEnd","deletingAllText","previousSpanHasSameAnnotation","nextSpanHasSameAnnotation","withoutNormalizing","getActiveDecorators","targetBlock","targetPath","oldDefs","removeDecoratorOperationImplementation","hanging","eMark","lonelyEmptySpan","existingMarksWithoutDecorator","existingMark","cloneDiff","diff2","patch","CURRENT_UNDO_STEP","getCurrentUndoStepId","undoStepId","createUndoStep","clearUndoStep","SAVING","REMOTE_PATCHES","UNDO_STEP_LIMIT","isSaving","state","getRemotePatches","createWithUndoRedo","previousSnapshot","remotePatches","previousUndoStepId","subscriptions","sub","patches","reset","history","undos","redos","splice","time","Date","step","lastOp","overwrite","shouldOverwrite","save","currentUndoStepId","merge","shouldMerge","newStep","createSelectOperation","timestamp","shouldClear","historyUndoOperationImplementation","otherPatches","item","transformedOperations","flatten","transformOperation","reversedOperations","Operation","inverse","withoutSaving","err","pop","historyRedoOperationImplementation","transformedOperation","insertBlockIndex","findIndex","items","adjustBlockPath","unsetBlockIndex","operationTargetBlock","findOperationTargetBlock","parsePatch","diffPatch","adjustOffsetBy","changedOffset","utf8Start1","diffs","diff","index","diffType","DIFF_INSERT","DIFF_DELETE","DIFF_EQUAL","dType","currentFocus","currentAnchor","addAnnotationOperationImplementation","parsedAnnotation","parseAnnotation","annotation","annotationKey","removeAnnotationOperationImplementation","potentialAnnotations","selectedChild","selectedChildPath","annotationToRemove","previousSpansWithSameAnnotation","nextSpansWithSameAnnotation","marksWithoutAnnotation","blockSetOperationImplementation","filteredProps","updatedBlock","slateBlock","blockUnsetOperationImplementation","location","propsToRemove","prop","updatedTextBlock","omit","propsToSet","updatedBlockObject","childSetOperationImplementation","childEntry","definition","fields","field","childUnsetOperationImplementation","newNode","newValue","applyAll","decoratorAddOperationImplementation","manualAnchor","manualFocus","manualSelection","editorSelection","anchorOffset","selectionPointToBlockOffset","focusOffset","blockOffsetsToSelection","offsets","trimmedSelection","getTrimmedSelection","splitTextNodes","existingMarks","deleteOperationImplementation","anchorBlockKey","focusBlockKey","startBlockKey","endBlockKey","startBlockIndex","startBlock","endBlockIndex","endBlock","unit","removeNodes","insertNodes","parentBlockEntry","above","isBlock","parentBlockPath","parentElementRange","currentLineRange","findCurrentLineRange","deleteText","setSelection","parentRange","parentRangeBoundary","positions","middle","floor","rangesAreOnSameLine","range1","range2","rect1","rect2","domRectsIntersect","rect","compareRect","insertBlockOperationImplementation","fragment","insertBlock","startBlockPath","endBlockPath","nextPath","selectionBefore","insertFragment","currentSelection","endBlockEndPoint","adjustedSelection","next","endBlockChildKeys","endBlockMarkDefsKeys","markDefKeyMap","adjustedMarkDefs","newKey","adjustedChildren","adjustedBlock","endBlockStartPoint","isEmptyTextBlock","splitNodes","insertChildOperationImplementation","focusBlockIndex","focusChildIndex","parseSpan","EDITOR_TO_PENDING_SELECTION","parseInlineObject","insertTextOperationImplementation","insertText","moveBackwardOperationImplementation","move","distance","moveBlockOperationImplementation","originKey","originBlockIndex","destinationKey","to","destinationBlockIndex","moveNodes","moveForwardOperationImplementation","selectOperationImplementation","IS_FOCUSED","IS_READ_ONLY","behaviorOperationImplementations","performOperation","message","IS_PERFORMING_OPERATION","withPerformingBehaviorOperation","isPerformingBehaviorOperation","createWithEventListeners","maxBlocks","editorDelete","deleteBackward","deleteForward","insertBreak","insertData","insertSoftBreak","redo","setFragmentData","undo","createWithMaxBlocks","rows","createWithObjectKeys","existingKeys","descendants","prevPath","previous","prevIndex","previousBlock","previousBlockChildKeys","previousBlockMarkDefKeys","createApplyPatch","changed","insertPatch","unsetPatch","setPatch","diffMatchPatch","findBlock","findBlockChild","diffMatchPatchApplyPatches","allowExceedingIndices","cleanupEfficiency","makeDiff","blocksToInsert","targetBlockIndex","normalizedIdx","editorWasEmptyBefore","targetChild","childrenToInsert","childInsertPath","oldText","newText","propPath","propEntry","reservedProps","nextRest","_prevChildren","prevRest","blockNode","newVal","previousSelection","pteCreateTextBlock","newKeys","removedProperties","property","unsetNodes","isMatch","isKeyedSegment","insertTextPatch","beforeValue","textChild","prevBlock","prevChild","prevText","removeTextPatch","beforeBlock","prevTextChild","setNodePatch","setNode","omitBy","isUndefined","val","indexOf","insertNodePatch","targetKey","setIfMissing","splitNodePatch","splitBlock","oldBlock","targetValue","unset","splitSpan","targetSpans","removeNodePatch","spanToRemove","mergeNodePatch","newBlock","updatedSpan","removedSpan","moveNodePatch","childToInsert","PATCHING","withoutPatching","isPatching","createWithPatches","previousChildren","applyPatch","bufferedPatches","handleBufferedRemotePatches","normalize","handlePatches","p","editorWasEmpty","editorIsEmpty","previousValue","operationId","createWithPlaceholderBlock","isLonelyBlock","isBlockObject","insertNode","createWithSchemaTypes","isVoid","obj","createWithUtils","pluginUpdateSelection","updateSelection","existingSelection","isEditorNode","isTextBlockNode","isTypedObject","isSpanNode","isPartialSpanNode","isObjectNode","getBlock","getNode","getSpan","getParent","parentPath","applyOperationToPortableText","draft","createDraft","applyOperationToPortableTextDraft","e","finishDraft","insertedNode","before","isAncestor","truePath","newParent","newIndex","valueBefore","valueAfter","hasOwnProperty","newTextBlockNode","newSpanNode","pluginUpdateValue","withPlugins","withObjectKeys","withSchemaTypes","withPatches","withMaxBlocks","withUndoRedo","withPortableTextMarkModel","withPlaceholderBlock","withUtils","createSlateEditor","withReact","createEditor","placeholderBlock","initialValue","createEditorDom","getBlockNodes","getChildNodes","setDragGhost","ghost","childNode","setDragImage","x","y","addAnnotationOnCollapsedSelection","caretWordSelection","getCaretWordSelection","raise","preventOverlappingAnnotations","isActiveAnnotation","coreAnnotationBehaviors","defaultKeyboardShortcuts","arrowDown","createKeyboardShortcut","default","arrowUp","backspace","lineBreak","strong","bold","em","italic","underline","tab","shiftTab","arrowDownOnLonelyBlockObject","focusBlockObject","getFocusBlockObject","nextBlock","getNextBlock","arrowUpOnLonelyBlockObject","getPreviousBlock","breakingBlockObject","clickingAboveLonelyBlockObject","clickingBelowLonelyBlockObject","deletingEmptyTextBlockAfterBlockObject","focusTextBlock","selectionCollapsed","deletingEmptyTextBlockBeforeBlockObject","coreBlockObjectBehaviors","coreDecoratorBehaviors","strongShortcut","emShortcut","underlineShortcut","codeShortcut","getCompoundClientRect","DOMRect","elements","firstRect","i","max","coreDndBehaviors","dom","selectingEntireBlocks","draggedDomNodes","blockNodes","childNodes","dragGhost","createElement","clonedBlockNodes","cloneNode","HTMLElement","appendChild","customGhost","querySelector","replaceChildren","setAttribute","boxSizing","body","customGhostRect","blocksDomRect","clonedChildNodes","childrenDomRect","dropPosition","droppingOnDragOrigin","draggingEntireBlocks","draggedBlocks","coreInsertBehaviors","markState","getMarkState","activeDecorators","activeAnnotations","getActiveAnnotationsMarks","markStateDecorators","breakingAtTheEndOfTextBlock","atTheEndOfBlock","isAtTheEndOfBlock","focusListItem","focusLevel","breakingAtTheStartOfTextBlock","focusDecorators","focusAnnotations","isAtTheStartOfBlock","breakingEntireDocument","firstBlockStartPoint","getSelectionStartPoint","lastBlockEndPoint","getSelectionEndPoint","breakingEntireBlocks","startBlockStartPoint","breakingInlineObject","focusInlineObject","coreInsertBreakBehaviors","isAtTheBeginningOfBlock","MAX_LIST_LEVEL","clearListOnBackspace","unindentListOnBackspace","mergeTextIntoListOnDelete","focusListBlock","getFocusListBlock","mergeTextIntoListOnBackspace","previousBlockEndPoint","deletingListFromStart","blocksToDelete","middleBlocks","deleteStartPoint","deleteEndPoint","startBlockEndPoint","slicedEndBlock","sliceTextBlock","clearListOnEnter","indentListOnTab","selectedListBlocks","selectedListBlock","unindentListOnShiftTab","inheritListLevel","firstInsertedBlock","secondInsertedBlock","insertedListBlock","levelDifference","adjustLevel","listStartBlockFound","inheritListItem","adjustListItem","inheritListProperties","coreListBehaviors","coreBehaviorsConfig","withoutNormalizingConditional","predicate","abstractAnnotationBehaviors","markDefKey","updatedMarkDefs","abstractDecoratorBehaviors","isActiveDecorator","abstractDeleteBehaviors","nextBlockStartPoint","abstractDeserializeBehaviors","getData","json","deserializeEvent","getActiveAnnotations","textRuns","getTextBlockText","textRun","deserializeDataEvent","abstractInsertBehaviors","onlyBlock","firstBlockKey","lastBlockKey","focusBlockStartPoint","focusBlockEndPoint","focusTextBlockAfter","shiftLeft","abstractKeyboardBehaviors","abstractListItemBehaviors","selectedTextBlocks","getSelectedTextBlocks","isActiveListItem","abstractMoveBehaviors","abstractSelectBehaviors","blockEndPoint","abstractSerializeBehaviors","serializeEvent","setData","abstractSplitBehaviors","startPoint","endPoint","blocksInBetween","newTextBlockSelection","newTextBlock","abstractStyleBehaviors","isActiveStyle","abstractBehaviors","isSyntheticBehaviorEvent","isCustomBehaviorEvent","isNativeBehaviorEvent","isAbstractBehaviorEvent","abstractBehaviorEventTypes","nativeBehaviorEventTypes","startsWith","eventCategory","performEvent","behaviors","remainingEventBehaviors","eventBehaviors","listenedNamespace","eventNamespace","guardSnapshot","nativeEventPrevented","defaultBehaviorOverwritten","eventBehaviorIndex","eventBehavior","shouldRun","actionSetIndex","actionSet","actionsSnapshot","action","undoStepCreated","actionTypes","uniqueActionTypes","raiseGroup","size","executeGroup","sortByPriority","itemsWithPriority","itemsWithoutPriority","itemsByPriorityId","graph","inDegree","ensureNode","addEdge","fromId","toId","visited","refId","queue","degree","currentId","currentItem","neighborId","newDegree","createEditorSnapshot","rerouteExternalBehaviorEvent","editorMachine","emitted","tags","assertEvent","behaviorsSorted","emit","pendingEvents","enqueueActions","enqueue","pendingIncomingPatchesEvents","handle blur","blur","handle focus","handle behavior event","self","eventSentBack","slate is busy","slate is normalizing node","initialReadOnly","exit","dragstart","parentNode","removeChild","dragend","drop","pristine","dirty","mutationMachine","bulk","pendingMutations","lastBulk","pendingPatchEvents","interval","setInterval","process","env","NODE_ENV","clearInterval","is read-only","slate is normalizing","isNormalizing","delays","typing","mutations","not","createEditableAPI","toggleMark","toggleList","toggleBlockStyle","isMarkActive","slateSelection","descendant","insertChild","focusChildPath","focusNode","hasBlockStyle","hasListStyle","findByPath","slatePath","ptBlock","ptChild","findDOMNode","spans","isAnnotationActive","annotationType","addAnnotation","snapshotBefore","selectedValueBefore","focusSpanBefore","markDefsBefore","snapshotAfter","selectedValueAfter","focusBlockAfter","focusSpanAfter","newMarkDefKeysOnFocusSpan","markDefBefore","markDefPath","markDefPaths","SlateElement","removeAnnotation","ptRange","existing","getValue","isCollapsedSelection","isExpandedSelection","getFragment","isSelectionsOverlapping","selectionA","selectionB","rangeA","rangeB","relayMachine","prevSelection","lastEventWasFocused","validateValue","resolution","valid","validChildTypes","validBlockTypes","description","i18n","isPlainObject","currentBlockTypeName","expectedTypeName","typeName","newSpan","autoResolve","allUsedMarks","unusedMarkDefs","m","toString","orphanedMarks","spanChildren","orphaned","cMrk","cIndex","newChild","childType","syncValueCallback","updateValue","streamBlocks","syncValueLogic","syncMachine","initialValueSynced","pendingValue","initial value synced","is busy","isProcessingLocalChanges","isChanging","isBusy","is empty value","is empty array","is new value","value changed while syncing","pending value equals previous value","busy","syncing","doneSyncing","isChanged","isValid","hadSelection","childrenLength","slateValueFromProps","removeExtraBlocks","currentBlock","currentBlockIndex","getStreamedBlocks","slateValue","blockChanged","blockValid","syncBlock","setTimeout","hasChanges","validationValue","validation","_updateBlock","_replaceBlock","selectionFocusOnBlock","oldBlockChildrenLength","currentBlockChild","currentBlockChildIndex","oldBlockChild","isChildChanged","isTextChanged","createInternalEditor","createActor","editorConfigToMachineInput","editable","mutationActor","syncActor","createActors","registerBehavior","behaviorConfigWithPriority","listener","compileSchemasFromEditorConfig","schemaDefinition","compileSchemaDefinitionToPortableTextMemberSchemaTypes","createPortableTextMemberSchemaTypes","compileSchema","portableTextMemberSchemaTypesToSchema","subscribe","eventToChange","isLoading","PortableTextEditor","Component","change$","Subject","unsubscribers","constructor","Number","parseInt","componentDidMount","relayActorSubscription","change","componentDidUpdate","prevProps","editorRef","componentWillUnmount","setEditable","render","legacyPatches","incomingPatches$","patches$","blockStyle","listStyle","isObjectPath","isChildObjectEditPath","RoutePatchesObservableToEditorActor","EditorProvider","initialConfig","internalEditor","internalEditor_0","portableTextEditor_0","usePortableTextEditorSelection","startTransition"],"mappings":"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","ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122],"debugId":null}},
    {"offset": {"line": 15269, "column": 0}, "map": {"version":3,"file":"selector.get-text-before.js","sources":["file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/selectors/selector.get-text-before.ts"],"sourcesContent":["import type {EditorSelector} from '../editor/editor-selector'\nimport {getBlockStartPoint} from '../utils/util.get-block-start-point'\nimport {getSelectionStartPoint} from '../utils/util.get-selection-start-point'\nimport {getFocusBlock} from './selector.get-focus-block'\nimport {getSelectionText} from './selector.get-selection-text'\n\n/**\n * @public\n */\nexport const getBlockTextBefore: EditorSelector<string> = (snapshot) => {\n  if (!snapshot.context.selection) {\n    return ''\n  }\n\n  const startPoint = getSelectionStartPoint(snapshot.context.selection)\n  const block = getFocusBlock({\n    ...snapshot,\n    context: {\n      ...snapshot.context,\n      selection: {\n        anchor: startPoint,\n        focus: startPoint,\n      },\n    },\n  })\n\n  if (!block) {\n    return ''\n  }\n\n  const startOfBlock = getBlockStartPoint({\n    context: snapshot.context,\n    block,\n  })\n\n  return getSelectionText({\n    ...snapshot,\n    context: {\n      ...snapshot.context,\n      selection: {\n        anchor: startOfBlock,\n        focus: startPoint,\n      },\n    },\n  })\n}\n"],"names":["getBlockTextBefore","snapshot","context","selection","startPoint","getSelectionStartPoint","block","getFocusBlock","anchor","focus","startOfBlock","getBlockStartPoint","getSelectionText"],"mappings":";;;;;;;AASO,MAAMA,qBAA8CC,CAAAA,aAAa;IACtE,IAAI,CAACA,SAASC,OAAAA,CAAQC,SAAAA,EACpB,OAAO;IAGT,MAAMC,6NAAaC,yBAAAA,EAAuBJ,SAASC,OAAAA,CAAQC,SAAS,GAC9DG,QAAQC,gOAAAA,EAAc;QAC1B,GAAGN,QAAAA;QACHC,SAAS;YACP,GAAGD,SAASC,OAAAA;YACZC,WAAW;gBACTK,QAAQJ;gBACRK,OAAOL;YAAAA;QACT;IACF,CACD;IAED,IAAI,CAACE,OACH,OAAO;IAGT,MAAMI,+NAAeC,qBAAAA,EAAmB;QACtCT,SAASD,SAASC,OAAAA;QAClBI;IAAAA,CACD;IAED,uNAAOM,mBAAAA,EAAiB;QACtB,GAAGX,QAAAA;QACHC,SAAS;YACP,GAAGD,SAASC,OAAAA;YACZC,WAAW;gBACTK,QAAQE;gBACRD,OAAOL;YAAAA;QACT;IACF,CACD;AACH","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 15312, "column": 0}, "map": {"version":3,"file":"util.merge-text-blocks.js","sources":["file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/utils/util.merge-text-blocks.ts"],"sourcesContent":["import {isTextBlock} from '@portabletext/schema'\nimport type {PortableTextTextBlock} from '@sanity/types'\nimport type {EditorContext} from '../editor/editor-snapshot'\nimport {parseBlock} from './parse-blocks'\n\n/**\n * @beta\n */\nexport function mergeTextBlocks({\n  context,\n  targetBlock,\n  incomingBlock,\n}: {\n  context: Pick<EditorContext, 'keyGenerator' | 'schema'>\n  targetBlock: PortableTextTextBlock\n  incomingBlock: PortableTextTextBlock\n}) {\n  const parsedIncomingBlock = parseBlock({\n    context,\n    block: incomingBlock,\n    options: {removeUnusedMarkDefs: true, validateFields: false},\n  })\n\n  if (!parsedIncomingBlock || !isTextBlock(context, parsedIncomingBlock)) {\n    return targetBlock\n  }\n\n  return {\n    ...targetBlock,\n    children: [...targetBlock.children, ...parsedIncomingBlock.children],\n    markDefs: [\n      ...(targetBlock.markDefs ?? []),\n      ...(parsedIncomingBlock.markDefs ?? []),\n    ],\n  }\n}\n"],"names":["mergeTextBlocks","context","targetBlock","incomingBlock","parsedIncomingBlock","parseBlock","block","options","removeUnusedMarkDefs","validateFields","isTextBlock","children","markDefs"],"mappings":";;;;;;;AAQO,SAASA,gBAAgB,EAC9BC,OAAAA,EACAC,WAAAA,EACAC,aAAAA,EAKF,EAAG;IACD,MAAMC,uBAAsBC,4NAAAA,EAAW;QACrCJ;QACAK,OAAOH;QACPI,SAAS;YAACC,sBAAsB,CAAA;YAAMC,gBAAgB,CAAA;QAAA;IAAK,CAC5D;IAED,OAAI,CAACL,uBAAuB,EAACM,8KAAAA,EAAYT,SAASG,mBAAmB,IAC5DF,cAGF;QACL,GAAGA,WAAAA;QACHS,UAAU,CAAC;eAAGT,YAAYS,QAAAA,EAAU;eAAGP,oBAAoBO,QAAQ;SAAA;QACnEC,UAAU,CACR;eAAIV,YAAYU,QAAAA,IAAY,CAAA,CAAA,EAC5B;eAAIR,oBAAoBQ,QAAAA,IAAY,CAAA,CAAG;SAAA;IAAA;AAG7C","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 15348, "column": 0}, "map": {"version":3,"file":"index.js","sources":["file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/plugins/plugin.behavior.tsx","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/internal-utils/get-text-to-emphasize.ts","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/behaviors/behavior.decorator-pair.ts","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/plugins/plugin.decorator-shortcut.ts","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/plugins/plugin.editor-ref.tsx","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/plugins/plugin.event-listener.tsx","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/behaviors/behavior.markdown.ts","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/plugins/plugin.markdown.tsx","file:///Users/isseemii/app/letterseed/node_modules/%40portabletext/editor/src/plugins/plugin.one-line.tsx"],"sourcesContent":["import {useEffect} from 'react'\nimport type {Behavior} from '../behaviors/behavior.types.behavior'\nimport {useEditor} from '../editor/use-editor'\n\n/**\n * @beta\n */\nexport function BehaviorPlugin(props: {behaviors: Array<Behavior>}) {\n  const editor = useEditor()\n\n  useEffect(() => {\n    const unregisterBehaviors = props.behaviors.map((behavior) =>\n      editor.registerBehavior({behavior}),\n    )\n\n    return () => {\n      unregisterBehaviors.forEach((unregister) => {\n        unregister()\n      })\n    }\n  }, [editor, props.behaviors])\n\n  return null\n}\n","export function createPairRegex(char: string, amount: number) {\n  // Negative lookbehind: Ensures that the matched sequence is not preceded by the same character\n  const prePrefix = `(?<!\\\\${char})`\n\n  // Repeats the character `amount` times\n  const prefix = `\\\\${char}`.repeat(Math.max(amount, 1))\n\n  // Negative lookahead: Ensures that the opening pair (**, *, etc.) is not followed by a space\n  const postPrefix = `(?!\\\\s)`\n\n  // Captures the content inside the pair\n  const content = `([^${char}\\\\n]+?)`\n\n  // Negative lookbehind: Ensures that the content is not followed by a space\n  const preSuffix = `(?<!\\\\s)`\n\n  // Repeats the character `amount` times\n  const suffix = `\\\\${char}`.repeat(Math.max(amount, 1))\n\n  // Negative lookahead: Ensures that the matched sequence is not followed by the same character\n  const postSuffix = `(?!\\\\${char})`\n\n  return `${prePrefix}${prefix}${postPrefix}${content}${preSuffix}${suffix}${postSuffix}`\n}\n\nconst italicRegex = new RegExp(\n  `(${createPairRegex('*', 1)}|${createPairRegex('_', 1)})$`,\n)\n\nconst boldRegex = new RegExp(\n  `(${createPairRegex('*', 2)}|${createPairRegex('_', 2)})$`,\n)\n\nexport function getTextToItalic(text: string) {\n  return text.match(italicRegex)?.at(0)\n}\n\nexport function getTextToBold(text: string) {\n  return text.match(boldRegex)?.at(0)\n}\n","import type {EditorSchema} from '../editor/editor-schema'\nimport {createPairRegex} from '../internal-utils/get-text-to-emphasize'\nimport {getFocusTextBlock} from '../selectors/selector.get-focus-text-block'\nimport {getPreviousInlineObject} from '../selectors/selector.get-previous-inline-object'\nimport {getSelectionStartPoint} from '../selectors/selector.get-selection-start-point'\nimport {getBlockTextBefore} from '../selectors/selector.get-text-before'\nimport type {BlockOffset} from '../types/block-offset'\nimport {spanSelectionPointToBlockOffset} from '../utils/util.block-offset'\nimport {blockOffsetsToSelection} from '../utils/util.block-offsets-to-selection'\nimport {childSelectionPointToBlockOffset} from '../utils/util.child-selection-point-to-block-offset'\nimport {effect, execute} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nexport function createDecoratorPairBehavior(config: {\n  decorator: ({schema}: {schema: EditorSchema}) => string | undefined\n  pair: {char: string; amount: number}\n  onDecorate: (offset: BlockOffset) => void\n}) {\n  if (config.pair.amount < 1) {\n    console.warn(\n      `The amount of characters in the pair should be greater than 0`,\n    )\n  }\n\n  const pairRegex = createPairRegex(config.pair.char, config.pair.amount)\n  const regEx = new RegExp(`(${pairRegex})$`)\n\n  return defineBehavior({\n    on: 'insert.text',\n    guard: ({snapshot, event}) => {\n      if (config.pair.amount < 1) {\n        return false\n      }\n\n      const decorator = config.decorator({schema: snapshot.context.schema})\n\n      if (decorator === undefined) {\n        return false\n      }\n\n      const focusTextBlock = getFocusTextBlock(snapshot)\n      const selectionStartPoint = getSelectionStartPoint(snapshot)\n      const selectionStartOffset = selectionStartPoint\n        ? spanSelectionPointToBlockOffset({\n            context: {\n              schema: snapshot.context.schema,\n              value: snapshot.context.value,\n            },\n            selectionPoint: selectionStartPoint,\n          })\n        : undefined\n\n      if (!focusTextBlock || !selectionStartOffset) {\n        return false\n      }\n\n      const textBefore = getBlockTextBefore(snapshot)\n      const newText = `${textBefore}${event.text}`\n      const textToDecorate = newText.match(regEx)?.at(0)\n\n      if (textToDecorate === undefined) {\n        return false\n      }\n\n      const prefixOffsets = {\n        anchor: {\n          path: focusTextBlock.path,\n          // Example: \"foo **bar**\".length - \"**bar**\".length = 4\n          offset: newText.length - textToDecorate.length,\n        },\n        focus: {\n          path: focusTextBlock.path,\n          // Example: \"foo **bar**\".length - \"**bar**\".length + \"*\".length * 2 = 6\n          offset:\n            newText.length -\n            textToDecorate.length +\n            config.pair.char.length * config.pair.amount,\n        },\n      }\n\n      const suffixOffsets = {\n        anchor: {\n          path: focusTextBlock.path,\n          // Example: \"foo **bar*|\" (10) + \"*\".length - 2 = 9\n          offset:\n            selectionStartOffset.offset +\n            event.text.length -\n            config.pair.char.length * config.pair.amount,\n        },\n        focus: {\n          path: focusTextBlock.path,\n          // Example: \"foo **bar*|\" (10) + \"*\".length = 11\n          offset: selectionStartOffset.offset + event.text.length,\n        },\n      }\n\n      // If the prefix is more than one character, then we need to check if\n      // there is an inline object inside it\n      if (prefixOffsets.focus.offset - prefixOffsets.anchor.offset > 1) {\n        const prefixSelection = blockOffsetsToSelection({\n          context: snapshot.context,\n          offsets: prefixOffsets,\n        })\n        const inlineObjectBeforePrefixFocus = getPreviousInlineObject({\n          ...snapshot,\n          context: {\n            ...snapshot.context,\n            selection: prefixSelection\n              ? {\n                  anchor: prefixSelection.focus,\n                  focus: prefixSelection.focus,\n                }\n              : null,\n          },\n        })\n        const inlineObjectBeforePrefixFocusOffset =\n          inlineObjectBeforePrefixFocus\n            ? childSelectionPointToBlockOffset({\n                context: {\n                  schema: snapshot.context.schema,\n                  value: snapshot.context.value,\n                },\n                selectionPoint: {\n                  path: inlineObjectBeforePrefixFocus.path,\n                  offset: 0,\n                },\n              })\n            : undefined\n\n        if (\n          inlineObjectBeforePrefixFocusOffset &&\n          inlineObjectBeforePrefixFocusOffset.offset >\n            prefixOffsets.anchor.offset &&\n          inlineObjectBeforePrefixFocusOffset.offset <\n            prefixOffsets.focus.offset\n        ) {\n          return false\n        }\n      }\n\n      // If the suffix is more than one character, then we need to check if\n      // there is an inline object inside it\n      if (suffixOffsets.focus.offset - suffixOffsets.anchor.offset > 1) {\n        const previousInlineObject = getPreviousInlineObject(snapshot)\n        const previousInlineObjectOffset = previousInlineObject\n          ? childSelectionPointToBlockOffset({\n              context: {\n                schema: snapshot.context.schema,\n                value: snapshot.context.value,\n              },\n              selectionPoint: {\n                path: previousInlineObject.path,\n                offset: 0,\n              },\n            })\n          : undefined\n\n        if (\n          previousInlineObjectOffset &&\n          previousInlineObjectOffset.offset > suffixOffsets.anchor.offset &&\n          previousInlineObjectOffset.offset < suffixOffsets.focus.offset\n        ) {\n          return false\n        }\n      }\n\n      return {\n        prefixOffsets,\n        suffixOffsets,\n        decorator,\n      }\n    },\n    actions: [\n      // Insert the text as usual in its own undo step\n      ({event}) => [execute(event)],\n      (_, {prefixOffsets, suffixOffsets, decorator}) => [\n        // Decorate the text between the prefix and suffix\n        execute({\n          type: 'decorator.add',\n          decorator,\n          at: {\n            anchor: prefixOffsets.focus,\n            focus: suffixOffsets.anchor,\n          },\n        }),\n        // Delete the suffix\n        execute({\n          type: 'delete.text',\n          at: suffixOffsets,\n        }),\n        // Delete the prefix\n        execute({\n          type: 'delete.text',\n          at: prefixOffsets,\n        }),\n        // Toggle the decorator off so the next inserted text isn't emphasized\n        execute({\n          type: 'decorator.remove',\n          decorator,\n        }),\n        effect(() => {\n          config.onDecorate({\n            ...suffixOffsets.anchor,\n            offset:\n              suffixOffsets.anchor.offset -\n              (prefixOffsets.focus.offset - prefixOffsets.anchor.offset),\n          })\n        }),\n      ],\n    ],\n  })\n}\n","import {useActorRef} from '@xstate/react'\nimport {isEqual} from 'lodash'\nimport {\n  assign,\n  fromCallback,\n  setup,\n  type AnyEventObject,\n  type CallbackLogicFunction,\n} from 'xstate'\nimport {createDecoratorPairBehavior} from '../behaviors/behavior.decorator-pair'\nimport {effect, execute, forward} from '../behaviors/behavior.types.action'\nimport {defineBehavior} from '../behaviors/behavior.types.behavior'\nimport type {Editor} from '../editor'\nimport type {EditorSchema} from '../editor/editor-schema'\nimport {useEditor} from '../editor/use-editor'\nimport type {BlockOffset} from '../types/block-offset'\nimport {spanSelectionPointToBlockOffset} from '../utils/util.block-offset'\n\n/**\n * @beta\n * @deprecated Install the plugin from `@portabletext/plugin-character-pair-decorator`\n */\nexport function DecoratorShortcutPlugin(config: {\n  decorator: ({schema}: {schema: EditorSchema}) => string | undefined\n  pair: {char: string; amount: number}\n}) {\n  const editor = useEditor()\n\n  useActorRef(decoratorPairMachine, {\n    input: {\n      editor,\n      decorator: config.decorator,\n      pair: config.pair,\n    },\n  })\n\n  return null\n}\n\ntype MarkdownEmphasisEvent =\n  | {\n      type: 'emphasis.add'\n      blockOffset: BlockOffset\n    }\n  | {\n      type: 'selection'\n      blockOffsets?: {\n        anchor: BlockOffset\n        focus: BlockOffset\n      }\n    }\n  | {\n      type: 'delete.backward'\n    }\n\nconst emphasisListener: CallbackLogicFunction<\n  AnyEventObject,\n  MarkdownEmphasisEvent,\n  {\n    decorator: ({schema}: {schema: EditorSchema}) => string | undefined\n    editor: Editor\n    pair: {char: string; amount: number}\n  }\n> = ({sendBack, input}) => {\n  const unregister = input.editor.registerBehavior({\n    behavior: createDecoratorPairBehavior({\n      decorator: input.decorator,\n      pair: input.pair,\n      onDecorate: (offset) => {\n        sendBack({type: 'emphasis.add', blockOffset: offset})\n      },\n    }),\n  })\n\n  return unregister\n}\n\nconst selectionListenerCallback: CallbackLogicFunction<\n  AnyEventObject,\n  MarkdownEmphasisEvent,\n  {editor: Editor}\n> = ({sendBack, input}) => {\n  const unregister = input.editor.registerBehavior({\n    behavior: defineBehavior({\n      on: 'select',\n      guard: ({snapshot, event}) => {\n        if (!event.at) {\n          return {blockOffsets: undefined}\n        }\n\n        const anchor = spanSelectionPointToBlockOffset({\n          context: snapshot.context,\n          selectionPoint: event.at.anchor,\n        })\n        const focus = spanSelectionPointToBlockOffset({\n          context: snapshot.context,\n          selectionPoint: event.at.focus,\n        })\n\n        if (!anchor || !focus) {\n          return {blockOffsets: undefined}\n        }\n\n        return {\n          blockOffsets: {\n            anchor,\n            focus,\n          },\n        }\n      },\n      actions: [\n        ({event}, {blockOffsets}) => [\n          {\n            type: 'effect',\n            effect: () => {\n              sendBack({type: 'selection', blockOffsets})\n            },\n          },\n          forward(event),\n        ],\n      ],\n    }),\n  })\n\n  return unregister\n}\n\nconst deleteBackwardListenerCallback: CallbackLogicFunction<\n  AnyEventObject,\n  MarkdownEmphasisEvent,\n  {editor: Editor}\n> = ({sendBack, input}) => {\n  const unregister = input.editor.registerBehavior({\n    behavior: defineBehavior({\n      on: 'delete.backward',\n      actions: [\n        () => [\n          execute({\n            type: 'history.undo',\n          }),\n          effect(() => {\n            sendBack({type: 'delete.backward'})\n          }),\n        ],\n      ],\n    }),\n  })\n\n  return unregister\n}\n\nconst decoratorPairMachine = setup({\n  types: {\n    context: {} as {\n      decorator: ({schema}: {schema: EditorSchema}) => string | undefined\n      editor: Editor\n      offsetAfterEmphasis?: BlockOffset\n      pair: {char: string; amount: number}\n    },\n    input: {} as {\n      decorator: ({schema}: {schema: EditorSchema}) => string | undefined\n      editor: Editor\n      pair: {char: string; amount: number}\n    },\n    events: {} as MarkdownEmphasisEvent,\n  },\n  actors: {\n    'emphasis listener': fromCallback(emphasisListener),\n    'delete.backward listener': fromCallback(deleteBackwardListenerCallback),\n    'selection listener': fromCallback(selectionListenerCallback),\n  },\n}).createMachine({\n  id: 'decorator pair',\n  context: ({input}) => ({\n    decorator: input.decorator,\n    editor: input.editor,\n    pair: input.pair,\n  }),\n  initial: 'idle',\n  states: {\n    'idle': {\n      invoke: [\n        {\n          src: 'emphasis listener',\n          input: ({context}) => ({\n            decorator: context.decorator,\n            editor: context.editor,\n            pair: context.pair,\n          }),\n        },\n      ],\n      on: {\n        'emphasis.add': {\n          target: 'emphasis added',\n          actions: assign({\n            offsetAfterEmphasis: ({event}) => event.blockOffset,\n          }),\n        },\n      },\n    },\n    'emphasis added': {\n      exit: [\n        assign({\n          offsetAfterEmphasis: undefined,\n        }),\n      ],\n      invoke: [\n        {\n          src: 'selection listener',\n          input: ({context}) => ({editor: context.editor}),\n        },\n        {\n          src: 'delete.backward listener',\n          input: ({context}) => ({editor: context.editor}),\n        },\n      ],\n      on: {\n        'selection': {\n          target: 'idle',\n          guard: ({context, event}) => {\n            const selectionChanged = !isEqual(\n              {\n                anchor: context.offsetAfterEmphasis,\n                focus: context.offsetAfterEmphasis,\n              },\n              event.blockOffsets,\n            )\n\n            return selectionChanged\n          },\n        },\n        'delete.backward': {\n          target: 'idle',\n        },\n      },\n    },\n  },\n})\n","import React from 'react'\nimport type {Editor} from '../editor'\nimport {useEditor} from '../editor/use-editor'\n\n/**\n * @beta\n */\nexport const EditorRefPlugin = React.forwardRef<Editor | null>((_, ref) => {\n  const editor = useEditor()\n\n  const portableTextEditorRef = React.useRef(editor)\n\n  React.useImperativeHandle(ref, () => portableTextEditorRef.current, [])\n\n  return null\n})\nEditorRefPlugin.displayName = 'EditorRefPlugin'\n","import {useEffect} from 'react'\nimport type {EditorEmittedEvent} from '../editor/relay-machine'\nimport {useEditor} from '../editor/use-editor'\n\n/**\n * @public\n * Listen for events emitted by the editor. Must be used inside `EditorProvider`. Events available include:\n *  - 'blurred'\n *  - 'done loading'\n *  - 'editable'\n *  - 'error'\n *  - 'focused'\n *  - 'invalid value'\n *  - 'loading'\n *  - 'mutation'\n *  - 'patch'\n *  - 'read only'\n *  - 'ready'\n *  - 'selection'\n *  - 'value changed'\n *\n * @example\n * Listen and log events.\n * ```tsx\n * import {EditorProvider} from '@portabletext/editor'\n * import {EventListenerPlugin} from '@portabletext/editor/plugins'\n *\n * function MyComponent() {\n *  return (\n *  <EditorProvider>\n *   <EventListenerPlugin\n *    on={(event) => {\n *     console.log(event)\n *    }\n *   } />\n *   { ... }\n * </EditorProvider>\n *  )\n * }\n * ```\n * @example\n * Handle events when there is a mutation.\n * ```tsx\n * <EventListenerPlugin\n *  on={(event) => {\n *    if (event.type === 'mutation') {\n *      console.log('Value changed:', event.snapshot)\n *    }\n *  }}\n * />\n * ```\n * @group Components\n */\nexport function EventListenerPlugin(props: {\n  on: (event: EditorEmittedEvent) => void\n}) {\n  const editor = useEditor()\n\n  useEffect(() => {\n    const subscription = editor.on('*', props.on)\n\n    return () => {\n      subscription.unsubscribe()\n    }\n  }, [editor, props.on])\n\n  return null\n}\n","import {isTextBlock} from '@portabletext/schema'\nimport type {EditorSchema} from '../editor/editor-schema'\nimport {getFocusBlock} from '../selectors/selector.get-focus-block'\nimport {getFocusSpan} from '../selectors/selector.get-focus-span'\nimport {getFocusTextBlock} from '../selectors/selector.get-focus-text-block'\nimport {getPreviousInlineObject} from '../selectors/selector.get-previous-inline-object'\nimport {getBlockTextBefore} from '../selectors/selector.get-text-before'\nimport {isSelectionCollapsed} from '../selectors/selector.is-selection-collapsed'\nimport {spanSelectionPointToBlockOffset} from '../utils/util.block-offset'\nimport {getTextBlockText} from '../utils/util.get-text-block-text'\nimport {execute} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nexport type MarkdownBehaviorsConfig = {\n  horizontalRuleObject?: (context: {\n    schema: EditorSchema\n  }) => {name: string; value?: {[prop: string]: unknown}} | undefined\n  defaultStyle?: (context: {schema: EditorSchema}) => string | undefined\n  headingStyle?: (context: {\n    schema: EditorSchema\n    level: number\n  }) => string | undefined\n  blockquoteStyle?: (context: {schema: EditorSchema}) => string | undefined\n  unorderedListStyle?: (context: {schema: EditorSchema}) => string | undefined\n  orderedListStyle?: (context: {schema: EditorSchema}) => string | undefined\n}\n\nexport function createMarkdownBehaviors(config: MarkdownBehaviorsConfig) {\n  const automaticBlockquoteOnSpace = defineBehavior({\n    on: 'insert.text',\n    guard: ({snapshot, event}) => {\n      const isSpace = event.text === ' '\n\n      if (!isSpace) {\n        return false\n      }\n\n      const selectionCollapsed = isSelectionCollapsed(snapshot)\n      const focusTextBlock = getFocusTextBlock(snapshot)\n      const focusSpan = getFocusSpan(snapshot)\n\n      if (!selectionCollapsed || !focusTextBlock || !focusSpan) {\n        return false\n      }\n\n      const previousInlineObject = getPreviousInlineObject(snapshot)\n      const blockOffset = spanSelectionPointToBlockOffset({\n        context: snapshot.context,\n        selectionPoint: {\n          path: [\n            {_key: focusTextBlock.node._key},\n            'children',\n            {_key: focusSpan.node._key},\n          ],\n          offset: snapshot.context.selection?.focus.offset ?? 0,\n        },\n      })\n\n      if (previousInlineObject || !blockOffset) {\n        return false\n      }\n\n      const blockText = getTextBlockText(focusTextBlock.node)\n      const caretAtTheEndOfQuote = blockOffset.offset === 1\n      const looksLikeMarkdownQuote = /^>/.test(blockText)\n      const blockquoteStyle = config.blockquoteStyle?.(snapshot.context)\n\n      if (\n        caretAtTheEndOfQuote &&\n        looksLikeMarkdownQuote &&\n        blockquoteStyle !== undefined\n      ) {\n        return {focusTextBlock, style: blockquoteStyle}\n      }\n\n      return false\n    },\n    actions: [\n      () => [\n        execute({\n          type: 'insert.text',\n          text: ' ',\n        }),\n      ],\n      (_, {focusTextBlock, style}) => [\n        execute({\n          type: 'block.unset',\n          props: ['listItem', 'level'],\n          at: focusTextBlock.path,\n        }),\n        execute({\n          type: 'block.set',\n          props: {style},\n          at: focusTextBlock.path,\n        }),\n        execute({\n          type: 'delete.text',\n          at: {\n            anchor: {\n              path: focusTextBlock.path,\n              offset: 0,\n            },\n            focus: {\n              path: focusTextBlock.path,\n              offset: 2,\n            },\n          },\n        }),\n      ],\n    ],\n  })\n  const automaticHr = defineBehavior({\n    on: 'insert.text',\n    guard: ({snapshot, event}) => {\n      const hrCharacter =\n        event.text === '-'\n          ? '-'\n          : event.text === '*'\n            ? '*'\n            : event.text === '_'\n              ? '_'\n              : undefined\n\n      if (hrCharacter === undefined) {\n        return false\n      }\n\n      const hrObject = config.horizontalRuleObject?.(snapshot.context)\n      const focusBlock = getFocusTextBlock(snapshot)\n      const selectionCollapsed = isSelectionCollapsed(snapshot)\n\n      if (!hrObject || !focusBlock || !selectionCollapsed) {\n        return false\n      }\n\n      const previousInlineObject = getPreviousInlineObject(snapshot)\n      const textBefore = getBlockTextBefore(snapshot)\n      const hrBlockOffsets = {\n        anchor: {\n          path: focusBlock.path,\n          offset: 0,\n        },\n        focus: {\n          path: focusBlock.path,\n          offset: 3,\n        },\n      }\n\n      if (\n        !previousInlineObject &&\n        textBefore === `${hrCharacter}${hrCharacter}`\n      ) {\n        return {hrObject, focusBlock, hrCharacter, hrBlockOffsets}\n      }\n\n      return false\n    },\n    actions: [\n      (_, {hrCharacter}) => [\n        execute({\n          type: 'insert.text',\n          text: hrCharacter,\n        }),\n      ],\n      (_, {hrObject, hrBlockOffsets}) => [\n        execute({\n          type: 'insert.block',\n          placement: 'before',\n          block: {\n            _type: hrObject.name,\n            ...(hrObject.value ?? {}),\n          },\n        }),\n        execute({\n          type: 'delete.text',\n          at: hrBlockOffsets,\n        }),\n      ],\n    ],\n  })\n  const automaticHrOnPaste = defineBehavior({\n    on: 'clipboard.paste',\n    guard: ({snapshot, event}) => {\n      const text = event.originEvent.dataTransfer.getData('text/plain')\n      const hrRegExp = /^(---)$|(___)$|(\\*\\*\\*)$/\n      const hrCharacters = text.match(hrRegExp)?.[0]\n      const hrObject = config.horizontalRuleObject?.(snapshot.context)\n      const focusBlock = getFocusBlock(snapshot)\n\n      if (!hrCharacters || !hrObject || !focusBlock) {\n        return false\n      }\n\n      return {hrCharacters, hrObject, focusBlock}\n    },\n    actions: [\n      (_, {hrCharacters}) => [\n        execute({\n          type: 'insert.text',\n          text: hrCharacters,\n        }),\n      ],\n      ({snapshot}, {hrObject, focusBlock}) =>\n        isTextBlock(snapshot.context, focusBlock.node)\n          ? [\n              execute({\n                type: 'insert.block',\n                block: {\n                  _type: snapshot.context.schema.block.name,\n                  children: focusBlock.node.children,\n                },\n                placement: 'after',\n              }),\n              execute({\n                type: 'insert.block',\n                block: {\n                  _type: hrObject.name,\n                  ...(hrObject.value ?? {}),\n                },\n                placement: 'after',\n              }),\n              execute({\n                type: 'delete.block',\n                at: focusBlock.path,\n              }),\n            ]\n          : [\n              execute({\n                type: 'insert.block',\n                block: {\n                  _type: hrObject.name,\n                  ...(hrObject.value ?? {}),\n                },\n                placement: 'after',\n              }),\n            ],\n    ],\n  })\n  const automaticHeadingOnSpace = defineBehavior({\n    on: 'insert.text',\n    guard: ({snapshot, event}) => {\n      const isSpace = event.text === ' '\n\n      if (!isSpace) {\n        return false\n      }\n\n      const selectionCollapsed = isSelectionCollapsed(snapshot)\n      const focusTextBlock = getFocusTextBlock(snapshot)\n      const focusSpan = getFocusSpan(snapshot)\n\n      if (!selectionCollapsed || !focusTextBlock || !focusSpan) {\n        return false\n      }\n\n      const blockOffset = spanSelectionPointToBlockOffset({\n        context: snapshot.context,\n        selectionPoint: {\n          path: [\n            {_key: focusTextBlock.node._key},\n            'children',\n            {_key: focusSpan.node._key},\n          ],\n          offset: snapshot.context.selection?.focus.offset ?? 0,\n        },\n      })\n\n      if (!blockOffset) {\n        return false\n      }\n\n      const previousInlineObject = getPreviousInlineObject(snapshot)\n      const blockText = getTextBlockText(focusTextBlock.node)\n      const markdownHeadingSearch = /^#+/.exec(blockText)\n      const level = markdownHeadingSearch\n        ? markdownHeadingSearch[0].length\n        : undefined\n      const caretAtTheEndOfHeading = blockOffset.offset === level\n\n      if (previousInlineObject || !caretAtTheEndOfHeading) {\n        return false\n      }\n\n      const style =\n        level !== undefined\n          ? config.headingStyle?.({schema: snapshot.context.schema, level})\n          : undefined\n\n      if (level !== undefined && style !== undefined) {\n        return {\n          focusTextBlock,\n          style: style,\n          level,\n        }\n      }\n\n      return false\n    },\n    actions: [\n      ({event}) => [execute(event)],\n      (_, {focusTextBlock, style, level}) => [\n        execute({\n          type: 'block.unset',\n          props: ['listItem', 'level'],\n          at: focusTextBlock.path,\n        }),\n        execute({\n          type: 'block.set',\n          props: {style},\n          at: focusTextBlock.path,\n        }),\n        execute({\n          type: 'delete.text',\n          at: {\n            anchor: {\n              path: focusTextBlock.path,\n              offset: 0,\n            },\n            focus: {\n              path: focusTextBlock.path,\n              offset: level + 1,\n            },\n          },\n        }),\n      ],\n    ],\n  })\n  const clearStyleOnBackspace = defineBehavior({\n    on: 'delete.backward',\n    guard: ({snapshot}) => {\n      const selectionCollapsed = isSelectionCollapsed(snapshot)\n      const focusTextBlock = getFocusTextBlock(snapshot)\n      const focusSpan = getFocusSpan(snapshot)\n\n      if (!selectionCollapsed || !focusTextBlock || !focusSpan) {\n        return false\n      }\n\n      const atTheBeginningOfBLock =\n        focusTextBlock.node.children[0]._key === focusSpan.node._key &&\n        snapshot.context.selection?.focus.offset === 0\n\n      const defaultStyle = config.defaultStyle?.(snapshot.context)\n\n      if (\n        atTheBeginningOfBLock &&\n        defaultStyle &&\n        focusTextBlock.node.style !== defaultStyle\n      ) {\n        return {defaultStyle, focusTextBlock}\n      }\n\n      return false\n    },\n    actions: [\n      (_, {defaultStyle, focusTextBlock}) => [\n        execute({\n          type: 'block.set',\n          props: {style: defaultStyle},\n          at: focusTextBlock.path,\n        }),\n      ],\n    ],\n  })\n  const automaticListOnSpace = defineBehavior({\n    on: 'insert.text',\n    guard: ({snapshot, event}) => {\n      const isSpace = event.text === ' '\n\n      if (!isSpace) {\n        return false\n      }\n\n      const selectionCollapsed = isSelectionCollapsed(snapshot)\n      const focusTextBlock = getFocusTextBlock(snapshot)\n      const focusSpan = getFocusSpan(snapshot)\n\n      if (!selectionCollapsed || !focusTextBlock || !focusSpan) {\n        return false\n      }\n\n      const previousInlineObject = getPreviousInlineObject(snapshot)\n      const blockOffset = spanSelectionPointToBlockOffset({\n        context: snapshot.context,\n        selectionPoint: {\n          path: [\n            {_key: focusTextBlock.node._key},\n            'children',\n            {_key: focusSpan.node._key},\n          ],\n          offset: snapshot.context.selection?.focus.offset ?? 0,\n        },\n      })\n\n      if (previousInlineObject || !blockOffset) {\n        return false\n      }\n\n      const blockText = getTextBlockText(focusTextBlock.node)\n      const defaultStyle = config.defaultStyle?.(snapshot.context)\n      const looksLikeUnorderedList = /^(-|\\*)/.test(blockText)\n      const unorderedListStyle = config.unorderedListStyle?.(snapshot.context)\n      const caretAtTheEndOfUnorderedList = blockOffset.offset === 1\n\n      if (\n        defaultStyle &&\n        caretAtTheEndOfUnorderedList &&\n        looksLikeUnorderedList &&\n        unorderedListStyle !== undefined\n      ) {\n        return {\n          focusTextBlock,\n          listItem: unorderedListStyle,\n          listItemLength: 1,\n          style: defaultStyle,\n        }\n      }\n\n      const looksLikeOrderedList = /^1\\./.test(blockText)\n      const orderedListStyle = config.orderedListStyle?.(snapshot.context)\n      const caretAtTheEndOfOrderedList = blockOffset.offset === 2\n\n      if (\n        defaultStyle &&\n        caretAtTheEndOfOrderedList &&\n        looksLikeOrderedList &&\n        orderedListStyle !== undefined\n      ) {\n        return {\n          focusTextBlock,\n          listItem: orderedListStyle,\n          listItemLength: 2,\n          style: defaultStyle,\n        }\n      }\n\n      return false\n    },\n    actions: [\n      ({event}) => [execute(event)],\n      (_, {focusTextBlock, style, listItem, listItemLength}) => [\n        execute({\n          type: 'block.set',\n          props: {\n            listItem,\n            level: 1,\n            style,\n          },\n          at: focusTextBlock.path,\n        }),\n        execute({\n          type: 'delete.text',\n          at: {\n            anchor: {\n              path: focusTextBlock.path,\n              offset: 0,\n            },\n            focus: {\n              path: focusTextBlock.path,\n              offset: listItemLength + 1,\n            },\n          },\n        }),\n      ],\n    ],\n  })\n\n  const markdownBehaviors = [\n    automaticBlockquoteOnSpace,\n    automaticHeadingOnSpace,\n    automaticHr,\n    automaticHrOnPaste,\n    clearStyleOnBackspace,\n    automaticListOnSpace,\n  ]\n\n  return markdownBehaviors\n}\n","import {useEffect} from 'react'\nimport {\n  createMarkdownBehaviors,\n  type MarkdownBehaviorsConfig,\n} from '../behaviors/behavior.markdown'\nimport type {EditorSchema} from '../editor/editor-schema'\nimport {useEditor} from '../editor/use-editor'\nimport {DecoratorShortcutPlugin} from './plugin.decorator-shortcut'\n\n/**\n * @beta\n */\nexport type MarkdownPluginConfig = MarkdownBehaviorsConfig & {\n  boldDecorator?: ({schema}: {schema: EditorSchema}) => string | undefined\n  codeDecorator?: ({schema}: {schema: EditorSchema}) => string | undefined\n  italicDecorator?: ({schema}: {schema: EditorSchema}) => string | undefined\n  strikeThroughDecorator?: ({\n    schema,\n  }: {\n    schema: EditorSchema\n  }) => string | undefined\n}\n\n/**\n * @beta\n * Add markdown behaviors for common markdown actions such as converting ### to headings, --- to HRs, and more.\n *\n * @example\n * Configure the bundled markdown behaviors\n * ```ts\n * import {EditorProvider} from '@portabletext/editor'\n * import {MarkdownPlugin} from '@portabletext/editor/plugins'\n *\n * function App() {\n *   return (\n *    <EditorProvider>\n *      <MarkdownPlugin\n *        config={{\n *          boldDecorator: ({schema}) =>\n *            schema.decorators.find((decorator) => decorator.value === 'strong')?.value,\n *          codeDecorator: ({schema}) =>\n *            schema.decorators.find((decorator) => decorator.value === 'code')?.value,\n *          italicDecorator: ({schema}) =>\n *            schema.decorators.find((decorator) => decorator.value === 'em')?.value,\n *          strikeThroughDecorator: ({schema}) =>\n *            schema.decorators.find((decorator) => decorator.value === 'strike-through')?.value,\n *          horizontalRuleObject: ({schema}) => {\n *            const name = schema.blockObjects.find(\n *              (object) => object.name === 'break',\n *            )?.name\n *            return name ? {name} : undefined\n *          },\n *          defaultStyle: ({schema}) => schema.styles[0].value,\n *          headingStyle: ({schema, level}) =>\n *            schema.styles.find((style) => style.value === `h${level}`)\n *              ?.value,\n *          blockquoteStyle: ({schema}) =>\n *            schema.styles.find((style) => style.value === 'blockquote')\n *              ?.value,\n *          unorderedListStyle: ({schema}) =>\n *            schema.lists.find((list) => list.value === 'bullet')?.value,\n *          orderedListStyle: ({schema}) =>\n *            schema.lists.find((list) => list.value === 'number')?.value,\n *        }}\n *      />\n *      {...}\n *    </EditorProvider>\n *  )\n * }\n * ```\n *\n * @deprecated Install the plugin from `@portabletext/plugin-markdown-shortcuts`\n */\nexport function MarkdownPlugin(props: {config: MarkdownPluginConfig}) {\n  const editor = useEditor()\n\n  useEffect(() => {\n    const behaviors = createMarkdownBehaviors(props.config)\n\n    const unregisterBehaviors = behaviors.map((behavior) =>\n      editor.registerBehavior({behavior}),\n    )\n\n    return () => {\n      for (const unregisterBehavior of unregisterBehaviors) {\n        unregisterBehavior()\n      }\n    }\n  }, [editor, props.config])\n\n  return (\n    <>\n      {props.config.boldDecorator ? (\n        <>\n          <DecoratorShortcutPlugin\n            decorator={props.config.boldDecorator}\n            pair={{char: '*', amount: 2}}\n          />\n          <DecoratorShortcutPlugin\n            decorator={props.config.boldDecorator}\n            pair={{char: '_', amount: 2}}\n          />\n        </>\n      ) : null}\n      {props.config.codeDecorator ? (\n        <DecoratorShortcutPlugin\n          decorator={props.config.codeDecorator}\n          pair={{char: '`', amount: 1}}\n        />\n      ) : null}\n      {props.config.italicDecorator ? (\n        <>\n          <DecoratorShortcutPlugin\n            decorator={props.config.italicDecorator}\n            pair={{char: '*', amount: 1}}\n          />\n          <DecoratorShortcutPlugin\n            decorator={props.config.italicDecorator}\n            pair={{char: '_', amount: 1}}\n          />\n        </>\n      ) : null}\n      {props.config.strikeThroughDecorator ? (\n        <DecoratorShortcutPlugin\n          decorator={props.config.strikeThroughDecorator}\n          pair={{char: '~', amount: 2}}\n        />\n      ) : null}\n    </>\n  )\n}\n","import {isTextBlock} from '@portabletext/schema'\nimport {execute, raise} from '../behaviors/behavior.types.action'\nimport {defineBehavior} from '../behaviors/behavior.types.behavior'\nimport {getFocusTextBlock} from '../selectors/selector.get-focus-text-block'\nimport {isSelectionExpanded} from '../selectors/selector.is-selection-expanded'\nimport {mergeTextBlocks} from '../utils/util.merge-text-blocks'\nimport {BehaviorPlugin} from './plugin.behavior'\n\nconst oneLineBehaviors = [\n  /**\n   * Hitting Enter on an expanded selection should just delete that selection\n   * without causing a line break.\n   */\n  defineBehavior({\n    on: 'insert.break',\n    guard: ({snapshot}) =>\n      snapshot.context.selection && isSelectionExpanded(snapshot)\n        ? {selection: snapshot.context.selection}\n        : false,\n    actions: [(_, {selection}) => [execute({type: 'delete', at: selection})]],\n  }),\n  /**\n   * All other cases of `insert.break` should be aborted.\n   */\n  defineBehavior({\n    on: 'insert.break',\n    actions: [],\n  }),\n  /**\n   * `insert.block` `before` or `after` is not allowed in a one-line editor.\n   */\n  defineBehavior({\n    on: 'insert.block',\n    guard: ({event}) =>\n      event.placement === 'before' || event.placement === 'after',\n    actions: [],\n  }),\n  /**\n   * An ordinary `insert.block` is acceptable if it's a text block. In that\n   * case it will get merged into the existing text block.\n   */\n  defineBehavior({\n    on: 'insert.block',\n    guard: ({snapshot, event}) => {\n      const focusTextBlock = getFocusTextBlock(snapshot)\n\n      if (!focusTextBlock || !isTextBlock(snapshot.context, event.block)) {\n        return false\n      }\n\n      return true\n    },\n    actions: [\n      ({event}) => [\n        execute({\n          type: 'insert.block',\n          block: event.block,\n          placement: 'auto',\n          select: 'end',\n        }),\n      ],\n    ],\n  }),\n  /**\n   * Fallback Behavior to avoid `insert.block` in case the Behaviors above all\n   * end up with a falsy guard.\n   */\n  defineBehavior({\n    on: 'insert.block',\n    actions: [],\n  }),\n  /**\n   * If multiple blocks are inserted, then the non-text blocks are filtered out\n   * and the text blocks are merged into one block\n   */\n  defineBehavior({\n    on: 'insert.blocks',\n    guard: ({snapshot, event}) => {\n      const textBlocks = event.blocks.filter((block) =>\n        isTextBlock(snapshot.context, block),\n      )\n\n      if (textBlocks.length === 0) {\n        return false\n      }\n\n      return textBlocks.reduce((targetBlock, incomingBlock) => {\n        return mergeTextBlocks({\n          context: snapshot.context,\n          targetBlock,\n          incomingBlock,\n        })\n      })\n    },\n    actions: [\n      // `insert.block` is raised so the Behavior above can handle the\n      // insertion\n      (_, block) => [raise({type: 'insert.block', block, placement: 'auto'})],\n    ],\n  }),\n  /**\n   * Fallback Behavior to avoid `insert.blocks` in case the Behavior above\n   * ends up with a falsy guard.\n   */\n  defineBehavior({\n    on: 'insert.blocks',\n    actions: [],\n  }),\n]\n\n/**\n * @beta\n * Restrict the editor to one line. The plugin takes care of blocking\n * `insert.break` events and smart handling of other `insert.*` events.\n *\n * Place it with as high priority as possible to make sure other plugins don't\n * overwrite `insert.*` events before this plugin gets a chance to do so.\n *\n * @deprecated Install the plugin from `@portabletext/plugin-one-line`\n */\nexport function OneLinePlugin() {\n  return <BehaviorPlugin behaviors={oneLineBehaviors} />\n}\n"],"names":["BehaviorPlugin","props","$","_c","editor","useEditor","t0","t1","behaviors","unregisterBehaviors","map","behavior","registerBehavior","forEach","_temp","useEffect","unregister","createPairRegex","char","amount","prePrefix","prefix","repeat","Math","max","postPrefix","content","preSuffix","suffix","postSuffix","createDecoratorPairBehavior","config","pair","console","warn","pairRegex","regEx","RegExp","defineBehavior","on","guard","snapshot","event","decorator","schema","context","undefined","focusTextBlock","getFocusTextBlock","selectionStartPoint","getSelectionStartPoint","selectionStartOffset","spanSelectionPointToBlockOffset","value","selectionPoint","newText","getBlockTextBefore","text","textToDecorate","match","at","prefixOffsets","anchor","path","offset","length","focus","suffixOffsets","prefixSelection","blockOffsetsToSelection","offsets","inlineObjectBeforePrefixFocus","getPreviousInlineObject","selection","inlineObjectBeforePrefixFocusOffset","childSelectionPointToBlockOffset","previousInlineObject","previousInlineObjectOffset","actions","execute","_","type","effect","onDecorate","DecoratorShortcutPlugin","input","useActorRef","decoratorPairMachine","emphasisListener","sendBack","blockOffset","selectionListenerCallback","blockOffsets","forward","deleteBackwardListenerCallback","setup","types","events","actors","fromCallback","createMachine","id","initial","states","invoke","src","target","assign","offsetAfterEmphasis","exit","isEqual","EditorRefPlugin","React","forwardRef","ref","portableTextEditorRef","useRef","Symbol","for","current","useImperativeHandle","displayName","EventListenerPlugin","subscription","unsubscribe","createMarkdownBehaviors","automaticBlockquoteOnSpace","selectionCollapsed","isSelectionCollapsed","focusSpan","getFocusSpan","_key","node","blockText","getTextBlockText","caretAtTheEndOfQuote","looksLikeMarkdownQuote","test","blockquoteStyle","style","automaticHr","hrCharacter","hrObject","horizontalRuleObject","focusBlock","textBefore","hrBlockOffsets","placement","block","_type","name","automaticHrOnPaste","originEvent","dataTransfer","getData","hrRegExp","hrCharacters","getFocusBlock","isTextBlock","children","automaticHeadingOnSpace","markdownHeadingSearch","exec","level","caretAtTheEndOfHeading","headingStyle","clearStyleOnBackspace","atTheBeginningOfBLock","defaultStyle","automaticListOnSpace","looksLikeUnorderedList","unorderedListStyle","caretAtTheEndOfUnorderedList","listItem","listItemLength","looksLikeOrderedList","orderedListStyle","caretAtTheEndOfOrderedList","MarkdownPlugin","unregisterBehavior","t2","boldDecorator","t3","codeDecorator","t4","italicDecorator","t5","strikeThroughDecorator","t6","oneLineBehaviors","isSelectionExpanded","select","textBlocks","blocks","filter","reduce","targetBlock","incomingBlock","mergeTextBlocks","raise","OneLinePlugin"],"mappings":"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","ignoreList":[0,1,2,3,4,5,6,7,8],"debugId":null}}]
}