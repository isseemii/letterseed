module.exports = {

"[project]/node_modules/sanity/lib/_chunks-es/version.mjs [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "SANITY_VERSION": (()=>SANITY_VERSION)
});
const SANITY_VERSION = "4.10.3";
;
 //# sourceMappingURL=version.mjs.map
}}),
"[project]/node_modules/sanity/lib/_chunks-es/generate-help-url.esm.mjs [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "Button": (()=>Button),
    "ConditionalWrapper": (()=>ConditionalWrapper),
    "Dialog": (()=>Dialog),
    "ErrorBoundary": (()=>ErrorBoundary),
    "Hotkeys": (()=>Hotkeys),
    "MenuButton": (()=>MenuButton),
    "MenuItem": (()=>MenuItem),
    "Popover": (()=>Popover),
    "Tab": (()=>Tab),
    "Tooltip": (()=>Tooltip),
    "TooltipDelayGroupProvider": (()=>TooltipDelayGroupProvider),
    "generateHelpUrl": (()=>generateHelpUrl)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react-jsx-runtime.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$sanity$2f$ui$2f$dist$2f$_chunks$2d$es$2f$_visual$2d$editing$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@sanity/ui/dist/_chunks-es/_visual-editing.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$sanity$2f$ui$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/@sanity/ui/dist/index.mjs [app-ssr] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$sanity$2f$lib$2f$_singletons$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/sanity/lib/_singletons.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2d$compiler$2d$runtime$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/react-compiler-runtime/dist/index.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2d$is$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/react-is/index.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$styled$2d$components$2f$dist$2f$styled$2d$components$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/styled-components/dist/styled-components.esm.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2d$i18next$2f$dist$2f$es$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/react-i18next/dist/es/index.js [app-ssr] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2d$i18next$2f$dist$2f$es$2f$useTranslation$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/react-i18next/dist/es/useTranslation.js [app-ssr] (ecmascript)");
;
;
;
;
;
;
;
;
function ConditionalWrapper({ children, condition, wrapper }) {
    return condition ? wrapper(children) : children;
}
const LARGE_BUTTON_PROPS = {
    space: 3,
    padding: 3
}, DEFAULT_BUTTON_PROPS = {
    space: 2,
    padding: 2
}, TooltipButtonWrapper = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$styled$2d$components$2f$dist$2f$styled$2d$components$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["styled"].span`
  display: inline-flex;
`, Button = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["forwardRef"])(function(t0, ref) {
    const $ = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2d$compiler$2d$runtime$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["c"])(20);
    let paddingY, rest, t1, t2, t3, tooltipProps;
    $[0] !== t0 ? ({ size: t1, mode: t2, paddingY, tone: t3, tooltipProps, ...rest } = t0, $[0] = t0, $[1] = paddingY, $[2] = rest, $[3] = t1, $[4] = t2, $[5] = t3, $[6] = tooltipProps) : (paddingY = $[1], rest = $[2], t1 = $[3], t2 = $[4], t3 = $[5], tooltipProps = $[6]);
    const size = t1 === void 0 ? "default" : t1, mode = t2 === void 0 ? "default" : t2, tone = t3 === void 0 ? "default" : t3;
    let t4;
    $[7] !== tooltipProps ? (t4 = (children)=>/* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsx"])(Tooltip, {
            content: tooltipProps?.content,
            portal: !0,
            ...tooltipProps,
            children: /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsx"])(TooltipButtonWrapper, {
                children
            })
        }), $[7] = tooltipProps, $[8] = t4) : t4 = $[8];
    const renderWrapper = t4, sizeProps = size === "default" ? DEFAULT_BUTTON_PROPS : LARGE_BUTTON_PROPS, t5 = !!tooltipProps;
    let t6;
    $[9] !== mode || $[10] !== paddingY || $[11] !== ref || $[12] !== rest || $[13] !== sizeProps || $[14] !== tone ? (t6 = /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsx"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$sanity$2f$ui$2f$dist$2f$_chunks$2d$es$2f$_visual$2d$editing$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Button"], {
        ...rest,
        ...sizeProps,
        paddingY,
        ref,
        mode,
        tone
    }), $[9] = mode, $[10] = paddingY, $[11] = ref, $[12] = rest, $[13] = sizeProps, $[14] = tone, $[15] = t6) : t6 = $[15];
    let t7;
    return $[16] !== renderWrapper || $[17] !== t5 || $[18] !== t6 ? (t7 = /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsx"])(ConditionalWrapper, {
        condition: t5,
        wrapper: renderWrapper,
        children: t6
    }), $[16] = renderWrapper, $[17] = t5, $[18] = t6, $[19] = t7) : t7 = $[19], t7;
}), Dialog = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["forwardRef"])(function(t0, ref) {
    const $ = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2d$compiler$2d$runtime$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["c"])(21);
    let bodyHeight, children, footer, props, t1, zOffset;
    $[0] !== t0 ? ({ bodyHeight, children, footer, padding: t1, zOffset, ...props } = t0, $[0] = t0, $[1] = bodyHeight, $[2] = children, $[3] = footer, $[4] = props, $[5] = t1, $[6] = zOffset) : (bodyHeight = $[1], children = $[2], footer = $[3], props = $[4], t1 = $[5], zOffset = $[6]);
    const padding = t1 === void 0 ? !0 : t1, { t } = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2d$i18next$2f$dist$2f$es$2f$useTranslation$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useTranslation"])();
    let t2;
    $[7] !== footer || $[8] !== props || $[9] !== t ? (t2 = (footer?.confirmButton || footer?.cancelButton) && /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsxs"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$sanity$2f$ui$2f$dist$2f$_chunks$2d$es$2f$_visual$2d$editing$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Flex"], {
        width: "full",
        gap: 3,
        justify: "flex-end",
        padding: 3,
        align: "center",
        children: [
            footer?.description && /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsx"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$sanity$2f$ui$2f$dist$2f$_chunks$2d$es$2f$_visual$2d$editing$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Box"], {
                flex: 1,
                paddingLeft: 1,
                children: /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsx"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$sanity$2f$ui$2f$dist$2f$_chunks$2d$es$2f$_visual$2d$editing$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Text"], {
                    size: 1,
                    muted: !0,
                    children: footer.description
                })
            }),
            props.onClose && /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsx"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$sanity$2f$ui$2f$dist$2f$_chunks$2d$es$2f$_visual$2d$editing$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Button"], {
                mode: "bleed",
                padding: 2,
                text: t("common.dialog.cancel-button.text"),
                tone: "default",
                onClick: props.onClose,
                "data-testid": "cancel-button",
                ...footer.cancelButton
            }),
            footer.confirmButton && /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsx"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$sanity$2f$ui$2f$dist$2f$_chunks$2d$es$2f$_visual$2d$editing$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Button"], {
                mode: "default",
                padding: 2,
                text: t("common.dialog.confirm-button.text"),
                tone: "critical",
                "data-testid": "confirm-button",
                ...footer.confirmButton
            })
        ]
    }), $[7] = footer, $[8] = props, $[9] = t, $[10] = t2) : t2 = $[10];
    const t3 = padding ? 4 : 0;
    let t4;
    $[11] !== bodyHeight || $[12] !== children || $[13] !== t3 ? (t4 = /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsx"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$sanity$2f$ui$2f$dist$2f$_chunks$2d$es$2f$_visual$2d$editing$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Box"], {
        height: bodyHeight,
        padding: t3,
        children
    }), $[11] = bodyHeight, $[12] = children, $[13] = t3, $[14] = t4) : t4 = $[14];
    let t5;
    return $[15] !== props || $[16] !== ref || $[17] !== t2 || $[18] !== t4 || $[19] !== zOffset ? (t5 = /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsx"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$sanity$2f$ui$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["Dialog"], {
        ...props,
        animate: !0,
        zOffset,
        ref,
        footer: t2,
        children: t4
    }), $[15] = props, $[16] = ref, $[17] = t2, $[18] = t4, $[19] = zOffset, $[20] = t5) : t5 = $[20], t5;
});
function ErrorBoundary({ onCatch, ...rest }) {
    const source = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useContext"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$sanity$2f$lib$2f$_singletons$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["SourceContext"]), handleCatch = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useCallback"])(({ error: caughtError, info: caughtInfo })=>{
        try {
            source?.onUncaughtError?.(caughtError, caughtInfo);
        } catch (e) {
            e.message = `Encountered an additional error when calling custom "onUncaughtError()": ${e.message}`, console.error(e);
        }
        onCatch?.({
            error: caughtError,
            info: caughtInfo
        });
    }, [
        source,
        onCatch
    ]);
    return /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsx"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$sanity$2f$ui$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["ErrorBoundary"], {
        ...rest,
        onCatch: handleCatch
    });
}
const MenuButton = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["forwardRef"])(function(props, ref) {
    const $ = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2d$compiler$2d$runtime$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["c"])(6);
    let t0;
    $[0] !== props.popover ? (t0 = {
        ...props.popover,
        animate: !0
    }, $[0] = props.popover, $[1] = t0) : t0 = $[1];
    let t1;
    return $[2] !== props || $[3] !== ref || $[4] !== t0 ? (t1 = /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsx"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$sanity$2f$ui$2f$dist$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["MenuButton"], {
        ...props,
        ref,
        popover: t0
    }), $[2] = props, $[3] = ref, $[4] = t0, $[5] = t1) : t1 = $[5], t1;
});
function Hotkeys(t0) {
    const $ = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2d$compiler$2d$runtime$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["c"])(12);
    let props, t1, t2;
    $[0] !== t0 ? ({ makePlatformAware: t1, keys: t2, ...props } = t0, $[0] = t0, $[1] = props, $[2] = t1, $[3] = t2) : (props = $[1], t1 = $[2], t2 = $[3]);
    const makePlatformAware = t1 === void 0 ? !0 : t1;
    let t3;
    $[4] !== t2 ? (t3 = t2 === void 0 ? [] : t2, $[4] = t2, $[5] = t3) : t3 = $[5];
    const hotKeys = t3;
    let t4;
    $[6] !== hotKeys || $[7] !== makePlatformAware ? (t4 = makePlatformAware ? hotKeys.map(platformifyKey) : hotKeys, $[6] = hotKeys, $[7] = makePlatformAware, $[8] = t4) : t4 = $[8];
    const keys = t4;
    let t5;
    return $[9] !== keys || $[10] !== props ? (t5 = /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsx"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$sanity$2f$ui$2f$dist$2f$_chunks$2d$es$2f$_visual$2d$editing$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Hotkeys"], {
        ...props,
        keys
    }), $[9] = keys, $[10] = props, $[11] = t5) : t5 = $[11], t5;
}
const IS_APPLE_DEVICE = typeof navigator > "u" || typeof navigator.platform != "string" ? !1 : /Mac|iPod|iPhone|iPad/.test(navigator.platform || "");
function platformifyKey(key) {
    const lowerKey = key.toLowerCase();
    return lowerKey === "alt" && IS_APPLE_DEVICE ? matchCase(key, "option") : lowerKey === "option" && !IS_APPLE_DEVICE ? matchCase(key, "alt") : key;
}
function matchCase(original, target) {
    const orgLength = original.length;
    return target.replace(/./g, (char, i)=>i < orgLength && original[i] === original[i].toUpperCase() ? char.toUpperCase() : char);
}
const TOOLTIP_DELAY_PROPS = {
    open: 400
}, TOOLTIP_SHARED_PROPS = {
    animate: !0,
    arrow: !1,
    boundaryElement: null,
    delay: TOOLTIP_DELAY_PROPS,
    fallbackPlacements: [
        "bottom-start",
        "bottom-end",
        "top-start",
        "top-end"
    ],
    placement: "bottom",
    portal: !0
}, Tooltip = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["forwardRef"])(function(props, ref) {
    const $ = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2d$compiler$2d$runtime$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["c"])(19);
    let content, hotkeys, rest;
    if ($[0] !== props ? ({ content, hotkeys, ...rest } = props, $[0] = props, $[1] = content, $[2] = hotkeys, $[3] = rest) : (content = $[1], hotkeys = $[2], rest = $[3]), typeof content == "string") {
        let t02;
        $[4] !== content ? (t02 = content && /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsx"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$sanity$2f$ui$2f$dist$2f$_chunks$2d$es$2f$_visual$2d$editing$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Box"], {
            flex: 1,
            padding: 1,
            children: /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsx"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$sanity$2f$ui$2f$dist$2f$_chunks$2d$es$2f$_visual$2d$editing$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Text"], {
                size: 1,
                children: content
            })
        }), $[4] = content, $[5] = t02) : t02 = $[5];
        let t1;
        $[6] !== hotkeys ? (t1 = hotkeys && /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsx"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$sanity$2f$ui$2f$dist$2f$_chunks$2d$es$2f$_visual$2d$editing$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Box"], {
            flex: "none",
            children: /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsx"])(Hotkeys, {
                keys: hotkeys
            })
        }), $[6] = hotkeys, $[7] = t1) : t1 = $[7];
        let t2;
        $[8] !== t02 || $[9] !== t1 ? (t2 = /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsxs"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$sanity$2f$ui$2f$dist$2f$_chunks$2d$es$2f$_visual$2d$editing$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Flex"], {
            align: "center",
            children: [
                t02,
                t1
            ]
        }), $[8] = t02, $[9] = t1, $[10] = t2) : t2 = $[10];
        let t3;
        return $[11] !== ref || $[12] !== rest || $[13] !== t2 ? (t3 = /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsx"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$sanity$2f$ui$2f$dist$2f$_chunks$2d$es$2f$_visual$2d$editing$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Tooltip"], {
            ...TOOLTIP_SHARED_PROPS,
            content: t2,
            padding: 1,
            ref,
            ...rest
        }), $[11] = ref, $[12] = rest, $[13] = t2, $[14] = t3) : t3 = $[14], t3;
    }
    let t0;
    return $[15] !== content || $[16] !== ref || $[17] !== rest ? (t0 = /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsx"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$sanity$2f$ui$2f$dist$2f$_chunks$2d$es$2f$_visual$2d$editing$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Tooltip"], {
        ...TOOLTIP_SHARED_PROPS,
        content,
        ref,
        ...rest
    }), $[15] = content, $[16] = ref, $[17] = rest, $[18] = t0) : t0 = $[18], t0;
}), FONT_SIZE = 1, SUBTITLE_FONT_SIZE = 0, SubtitleText = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$styled$2d$components$2f$dist$2f$styled$2d$components$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["styled"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$sanity$2f$ui$2f$dist$2f$_chunks$2d$es$2f$_visual$2d$editing$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Text"])`
  margin-top: 2px;
`, PreviewWrapper = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$styled$2d$components$2f$dist$2f$styled$2d$components$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["styled"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$sanity$2f$ui$2f$dist$2f$_chunks$2d$es$2f$_visual$2d$editing$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Box"])`
  height: 25px;
  width: 25px;
  overflow: hidden;
`, MenuItem = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["forwardRef"])(function(t0, ref) {
    const $ = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2d$compiler$2d$runtime$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["c"])(49);
    let Icon, IconRight, __unstable_space, __unstable_subtitle, badgeText, childrenProp, disabled, hotkeys, renderMenuItem, rest, t1, text, tooltipProps;
    $[0] !== t0 ? ({ badgeText, children: childrenProp, disabled, hotkeys, icon: Icon, iconRight: IconRight, preview: t1, renderMenuItem, text, tooltipProps, __unstable_subtitle, __unstable_space, ...rest } = t0, $[0] = t0, $[1] = Icon, $[2] = IconRight, $[3] = __unstable_space, $[4] = __unstable_subtitle, $[5] = badgeText, $[6] = childrenProp, $[7] = disabled, $[8] = hotkeys, $[9] = renderMenuItem, $[10] = rest, $[11] = t1, $[12] = text, $[13] = tooltipProps) : (Icon = $[1], IconRight = $[2], __unstable_space = $[3], __unstable_subtitle = $[4], badgeText = $[5], childrenProp = $[6], disabled = $[7], hotkeys = $[8], renderMenuItem = $[9], rest = $[10], t1 = $[11], text = $[12], tooltipProps = $[13]);
    const preview = t1 === void 0 ? null : t1;
    let t2;
    $[14] !== __unstable_space || $[15] !== disabled || $[16] !== preview ? (t2 = preview && /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsx"])(PreviewWrapper, {
        style: {
            opacity: disabled ? 0.25 : void 0
        },
        paddingRight: __unstable_space ? 1 : 0,
        children: /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsx"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$sanity$2f$ui$2f$dist$2f$_chunks$2d$es$2f$_visual$2d$editing$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Flex"], {
            align: "center",
            height: "fill",
            justify: "center",
            children: preview
        })
    }), $[14] = __unstable_space, $[15] = disabled, $[16] = preview, $[17] = t2) : t2 = $[17];
    let t3;
    $[18] !== Icon ? (t3 = Icon && /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsx"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$sanity$2f$ui$2f$dist$2f$_chunks$2d$es$2f$_visual$2d$editing$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Box"], {
        paddingRight: 1,
        children: /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsxs"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$sanity$2f$ui$2f$dist$2f$_chunks$2d$es$2f$_visual$2d$editing$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Text"], {
            size: FONT_SIZE,
            children: [
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isValidElement"])(Icon) && Icon,
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2d$is$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isValidElementType"])(Icon) && /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsx"])(Icon, {})
            ]
        })
    }), $[18] = Icon, $[19] = t3) : t3 = $[19];
    let t4;
    $[20] !== __unstable_subtitle || $[21] !== text ? (t4 = text && /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsxs"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$sanity$2f$ui$2f$dist$2f$_chunks$2d$es$2f$_visual$2d$editing$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Stack"], {
        flex: 1,
        space: __unstable_subtitle ? 1 : 2,
        children: [
            /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsx"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$sanity$2f$ui$2f$dist$2f$_chunks$2d$es$2f$_visual$2d$editing$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Text"], {
                size: FONT_SIZE,
                textOverflow: "ellipsis",
                weight: "medium",
                children: text
            }),
            __unstable_subtitle && /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsx"])(SubtitleText, {
                size: SUBTITLE_FONT_SIZE,
                textOverflow: "ellipsis",
                weight: "medium",
                muted: !0,
                children: __unstable_subtitle
            })
        ]
    }), $[20] = __unstable_subtitle, $[21] = text, $[22] = t4) : t4 = $[22];
    let t5;
    $[23] !== IconRight || $[24] !== badgeText || $[25] !== hotkeys ? (t5 = (badgeText || hotkeys || IconRight) && /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsxs"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$sanity$2f$ui$2f$dist$2f$_chunks$2d$es$2f$_visual$2d$editing$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Flex"], {
        align: "center",
        gap: 3,
        marginLeft: 3,
        children: [
            hotkeys && /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsx"])(Hotkeys, {
                keys: hotkeys,
                style: {
                    marginTop: -4,
                    marginBottom: -4
                }
            }),
            badgeText && /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsx"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$sanity$2f$ui$2f$dist$2f$_chunks$2d$es$2f$_visual$2d$editing$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Badge"], {
                fontSize: 0,
                style: {
                    marginTop: -4,
                    marginBottom: -4
                },
                children: badgeText
            }),
            IconRight && /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsxs"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$sanity$2f$ui$2f$dist$2f$_chunks$2d$es$2f$_visual$2d$editing$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Text"], {
                size: FONT_SIZE,
                children: [
                    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isValidElement"])(IconRight) && IconRight,
                    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2d$is$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isValidElementType"])(IconRight) && /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsx"])(IconRight, {})
                ]
            })
        ]
    }), $[23] = IconRight, $[24] = badgeText, $[25] = hotkeys, $[26] = t5) : t5 = $[26];
    let t6;
    $[27] !== t2 || $[28] !== t3 || $[29] !== t4 || $[30] !== t5 ? (t6 = /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsxs"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$sanity$2f$ui$2f$dist$2f$_chunks$2d$es$2f$_visual$2d$editing$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Flex"], {
        align: "center",
        gap: 2,
        children: [
            t2,
            t3,
            t4,
            t5
        ]
    }), $[27] = t2, $[28] = t3, $[29] = t4, $[30] = t5, $[31] = t6) : t6 = $[31];
    const menuItemContent = t6;
    let t7;
    $[32] !== tooltipProps ? (t7 = (children)=>/* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsx"])(Tooltip, {
            content: tooltipProps?.content,
            portal: !0,
            ...tooltipProps,
            children: /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsx"])("div", {
                children
            })
        }), $[32] = tooltipProps, $[33] = t7) : t7 = $[33];
    const renderWrapper = t7, t8 = !!tooltipProps, t9 = preview ? 1 : 3, t10 = preview ? 1 : 3;
    let t11;
    $[34] !== childrenProp || $[35] !== menuItemContent || $[36] !== renderMenuItem ? (t11 = typeof childrenProp > "u" && typeof renderMenuItem == "function" ? renderMenuItem(menuItemContent) : menuItemContent, $[34] = childrenProp, $[35] = menuItemContent, $[36] = renderMenuItem, $[37] = t11) : t11 = $[37];
    let t12;
    $[38] !== disabled || $[39] !== ref || $[40] !== rest || $[41] !== t10 || $[42] !== t11 || $[43] !== t9 ? (t12 = /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsx"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$sanity$2f$ui$2f$dist$2f$_chunks$2d$es$2f$_visual$2d$editing$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["MenuItem"], {
        disabled,
        paddingLeft: t9,
        paddingRight: 3,
        paddingY: t10,
        ref,
        ...rest,
        children: t11
    }), $[38] = disabled, $[39] = ref, $[40] = rest, $[41] = t10, $[42] = t11, $[43] = t9, $[44] = t12) : t12 = $[44];
    let t13;
    return $[45] !== renderWrapper || $[46] !== t12 || $[47] !== t8 ? (t13 = /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsx"])(ConditionalWrapper, {
        condition: t8,
        wrapper: renderWrapper,
        children: t12
    }), $[45] = renderWrapper, $[46] = t12, $[47] = t8, $[48] = t13) : t13 = $[48], t13;
}), Popover = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["forwardRef"])(function(props, ref) {
    const $ = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2d$compiler$2d$runtime$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["c"])(3);
    let t0;
    return $[0] !== props || $[1] !== ref ? (t0 = /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsx"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$sanity$2f$ui$2f$dist$2f$_chunks$2d$es$2f$_visual$2d$editing$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Popover"], {
        ...props,
        animate: !0,
        ref
    }), $[0] = props, $[1] = ref, $[2] = t0) : t0 = $[2], t0;
}), Tab = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["forwardRef"])(function(t0, ref) {
    const $ = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2d$compiler$2d$runtime$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["c"])(7);
    let props, t1;
    $[0] !== t0 ? ({ tone: t1, ...props } = t0, $[0] = t0, $[1] = props, $[2] = t1) : (props = $[1], t1 = $[2]);
    const tone = t1 === void 0 ? "default" : t1;
    let t2;
    return $[3] !== props || $[4] !== ref || $[5] !== tone ? (t2 = /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsx"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$sanity$2f$ui$2f$dist$2f$_chunks$2d$es$2f$_visual$2d$editing$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Tab"], {
        ...props,
        muted: !0,
        padding: 2,
        ref,
        tone
    }), $[3] = props, $[4] = ref, $[5] = tone, $[6] = t2) : t2 = $[6], t2;
}), TooltipDelayGroupProvider = (props)=>{
    const $ = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2d$compiler$2d$runtime$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["c"])(2);
    let t0;
    return $[0] !== props.children ? (t0 = /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsx"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$sanity$2f$ui$2f$dist$2f$_chunks$2d$es$2f$_visual$2d$editing$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["TooltipDelayGroupProvider"], {
        delay: TOOLTIP_DELAY_PROPS,
        children: props.children
    }), $[0] = props.children, $[1] = t0) : t0 = $[1], t0;
}, BASE_URL = "https://docs.sanity.io/help/";
function generateHelpUrl(slug) {
    return BASE_URL + slug;
}
;
 //# sourceMappingURL=generate-help-url.esm.mjs.map
}}),
"[project]/node_modules/sanity/lib/_chunks-es/MenuGroup.mjs [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "ConfirmPopover": (()=>ConfirmPopover),
    "MenuGroup": (()=>MenuGroup)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react-jsx-runtime.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2d$compiler$2d$runtime$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/react-compiler-runtime/dist/index.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$sanity$2f$ui$2f$dist$2f$_chunks$2d$es$2f$_visual$2d$editing$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@sanity/ui/dist/_chunks-es/_visual-editing.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2d$i18next$2f$dist$2f$es$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/react-i18next/dist/es/index.js [app-ssr] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2d$i18next$2f$dist$2f$es$2f$useTranslation$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/react-i18next/dist/es/useTranslation.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$sanity$2f$lib$2f$_chunks$2d$es$2f$generate$2d$help$2d$url$2e$esm$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/sanity/lib/_chunks-es/generate-help-url.esm.mjs [app-ssr] (ecmascript)");
;
;
;
;
;
;
function ConfirmPopover(t0) {
    const $ = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2d$compiler$2d$runtime$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["c"])(16), { cancelButtonIcon, cancelButtonText, confirmButtonIcon, confirmButtonText, message, onCancel, onConfirm, open, referenceElement, tone: t1, placement: t2, fallbackPlacements: t3 } = t0, tone = t1 === void 0 ? "critical" : t1, placement = t2 === void 0 ? "top" : t2;
    let t4;
    $[0] !== t3 ? (t4 = t3 === void 0 ? [
        "left",
        "bottom"
    ] : t3, $[0] = t3, $[1] = t4) : t4 = $[1];
    const fallbackPlacements = t4;
    if (!open) return null;
    let t5;
    $[2] !== cancelButtonIcon || $[3] !== cancelButtonText || $[4] !== confirmButtonIcon || $[5] !== confirmButtonText || $[6] !== message || $[7] !== onCancel || $[8] !== onConfirm || $[9] !== tone ? (t5 = /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsx"])(ConfirmPopoverContent, {
        cancelButtonIcon,
        cancelButtonText,
        confirmButtonIcon,
        confirmButtonText,
        message,
        onCancel,
        onConfirm,
        tone
    }), $[2] = cancelButtonIcon, $[3] = cancelButtonText, $[4] = confirmButtonIcon, $[5] = confirmButtonText, $[6] = message, $[7] = onCancel, $[8] = onConfirm, $[9] = tone, $[10] = t5) : t5 = $[10];
    let t6;
    return $[11] !== fallbackPlacements || $[12] !== placement || $[13] !== referenceElement || $[14] !== t5 ? (t6 = /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsx"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$sanity$2f$ui$2f$dist$2f$_chunks$2d$es$2f$_visual$2d$editing$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Popover"], {
        content: t5,
        constrainSize: !0,
        fallbackPlacements,
        open: !0,
        placement,
        portal: !0,
        preventOverflow: !0,
        referenceElement
    }), $[11] = fallbackPlacements, $[12] = placement, $[13] = referenceElement, $[14] = t5, $[15] = t6) : t6 = $[15], t6;
}
function ConfirmPopoverContent(t0) {
    const $ = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2d$compiler$2d$runtime$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["c"])(29), { cancelButtonIcon, cancelButtonText, confirmButtonIcon, confirmButtonText, message, onCancel, onConfirm, tone } = t0, { t } = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2d$i18next$2f$dist$2f$es$2f$useTranslation$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useTranslation"])(), { isTopLayer } = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$sanity$2f$ui$2f$dist$2f$_chunks$2d$es$2f$_visual$2d$editing$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useLayer"])(), ref = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useRef"])(null);
    let t1;
    $[0] !== isTopLayer || $[1] !== onCancel ? (t1 = (event)=>{
        event.key === "Escape" && isTopLayer && onCancel();
    }, $[0] = isTopLayer, $[1] = onCancel, $[2] = t1) : t1 = $[2], (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$sanity$2f$ui$2f$dist$2f$_chunks$2d$es$2f$_visual$2d$editing$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useGlobalKeyDown"])(t1);
    let t2;
    $[3] === Symbol.for("react.memo_cache_sentinel") ? (t2 = ()=>[
            ref.current
        ], $[3] = t2) : t2 = $[3], (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$sanity$2f$ui$2f$dist$2f$_chunks$2d$es$2f$_visual$2d$editing$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useClickOutsideEvent"])(isTopLayer && onCancel, t2);
    let t3;
    $[4] === Symbol.for("react.memo_cache_sentinel") ? (t3 = {
        minWidth: 280,
        maxWidth: 350
    }, $[4] = t3) : t3 = $[4];
    let t4;
    $[5] !== message ? (t4 = /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsx"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$sanity$2f$ui$2f$dist$2f$_chunks$2d$es$2f$_visual$2d$editing$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Box"], {
        flex: 1,
        overflow: "auto",
        padding: 4,
        children: /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsx"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$sanity$2f$ui$2f$dist$2f$_chunks$2d$es$2f$_visual$2d$editing$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Text"], {
            size: 1,
            children: message
        })
    }), $[5] = message, $[6] = t4) : t4 = $[6];
    let t5;
    $[7] === Symbol.for("react.memo_cache_sentinel") ? (t5 = {
        borderTop: "1px solid var(--card-border-color)"
    }, $[7] = t5) : t5 = $[7];
    let t6;
    $[8] !== cancelButtonText || $[9] !== t ? (t6 = cancelButtonText || t("common.dialog.cancel-button.text"), $[8] = cancelButtonText, $[9] = t, $[10] = t6) : t6 = $[10];
    let t7;
    $[11] !== cancelButtonIcon || $[12] !== onCancel || $[13] !== t6 ? (t7 = /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsx"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$sanity$2f$ui$2f$dist$2f$_chunks$2d$es$2f$_visual$2d$editing$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Button"], {
        "data-testid": "confirm-popover-cancel-button",
        icon: cancelButtonIcon,
        onClick: onCancel,
        mode: "ghost",
        padding: 2,
        text: t6,
        size: 1
    }), $[11] = cancelButtonIcon, $[12] = onCancel, $[13] = t6, $[14] = t7) : t7 = $[14];
    let t8;
    $[15] !== confirmButtonText || $[16] !== t ? (t8 = confirmButtonText || t("common.dialog.confirm-button.text"), $[15] = confirmButtonText, $[16] = t, $[17] = t8) : t8 = $[17];
    let t9;
    $[18] !== confirmButtonIcon || $[19] !== onConfirm || $[20] !== t8 || $[21] !== tone ? (t9 = /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsx"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$sanity$2f$ui$2f$dist$2f$_chunks$2d$es$2f$_visual$2d$editing$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Button"], {
        "data-testid": "confirm-popover-confirm-button",
        icon: confirmButtonIcon,
        onClick: onConfirm,
        padding: 2,
        text: t8,
        tone,
        size: 1
    }), $[18] = confirmButtonIcon, $[19] = onConfirm, $[20] = t8, $[21] = tone, $[22] = t9) : t9 = $[22];
    let t10;
    $[23] !== t7 || $[24] !== t9 ? (t10 = /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsx"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$sanity$2f$ui$2f$dist$2f$_chunks$2d$es$2f$_visual$2d$editing$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Box"], {
        paddingX: 4,
        paddingY: 3,
        style: t5,
        children: /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsxs"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$sanity$2f$ui$2f$dist$2f$_chunks$2d$es$2f$_visual$2d$editing$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Grid"], {
            columns: 2,
            gap: 2,
            children: [
                t7,
                t9
            ]
        })
    }), $[23] = t7, $[24] = t9, $[25] = t10) : t10 = $[25];
    let t11;
    return $[26] !== t10 || $[27] !== t4 ? (t11 = /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsxs"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$sanity$2f$ui$2f$dist$2f$_chunks$2d$es$2f$_visual$2d$editing$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Flex"], {
        direction: "column",
        ref,
        style: t3,
        children: [
            t4,
            t10
        ]
    }), $[26] = t10, $[27] = t4, $[28] = t11) : t11 = $[28], t11;
}
const MenuGroup = (props)=>{
    const $ = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2d$compiler$2d$runtime$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["c"])(8), { tooltipProps } = props;
    let t0;
    $[0] !== tooltipProps ? (t0 = (children)=>/* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsx"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$sanity$2f$lib$2f$_chunks$2d$es$2f$generate$2d$help$2d$url$2e$esm$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Tooltip"], {
            content: tooltipProps?.content,
            portal: !0,
            ...tooltipProps,
            children: /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsx"])("div", {
                children
            })
        }), $[0] = tooltipProps, $[1] = t0) : t0 = $[1];
    const renderWrapper = t0, t1 = !!tooltipProps;
    let t2;
    $[2] !== props ? (t2 = /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsx"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$sanity$2f$ui$2f$dist$2f$_chunks$2d$es$2f$_visual$2d$editing$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["MenuGroup"], {
        ...props,
        fontSize: 1,
        padding: 3
    }), $[2] = props, $[3] = t2) : t2 = $[3];
    let t3;
    return $[4] !== renderWrapper || $[5] !== t1 || $[6] !== t2 ? (t3 = /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsx"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$sanity$2f$lib$2f$_chunks$2d$es$2f$generate$2d$help$2d$url$2e$esm$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ConditionalWrapper"], {
        condition: t1,
        wrapper: renderWrapper,
        children: t2
    }), $[4] = renderWrapper, $[5] = t1, $[6] = t2, $[7] = t3) : t3 = $[7], t3;
};
;
 //# sourceMappingURL=MenuGroup.mjs.map
}}),
"[project]/node_modules/sanity/lib/_chunks-es/StructureToolProvider.mjs [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "ComponentBuilder": (()=>ComponentBuilder),
    "ComponentViewBuilder": (()=>ComponentViewBuilder),
    "DEFAULT_INTENT_HANDLER": (()=>DEFAULT_INTENT_HANDLER),
    "DocumentBuilder": (()=>DocumentBuilder),
    "DocumentListBuilder": (()=>DocumentListBuilder),
    "DocumentListItemBuilder": (()=>DocumentListItemBuilder),
    "DocumentTypeListBuilder": (()=>DocumentTypeListBuilder),
    "FormViewBuilder": (()=>FormViewBuilder),
    "GenericListBuilder": (()=>GenericListBuilder),
    "GenericViewBuilder": (()=>GenericViewBuilder),
    "HELP_URL": (()=>HELP_URL),
    "InitialValueTemplateItemBuilder": (()=>InitialValueTemplateItemBuilder),
    "ListBuilder": (()=>ListBuilder),
    "ListItemBuilder": (()=>ListItemBuilder),
    "MenuItemBuilder": (()=>MenuItemBuilder),
    "MenuItemGroupBuilder": (()=>MenuItemGroupBuilder),
    "SerializeError": (()=>SerializeError),
    "StructureToolProvider": (()=>StructureToolProvider),
    "component": (()=>component),
    "createStructureBuilder": (()=>createStructureBuilder),
    "defaultInitialValueTemplateItems": (()=>defaultInitialValueTemplateItems),
    "defaultIntentChecker": (()=>defaultIntentChecker),
    "documentFromEditor": (()=>documentFromEditor),
    "documentFromEditorWithInitialValue": (()=>documentFromEditorWithInitialValue),
    "form": (()=>form),
    "getExtendedProjection": (()=>getExtendedProjection),
    "getOrderingMenuItem": (()=>getOrderingMenuItem),
    "getOrderingMenuItemsForSchemaType": (()=>getOrderingMenuItemsForSchemaType),
    "getTypeNamesFromFilter": (()=>getTypeNamesFromFilter),
    "isDocumentListItem": (()=>isDocumentListItem),
    "maybeSerializeInitialValueTemplateItem": (()=>maybeSerializeInitialValueTemplateItem),
    "maybeSerializeMenuItem": (()=>maybeSerializeMenuItem),
    "maybeSerializeMenuItemGroup": (()=>maybeSerializeMenuItemGroup),
    "maybeSerializeView": (()=>maybeSerializeView),
    "menuItemsFromInitialValueTemplateItems": (()=>menuItemsFromInitialValueTemplateItems),
    "shallowIntentChecker": (()=>shallowIntentChecker),
    "structureLocaleNamespace": (()=>structureLocaleNamespace),
    "structureUsEnglishLocaleBundle": (()=>structureUsEnglishLocaleBundle)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react-jsx-runtime.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$sanity$2f$lib$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/sanity/lib/index.mjs [app-ssr] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$sanity$2f$client$2f$dist$2f$_chunks$2d$es$2f$resolveEditInfo$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@sanity/client/dist/_chunks-es/resolveEditInfo.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$sanity$2f$lib$2f$_singletons$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/sanity/lib/_singletons.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2d$is$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/react-is/index.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$sanity$2f$icons$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@sanity/icons/dist/index.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2f$camelCase$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/lodash/camelCase.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$speakingurl$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/speakingurl/index.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2f$uniqueId$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/lodash/uniqueId.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2f$uniq$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/lodash/uniq.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2f$kebabCase$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/lodash/kebabCase.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$sanity$2f$lib$2f$_chunks$2d$es$2f$generate$2d$help$2d$url$2e$esm$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/sanity/lib/_chunks-es/generate-help-url.esm.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2f$find$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/lodash/find.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2f$startCase$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/lodash/startCase.js [app-ssr] (ecmascript)");
;
;
;
;
;
;
;
;
;
;
;
;
;
;
const structureLocaleNamespace = "structure", structureUsEnglishLocaleBundle = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$sanity$2f$lib$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["defineLocaleResourceBundle"])({
    locale: "en-US",
    namespace: structureLocaleNamespace,
    resources: ()=>__turbopack_context__.r("[project]/node_modules/sanity/lib/_chunks-es/resources6.mjs [app-ssr] (ecmascript, async loader)")(__turbopack_context__.i)
}), IMPLICIT_SCHEMA_TYPE_FIELDS = [
    "_id",
    "_type",
    "_createdAt",
    "_updatedAt",
    "_rev"
];
function joinReferences(schemaType, path, strict = !1) {
    const [head, ...tail] = path;
    if (!("fields" in schemaType)) return "";
    const schemaField = schemaType.fields.find((field)=>field.name === head);
    if (!schemaField) {
        if (!IMPLICIT_SCHEMA_TYPE_FIELDS.includes(head)) {
            const errorMessage = `The current ordering config targeted the nonexistent field "${head}" on schema type "${schemaType.name}". It should be one of ${schemaType.fields.map((field)=>field.name).join(", ")}`;
            if (strict) throw new Error(errorMessage);
            console.warn(errorMessage);
        }
        return "";
    }
    if ("to" in schemaField.type && schemaField.type.name === "reference") {
        const refTypes = schemaField.type.to;
        return `${head}->{${refTypes.map((refType)=>joinReferences(refType, tail)).join(",")}}`;
    }
    const tailFields = tail.length > 0 && joinReferences(schemaField.type, tail), tailWrapper = tailFields ? `{${tailFields}}` : "";
    return tail.length > 0 ? `${head}${tailWrapper}` : head;
}
function getExtendedProjection(schemaType, orderBy, strict = !1) {
    return orderBy.map((ordering)=>joinReferences(schemaType, ordering.field.split("."), strict)).join(", ");
}
class SerializeError extends Error {
    constructor(message, parentPath, pathSegment, hint){
        super(message), this.name = "SerializeError";
        const segment = typeof pathSegment > "u" ? "<unknown>" : `${pathSegment}`;
        this.path = (parentPath || []).concat(hint ? `${segment} (${hint})` : segment);
    }
    withHelpUrl(id) {
        return this.helpId = id, this;
    }
}
const HELP_URL = {
    ID_REQUIRED: "structure-node-id-required",
    TITLE_REQUIRED: "structure-title-required",
    FILTER_REQUIRED: "structure-filter-required",
    INVALID_LIST_ITEM: "structure-invalid-list-item",
    COMPONENT_REQUIRED: "structure-view-component-required",
    DOCUMENT_ID_REQUIRED: "structure-document-id-required",
    DOCUMENT_TYPE_REQUIRED: "structure-document-type-required",
    SCHEMA_TYPE_REQUIRED: "structure-schema-type-required",
    SCHEMA_TYPE_NOT_FOUND: "structure-schema-type-not-found",
    LIST_ITEMS_MUST_BE_ARRAY: "structure-list-items-must-be-array",
    QUERY_PROVIDED_FOR_FILTER: "structure-query-provided-for-filter",
    ACTION_OR_INTENT_REQUIRED: "structure-action-or-intent-required",
    LIST_ITEM_IDS_MUST_BE_UNIQUE: "structure-list-item-ids-must-be-unique",
    ACTION_AND_INTENT_MUTUALLY_EXCLUSIVE: "structure-action-and-intent-mutually-exclusive",
    API_VERSION_REQUIRED_FOR_CUSTOM_FILTER: "structure-api-version-required-for-custom-filter"
}, ORDER_BY_UPDATED_AT = {
    title: "Last edited",
    i18n: {
        title: {
            key: "menu-items.sort-by.last-edited",
            ns: structureLocaleNamespace
        }
    },
    name: "lastEditedDesc",
    by: [
        {
            field: "_updatedAt",
            direction: "desc"
        }
    ]
}, ORDER_BY_CREATED_AT = {
    title: "Created",
    i18n: {
        title: {
            key: "menu-items.sort-by.created",
            ns: structureLocaleNamespace
        }
    },
    name: "lastCreatedDesc",
    by: [
        {
            field: "_createdAt",
            direction: "desc"
        }
    ]
}, DEFAULT_SELECTED_ORDERING_OPTION = ORDER_BY_UPDATED_AT, DEFAULT_ORDERING_OPTIONS = [
    ORDER_BY_UPDATED_AT,
    // _updatedAt
    ORDER_BY_CREATED_AT
];
function maybeSerializeMenuItem(item, index, path) {
    return item instanceof MenuItemBuilder ? item.serialize({
        path,
        index
    }) : item;
}
class MenuItemBuilder {
    /** menu item option object. See {@link PartialMenuItem} */ constructor(_context, spec){
        this._context = _context, this.spec = spec || {};
    }
    /**
   * Set menu item action
   * @param action - menu item action. See {@link MenuItemActionType}
   * @returns menu item builder based on action provided. See {@link MenuItemBuilder}
   */ action(action) {
        return this.clone({
            action
        });
    }
    /**
   * Get menu item action
   * @returns menu item builder action. See {@link PartialMenuItem}
   */ getAction() {
        return this.spec.action;
    }
    /**
   * Set menu item intent
   * @param intent - menu item intent. See {@link Intent}
   * @returns menu item builder based on intent provided. See {@link MenuItemBuilder}
   */ intent(intent) {
        return this.clone({
            intent
        });
    }
    /**
   * Get menu item intent
   * @returns menu item intent. See {@link PartialMenuItem}
   */ getIntent() {
        return this.spec.intent;
    }
    /**
   * Set menu item title
   * @param title - menu item title
   * @returns menu item builder based on title provided. See {@link MenuItemBuilder}
   */ title(title) {
        return this.clone({
            title
        });
    }
    /**
   * Get menu item title. Note that the `i18n` configuration will take
   * precedence and this title is left here for compatibility.
   * @returns menu item title
   */ getTitle() {
        return this.spec.title;
    }
    /**
   * Set the i18n key and namespace used to populate the localized title.
   * @param i18n - object with i18n key and related namespace
   * @returns menu item builder based on i18n config provided. See {@link MenuItemBuilder}
   */ i18n(i18n) {
        return this.clone({
            i18n
        });
    }
    /**
   * Get the i18n key and namespace used to populate the localized title.
   * @returns the i18n key and namespace used to populate the localized title.
   */ getI18n() {
        return this.spec.i18n;
    }
    /**
   * Set menu item group
   * @param group - menu item group
   * @returns menu item builder based on group provided. See {@link MenuItemBuilder}
   */ group(group) {
        return this.clone({
            group
        });
    }
    /**
   * Get menu item group
   * @returns menu item group. See {@link PartialMenuItem}
   */ getGroup() {
        return this.spec.group;
    }
    /**
   * Set menu item icon
   * @param icon - menu item icon
   * @returns menu item builder based on icon provided. See {@link MenuItemBuilder}
   */ icon(icon) {
        return this.clone({
            icon
        });
    }
    /**
   * Get menu item icon
   * @returns menu item icon. See {@link PartialMenuItem}
   */ getIcon() {
        return this.spec.icon;
    }
    /**
   * Set menu item parameters
   * @param params - menu item parameters. See {@link MenuItemParamsType}
   * @returns menu item builder based on parameters provided. See {@link MenuItemBuilder}
   */ params(params) {
        return this.clone({
            params
        });
    }
    /**
   * Get meny item parameters
   * @returns menu item parameters. See {@link PartialMenuItem}
   */ getParams() {
        return this.spec.params;
    }
    /**
   * Set menu item to show as action
   * @param showAsAction - determine if menu item should show as action
   * @returns menu item builder based on if it should show as action. See {@link MenuItemBuilder}
   */ showAsAction(showAsAction = !0) {
        return this.clone({
            showAsAction: !!showAsAction
        });
    }
    /**
   * Check if menu item should show as action
   * @returns true if menu item should show as action, false if not. See {@link PartialMenuItem}
   */ getShowAsAction() {
        return this.spec.showAsAction;
    }
    /** Serialize menu item builder
   * @param options - serialization options. See {@link SerializeOptions}
   * @returns menu item node based on path provided in options. See {@link MenuItem}
   */ serialize(options = {
        path: []
    }) {
        const { title, action, intent } = this.spec;
        if (!title) {
            const hint = typeof action == "string" ? `action: "${action}"` : void 0;
            throw new SerializeError("`title` is required for menu item", options.path, options.index, hint).withHelpUrl(HELP_URL.TITLE_REQUIRED);
        }
        if (!action && !intent) throw new SerializeError(`\`action\` or \`intent\` required for menu item with title ${this.spec.title}`, options.path, options.index, `"${title}"`).withHelpUrl(HELP_URL.ACTION_OR_INTENT_REQUIRED);
        if (intent && action) throw new SerializeError("cannot set both `action` AND `intent`", options.path, options.index, `"${title}"`).withHelpUrl(HELP_URL.ACTION_AND_INTENT_MUTUALLY_EXCLUSIVE);
        return {
            ...this.spec,
            title
        };
    }
    /** Clone menu item builder
   * @param withSpec - menu item options. See {@link PartialMenuItem}
   * @returns menu item builder based on context and spec provided. See {@link MenuItemBuilder}
   */ clone(withSpec) {
        const builder = new MenuItemBuilder(this._context);
        return builder.spec = {
            ...this.spec,
            ...withSpec
        }, builder;
    }
}
function getOrderingMenuItem(context, { by, title, i18n }, extendedProjection) {
    let builder = new MenuItemBuilder(context).group("sorting").title(context.i18n.t("default-menu-item.fallback-title", {
        // note this lives in the `studio` bundle because that one is loaded by default
        ns: "studio",
        replace: {
            title
        }
    })).icon(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$sanity$2f$icons$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["SortIcon"]).action("setSortOrder").params({
        by,
        extendedProjection
    });
    return i18n && (builder = builder.i18n(i18n)), builder;
}
function getOrderingMenuItemsForSchemaType(context, typeName) {
    const { schema } = context, type = typeof typeName == "string" ? schema.get(typeName) : typeName;
    return !type || !("orderings" in type) ? [] : (type.orderings ? type.orderings.concat(DEFAULT_ORDERING_OPTIONS) : DEFAULT_ORDERING_OPTIONS).map((ordering)=>getOrderingMenuItem(context, ordering, getExtendedProjection(type, ordering.by)));
}
function maybeSerializeMenuItemGroup(item, index, path) {
    return item instanceof MenuItemGroupBuilder ? item.serialize({
        path,
        index
    }) : item;
}
class MenuItemGroupBuilder {
    /** Menu item group ID */ /** Menu item group title */ constructor(_context, spec){
        this._context = _context, this._id = spec ? spec.id : "", this._title = spec ? spec.title : "", this._i18n = spec ? spec.i18n : void 0;
    }
    /**
   * Set menu item group ID
   * @param id - menu item group ID
   * @returns menu item group builder based on ID provided. See {@link MenuItemGroupBuilder}
   */ id(id) {
        return new MenuItemGroupBuilder(this._context, {
            id,
            title: this._title,
            i18n: this._i18n
        });
    }
    /**
   * Get menu item group ID
   * @returns menu item group ID
   */ getId() {
        return this._id;
    }
    /**
   * Set menu item group title
   * @param title - menu item group title
   * @returns menu item group builder based on title provided. See {@link MenuItemGroupBuilder}
   */ title(title) {
        return new MenuItemGroupBuilder(this._context, {
            title,
            id: this._id,
            i18n: this._i18n
        });
    }
    /**
   * Get menu item group title
   * @returns menu item group title
   */ getTitle() {
        return this._title;
    }
    /**
   * Set the i18n key and namespace used to populate the localized title.
   * @param i18n - object with i18n key and related namespace
   * @returns menu item group builder based on i18n info provided. See {@link MenuItemGroupBuilder}
   */ i18n(i18n) {
        return new MenuItemGroupBuilder(this._context, {
            i18n,
            id: this._id,
            title: this._title
        });
    }
    /**
   * Get the i18n key and namespace used to populate the localized title.
   * @returns the i18n key and namespace used to populate the localized title.
   */ getI18n() {
        return this._i18n;
    }
    /**
   * Serialize menu item group builder
   * @param options - serialization options (path). See {@link SerializeOptions}
   * @returns menu item group based on path provided in options. See {@link MenuItemGroup}
   */ serialize(options = {
        path: []
    }) {
        if (!this._id) throw new SerializeError("`id` is required for a menu item group", options.path, options.index, this._title).withHelpUrl(HELP_URL.ID_REQUIRED);
        if (!this._title) throw new SerializeError("`title` is required for a menu item group", options.path, this._id).withHelpUrl(HELP_URL.TITLE_REQUIRED);
        return {
            id: this._id,
            title: this._title,
            i18n: this._i18n
        };
    }
}
const disallowedPattern = /([^A-Za-z0-9-_.])/;
function validateId(id, parentPath, pathSegment) {
    if (typeof id != "string") throw new SerializeError(`Structure node id must be of type string, got ${typeof id}`, parentPath, pathSegment);
    const [disallowedChar] = id.match(disallowedPattern) || [];
    if (disallowedChar) throw new SerializeError(`Structure node id cannot contain character "${disallowedChar}"`, parentPath, pathSegment);
    if (id.startsWith("__edit__")) throw new SerializeError("Structure node id cannot start with __edit__", parentPath, pathSegment);
    return id;
}
function getStructureNodeId(title, id) {
    if (id) return id;
    const camelCased = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2f$camelCase$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"])(title);
    return disallowedPattern.test(camelCased) ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2f$camelCase$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"])((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$speakingurl$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"])(title)) : camelCased;
}
class ComponentBuilder {
    /** component builder option object */ constructor(spec){
        this.spec = {
            options: {},
            ...spec || {}
        };
    }
    /** Set Component ID
   * @param id - component ID
   * @returns component builder based on ID provided
   */ id(id) {
        return this.clone({
            id
        });
    }
    /** Get ID
   * @returns ID
   */ getId() {
        return this.spec.id;
    }
    /** Set Component title
   * @param title - component title
   * @returns component builder based on title provided (and ID)
   */ title(title) {
        return this.clone({
            title,
            id: getStructureNodeId(title, this.spec.id)
        });
    }
    /** Get Component title
   * @returns title
   */ getTitle() {
        return this.spec.title;
    }
    /** Set the i18n key and namespace used to populate the localized title.
   * @param i18n - the key and namespaced used to populate the localized title.
   * @returns component builder based on i18n key and ns provided
   */ i18n(i18n) {
        return this.clone({
            i18n
        });
    }
    /** Get i18n key and namespace used to populate the localized title
   * @returns the i18n key and namespace used to populate the localized title
   */ getI18n() {
        return this.spec.i18n;
    }
    /** Set Component child
   * @param child - child component
   * @returns component builder based on child component provided
   */ child(child) {
        return this.clone({
            child
        });
    }
    /** Get Component child
   * @returns child component
   */ getChild() {
        return this.spec.child;
    }
    /** Set component
   * @param component - user built component
   * @returns component builder based on component provided
   */ component(component2) {
        return this.clone({
            component: component2
        });
    }
    /** Get Component
   * @returns component
   */ getComponent() {
        return this.spec.component;
    }
    /** Set Component options
   * @param options - component options
   * @returns component builder based on options provided
   */ options(options) {
        return this.clone({
            options
        });
    }
    /** Get Component options
   * @returns component options
   */ getOptions() {
        return this.spec.options || {};
    }
    /** Set Component menu items
   * @param menuItems - component menu items
   * @returns component builder based on menuItems provided
   */ menuItems(menuItems) {
        return this.clone({
            menuItems
        });
    }
    /** Get Component menu items
   * @returns menu items
   */ getMenuItems() {
        return this.spec.menuItems;
    }
    /** Set Component menu item groups
   * @param menuItemGroups - component menu item groups
   * @returns component builder based on menuItemGroups provided
   */ menuItemGroups(menuItemGroups) {
        return this.clone({
            menuItemGroups
        });
    }
    /** Get Component menu item groups
   * @returns menu item groups
   */ getMenuItemGroups() {
        return this.spec.menuItemGroups;
    }
    canHandleIntent(canHandleIntent) {
        return this.clone({
            canHandleIntent
        });
    }
    /** Serialize component
   * @param options - serialization options
   * @returns component object based on path provided in options
   *
   */ serialize(options = {
        path: []
    }) {
        const { id, title, child, options: componentOptions, component: component2 } = this.spec;
        if (!id) throw new SerializeError("`id` is required for `component` structure item", options.path, options.index).withHelpUrl(HELP_URL.ID_REQUIRED);
        if (!component2) throw new SerializeError("`component` is required for `component` structure item", options.path, options.index).withHelpUrl(HELP_URL.ID_REQUIRED);
        return {
            id: validateId(id, options.path, options.index),
            title,
            type: "component",
            child,
            component: component2,
            canHandleIntent: this.spec.canHandleIntent,
            options: componentOptions || {},
            menuItems: (this.spec.menuItems || []).map((item, i)=>maybeSerializeMenuItem(item, i, options.path)),
            menuItemGroups: (this.spec.menuItemGroups || []).map((item, i)=>maybeSerializeMenuItemGroup(item, i, options.path))
        };
    }
    /** Clone component builder (allows for options overriding)
   * @param withSpec - component builder options
   * @returns cloned builder
   */ clone(withSpec) {
        const builder = new ComponentBuilder();
        return builder.spec = {
            ...this.spec,
            ...withSpec
        }, builder;
    }
}
class DividerBuilder {
    constructor(spec){
        this.spec = {
            id: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2f$uniqueId$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"])("__divider__"),
            type: "divider",
            ...spec
        };
    }
    /** Set the title of the divider
   * @param title - the title of the divider
   * @returns divider builder based on title provided
   */ title(title) {
        return this.clone({
            title
        });
    }
    /** Get the title of the divider
   * @returns the title of the divider
   */ getTitle() {
        return this.spec.title;
    }
    /** Set the i18n key and namespace used to populate the localized title.
   * @param i18n - the key and namespaced used to populate the localized title.
   * @returns divider builder based on i18n key and ns provided
   */ i18n(i18n) {
        return this.clone({
            i18n
        });
    }
    /** Get i18n key and namespace used to populate the localized title
   * @returns the i18n key and namespace used to populate the localized title
   */ getI18n() {
        return this.spec.i18n;
    }
    /** Serialize the divider
   * @returns the serialized divider
   */ serialize() {
        return {
            ...this.spec
        };
    }
    /** Clone divider builder (allows for options overriding)
   * @param withSpec - divider builder options
   * @returns cloned builder
   */ clone(withSpec) {
        const builder = new DividerBuilder();
        return builder.spec = {
            ...this.spec,
            ...withSpec
        }, builder;
    }
}
async function resolveTypeForDocument(getClient, id) {
    return await getClient(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$sanity$2f$lib$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["DEFAULT_STUDIO_CLIENT_OPTIONS"]).fetch("*[sanity::versionOf($publishedId)][0]._type", {
        publishedId: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$sanity$2f$client$2f$dist$2f$_chunks$2d$es$2f$resolveEditInfo$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getPublishedId"])(id)
    }, {
        tag: "structure.resolve-type"
    });
}
class GenericViewBuilder {
    /** Generic view option object */ spec = {};
    /** Set generic view ID
   * @param id - generic view ID
   * @returns generic view builder based on ID provided.
   */ id(id) {
        return this.clone({
            id
        });
    }
    /** Get generic view ID
   * @returns generic view ID
   */ getId() {
        return this.spec.id;
    }
    /** Set generic view title
   * @param title - generic view title
   * @returns generic view builder based on title provided and (if provided) its ID.
   */ title(title) {
        return this.clone({
            title,
            id: this.spec.id || (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2f$kebabCase$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"])(title)
        });
    }
    /** Get generic view title
   * @returns generic view title
   */ getTitle() {
        return this.spec.title;
    }
    /** Set generic view icon
   * @param icon - generic view icon
   * @returns generic view builder based on icon provided.
   */ icon(icon) {
        return this.clone({
            icon
        });
    }
    /** Get generic view icon
   * @returns generic view icon
   */ getIcon() {
        return this.spec.icon;
    }
    /** Serialize generic view
   * @param options - serialization options. See {@link SerializeOptions}
   * @returns generic view object based on path provided in options. See {@link BaseView}
   */ serialize(options = {
        path: []
    }) {
        const { id, title, icon } = this.spec;
        if (!id) throw new SerializeError("`id` is required for view item", options.path, options.index).withHelpUrl(HELP_URL.ID_REQUIRED);
        if (!title) throw new SerializeError("`title` is required for view item", options.path, options.index).withHelpUrl(HELP_URL.TITLE_REQUIRED);
        return {
            id: validateId(id, options.path, options.index),
            title,
            icon
        };
    }
}
function isSerializable(view) {
    return typeof view.serialize == "function";
}
function maybeSerializeView(item, index, path) {
    return isSerializable(item) ? item.serialize({
        path,
        index
    }) : item;
}
const isComponentSpec = (spec)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$sanity$2f$lib$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["isRecord"])(spec) && spec.type === "component";
class ComponentViewBuilder extends GenericViewBuilder {
    /** Partial Component view option object. See {@link ComponentView} */ constructor(componentOrSpec){
        const spec = isComponentSpec(componentOrSpec) ? {
            ...componentOrSpec
        } : {
            options: {}
        };
        super(), this.spec = spec;
        const userComponent = typeof componentOrSpec == "function" ? componentOrSpec : this.spec.component;
        userComponent && (this.spec = this.component(userComponent).spec);
    }
    /** Set view Component
   * @param component - component view component. See {@link UserViewComponent}
   * @returns component view builder based on component view provided. See {@link ComponentViewBuilder}
   */ component(component2) {
        return this.clone({
            component: component2
        });
    }
    /** Get view Component
   * @returns Partial component view. See {@link ComponentView}
   */ getComponent() {
        return this.spec.component;
    }
    /** Set view Component options
   * @param options - component view options
   * @returns component view builder based on options provided. See {@link ComponentViewBuilder}
   */ options(options) {
        return this.clone({
            options
        });
    }
    /** Get view Component options
   * @returns component view options. See {@link ComponentView}
   */ getOptions() {
        return this.spec.options || {};
    }
    /** Serialize view Component
   * @param options - serialization options. See {@link SerializeOptions}
   * @returns component view based on path provided in options. See {@link ComponentView}
   *
   */ serialize(options = {
        path: []
    }) {
        const base = super.serialize(options), component2 = this.spec.component;
        if (typeof component2 != "function") throw new SerializeError("`component` is required and must be a function for `component()` view item", options.path, options.index).withHelpUrl(HELP_URL.COMPONENT_REQUIRED);
        return {
            ...base,
            component: component2,
            options: this.spec.options || {},
            type: "component"
        };
    }
    /** Clone Component view builder (allows for options overriding)
   * @param withSpec - partial for component view option. See {@link ComponentView}
   * @returns component view builder. See {@link ComponentViewBuilder}
   */ clone(withSpec) {
        const builder = new ComponentViewBuilder();
        return builder.spec = {
            ...this.spec,
            ...withSpec
        }, builder;
    }
}
class FormViewBuilder extends GenericViewBuilder {
    /** Document list options. See {@link FormView} */ constructor(spec){
        super(), this.spec = {
            id: "editor",
            title: "Editor",
            ...spec || {}
        };
    }
    /**
   * Serialize Form view builder
   * @param options - Serialize options. See {@link SerializeOptions}
   * @returns form view builder based on path provided in options. See {@link FormView}
   */ serialize(options = {
        path: []
    }) {
        return {
            ...super.serialize(options),
            type: "form"
        };
    }
    /**
   * Clone Form view builder (allows for options overriding)
   * @param withSpec - Partial form view builder options. See {@link FormView}
   * @returns form view builder. See {@link FormViewBuilder}
   */ clone(withSpec) {
        const builder = new FormViewBuilder();
        return builder.spec = {
            ...this.spec,
            ...withSpec
        }, builder;
    }
}
const form = (spec)=>new FormViewBuilder(spec), component = (componentOrSpec)=>new ComponentViewBuilder(componentOrSpec);
var views = /* @__PURE__ */ Object.freeze({
    __proto__: null,
    ComponentViewBuilder,
    FormViewBuilder,
    GenericViewBuilder,
    component,
    form,
    maybeSerializeView
});
const createDocumentChildResolver = ({ resolveDocumentNode, getClient })=>async (itemId, { params, path })=>{
        let type = params.type;
        const parentPath = path.slice(0, path.length - 1), currentSegment = path[path.length - 1];
        if (type || (type = await resolveTypeForDocument(getClient, itemId)), !type) throw new SerializeError("Failed to resolve document, and no type provided in parameters.", parentPath, currentSegment);
        return resolveDocumentNode({
            documentId: itemId,
            schemaType: type
        });
    };
class DocumentBuilder {
    /** Component builder option object See {@link PartialDocumentNode} */ constructor(_context, spec){
        this._context = _context, this.spec = spec || {};
    }
    /** Set Document Builder ID
   * @param id - document builder ID
   * @returns document builder based on ID provided. See {@link DocumentBuilder}
   */ id(id) {
        return this.clone({
            id
        });
    }
    /** Get Document Builder ID
   * @returns document ID. See {@link PartialDocumentNode}
   */ getId() {
        return this.spec.id;
    }
    /** Set Document title
   * @param title - document title
   * @returns document builder based on title provided (and ID). See {@link DocumentBuilder}
   */ title(title) {
        return this.clone({
            title,
            id: getStructureNodeId(title, this.spec.id)
        });
    }
    /** Get Document title
   * @returns document title. See {@link PartialDocumentNode}
   */ getTitle() {
        return this.spec.title;
    }
    /** Set the i18n key and namespace used to populate the localized title.
   * @param i18n - the key and namespaced used to populate the localized title.
   * @returns component builder based on i18n key and ns provided
   */ i18n(i18n) {
        return this.clone({
            i18n
        });
    }
    /** Get i18n key and namespace used to populate the localized title
   * @returns the i18n key and namespace used to populate the localized title
   */ getI18n() {
        return this.spec.i18n;
    }
    /** Set Document child
   * @param child - document child
   * @returns document builder based on child provided. See {@link DocumentBuilder}
   */ child(child) {
        return this.clone({
            child
        });
    }
    /** Get Document child
   * @returns document child. See {@link PartialDocumentNode}
   */ getChild() {
        return this.spec.child;
    }
    /** Set Document ID
   * @param documentId - document ID
   * @returns document builder with document based on ID provided. See {@link DocumentBuilder}
   */ documentId(documentId) {
        const paneId = this.spec.id || documentId;
        return this.clone({
            id: paneId,
            options: {
                ...this.spec.options,
                id: documentId
            }
        });
    }
    /** Get Document ID
   * @returns document ID. See {@link DocumentOptions}
   */ getDocumentId() {
        return this.spec.options?.id;
    }
    /** Set Document Type
   * @param documentType - document type
   * @returns document builder with document based on type provided. See {@link DocumentBuilder}
   */ schemaType(documentType) {
        return this.clone({
            options: {
                ...this.spec.options,
                type: typeof documentType == "string" ? documentType : documentType.name
            }
        });
    }
    /** Get Document Type
   * @returns document type. See {@link DocumentOptions}
   */ getSchemaType() {
        return this.spec.options?.type;
    }
    /** Set Document Template
   * @param templateId - document template ID
   * @param parameters - document template parameters
   * @returns document builder with document based on template provided. See {@link DocumentBuilder}
   */ initialValueTemplate(templateId, parameters) {
        return this.clone({
            options: {
                ...this.spec.options,
                template: templateId,
                templateParameters: parameters
            }
        });
    }
    /** Get Document Template
   * @returns document template. See {@link DocumentOptions}
   */ getInitialValueTemplate() {
        return this.spec.options?.template;
    }
    /** Get Document's initial value Template parameters
   * @returns document template parameters. See {@link DocumentOptions}
   */ getInitialValueTemplateParameters() {
        return this.spec.options?.templateParameters;
    }
    /** Set Document views
   * @param views - document views. See {@link ViewBuilder} and {@link View}
   * @returns document builder with document based on views provided. See {@link DocumentBuilder}
   */ views(views2) {
        return this.clone({
            views: views2
        });
    }
    /** Get Document views
   * @returns document views. See {@link ViewBuilder} and {@link View}
   */ getViews() {
        return this.spec.views || [];
    }
    /** Serialize Document builder
   * @param options - serialization options. See {@link SerializeOptions}
   * @returns document node based on path, index and hint provided in options. See {@link DocumentNode}
   */ serialize({ path = [], index, hint } = {
        path: []
    }) {
        const urlId = path[index || path.length - 1], id = this.spec.id || urlId && `${urlId}` || "", options = {
            id,
            type: void 0,
            template: void 0,
            templateParameters: void 0,
            ...this.spec.options
        };
        if (typeof id != "string" || !id) throw new SerializeError("`id` is required for document nodes", path, index, hint).withHelpUrl(HELP_URL.ID_REQUIRED);
        if (!options || !options.id) throw new SerializeError("document id (`id`) is required for document nodes", path, id, hint).withHelpUrl(HELP_URL.DOCUMENT_ID_REQUIRED);
        if (!options || !options.type) throw new SerializeError("document type (`schemaType`) is required for document nodes", path, id, hint);
        const views2 = (this.spec.views && this.spec.views.length > 0 ? this.spec.views : [
            form()
        ]).map((item, i)=>maybeSerializeView(item, i, path)), viewIds = views2.map((view)=>view.id), dupes = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2f$uniq$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"])(viewIds.filter((viewId, i)=>viewIds.includes(viewId, i + 1)));
        if (dupes.length > 0) throw new SerializeError(`document node has views with duplicate IDs: ${dupes.join(",  ")}`, path, id, hint);
        return {
            ...this.spec,
            child: this.spec.child || createDocumentChildResolver(this._context),
            id: validateId(id, path, index),
            type: "document",
            options: getDocumentOptions(options),
            views: views2
        };
    }
    /** Clone Document builder
   * @param withSpec - partial document node specification used to extend the cloned builder. See {@link PartialDocumentNode}
   * @returns document builder based on context and spec provided. See {@link DocumentBuilder}
   */ clone(withSpec = {}) {
        const builder = new DocumentBuilder(this._context), options = {
            ...this.spec.options,
            ...withSpec.options
        };
        return builder.spec = {
            ...this.spec,
            ...withSpec,
            options
        }, builder;
    }
}
function getDocumentOptions(spec) {
    const opts = {
        id: spec.id || "",
        type: spec.type || "*"
    };
    return spec.template && (opts.template = spec.template), spec.templateParameters && (opts.templateParameters = spec.templateParameters), opts;
}
function documentFromEditor(context, spec) {
    let doc = spec?.type ? // Use user-defined document fragment as base if possible
    context.resolveDocumentNode({
        schemaType: spec.type
    }) : // Fall back to plain old document builder
    new DocumentBuilder(context);
    if (!spec) return doc;
    const { id, type, template, templateParameters } = spec.options;
    return doc = doc.id(spec.id).documentId(id), type && (doc = doc.schemaType(type)), template && (doc = doc.initialValueTemplate(template, templateParameters)), spec.child && (doc = doc.child(spec.child)), doc;
}
function documentFromEditorWithInitialValue({ resolveDocumentNode, templates }, templateId, parameters) {
    const template = templates.find((t)=>t.id === templateId);
    if (!template) throw new Error(`Template with ID "${templateId}" not defined`);
    return resolveDocumentNode({
        schemaType: template.schemaType
    }).initialValueTemplate(templateId, parameters);
}
class InitialValueTemplateItemBuilder {
    /** Initial Value template item option object. See {@link InitialValueTemplateItem} */ constructor(_context, spec){
        this._context = _context, this.spec = spec || {};
    }
    /** Set initial value template item builder ID
   * @param id - initial value template item ID
   * @returns initial value template item based on ID provided. See {@link InitialValueTemplateItemBuilder}
   */ id(id) {
        return this.clone({
            id
        });
    }
    /** Get initial value template item builder ID
   * @returns initial value template item ID. See {@link InitialValueTemplateItem}
   */ getId() {
        return this.spec.id;
    }
    /** Set initial value template item title
   * @param title - initial value template item title
   * @returns initial value template item based on title provided. See {@link InitialValueTemplateItemBuilder}
   */ title(title) {
        return this.clone({
            title
        });
    }
    /** Get initial value template item title
   * @returns initial value template item title. See {@link InitialValueTemplateItem}
   */ getTitle() {
        return this.spec.title;
    }
    /** Set initial value template item description
   * @param description - initial value template item description
   * @returns initial value template item builder based on description provided. See {@link InitialValueTemplateItemBuilder}
   */ description(description) {
        return this.clone({
            description
        });
    }
    /** Get initial value template item description
   * @returns initial value template item description. See {@link InitialValueTemplateItem}
   */ getDescription() {
        return this.spec.description;
    }
    /** Set initial value template ID
   * @param templateId - initial value template item template ID
   * @returns initial value template item based builder on template ID provided. See {@link InitialValueTemplateItemBuilder}
   */ templateId(templateId) {
        const paneId = this.spec.id || templateId;
        return this.clone({
            id: paneId,
            templateId
        });
    }
    /** Get initial value template item template ID
   * @returns initial value template item ID. See {@link InitialValueTemplateItem}
   */ getTemplateId() {
        return this.spec.templateId;
    }
    /** Get initial value template item template parameters
   * @param parameters - initial value template item parameters
   * @returns initial value template item builder based on parameters provided. See {@link InitialValueTemplateItemBuilder}
   */ parameters(parameters) {
        return this.clone({
            parameters
        });
    }
    /** Get initial value template item template parameters
   * @returns initial value template item parameters. See {@link InitialValueTemplateItem}
   */ getParameters() {
        return this.spec.parameters;
    }
    /** Serialize initial value template item
   * @param options - serialization options. See {@link SerializeOptions}
   * @returns initial value template item object based on the path, index and hint provided in options. See {@link InitialValueTemplateItem}
   */ serialize({ path = [], index, hint } = {
        path: []
    }) {
        if (typeof this.spec.id != "string" || !this.spec.id) throw new SerializeError("`id` is required for initial value template item nodes", path, index, hint).withHelpUrl(HELP_URL.ID_REQUIRED);
        if (!this.spec.templateId) throw new SerializeError("template id (`templateId`) is required for initial value template item nodes", path, this.spec.id, hint).withHelpUrl(HELP_URL.ID_REQUIRED);
        const template = this._context.templates.find((t)=>t.id === this.spec.templateId);
        if (!template) throw new SerializeError("template id (`templateId`) is required for initial value template item nodes", path, this.spec.id, hint).withHelpUrl(HELP_URL.ID_REQUIRED);
        return {
            id: this.spec.id,
            templateId: this.spec.id,
            schemaType: template.schemaType,
            type: "initialValueTemplateItem",
            description: this.spec.description || template.description,
            title: this.spec.title || template.title,
            subtitle: this.spec.subtitle,
            icon: this.spec.icon || template.icon,
            initialDocumentId: this.spec.initialDocumentId,
            parameters: this.spec.parameters
        };
    }
    /** Clone generic view builder (allows for options overriding)
   * @param withSpec - initial value template item builder options. See {@link InitialValueTemplateItemBuilder}
   * @returns initial value template item builder based on the context and options provided. See {@link InitialValueTemplateItemBuilder}
   */ clone(withSpec = {}) {
        const builder = new InitialValueTemplateItemBuilder(this._context);
        return builder.spec = {
            ...this.spec,
            ...withSpec
        }, builder;
    }
}
function defaultInitialValueTemplateItems(context) {
    const { schema, getStructureBuilder, templates } = context, typeNames = schema.getTypeNames();
    return templates.filter((tpl)=>!tpl.parameters?.length).sort((a, b)=>typeNames.indexOf(a.schemaType) - typeNames.indexOf(b.schemaType)).map((tpl)=>getStructureBuilder().initialValueTemplateItem(tpl.id));
}
function maybeSerializeInitialValueTemplateItem(item, index, path) {
    return item instanceof InitialValueTemplateItemBuilder ? item.serialize({
        path,
        index
    }) : item;
}
function menuItemsFromInitialValueTemplateItems(context, templateItems) {
    const { schema, templates } = context;
    return templateItems.map((item)=>{
        const template = templates.find((t)=>t.id === item.templateId), title = item.title || template?.title || "Create", params = {};
        template && template.schemaType && (params.type = template.schemaType), item.templateId && (params.template = item.templateId);
        const intentParams = item.parameters ? [
            params,
            item.parameters
        ] : params, schemaType = template && schema.get(template.schemaType), i18n = item.i18n || template?.i18n;
        let builder = new MenuItemBuilder(context).title(title).icon(template && template.icon || schemaType?.icon || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$sanity$2f$icons$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["AddIcon"]).intent({
            type: "create",
            params: intentParams
        });
        return i18n && (builder = builder.i18n(i18n)), builder.serialize();
    });
}
const DEFAULT_INTENT_HANDLER = Symbol("Document type list canHandleIntent"), defaultIntentChecker = (intentName, params, { pane })=>{
    const isEdit = intentName === "edit", isCreate = intentName === "create", typedSpec = pane, paneFilter = typedSpec.options?.filter || "", paneParams = typedSpec.options?.params || {}, typeNames = typedSpec.schemaTypeName ? [
        typedSpec.schemaTypeName
    ] : getTypeNamesFromFilter(paneFilter, paneParams), initialValueTemplates = typedSpec.initialValueTemplates || [];
    return isCreate && params.template ? initialValueTemplates.some((tpl)=>tpl.templateId === params.template) : isEdit && params.id && typeNames.includes(params.type) || isCreate && typeNames.includes(params.type);
};
defaultIntentChecker.identity = DEFAULT_INTENT_HANDLER;
const layoutOptions = [
    "default",
    "card",
    "media",
    "detail",
    "block"
];
function noChildResolver() {}
const shallowIntentChecker = (intentName, params, { pane, index })=>index <= 1 && defaultIntentChecker(intentName, params, {
        pane
    });
class GenericListBuilder {
    /** Check if initial value templates are set */ initialValueTemplatesSpecified = !1;
    /** Generic list option object */ spec = {};
    /** Set generic list ID
   * @param id - generic list ID
   * @returns generic list builder based on ID provided.
   */ id(id) {
        return this.clone({
            id
        });
    }
    /** Get generic list ID
   * @returns generic list ID
   */ getId() {
        return this.spec.id;
    }
    /** Set generic list title
   * @param title - generic list title
   * @returns generic list builder based on title and ID provided.
   */ title(title) {
        return this.clone({
            title,
            id: getStructureNodeId(title, this.spec.id)
        });
    }
    /** Get generic list title
   * @returns generic list title
   */ getTitle() {
        return this.spec.title;
    }
    /** Set the i18n key and namespace used to populate the localized title.
   * @param i18n - the key and namespaced used to populate the localized title.
   * @returns component builder based on i18n key and ns provided
   */ i18n(i18n) {
        return this.clone({
            i18n
        });
    }
    /** Get i18n key and namespace used to populate the localized title
   * @returns the i18n key and namespace used to populate the localized title
   */ getI18n() {
        return this.spec.i18n;
    }
    /** Set generic list layout
   * @param defaultLayout - generic list layout key.
   * @returns generic list builder based on layout provided.
   */ defaultLayout(defaultLayout) {
        return this.clone({
            defaultLayout
        });
    }
    /** Get generic list layout
   * @returns generic list layout
   */ getDefaultLayout() {
        return this.spec.defaultLayout;
    }
    /** Set generic list menu items
   * @param menuItems - generic list menu items. See {@link MenuItem} and {@link MenuItemBuilder}
   * @returns generic list builder based on menu items provided.
   */ menuItems(menuItems) {
        return this.clone({
            menuItems
        });
    }
    /** Get generic list menu items
   * @returns generic list menu items
   */ getMenuItems() {
        return this.spec.menuItems;
    }
    /** Set generic list menu item groups
   * @param menuItemGroups - generic list menu item groups. See {@link MenuItemGroup} and {@link MenuItemGroupBuilder}
   * @returns generic list builder based on menu item groups provided.
   */ menuItemGroups(menuItemGroups) {
        return this.clone({
            menuItemGroups
        });
    }
    /** Get generic list menu item groups
   * @returns generic list menu item groups
   */ getMenuItemGroups() {
        return this.spec.menuItemGroups;
    }
    /** Set generic list child
   * @param child - generic list child. See {@link Child}
   * @returns generic list builder based on child provided (clone).
   */ child(child) {
        return this.clone({
            child
        });
    }
    /** Get generic list child
   * @returns generic list child
   */ getChild() {
        return this.spec.child;
    }
    /** Set generic list can handle intent
   * @param canHandleIntent - generic list intent checker. See {@link IntentChecker}
   * @returns generic list builder based on can handle intent provided.
   */ canHandleIntent(canHandleIntent) {
        return this.clone({
            canHandleIntent
        });
    }
    /** Get generic list can handle intent
   * @returns generic list can handle intent
   */ getCanHandleIntent() {
        return this.spec.canHandleIntent;
    }
    /** Set generic list display options
   * @param enabled - allow / disallow for showing icons
   * @returns generic list builder based on display options (showIcons) provided.
   */ showIcons(enabled = !0) {
        return this.clone({
            displayOptions: {
                ...this.spec.displayOptions,
                showIcons: enabled
            }
        });
    }
    /** Get generic list display options
   * @returns generic list display options (specifically showIcons)
   */ getShowIcons() {
        return this.spec.displayOptions ? this.spec.displayOptions.showIcons : void 0;
    }
    /** Set generic list initial value templates
   * @param templates - generic list initial value templates. See {@link InitialValueTemplateItemBuilder}
   * @returns generic list builder based on templates provided.
   */ initialValueTemplates(templates) {
        return this.initialValueTemplatesSpecified = !0, this.clone({
            initialValueTemplates: Array.isArray(templates) ? templates : [
                templates
            ]
        });
    }
    /** Get generic list initial value templates
   * @returns generic list initial value templates
   */ getInitialValueTemplates() {
        return this.spec.initialValueTemplates;
    }
    /** Serialize generic list
   * @param options - serialization options. See {@link SerializeOptions}
   * @returns generic list object based on path provided in options. See {@link GenericList}
   */ serialize(options = {
        path: []
    }) {
        const id = this.spec.id || "", path = options.path, defaultLayout = this.spec.defaultLayout;
        if (defaultLayout && !layoutOptions.includes(defaultLayout)) throw new SerializeError(`\`layout\` must be one of ${layoutOptions.map((item)=>`"${item}"`).join(", ")}`, path, id || options.index, this.spec.title);
        const initialValueTemplates = (this.spec.initialValueTemplates || []).map((item, i)=>maybeSerializeInitialValueTemplateItem(item, i, path));
        return {
            id: validateId(id, options.path, id || options.index),
            title: this.spec.title,
            i18n: this.spec.i18n,
            type: "genericList",
            defaultLayout,
            child: this.spec.child || noChildResolver,
            canHandleIntent: this.spec.canHandleIntent || shallowIntentChecker,
            displayOptions: this.spec.displayOptions,
            initialValueTemplates,
            menuItems: (this.spec.menuItems || []).map((item, i)=>maybeSerializeMenuItem(item, i, path)),
            menuItemGroups: (this.spec.menuItemGroups || []).map((item, i)=>maybeSerializeMenuItemGroup(item, i, path))
        };
    }
}
const validateFilter = (spec, options)=>{
    const filter = spec.options?.filter.trim() || "";
    if ([
        "*",
        "{"
    ].includes(filter[0])) throw new SerializeError(`\`filter\` cannot start with \`${filter[0]}\` - looks like you are providing a query, not a filter`, options.path, spec.id, spec.title).withHelpUrl(HELP_URL.QUERY_PROVIDED_FOR_FILTER);
    return filter;
}, createDocumentChildResolverForItem = (context)=>(itemId, options)=>{
        const parentItem = options.parent, template = options.params?.template ? context.templates.find((tpl)=>tpl.id === options.params.template) : void 0, type = template ? template.schemaType : parentItem.schemaTypeName || resolveTypeForDocument(context.getClient, itemId);
        return Promise.resolve(type).then((schemaType)=>schemaType ? context.resolveDocumentNode({
                schemaType,
                documentId: itemId
            }) : new DocumentBuilder(context).id("editor").documentId(itemId).schemaType(""));
    };
class DocumentListBuilder extends GenericListBuilder {
    /** Document list options. See {@link PartialDocumentList} */ constructor(_context, spec){
        super(), this._context = _context, this.spec = spec || {}, this.initialValueTemplatesSpecified = !!spec?.initialValueTemplates;
    }
    /** Set API version
   * @param apiVersion - API version
   * @returns document list builder based on the options and API version provided. See {@link DocumentListBuilder}
   */ apiVersion(apiVersion) {
        return this.clone({
            options: {
                ...this.spec.options || {
                    filter: ""
                },
                apiVersion
            }
        });
    }
    /** Get API version
   * @returns API version
   */ getApiVersion() {
        return this.spec.options?.apiVersion;
    }
    /** Set Document list filter
   * @param filter - GROQ-filter used to determine which documents to display. Do not support joins, since they operate on individual documents, and will ignore order-clauses and projections. See {@link https://www.sanity.io/docs/realtime-updates}
   * @returns document list builder based on the options and filter provided. See {@link DocumentListBuilder}
   */ filter(filter) {
        return this.clone({
            options: {
                ...this.spec.options,
                filter
            }
        });
    }
    /** Get Document list filter
   * @returns filter
   */ getFilter() {
        return this.spec.options?.filter;
    }
    /** Set Document list schema type name
   * @param type - schema type name.
   * @returns document list builder based on the schema type name provided. See {@link DocumentListBuilder}
   */ schemaType(type) {
        const schemaTypeName = typeof type == "string" ? type : type.name;
        return this.clone({
            schemaTypeName
        });
    }
    /** Get Document list schema type name
   * @returns schema type name
   */ getSchemaType() {
        return this.spec.schemaTypeName;
    }
    /** Set Document list options' parameters
   * @param params - parameters
   * @returns document list builder based on the options provided. See {@link DocumentListBuilder}
   */ params(params) {
        return this.clone({
            options: {
                ...this.spec.options || {
                    filter: ""
                },
                params
            }
        });
    }
    /** Get Document list options' parameters
   * @returns options
   */ getParams() {
        return this.spec.options?.params;
    }
    /** Set Document list default ordering
   * @param ordering - default sort ordering array. See {@link SortOrderingItem}
   * @returns document list builder based on ordering provided. See {@link DocumentListBuilder}
   */ defaultOrdering(ordering) {
        if (!Array.isArray(ordering)) throw new Error("`defaultOrdering` must be an array of order clauses");
        return this.clone({
            options: {
                ...this.spec.options || {
                    filter: ""
                },
                defaultOrdering: ordering
            }
        });
    }
    /** Get Document list default ordering
   * @returns default ordering. See {@link SortOrderingItem}
   */ getDefaultOrdering() {
        return this.spec.options?.defaultOrdering;
    }
    /** Serialize Document list
   * @param options - serialization options. See {@link SerializeOptions}
   * @returns document list object based on path provided in options. See {@link DocumentList}
   */ serialize(options = {
        path: []
    }) {
        if (typeof this.spec.id != "string" || !this.spec.id) throw new SerializeError("`id` is required for document lists", options.path, options.index, this.spec.title).withHelpUrl(HELP_URL.ID_REQUIRED);
        if (!this.spec.options || !this.spec.options.filter) throw new SerializeError("`filter` is required for document lists", options.path, this.spec.id, this.spec.title).withHelpUrl(HELP_URL.FILTER_REQUIRED);
        return this.spec.options?.filter !== "_type == $type" && this.spec.options.filter && !this.spec.options.apiVersion && console.warn(`No apiVersion specified for document type list with custom filter: \`${this.spec.options.filter}\`. This will be required in the future. See %s for more info.`, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$sanity$2f$lib$2f$_chunks$2d$es$2f$generate$2d$help$2d$url$2e$esm$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["generateHelpUrl"])(HELP_URL.API_VERSION_REQUIRED_FOR_CUSTOM_FILTER)), {
            ...super.serialize(options),
            type: "documentList",
            schemaTypeName: this.spec.schemaTypeName,
            child: this.spec.child || createDocumentChildResolverForItem(this._context),
            options: {
                ...this.spec.options,
                // @todo: make specifying .apiVersion required when using custom (non-simple) filters in v4
                apiVersion: this.spec.options.apiVersion || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$sanity$2f$lib$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["DEFAULT_STUDIO_CLIENT_OPTIONS"].apiVersion,
                filter: validateFilter(this.spec, options)
            }
        };
    }
    /** Clone Document list builder (allows for options overriding)
   * @param withSpec - override document list spec. See {@link PartialDocumentList}
   * @returns document list builder. See {@link DocumentListBuilder}
   */ clone(withSpec) {
        const builder = new DocumentListBuilder(this._context);
        return builder.spec = {
            ...this.spec,
            ...withSpec
        }, this.initialValueTemplatesSpecified || (builder.spec.initialValueTemplates = inferInitialValueTemplates(this._context, builder.spec)), builder.spec.schemaTypeName || (builder.spec.schemaTypeName = inferTypeName(builder.spec)), builder;
    }
    /** Get Document list spec
   * @returns document list spec. See {@link PartialDocumentList}
   */ getSpec() {
        return this.spec;
    }
}
function inferInitialValueTemplates(context, spec) {
    const { document } = context, { schemaTypeName, options } = spec, { filter, params } = options || {
        filter: "",
        params: {}
    }, typeNames = schemaTypeName ? [
        schemaTypeName
    ] : Array.from(new Set(getTypeNamesFromFilter(filter, params)));
    if (typeNames.length !== 0) return typeNames.flatMap((schemaType)=>document.resolveNewDocumentOptions({
            type: "structure",
            schemaType
        })).map((option)=>({
            ...option,
            icon: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$sanity$2f$icons$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["AddIcon"]
        }));
}
function inferTypeName(spec) {
    const { options } = spec, { filter, params } = options || {
        filter: "",
        params: {}
    }, typeNames = getTypeNamesFromFilter(filter, params);
    return typeNames.length === 1 ? typeNames[0] : void 0;
}
function getTypeNamesFromFilter(filter, params = {}) {
    let typeNames = getTypeNamesFromEqualityFilter(filter, params);
    return typeNames.length === 0 && (typeNames = getTypeNamesFromInTypesFilter(filter, params)), typeNames;
}
function getTypeNamesFromEqualityFilter(filter, params = {}) {
    const pattern = /\b_type\s*==\s*(['"].*?['"]|\$.*?(?:\s|$))|\B(['"].*?['"]|\$.*?(?:\s|$))\s*==\s*_type/g, matches = [];
    let match;
    for(; (match = pattern.exec(filter)) !== null;)matches.push(match[1] || match[2]);
    return matches.map((candidate)=>((candidate[0] === "$" ? params[candidate.slice(1)] : candidate) || "").trim().replace(/^["']|["']$/g, "")).filter(Boolean);
}
function getTypeNamesFromInTypesFilter(filter, params = {}) {
    const pattern = /\b_type\s+in\s+\[(.*?)\]/, matches = filter.match(pattern);
    return matches ? matches[1].split(/,\s*/).map((match)=>match.trim().replace(/^["']+|["']+$/g, "")).map((item)=>item[0] === "$" ? params[item.slice(1)] : item).filter(Boolean) : [];
}
const getArgType = (thing)=>thing instanceof ListBuilder ? "ListBuilder" : isPromise(thing) ? "Promise" : Array.isArray(thing) ? "array" : typeof thing, isListItem = (item)=>item.type === "listItem", defaultCanHandleIntent = (intentName, params, context)=>(context.pane.items || []).filter(isDocumentListItem).some((item)=>item.schemaType.name === params.type && item._id === params.id) || shallowIntentChecker(intentName, params, context), resolveChildForItem = (itemId, options)=>{
    const target = (options.parent.items.filter(isListItem).find((item)=>item.id === itemId) || {
        child: void 0
    }).child;
    return !target || typeof target != "function" ? target : typeof target == "function" ? target(itemId, options) : target;
};
function maybeSerializeListItem(item, index, path) {
    if (item instanceof ListItemBuilder) return item.serialize({
        path,
        index
    });
    if (item instanceof DividerBuilder) return item.serialize();
    const listItem = item;
    if (listItem && listItem.type === "divider") return item;
    if (!listItem || listItem.type !== "listItem") {
        const gotWhat = listItem && listItem.type || getArgType(listItem), helpText = gotWhat === "array" ? " - did you forget to spread (...moreItems)?" : "";
        throw new SerializeError(`List items must be of type "listItem", got "${gotWhat}"${helpText}`, path, index).withHelpUrl(HELP_URL.INVALID_LIST_ITEM);
    }
    return item;
}
function isPromise(thing) {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$sanity$2f$lib$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["isRecord"])(thing) && typeof thing.then == "function";
}
class ListBuilder extends GenericListBuilder {
    /** buildable list option object. See {@link BuildableList} */ constructor(_context, spec){
        super(), this._context = _context, this.spec = spec || {}, this.initialValueTemplatesSpecified = !!(spec && spec.initialValueTemplates);
    }
    /**
   * Set list builder based on items provided
   * @param items - list items. See {@link ListItemBuilder}, {@link ListItem} and {@link Divider}
   * @returns list builder based on items provided. See {@link ListBuilder}
   */ items(items) {
        return this.clone({
            items
        });
    }
    /** Get list builder items
   * @returns list items. See {@link BuildableList}
   */ getItems() {
        return this.spec.items;
    }
    /** Serialize list builder
   * @param options - serialization options. See {@link SerializeOptions}
   * @returns list based on path in options. See {@link List}
   */ serialize(options = {
        path: []
    }) {
        const id = this.spec.id;
        if (typeof id != "string" || !id) throw new SerializeError("`id` is required for lists", options.path, options.index).withHelpUrl(HELP_URL.ID_REQUIRED);
        const items = typeof this.spec.items > "u" ? [] : this.spec.items;
        if (!Array.isArray(items)) throw new SerializeError("`items` must be an array of items", options.path, options.index).withHelpUrl(HELP_URL.LIST_ITEMS_MUST_BE_ARRAY);
        const path = (options.path || []).concat(id), serializedItems = items.map((item, index)=>maybeSerializeListItem(item, index, path)), dupes = serializedItems.filter((val, i)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2f$find$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"])(serializedItems, {
                id: val.id
            }, i + 1));
        if (dupes.length > 0) {
            const dupeIds = dupes.map((item)=>item.id).slice(0, 5), dupeDesc = dupes.length > 5 ? `${dupeIds.join(", ")}...` : dupeIds.join(", ");
            throw new SerializeError(`List items with same ID found (${dupeDesc})`, options.path, options.index).withHelpUrl(HELP_URL.LIST_ITEM_IDS_MUST_BE_UNIQUE);
        }
        return {
            ...super.serialize(options),
            type: "list",
            canHandleIntent: this.spec.canHandleIntent || defaultCanHandleIntent,
            child: this.spec.child || resolveChildForItem,
            items: serializedItems
        };
    }
    /**
   * Clone list builder and return new list builder based on context and spec provided
   * @param withSpec - list options. See {@link BuildableList}
   * @returns new list builder based on context and spec provided. See {@link ListBuilder}
   */ clone(withSpec) {
        const builder = new ListBuilder(this._context);
        return builder.spec = {
            ...this.spec,
            ...withSpec
        }, builder;
    }
}
class ListItemBuilder {
    /** List item option object. See {@link PartialListItem} */ constructor(_context, spec){
        this._context = _context, this.spec = spec || {};
    }
    /**
   * Set list item ID
   * @returns list item builder based on ID provided. See {@link ListItemBuilder}
   */ id(id) {
        return this.clone({
            id
        });
    }
    /**
   * Get list item ID
   * @returns list item ID. See {@link PartialListItem}
   */ getId() {
        return this.spec.id;
    }
    /**
   * Set list item title
   * @returns list item builder based on title provided. See {@link ListItemBuilder}
   */ title(title) {
        return this.clone({
            title,
            id: getStructureNodeId(title, this.spec.id)
        });
    }
    /**
   * Get list item title
   * @returns list item title. See {@link PartialListItem}
   */ getTitle() {
        return this.spec.title;
    }
    /** Set the i18n key and namespace used to populate the localized title.
   * @param i18n - the key and namespaced used to populate the localized title.
   * @returns component builder based on i18n key and ns provided
   */ i18n(i18n) {
        return this.clone({
            i18n
        });
    }
    /** Get i18n key and namespace used to populate the localized title
   * @returns the i18n key and namespace used to populate the localized title
   */ getI18n() {
        return this.spec.i18n;
    }
    /**
   * Set list item icon
   * @returns list item builder based on icon provided. See {@link ListItemBuilder}
   */ icon(icon) {
        return this.clone({
            icon
        });
    }
    /**
   * Set if list item should show icon
   * @returns list item builder based on showIcon provided. See {@link ListItemBuilder}
   */ showIcon(enabled = !0) {
        return this.clone({
            displayOptions: {
                ...this.spec.displayOptions,
                showIcon: enabled
            }
        });
    }
    /**
   * Check if list item should show icon
   * @returns true if it should show the icon, false if not, undefined if not set
   */ getShowIcon() {
        return this.spec.displayOptions ? this.spec.displayOptions.showIcon : void 0;
    }
    /**
   *Get list item icon
   * @returns list item icon. See {@link PartialListItem}
   */ getIcon() {
        return this.spec.icon;
    }
    /**
   * Set list item child
   * @param child - list item child. See {@link UnserializedListItemChild}
   * @returns list item builder based on child provided. See {@link ListItemBuilder}
   */ child(child) {
        return this.clone({
            child
        });
    }
    /**
   * Get list item child
   * @returns list item child. See {@link PartialListItem}
   */ getChild() {
        return this.spec.child;
    }
    /**
   * Set list item schema type
   * @param schemaType - list item schema type. See {@link SchemaType}
   * @returns list item builder based on schema type provided. See {@link ListItemBuilder}
   */ schemaType(schemaType) {
        return this.clone({
            schemaType
        });
    }
    /**
   * Get list item schema type
   * @returns list item schema type. See {@link PartialListItem}
   */ getSchemaType() {
        const schemaType = this.spec.schemaType;
        return typeof schemaType == "string" ? this._context.schema.get(schemaType) : this.spec.schemaType;
    }
    /** Serialize list item builder
   * @param options - serialization options. See {@link ListItemSerializeOptions}
   * @returns list item node based on path provided in options. See {@link ListItem}
   */ serialize(options = {
        path: []
    }) {
        const { id, title, child } = this.spec;
        if (typeof id != "string" || !id) throw new SerializeError("`id` is required for list items", options.path, options.index).withHelpUrl(HELP_URL.ID_REQUIRED);
        if (!options.titleIsOptional && (typeof title != "string" || !title)) throw new SerializeError("`title` is required for list items", options.path, id).withHelpUrl(HELP_URL.TITLE_REQUIRED);
        let schemaType = this.spec.schemaType;
        if (typeof schemaType == "string") {
            const type = this._context.schema.get(schemaType);
            if (!type) throw new SerializeError(`Could not find type "${schemaType}" in schema`, options.path, id).withHelpUrl(HELP_URL.SCHEMA_TYPE_NOT_FOUND);
            schemaType = type;
        }
        const serializeOptions = {
            path: options.path.concat(id),
            hint: "child"
        };
        let listChild = child instanceof ComponentBuilder || child instanceof DocumentListBuilder || child instanceof DocumentBuilder || child instanceof ListBuilder ? child.serialize(serializeOptions) : child;
        if (typeof listChild == "function") {
            const originalChild = listChild;
            listChild = (itemId, childOptions)=>originalChild(itemId, {
                    ...childOptions,
                    serializeOptions
                });
        }
        return {
            ...this.spec,
            id: validateId(id, options.path, options.index),
            schemaType,
            child: listChild,
            title,
            type: "listItem"
        };
    }
    /** Clone list item builder
   * @param withSpec - partial list item options. See {@link PartialListItem}
   * @returns list item builder based on context and spec provided. See {@link ListItemBuilder}
   */ clone(withSpec) {
        const builder = new ListItemBuilder(this._context);
        return builder.spec = {
            ...this.spec,
            ...withSpec
        }, builder;
    }
}
const createDefaultChildResolver = (context, spec)=>(documentId)=>{
        const schemaType = spec.schemaType && (typeof spec.schemaType == "string" ? spec.schemaType : spec.schemaType.name);
        return schemaType ? context.resolveDocumentNode({
            schemaType,
            documentId
        }) : new DocumentBuilder(context).id("documentEditor").documentId(documentId);
    };
class DocumentListItemBuilder extends ListItemBuilder {
    /** Document list options. See {@link PartialDocumentListItem} */ constructor(_context, spec){
        super(_context, spec), this._context = _context, this.spec = spec || {};
    }
    /**
   * Serialize document list item
   * @param options - serialization options. See {@link SerializeOptions}
   * @returns document list item object based on path provided in options. See {@link DocumentListItem}
   */ serialize(options = {
        path: []
    }) {
        const spec = super.serialize({
            ...options,
            titleIsOptional: !0
        });
        if (!spec.schemaType) throw new SerializeError("`schemaType` is required for document list items", options.path, options.index).withHelpUrl(HELP_URL.SCHEMA_TYPE_REQUIRED);
        const child = spec.child || createDefaultChildResolver(this._context, spec);
        return {
            ...spec,
            child,
            schemaType: spec.schemaType,
            _id: spec.id
        };
    }
    /** Clone Document list item builder (allows for options overriding)
   * @param withSpec - Document list item builder options. See {@link PartialDocumentListItem}
   * @returns document list item builder. See {@link DocumentListItemBuilder}
   */ clone(withSpec) {
        const builder = new DocumentListItemBuilder(this._context);
        return builder.spec = {
            ...this.spec,
            ...withSpec
        }, builder;
    }
}
function isDocumentListItem(item) {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$sanity$2f$lib$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["isRecord"])(item) && typeof item.schemaType < "u" && typeof item._id == "string";
}
class DocumentTypeListBuilder extends DocumentListBuilder {
    /** Document list options. See {@link PartialDocumentList} */ constructor(_context, spec){
        super(_context), this._context = _context, this.spec = spec || {};
    }
    /**
   * Set Document type list child
   * @param child - Child component. See {@link Child}
   * @returns document type list builder based on child component provided without default intent handler. See {@link DocumentTypeListBuilder}
   */ child(child) {
        return this.cloneWithoutDefaultIntentHandler({
            child
        });
    }
    /** Clone Document type list builder (allows for options overriding)
   * @param withSpec - Document type list builder options. See {@link PartialDocumentList}
   * @returns document type list builder. See {@link DocumentTypeListBuilder}
   */ clone(withSpec) {
        const parent = super.clone(withSpec), builder = new DocumentTypeListBuilder(this._context);
        return builder.spec = {
            ...this.spec,
            ...parent.getSpec(),
            ...withSpec
        }, builder;
    }
    /** Clone Document type list builder (allows for options overriding) and remove default intent handler
   * @param withSpec - Document type list builder options. See {@link PartialDocumentList}
   * @returns document type list builder without default intent handler. See {@link DocumentTypeListBuilder}
   */ cloneWithoutDefaultIntentHandler(withSpec) {
        const parent = super.clone(withSpec), builder = new DocumentTypeListBuilder(this._context), canHandleIntent = this.spec.canHandleIntent, override = canHandleIntent && canHandleIntent.identity === DEFAULT_INTENT_HANDLER ? {
            canHandleIntent: void 0
        } : {};
        return builder.spec = {
            ...parent.getSpec(),
            ...this.spec,
            ...withSpec,
            ...override
        }, builder;
    }
}
const BUNDLED_DOC_TYPES = [
    "sanity.imageAsset",
    "sanity.fileAsset"
];
function isBundledDocType(typeName) {
    return BUNDLED_DOC_TYPES.includes(typeName);
}
function isDocumentType(schemaType) {
    return schemaType.type?.name === "document";
}
function isList(collection) {
    return collection.type === "list";
}
function getDocumentTypes({ schema }) {
    return schema.getTypeNames().filter((n)=>{
        const schemaType = schema.get(n);
        return schemaType && isDocumentType(schemaType);
    }).filter((n)=>!isBundledDocType(n));
}
function getDocumentTypeListItems(context) {
    return getDocumentTypes(context).map((typeName)=>getDocumentTypeListItem(context, typeName));
}
function getDocumentTypeListItem(context, typeName) {
    const { schema } = context, type = schema.get(typeName);
    if (!type) throw new Error(`Schema type with name "${typeName}" not found`);
    const title = type.title || (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2f$startCase$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"])(typeName);
    return new ListItemBuilder(context).id(typeName).title(title).schemaType(type).child((id, childContext)=>{
        const parent = childContext.parent, parentItem = isList(parent) ? parent.items.find((item)=>item.id === id) : null;
        let list = getDocumentTypeList(context, typeName);
        return parentItem && parentItem.title && (list = list.title(parentItem.title)), list;
    });
}
function getDocumentTypeList(context, typeNameOrSpec) {
    const { schema, resolveDocumentNode } = context, schemaType = typeof typeNameOrSpec == "string" ? typeNameOrSpec : typeNameOrSpec.schemaType, typeName = typeof schemaType == "string" ? schemaType : schemaType.name, spec = typeof typeNameOrSpec == "string" ? {} : typeNameOrSpec, type = schema.get(typeName);
    if (!type) throw new Error(`Schema type with name "${typeName}" not found`);
    const title = type.title || (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2f$startCase$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"])(typeName);
    return new DocumentTypeListBuilder(context).id(spec.id || typeName).title(spec.title || title).filter("_type == $type").params({
        type: typeName
    }).schemaType(type).defaultOrdering(DEFAULT_SELECTED_ORDERING_OPTION.by).menuItemGroups(spec.menuItemGroups || [
        {
            id: "sorting",
            title: "Sort",
            i18n: {
                title: {
                    key: "menu-item-groups.actions-group",
                    ns: structureLocaleNamespace
                }
            }
        },
        {
            id: "layout",
            title: "Layout",
            i18n: {
                title: {
                    key: "menu-item-groups.layout-group",
                    ns: structureLocaleNamespace
                }
            }
        },
        {
            id: "actions",
            title: "Actions",
            i18n: {
                title: {
                    key: "menu-item-groups.sorting-group",
                    ns: structureLocaleNamespace
                }
            }
        }
    ]).child(spec.child || ((documentId)=>resolveDocumentNode({
            schemaType: typeName,
            documentId
        }))).canHandleIntent(spec.canHandleIntent || defaultIntentChecker).menuItems(spec.menuItems || [
        // Create new (from action button) will be added in serialization step of GenericList
        // Sort by <Y>
        ...getOrderingMenuItemsForSchemaType(context, type),
        // Display as <Z>
        new MenuItemBuilder(context).group("layout").i18n({
            title: {
                key: "menu-items.layout.compact-view",
                ns: structureLocaleNamespace
            }
        }).title("Compact view").icon(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$sanity$2f$icons$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["StackCompactIcon"]).action("setLayout").params({
            layout: "default"
        }),
        new MenuItemBuilder(context).group("layout").i18n({
            title: {
                key: "menu-items.layout.detailed-view",
                ns: structureLocaleNamespace
            }
        }).title("Detailed view").icon(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$sanity$2f$icons$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["StackIcon"]).action("setLayout").params({
            layout: "detail"
        })
    ]);
}
function hasIcon(schemaType) {
    return !schemaType || typeof schemaType == "string" ? !1 : !!schemaType.icon;
}
function getDefaultStructure(context) {
    const items = getDocumentTypeListItems(context);
    return new ListBuilder(context).id("__root__").title("Content").i18n({
        title: {
            key: "default-definition.content-title",
            ns: structureLocaleNamespace
        }
    }).items(items).showIcons(items.some((item)=>hasIcon(item.getSchemaType())));
}
function createStructureBuilder({ defaultDocumentNode, source, perspectiveStack }) {
    const configContext = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$sanity$2f$lib$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["getConfigContextFromSource"])(source), context = {
        ...source,
        getStructureBuilder: ()=>structureBuilder,
        resolveDocumentNode: (options)=>{
            let builder = defaultDocumentNode?.(structureBuilder, {
                ...options,
                ...configContext
            }) || new DocumentBuilder(context);
            return builder.getId() || (builder = builder.id("documentEditor")), options.documentId && (builder = builder.documentId((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$sanity$2f$client$2f$dist$2f$_chunks$2d$es$2f$resolveEditInfo$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getPublishedId"])(options.documentId))), builder.schemaType(options.schemaType);
        },
        perspectiveStack
    }, structureBuilder = {
        defaults: ()=>getDefaultStructure(context),
        documentTypeList: (...args)=>getDocumentTypeList(context, ...args),
        documentTypeListItem: (...args)=>getDocumentTypeListItem(context, ...args),
        documentTypeListItems: (...args)=>getDocumentTypeListItems(context, ...args),
        document: (...args)=>new DocumentBuilder(context, ...args),
        documentWithInitialValueTemplate: (...args)=>documentFromEditorWithInitialValue(context, ...args),
        defaultDocument: context.resolveDocumentNode,
        list: (...args)=>new ListBuilder(context, ...args),
        listItem: (...args)=>new ListItemBuilder(context, ...args),
        menuItem: (...args)=>new MenuItemBuilder(context, ...args),
        menuItemGroup: (...args)=>new MenuItemGroupBuilder(context, ...args),
        menuItemsFromInitialValueTemplateItems: (...args)=>menuItemsFromInitialValueTemplateItems(context, ...args),
        documentList: (...args)=>new DocumentListBuilder(context, ...args),
        documentListItem: (...args)=>new DocumentListItemBuilder(context, ...args),
        orderingMenuItem: (...args)=>getOrderingMenuItem(context, ...args),
        orderingMenuItemsForType: (...args)=>getOrderingMenuItemsForSchemaType(context, ...args),
        editor: (...args)=>documentFromEditor(context, ...args),
        defaultInitialValueTemplateItems: (...args)=>defaultInitialValueTemplateItems(context, ...args),
        initialValueTemplateItem: (templateId, parameters)=>new InitialValueTemplateItemBuilder(context, {
                id: templateId,
                parameters,
                templateId
            }),
        component: (spec)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2d$is$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isValidElementType"])(spec) ? new ComponentBuilder().component(spec) : new ComponentBuilder(spec),
        divider: (spec)=>new DividerBuilder(spec),
        view: views,
        context
    };
    return structureBuilder;
}
function StructureToolProvider({ defaultDocumentNode, structure: resolveStructure, children }) {
    const [layoutCollapsed, setLayoutCollapsed] = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useState"])(!1), source = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$sanity$2f$lib$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["useSource"])(), configContext = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$sanity$2f$lib$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["useConfigContextFromSource"])(source), documentStore = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$sanity$2f$lib$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["useDocumentStore"])(), { perspectiveStack } = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$sanity$2f$lib$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["usePerspective"])(), S = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useMemo"])(()=>createStructureBuilder({
            defaultDocumentNode,
            source,
            perspectiveStack
        }), [
        defaultDocumentNode,
        source,
        perspectiveStack
    ]), rootPaneNode = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useMemo"])(()=>resolveStructure ? resolveStructure(S, {
            ...configContext,
            documentStore,
            perspectiveStack
        }) : S.defaults(), [
        resolveStructure,
        S,
        configContext,
        documentStore,
        perspectiveStack
    ]), features = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useMemo"])(()=>({
            backButton: layoutCollapsed,
            resizablePanes: !layoutCollapsed,
            reviewChanges: !layoutCollapsed,
            splitPanes: !layoutCollapsed,
            splitViews: !layoutCollapsed
        }), [
        layoutCollapsed
    ]), structureTool = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useMemo"])(()=>({
            features,
            layoutCollapsed,
            setLayoutCollapsed,
            rootPaneNode,
            structureContext: S.context
        }), [
        features,
        layoutCollapsed,
        rootPaneNode,
        S.context
    ]);
    return /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsx"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$sanity$2f$lib$2f$_singletons$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["StructureToolContext"].Provider, {
        value: structureTool,
        children
    });
}
;
 //# sourceMappingURL=StructureToolProvider.mjs.map
}}),

};

//# sourceMappingURL=node_modules_sanity_lib__chunks-es_9c0b8236._.js.map