module.exports = {

"[project]/node_modules/@portabletext/toolkit/dist/index.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "LIST_NEST_MODE_DIRECT": (()=>LIST_NEST_MODE_DIRECT),
    "LIST_NEST_MODE_HTML": (()=>LIST_NEST_MODE_HTML),
    "buildMarksTree": (()=>buildMarksTree),
    "isPortableTextBlock": (()=>isPortableTextBlock),
    "isPortableTextListItemBlock": (()=>isPortableTextListItemBlock),
    "isPortableTextSpan": (()=>isPortableTextSpan),
    "isPortableTextToolkitList": (()=>isPortableTextToolkitList),
    "isPortableTextToolkitSpan": (()=>isPortableTextToolkitSpan),
    "isPortableTextToolkitTextNode": (()=>isPortableTextToolkitTextNode),
    "nestLists": (()=>nestLists),
    "sortMarksByOccurences": (()=>sortMarksByOccurences),
    "spanToPlainText": (()=>spanToPlainText),
    "toPlainText": (()=>toPlainText)
});
function isPortableTextSpan(node) {
    return node._type === "span" && "text" in node && typeof node.text == "string" && (typeof node.marks > "u" || Array.isArray(node.marks) && node.marks.every((mark)=>typeof mark == "string"));
}
function isPortableTextBlock(node) {
    return(// A block doesn't _have_ to be named 'block' - to differentiate between
    // allowed child types and marks, one might name them differently
    typeof node._type == "string" && // Toolkit-types like nested spans are @-prefixed
    node._type[0] !== "@" && // `markDefs` isn't _required_ per say, but if it's there, it needs to be an array
    (!("markDefs" in node) || !node.markDefs || Array.isArray(node.markDefs) && // Every mark definition needs to have an `_key` to be mappable in child spans
    node.markDefs.every((def)=>typeof def._key == "string")) && // `children` is required and needs to be an array
    "children" in node && Array.isArray(node.children) && // All children are objects with `_type` (usually spans, but can contain other stuff)
    node.children.every((child)=>typeof child == "object" && "_type" in child));
}
function isPortableTextListItemBlock(block) {
    return isPortableTextBlock(block) && "listItem" in block && typeof block.listItem == "string" && (typeof block.level > "u" || typeof block.level == "number");
}
function isPortableTextToolkitList(block) {
    return block._type === "@list";
}
function isPortableTextToolkitSpan(span) {
    return span._type === "@span";
}
function isPortableTextToolkitTextNode(node) {
    return node._type === "@text";
}
const knownDecorators = [
    "strong",
    "em",
    "code",
    "underline",
    "strike-through"
];
function sortMarksByOccurences(span, index, blockChildren) {
    if (!isPortableTextSpan(span) || !span.marks) return [];
    if (!span.marks.length) return [];
    const marks = span.marks.slice(), occurences = {};
    return marks.forEach((mark)=>{
        occurences[mark] = 1;
        for(let siblingIndex = index + 1; siblingIndex < blockChildren.length; siblingIndex++){
            const sibling = blockChildren[siblingIndex];
            if (sibling && isPortableTextSpan(sibling) && Array.isArray(sibling.marks) && sibling.marks.indexOf(mark) !== -1) occurences[mark]++;
            else break;
        }
    }), marks.sort((markA, markB)=>sortMarks(occurences, markA, markB));
}
function sortMarks(occurences, markA, markB) {
    const aOccurences = occurences[markA], bOccurences = occurences[markB];
    if (aOccurences !== bOccurences) return bOccurences - aOccurences;
    const aKnownPos = knownDecorators.indexOf(markA), bKnownPos = knownDecorators.indexOf(markB);
    return aKnownPos !== bKnownPos ? aKnownPos - bKnownPos : markA.localeCompare(markB);
}
function buildMarksTree(block) {
    var _a;
    const { children } = block, markDefs = block.markDefs ?? [];
    if (!children || !children.length) return [];
    const sortedMarks = children.map(sortMarksByOccurences), rootNode = {
        _type: "@span",
        children: [],
        markType: "<unknown>"
    };
    let nodeStack = [
        rootNode
    ];
    for(let i = 0; i < children.length; i++){
        const span = children[i];
        if (!span) continue;
        const marksNeeded = sortedMarks[i] || [];
        let pos = 1;
        if (nodeStack.length > 1) for(pos; pos < nodeStack.length; pos++){
            const mark = ((_a = nodeStack[pos]) == null ? void 0 : _a.markKey) || "", index = marksNeeded.indexOf(mark);
            if (index === -1) break;
            marksNeeded.splice(index, 1);
        }
        nodeStack = nodeStack.slice(0, pos);
        let currentNode = nodeStack[nodeStack.length - 1];
        if (currentNode) {
            for (const markKey of marksNeeded){
                const markDef = markDefs == null ? void 0 : markDefs.find((def)=>def._key === markKey), markType = markDef ? markDef._type : markKey, node = {
                    _type: "@span",
                    _key: span._key,
                    children: [],
                    markDef,
                    markType,
                    markKey
                };
                currentNode.children.push(node), nodeStack.push(node), currentNode = node;
            }
            if (isPortableTextSpan(span)) {
                const lines = span.text.split(`
`);
                for(let line = lines.length; line-- > 1;)lines.splice(line, 0, `
`);
                currentNode.children = currentNode.children.concat(lines.map((text)=>({
                        _type: "@text",
                        text
                    })));
            } else currentNode.children = currentNode.children.concat(span);
        }
    }
    return rootNode.children;
}
function nestLists(blocks, mode) {
    const tree = [];
    let currentList;
    for(let i = 0; i < blocks.length; i++){
        const block = blocks[i];
        if (block) {
            if (!isPortableTextListItemBlock(block)) {
                tree.push(block), currentList = void 0;
                continue;
            }
            if (!currentList) {
                currentList = listFromBlock(block, i, mode), tree.push(currentList);
                continue;
            }
            if (blockMatchesList(block, currentList)) {
                currentList.children.push(block);
                continue;
            }
            if ((block.level || 1) > currentList.level) {
                const newList = listFromBlock(block, i, mode);
                if (mode === "html") {
                    const lastListItem = currentList.children[currentList.children.length - 1], newLastChild = {
                        ...lastListItem,
                        children: [
                            ...lastListItem.children,
                            newList
                        ]
                    };
                    currentList.children[currentList.children.length - 1] = newLastChild;
                } else currentList.children.push(newList);
                currentList = newList;
                continue;
            }
            if ((block.level || 1) < currentList.level) {
                const matchingBranch = tree[tree.length - 1], match = matchingBranch && findListMatching(matchingBranch, block);
                if (match) {
                    currentList = match, currentList.children.push(block);
                    continue;
                }
                currentList = listFromBlock(block, i, mode), tree.push(currentList);
                continue;
            }
            if (block.listItem !== currentList.listItem) {
                const matchingBranch = tree[tree.length - 1], match = matchingBranch && findListMatching(matchingBranch, {
                    level: block.level || 1
                });
                if (match && match.listItem === block.listItem) {
                    currentList = match, currentList.children.push(block);
                    continue;
                } else {
                    currentList = listFromBlock(block, i, mode), tree.push(currentList);
                    continue;
                }
            }
            console.warn("Unknown state encountered for block", block), tree.push(block);
        }
    }
    return tree;
}
function blockMatchesList(block, list) {
    return (block.level || 1) === list.level && block.listItem === list.listItem;
}
function listFromBlock(block, index, mode) {
    return {
        _type: "@list",
        _key: `${block._key || `${index}`}-parent`,
        mode,
        level: block.level || 1,
        listItem: block.listItem,
        children: [
            block
        ]
    };
}
function findListMatching(rootNode, matching) {
    const level = matching.level || 1, style = matching.listItem || "normal", filterOnType = typeof matching.listItem == "string";
    if (isPortableTextToolkitList(rootNode) && (rootNode.level || 1) === level && filterOnType && (rootNode.listItem || "normal") === style) return rootNode;
    if (!("children" in rootNode)) return;
    const node = rootNode.children[rootNode.children.length - 1];
    return node && !isPortableTextSpan(node) ? findListMatching(node, matching) : void 0;
}
function spanToPlainText(span) {
    let text = "";
    return span.children.forEach((current)=>{
        isPortableTextToolkitTextNode(current) ? text += current.text : isPortableTextToolkitSpan(current) && (text += spanToPlainText(current));
    }), text;
}
const leadingSpace = /^\s/, trailingSpace = /\s$/;
function toPlainText(block) {
    const blocks = Array.isArray(block) ? block : [
        block
    ];
    let text = "";
    return blocks.forEach((current, index)=>{
        if (!isPortableTextBlock(current)) return;
        let pad = !1;
        current.children.forEach((span)=>{
            isPortableTextSpan(span) ? (text += pad && text && !trailingSpace.test(text) && !leadingSpace.test(span.text) ? " " : "", text += span.text, pad = !1) : pad = !0;
        }), index !== blocks.length - 1 && (text += `

`);
    }), text;
}
const LIST_NEST_MODE_HTML = "html", LIST_NEST_MODE_DIRECT = "direct";
;
 //# sourceMappingURL=index.js.map
}}),
"[project]/node_modules/@portabletext/react/dist/index.js [app-ssr] (ecmascript) <locals>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "PortableText": (()=>PortableText),
    "defaultComponents": (()=>defaultComponents),
    "mergeComponents": (()=>mergeComponents)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react-jsx-runtime.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$toolkit$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@portabletext/toolkit/dist/index.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react.js [app-ssr] (ecmascript)");
;
;
;
;
const defaultLists = {
    number: ({ children })=>/* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsx"])("ol", {
            children
        }),
    bullet: ({ children })=>/* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsx"])("ul", {
            children
        })
}, DefaultListItem = ({ children })=>/* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsx"])("li", {
        children
    }), link = ({ children, value })=>/* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsx"])("a", {
        href: value == null ? void 0 : value.href,
        children
    }), underlineStyle = {
    textDecoration: "underline"
}, defaultMarks = {
    em: ({ children })=>/* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsx"])("em", {
            children
        }),
    strong: ({ children })=>/* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsx"])("strong", {
            children
        }),
    code: ({ children })=>/* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsx"])("code", {
            children
        }),
    underline: ({ children })=>/* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsx"])("span", {
            style: underlineStyle,
            children
        }),
    "strike-through": ({ children })=>/* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsx"])("del", {
            children
        }),
    link
}, getTemplate = (type, prop)=>`[@portabletext/react] Unknown ${type}, specify a component for it in the \`components.${prop}\` prop`, unknownTypeWarning = (typeName)=>getTemplate(`block type "${typeName}"`, "types"), unknownMarkWarning = (markType)=>getTemplate(`mark type "${markType}"`, "marks"), unknownBlockStyleWarning = (blockStyle)=>getTemplate(`block style "${blockStyle}"`, "block"), unknownListStyleWarning = (listStyle)=>getTemplate(`list style "${listStyle}"`, "list"), unknownListItemStyleWarning = (listStyle)=>getTemplate(`list item style "${listStyle}"`, "listItem");
function printWarning(message) {
    console.warn(message);
}
const hidden = {
    display: "none"
}, DefaultUnknownType = ({ value, isInline })=>{
    const warning = unknownTypeWarning(value._type);
    return isInline ? /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsx"])("span", {
        style: hidden,
        children: warning
    }) : /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsx"])("div", {
        style: hidden,
        children: warning
    });
}, DefaultUnknownMark = ({ markType, children })=>/* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsx"])("span", {
        className: `unknown__pt__mark__${markType}`,
        children
    }), DefaultUnknownBlockStyle = ({ children })=>/* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsx"])("p", {
        children
    }), DefaultUnknownList = ({ children })=>/* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsx"])("ul", {
        children
    }), DefaultUnknownListItem = ({ children })=>/* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsx"])("li", {
        children
    }), DefaultHardBreak = ()=>/* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsx"])("br", {}), defaultBlockStyles = {
    normal: ({ children })=>/* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsx"])("p", {
            children
        }),
    blockquote: ({ children })=>/* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsx"])("blockquote", {
            children
        }),
    h1: ({ children })=>/* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsx"])("h1", {
            children
        }),
    h2: ({ children })=>/* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsx"])("h2", {
            children
        }),
    h3: ({ children })=>/* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsx"])("h3", {
            children
        }),
    h4: ({ children })=>/* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsx"])("h4", {
            children
        }),
    h5: ({ children })=>/* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsx"])("h5", {
            children
        }),
    h6: ({ children })=>/* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsx"])("h6", {
            children
        })
}, defaultComponents = {
    types: {},
    block: defaultBlockStyles,
    marks: defaultMarks,
    list: defaultLists,
    listItem: DefaultListItem,
    hardBreak: DefaultHardBreak,
    unknownType: DefaultUnknownType,
    unknownMark: DefaultUnknownMark,
    unknownList: DefaultUnknownList,
    unknownListItem: DefaultUnknownListItem,
    unknownBlockStyle: DefaultUnknownBlockStyle
};
function mergeComponents(parent, overrides) {
    const { block, list, listItem, marks, types, ...rest } = overrides;
    return {
        ...parent,
        block: mergeDeeply(parent, overrides, "block"),
        list: mergeDeeply(parent, overrides, "list"),
        listItem: mergeDeeply(parent, overrides, "listItem"),
        marks: mergeDeeply(parent, overrides, "marks"),
        types: mergeDeeply(parent, overrides, "types"),
        ...rest
    };
}
function mergeDeeply(parent, overrides, key) {
    const override = overrides[key], parentVal = parent[key];
    return typeof override == "function" || override && typeof parentVal == "function" ? override : override ? {
        ...parentVal,
        ...override
    } : parentVal;
}
function PortableText({ value: input, components: componentOverrides, listNestingMode, onMissingComponent: missingComponentHandler = printWarning }) {
    const handleMissingComponent = missingComponentHandler || noop, blocks = Array.isArray(input) ? input : [
        input
    ], nested = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$toolkit$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["nestLists"])(blocks, listNestingMode || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$toolkit$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["LIST_NEST_MODE_HTML"]), components = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useMemo"])(()=>componentOverrides ? mergeComponents(defaultComponents, componentOverrides) : defaultComponents, [
        componentOverrides
    ]), renderNode = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useMemo"])(()=>getNodeRenderer(components, handleMissingComponent), [
        components,
        handleMissingComponent
    ]), rendered = nested.map((node, index)=>renderNode({
            node,
            index,
            isInline: !1,
            renderNode
        }));
    return /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsx"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Fragment"], {
        children: rendered
    });
}
const getNodeRenderer = (components, handleMissingComponent)=>{
    function renderNode(options) {
        const { node, index, isInline } = options, key = node._key || `node-${index}`;
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$toolkit$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isPortableTextToolkitList"])(node) ? renderList(node, index, key) : (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$toolkit$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isPortableTextListItemBlock"])(node) ? renderListItem(node, index, key) : (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$toolkit$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isPortableTextToolkitSpan"])(node) ? renderSpan(node, index, key) : hasCustomComponentForNode(node) ? renderCustomBlock(node, index, key, isInline) : (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$toolkit$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isPortableTextBlock"])(node) ? renderBlock(node, index, key, isInline) : (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$toolkit$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isPortableTextToolkitTextNode"])(node) ? renderText(node, key) : renderUnknownType(node, index, key, isInline);
    }
    function hasCustomComponentForNode(node) {
        return node._type in components.types;
    }
    function renderListItem(node, index, key) {
        const tree = serializeBlock({
            node,
            index,
            isInline: !1,
            renderNode
        }), renderer = components.listItem, Li = (typeof renderer == "function" ? renderer : renderer[node.listItem]) || components.unknownListItem;
        if (Li === components.unknownListItem) {
            const style = node.listItem || "bullet";
            handleMissingComponent(unknownListItemStyleWarning(style), {
                type: style,
                nodeType: "listItemStyle"
            });
        }
        let children = tree.children;
        if (node.style && node.style !== "normal") {
            const { listItem, ...blockNode } = node;
            children = renderNode({
                node: blockNode,
                index,
                isInline: !1
            });
        }
        return /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsx"])(Li, {
            value: node,
            index,
            isInline: !1,
            renderNode,
            children
        }, key);
    }
    function renderList(node, index, key) {
        const children = node.children.map((child, childIndex)=>renderNode({
                node: child._key ? child : {
                    ...child,
                    _key: `li-${index}-${childIndex}`
                },
                index: childIndex,
                isInline: !1
            })), component = components.list, List = (typeof component == "function" ? component : component[node.listItem]) || components.unknownList;
        if (List === components.unknownList) {
            const style = node.listItem || "bullet";
            handleMissingComponent(unknownListStyleWarning(style), {
                nodeType: "listStyle",
                type: style
            });
        }
        return /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsx"])(List, {
            value: node,
            index,
            isInline: !1,
            renderNode,
            children
        }, key);
    }
    function renderSpan(node, _index, key) {
        const { markDef, markType, markKey } = node, Span = components.marks[markType] || components.unknownMark, children = node.children.map((child, childIndex)=>renderNode({
                node: child,
                index: childIndex,
                isInline: !0
            }));
        return Span === components.unknownMark && handleMissingComponent(unknownMarkWarning(markType), {
            nodeType: "mark",
            type: markType
        }), /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsx"])(Span, {
            text: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$toolkit$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["spanToPlainText"])(node),
            value: markDef,
            markType,
            markKey,
            renderNode,
            children
        }, key);
    }
    function renderBlock(node, index, key, isInline) {
        const { _key, ...props } = serializeBlock({
            node,
            index,
            isInline,
            renderNode
        }), style = props.node.style || "normal", Block = (typeof components.block == "function" ? components.block : components.block[style]) || components.unknownBlockStyle;
        return Block === components.unknownBlockStyle && handleMissingComponent(unknownBlockStyleWarning(style), {
            nodeType: "blockStyle",
            type: style
        }), /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsx"])(Block, {
            ...props,
            value: props.node,
            renderNode
        }, key);
    }
    function renderText(node, key) {
        if (node.text === `
`) {
            const HardBreak = components.hardBreak;
            return HardBreak ? /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsx"])(HardBreak, {}, key) : `
`;
        }
        return node.text;
    }
    function renderUnknownType(node, index, key, isInline) {
        const nodeOptions = {
            value: node,
            isInline,
            index,
            renderNode
        };
        handleMissingComponent(unknownTypeWarning(node._type), {
            nodeType: "block",
            type: node._type
        });
        const UnknownType = components.unknownType;
        return /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsx"])(UnknownType, {
            ...nodeOptions
        }, key);
    }
    function renderCustomBlock(node, index, key, isInline) {
        const nodeOptions = {
            value: node,
            isInline,
            index,
            renderNode
        }, Node = components.types[node._type];
        return Node ? /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsx"])(Node, {
            ...nodeOptions
        }, key) : null;
    }
    return renderNode;
};
function serializeBlock(options) {
    const { node, index, isInline, renderNode } = options, children = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$toolkit$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["buildMarksTree"])(node).map((child, i)=>renderNode({
            node: child,
            isInline: !0,
            index: i,
            renderNode
        }));
    return {
        _key: node._key || `block-${index}`,
        children,
        index,
        isInline,
        node
    };
}
function noop() {}
;
 //# sourceMappingURL=index.js.map
}}),
"[project]/node_modules/@portabletext/schema/dist/index.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "compileSchema": (()=>compileSchema),
    "defineSchema": (()=>defineSchema),
    "isSpan": (()=>isSpan),
    "isTextBlock": (()=>isTextBlock),
    "isTypedObject": (()=>isTypedObject)
});
function compileSchema(definition) {
    const styles = (definition.styles ?? []).map((style)=>({
            ...style,
            value: style.name
        })), blockFields = [];
    if (definition.block?.fields) for (const field of definition.block.fields){
        if (field.name === "_type" || field.name === "_key" || field.name === "children" || field.name === "markDefs" || field.name === "style" || field.name === "listItem" || field.name === "level") {
            console.warn(`"${field.name}" is a reserved field name on Portable Text blocks`);
            continue;
        }
        blockFields.push(field);
    }
    return {
        block: {
            name: definition.block?.name ?? "block",
            ...blockFields.length > 0 ? {
                fields: blockFields
            } : {}
        },
        span: {
            name: "span"
        },
        styles: styles.some((style)=>style.value === "normal") ? styles : [
            {
                value: "normal",
                name: "normal",
                title: "Normal"
            },
            ...styles
        ],
        lists: (definition.lists ?? []).map((list)=>({
                ...list,
                value: list.name
            })),
        decorators: (definition.decorators ?? []).map((decorator)=>({
                ...decorator,
                value: decorator.name
            })),
        annotations: (definition.annotations ?? []).map((annotation)=>({
                ...annotation,
                fields: annotation.fields ?? []
            })),
        blockObjects: (definition.blockObjects ?? []).map((blockObject)=>({
                ...blockObject,
                fields: blockObject.fields ?? []
            })),
        inlineObjects: (definition.inlineObjects ?? []).map((inlineObject)=>({
                ...inlineObject,
                fields: inlineObject.fields ?? []
            }))
    };
}
function defineSchema(definition) {
    return definition;
}
function isTypedObject(object) {
    return isRecord(object) && typeof object._type == "string";
}
function isRecord(value) {
    return !!value && (typeof value == "object" || typeof value == "function");
}
function isTextBlock(context, block) {
    return !(!isTypedObject(block) || block._type !== context.schema.block.name || !Array.isArray(block.children));
}
function isSpan(context, child) {
    return !(!isTypedObject(child) || child._type !== context.schema.span.name || typeof child.text != "string");
}
;
 //# sourceMappingURL=index.js.map
}}),
"[project]/node_modules/@portabletext/sanity-bridge/dist/index.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "compileSchemaDefinitionToPortableTextMemberSchemaTypes": (()=>compileSchemaDefinitionToPortableTextMemberSchemaTypes),
    "createPortableTextMemberSchemaTypes": (()=>createPortableTextMemberSchemaTypes),
    "portableTextMemberSchemaTypesToSchema": (()=>portableTextMemberSchemaTypesToSchema),
    "sanitySchemaToPortableTextSchema": (()=>sanitySchemaToPortableTextSchema)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$sanity$2f$schema$2f$lib$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/@sanity/schema/lib/index.mjs [app-ssr] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$sanity$2f$schema$2f$lib$2f$_internal$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/@sanity/schema/lib/_internal.mjs [app-ssr] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$sanity$2f$types$2f$lib$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@sanity/types/lib/index.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2e$startcase$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/lodash.startcase/index.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$get$2d$random$2d$values$2d$esm$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/get-random-values-esm/index.mjs [app-ssr] (ecmascript)");
;
;
;
;
;
function createPortableTextMemberSchemaTypes(portableTextType) {
    if (!portableTextType) throw new Error("Parameter 'portabletextType' missing (required)");
    const blockType = portableTextType.of?.find(findBlockType);
    if (!blockType) throw new Error("Block type is not defined in this schema (required)");
    const childrenField = blockType.fields?.find((field)=>field.name === "children");
    if (!childrenField) throw new Error("Children field for block type found in schema (required)");
    const ofType = childrenField.type.of;
    if (!ofType) throw new Error("Valid types for block children not found in schema (required)");
    const spanType = ofType.find((memberType)=>memberType.name === "span");
    if (!spanType) throw new Error("Span type not found in schema (required)");
    const inlineObjectTypes = ofType.filter((memberType)=>memberType.name !== "span") || [], blockObjectTypes = portableTextType.of?.filter((field)=>field.name !== blockType.name) || [];
    return {
        styles: resolveEnabledStyles(blockType),
        decorators: resolveEnabledDecorators(spanType),
        lists: resolveEnabledListItems(blockType),
        block: blockType,
        span: spanType,
        portableText: portableTextType,
        inlineObjects: inlineObjectTypes,
        blockObjects: blockObjectTypes,
        annotations: spanType.annotations
    };
}
function resolveEnabledStyles(blockType) {
    const styleField = blockType.fields?.find((btField)=>btField.name === "style");
    if (!styleField) throw new Error("A field with name 'style' is not defined in the block type (required).");
    const textStyles = styleField.type.options?.list && styleField.type.options.list?.filter((style)=>style.value);
    if (!textStyles || textStyles.length === 0) throw new Error("The style fields need at least one style defined. I.e: {title: 'Normal', value: 'normal'}.");
    return textStyles;
}
function resolveEnabledDecorators(spanType) {
    return spanType.decorators;
}
function resolveEnabledListItems(blockType) {
    const listField = blockType.fields?.find((btField)=>btField.name === "listItem");
    if (!listField) throw new Error("A field with name 'listItem' is not defined in the block type (required).");
    const listItems = listField.type.options?.list && listField.type.options.list.filter((list)=>list.value);
    if (!listItems) throw new Error("The list field need at least to be an empty array");
    return listItems;
}
function findBlockType(type) {
    return type.type ? findBlockType(type.type) : type.name === "block" ? type : null;
}
function portableTextMemberSchemaTypesToSchema(schema) {
    return {
        annotations: schema.annotations.map((annotation)=>({
                name: annotation.name,
                fields: annotation.fields.map((field)=>({
                        name: field.name,
                        type: field.type.jsonType,
                        title: field.type.title
                    })),
                title: annotation.title
            })),
        block: {
            name: schema.block.name
        },
        blockObjects: schema.blockObjects.map((blockObject)=>({
                name: blockObject.name,
                fields: blockObject.fields.map((field)=>({
                        name: field.name,
                        type: field.type.jsonType,
                        title: field.type.title
                    })),
                title: blockObject.title
            })),
        decorators: schema.decorators.map((decorator)=>({
                name: decorator.value,
                title: decorator.title,
                value: decorator.value
            })),
        inlineObjects: schema.inlineObjects.map((inlineObject)=>({
                name: inlineObject.name,
                fields: inlineObject.fields.map((field)=>({
                        name: field.name,
                        type: field.type.jsonType,
                        title: field.type.title
                    })),
                title: inlineObject.title
            })),
        span: {
            name: schema.span.name
        },
        styles: schema.styles.map((style)=>({
                name: style.value,
                title: style.title,
                value: style.value
            })),
        lists: schema.lists.map((list)=>({
                name: list.value,
                title: list.title,
                value: list.value
            }))
    };
}
function sanitySchemaToPortableTextSchema(sanitySchema) {
    const portableTextMemberSchemaTypes = createPortableTextMemberSchemaTypes(sanitySchema.hasOwnProperty("jsonType") ? sanitySchema : compileType(sanitySchema));
    return portableTextMemberSchemaTypesToSchema(portableTextMemberSchemaTypes);
}
function compileType(rawType) {
    return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$sanity$2f$schema$2f$lib$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["Schema"].compile({
        name: "blockTypeSchema",
        types: [
            rawType,
            ...__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$sanity$2f$schema$2f$lib$2f$_internal$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["builtinTypes"]
        ]
    }).get(rawType.name);
}
const keyGenerator = ()=>randomKey(12), getByteHexTable = /* @__PURE__ */ (()=>{
    let table;
    return ()=>{
        if (table) return table;
        table = [];
        for(let i = 0; i < 256; ++i)table[i] = (i + 256).toString(16).slice(1);
        return table;
    };
})();
function whatwgRNG(length = 16) {
    const rnds8 = new Uint8Array(length);
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$get$2d$random$2d$values$2d$esm$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"])(rnds8), rnds8;
}
function randomKey(length) {
    const table = getByteHexTable();
    return whatwgRNG(length).reduce((str, n)=>str + table[n], "").slice(0, length);
}
const temporaryImageBlockObjectName = `tmp-${keyGenerator()}-image`, temporaryUrlBlockObjectName = `tmp-${keyGenerator()}-url`, temporaryImageInlineObjectName = `tmp-${keyGenerator()}-image`, temporaryUrlInlineObjectName = `tmp-${keyGenerator()}-url`, temporaryBlockObjectNames = {
    image: temporaryImageBlockObjectName,
    url: temporaryUrlBlockObjectName
}, temporaryInlineObjectNames = {
    image: temporaryImageInlineObjectName,
    url: temporaryUrlInlineObjectName
}, blockObjectNames = {
    [temporaryImageBlockObjectName]: "image",
    [temporaryUrlBlockObjectName]: "url"
}, inlineObjectNames = {
    [temporaryImageInlineObjectName]: "image",
    [temporaryUrlInlineObjectName]: "url"
}, defaultObjectTitles = {
    image: "Image",
    url: "URL"
};
function compileSchemaDefinitionToPortableTextMemberSchemaTypes(definition) {
    const blockObjects = definition?.blockObjects?.map((blockObject)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$sanity$2f$types$2f$lib$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["defineType"])({
            type: "object",
            // Very naive way to work around `SanitySchema.compile` adding default
            // fields to objects with certain names.
            name: temporaryBlockObjectNames[blockObject.name] ?? blockObject.name,
            title: blockObject.title === void 0 ? // This avoids the default title which is a title case of the object name
            defaultObjectTitles[blockObject.name] : blockObject.title,
            fields: blockObject.fields?.map((field)=>({
                    name: field.name,
                    type: field.type,
                    title: field.title ?? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2e$startcase$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"])(field.name)
                })) ?? []
        })) ?? [], inlineObjects = definition?.inlineObjects?.map((inlineObject)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$sanity$2f$types$2f$lib$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["defineType"])({
            type: "object",
            // Very naive way to work around `SanitySchema.compile` adding default
            // fields to objects with certain names.
            name: temporaryInlineObjectNames[inlineObject.name] ?? inlineObject.name,
            title: inlineObject.title === void 0 ? // This avoids the default title which is a title case of the object name
            defaultObjectTitles[inlineObject.name] : inlineObject.title,
            fields: inlineObject.fields?.map((field)=>({
                    name: field.name,
                    type: field.type,
                    title: field.title ?? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2e$startcase$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"])(field.name)
                })) ?? []
        })) ?? [], portableTextSchema = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$sanity$2f$types$2f$lib$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["defineField"])({
        type: "array",
        name: "portable-text",
        of: [
            ...blockObjects.map((blockObject)=>({
                    type: blockObject.name
                })),
            {
                type: "block",
                name: "block",
                of: inlineObjects.map((inlineObject)=>({
                        type: inlineObject.name
                    })),
                marks: {
                    decorators: definition?.decorators?.map((decorator)=>({
                            title: decorator.title ?? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2e$startcase$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"])(decorator.name),
                            value: decorator.name
                        })) ?? [],
                    annotations: definition?.annotations?.map((annotation)=>({
                            name: annotation.name,
                            type: "object",
                            title: annotation.title,
                            fields: annotation.fields?.map((field)=>({
                                    name: field.name,
                                    title: field.title ?? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2e$startcase$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"])(field.name),
                                    type: field.type
                                })) ?? []
                        })) ?? []
                },
                lists: definition?.lists?.map((list)=>({
                        value: list.name,
                        title: list.title ?? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2e$startcase$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"])(list.name)
                    })) ?? [],
                styles: definition?.styles?.map((style)=>({
                        value: style.name,
                        title: style.title ?? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2e$startcase$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"])(style.name)
                    })) ?? []
            }
        ]
    }), schema = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$sanity$2f$schema$2f$lib$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["Schema"].compile({
        types: [
            portableTextSchema,
            ...blockObjects,
            ...inlineObjects
        ]
    }).get("portable-text"), pteSchema = createPortableTextMemberSchemaTypes(schema);
    return {
        ...pteSchema,
        portableText: {
            ...pteSchema.portableText,
            of: pteSchema.portableText.of.map((schemaType)=>{
                if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$sanity$2f$types$2f$lib$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isObjectSchemaType"])(schemaType)) return schemaType;
                const nameMapping = blockObjectNames[schemaType.name];
                schemaType.name = nameMapping ?? schemaType.name;
                for (const field of schemaType.fields)if (!(field.name !== "children" || !(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$sanity$2f$types$2f$lib$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isArraySchemaType"])(field.type))) for (const ofSchemaType of field.type.of){
                    const nameMapping2 = inlineObjectNames[ofSchemaType.name];
                    nameMapping2 && (ofSchemaType.name = nameMapping2);
                }
                return schemaType;
            })
        },
        blockObjects: pteSchema.blockObjects.map((blockObject)=>blockObjectNames[blockObject.name] !== void 0 ? {
                ...blockObject,
                name: blockObjectNames[blockObject.name],
                type: {
                    ...blockObject.type,
                    name: blockObjectNames[blockObject.name]
                }
            } : blockObject),
        inlineObjects: pteSchema.inlineObjects.map((inlineObject)=>inlineObjectNames[inlineObject.name] !== void 0 ? {
                ...inlineObject,
                name: inlineObjectNames[inlineObject.name]
            } : inlineObject)
    };
}
;
 //# sourceMappingURL=index.js.map
}}),
"[project]/node_modules/@portabletext/block-tools/lib/_chunks-es/helpers.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "BLOCK_DEFAULT_STYLE": (()=>BLOCK_DEFAULT_STYLE),
    "DEFAULT_BLOCK": (()=>DEFAULT_BLOCK),
    "DEFAULT_SPAN": (()=>DEFAULT_SPAN),
    "HTML_BLOCK_TAGS": (()=>HTML_BLOCK_TAGS),
    "HTML_DECORATOR_TAGS": (()=>HTML_DECORATOR_TAGS),
    "HTML_HEADER_TAGS": (()=>HTML_HEADER_TAGS),
    "HTML_LIST_CONTAINER_TAGS": (()=>HTML_LIST_CONTAINER_TAGS),
    "HTML_LIST_ITEM_TAGS": (()=>HTML_LIST_ITEM_TAGS),
    "HTML_SPAN_TAGS": (()=>HTML_SPAN_TAGS),
    "defaultParseHtml": (()=>defaultParseHtml),
    "ensureRootIsBlocks": (()=>ensureRootIsBlocks),
    "flattenNestedBlocks": (()=>flattenNestedBlocks),
    "isElement": (()=>isElement),
    "isMinimalBlock": (()=>isMinimalBlock),
    "isMinimalSpan": (()=>isMinimalSpan),
    "isNodeList": (()=>isNodeList),
    "isPlaceholderAnnotation": (()=>isPlaceholderAnnotation),
    "isPlaceholderDecorator": (()=>isPlaceholderDecorator),
    "preprocess": (()=>preprocess),
    "resolveJsType": (()=>resolveJsType),
    "tagName": (()=>tagName),
    "trimWhitespace": (()=>trimWhitespace)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$schema$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@portabletext/schema/dist/index.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2f$isEqual$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/lodash/isEqual.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2f$uniq$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/lodash/uniq.js [app-ssr] (ecmascript)");
;
;
;
const objectToString = Object.prototype.toString;
function resolveJsType(val) {
    switch(objectToString.call(val)){
        case "[object Function]":
            return "function";
        case "[object Date]":
            return "date";
        case "[object RegExp]":
            return "regexp";
        case "[object Arguments]":
            return "arguments";
        case "[object Array]":
            return "array";
        case "[object String]":
            return "string";
    }
    return val === null ? "null" : val === void 0 ? "undefined" : val && typeof val == "object" && "nodeType" in val && val.nodeType === 1 ? "element" : val === Object(val) ? "object" : typeof val;
}
function isArbitraryTypedObject(object) {
    return isRecord(object) && typeof object._type == "string";
}
function isRecord(value) {
    return !!value && (typeof value == "object" || typeof value == "function");
}
function flattenNestedBlocks(context, blocks) {
    return blocks.flatMap((block)=>{
        if (isBlockContainer(block)) return flattenNestedBlocks(context, [
            block.block
        ]);
        if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$schema$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isTextBlock"])(context, block)) {
            const hasBlockObjects = block.children.some((child)=>context.schema.blockObjects.some((blockObject)=>blockObject.name === child._type)), hasBlocks = block.children.some((child)=>child._type === "__block" || child._type === "block");
            if (hasBlockObjects || hasBlocks) {
                const splitChildren = getSplitChildren(context, block);
                return splitChildren.length === 1 && splitChildren[0].type === "children" && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2f$isEqual$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"])(splitChildren[0].children, block.children) ? [
                    block
                ] : splitChildren.flatMap((slice)=>slice.type === "block object" ? [
                        slice.block
                    ] : slice.type === "block" ? flattenNestedBlocks(context, [
                        slice.block
                    ]) : slice.children.length > 0 ? slice.children.every((child)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$schema$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isSpan"])(context, child) && child.text.trim() === "") ? [] : flattenNestedBlocks(context, [
                        {
                            ...block,
                            children: slice.children
                        }
                    ]) : []);
            }
            return [
                block
            ];
        }
        return [
            block
        ];
    });
}
function isBlockContainer(block) {
    return block._type === "__block" && isArbitraryTypedObject(block.block);
}
function getSplitChildren(context, block) {
    return block.children.reduce((slices, child)=>{
        const knownInlineObject = context.schema.inlineObjects.some((inlineObject)=>inlineObject.name === child._type), knownBlockObject = context.schema.blockObjects.some((blockObject)=>blockObject.name === child._type), lastSlice = slices.pop();
        return !(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$schema$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isSpan"])(context, child) && !knownInlineObject && knownBlockObject ? [
            ...slices,
            ...lastSlice ? [
                lastSlice
            ] : [],
            {
                type: "block object",
                block: child
            }
        ] : child._type === "__block" ? [
            ...slices,
            ...lastSlice ? [
                lastSlice
            ] : [],
            {
                type: "block object",
                block: child.block
            }
        ] : child._type === "block" ? [
            ...slices,
            ...lastSlice ? [
                lastSlice
            ] : [],
            {
                type: "block",
                block: child
            }
        ] : lastSlice && lastSlice.type === "children" ? [
            ...slices,
            {
                type: "children",
                children: [
                    ...lastSlice.children,
                    child
                ]
            }
        ] : [
            ...slices,
            ...lastSlice ? [
                lastSlice
            ] : [],
            {
                type: "children",
                children: [
                    child
                ]
            }
        ];
    }, []);
}
var s = {
    0: 8203,
    1: 8204,
    2: 8205,
    3: 8290,
    4: 8291,
    5: 8288,
    6: 65279,
    7: 8289,
    8: 119155,
    9: 119156,
    a: 119157,
    b: 119158,
    c: 119159,
    d: 119160,
    e: 119161,
    f: 119162
}, c = {
    0: 8203,
    1: 8204,
    2: 8205,
    3: 65279
};
new Array(4).fill(String.fromCodePoint(c[0])).join("");
Object.fromEntries(Object.entries(c).map((t)=>t.reverse()));
Object.fromEntries(Object.entries(s).map((t)=>t.reverse()));
var S = `${Object.values(s).map((t)=>`\\u{${t.toString(16)}}`).join("")}`, f = new RegExp(`[${S}]{4,}`, "gu");
function _(t) {
    var e;
    return {
        cleaned: t.replace(f, ""),
        encoded: ((e = t.match(f)) == null ? void 0 : e[0]) || ""
    };
}
function O(t) {
    return t && JSON.parse(_(JSON.stringify(t)).cleaned);
}
const PRESERVE_WHITESPACE_TAGS = [
    "pre",
    "textarea",
    "code"
], BLOCK_DEFAULT_STYLE = "normal", DEFAULT_BLOCK = Object.freeze({
    _type: "block",
    markDefs: [],
    style: BLOCK_DEFAULT_STYLE
}), DEFAULT_SPAN = Object.freeze({
    _type: "span",
    marks: []
}), HTML_BLOCK_TAGS = {
    p: DEFAULT_BLOCK,
    blockquote: {
        ...DEFAULT_BLOCK,
        style: "blockquote"
    }
}, HTML_SPAN_TAGS = {
    span: {
        object: "text"
    }
}, HTML_LIST_CONTAINER_TAGS = {
    ol: {
        object: null
    },
    ul: {
        object: null
    }
}, HTML_HEADER_TAGS = {
    h1: {
        ...DEFAULT_BLOCK,
        style: "h1"
    },
    h2: {
        ...DEFAULT_BLOCK,
        style: "h2"
    },
    h3: {
        ...DEFAULT_BLOCK,
        style: "h3"
    },
    h4: {
        ...DEFAULT_BLOCK,
        style: "h4"
    },
    h5: {
        ...DEFAULT_BLOCK,
        style: "h5"
    },
    h6: {
        ...DEFAULT_BLOCK,
        style: "h6"
    }
}, HTML_MISC_TAGS = {
    br: {
        ...DEFAULT_BLOCK,
        style: BLOCK_DEFAULT_STYLE
    }
}, HTML_DECORATOR_TAGS = {
    b: "strong",
    strong: "strong",
    i: "em",
    em: "em",
    u: "underline",
    s: "strike-through",
    strike: "strike-through",
    del: "strike-through",
    code: "code",
    sup: "sup",
    sub: "sub",
    ins: "ins",
    mark: "mark",
    small: "small"
}, HTML_LIST_ITEM_TAGS = {
    li: {
        ...DEFAULT_BLOCK,
        style: BLOCK_DEFAULT_STYLE,
        level: 1,
        listItem: "bullet"
    }
}, ELEMENT_MAP = {
    ...HTML_BLOCK_TAGS,
    ...HTML_SPAN_TAGS,
    ...HTML_LIST_CONTAINER_TAGS,
    ...HTML_LIST_ITEM_TAGS,
    ...HTML_HEADER_TAGS,
    ...HTML_MISC_TAGS
};
(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2f$uniq$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"])(Object.values(ELEMENT_MAP).filter((tag)=>"style" in tag).map((tag)=>tag.style));
(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2f$uniq$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"])(Object.values(HTML_DECORATOR_TAGS));
const _XPathResult = {
    BOOLEAN_TYPE: 3,
    ORDERED_NODE_ITERATOR_TYPE: 5,
    UNORDERED_NODE_SNAPSHOT_TYPE: 6
};
var preprocessGDocs = (_html, doc, options)=>{
    const whitespaceOnPasteMode = options?.unstable_whitespaceOnPasteMode || "preserve";
    let gDocsRootOrSiblingNode = doc.evaluate('//*[@id and contains(@id, "docs-internal-guid")]', doc, null, _XPathResult.ORDERED_NODE_ITERATOR_TYPE, null).iterateNext();
    if (gDocsRootOrSiblingNode) {
        const isWrappedRootTag = tagName(gDocsRootOrSiblingNode) === "b";
        switch(isWrappedRootTag || (gDocsRootOrSiblingNode = doc.body), whitespaceOnPasteMode){
            case "normalize":
                normalizeWhitespace(gDocsRootOrSiblingNode);
                break;
            case "remove":
                removeAllWhitespace(gDocsRootOrSiblingNode);
                break;
        }
        const childNodes = doc.evaluate("//*", doc, null, _XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);
        for(let i = childNodes.snapshotLength - 1; i >= 0; i--){
            const elm = childNodes.snapshotItem(i);
            elm?.setAttribute("data-is-google-docs", "true"), (elm?.parentElement === gDocsRootOrSiblingNode || !isWrappedRootTag && elm.parentElement === doc.body) && (elm?.setAttribute("data-is-root-node", "true"), tagName(elm)), tagName(elm) === "li" && elm.firstChild && tagName(elm?.firstChild) === "img" && elm.removeChild(elm.firstChild);
        }
        return isWrappedRootTag && doc.body.firstElementChild?.replaceWith(...Array.from(gDocsRootOrSiblingNode.childNodes)), doc;
    }
    return doc;
};
const unwantedWordDocumentPaths = [
    "/html/text()",
    "/html/head/text()",
    "/html/body/text()",
    "/html/body/ul/text()",
    "/html/body/ol/text()",
    "//comment()",
    "//style",
    "//xml",
    "//script",
    "//meta",
    "//link"
];
var preprocessHTML = (_html, doc)=>{
    const bodyTextNodes = doc.evaluate("/html/body/text()", doc, null, _XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);
    for(let i = bodyTextNodes.snapshotLength - 1; i >= 0; i--){
        const node = bodyTextNodes.snapshotItem(i), text = node.textContent || "";
        if (text.replace(/[^\S\n]+$/g, "")) {
            const newNode = doc.createElement("span");
            newNode.appendChild(doc.createTextNode(text)), node.parentNode?.replaceChild(newNode, node);
        } else node.parentNode?.removeChild(node);
    }
    const unwantedNodes = doc.evaluate(unwantedWordDocumentPaths.join("|"), doc, null, _XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);
    for(let i = unwantedNodes.snapshotLength - 1; i >= 0; i--){
        const unwanted = unwantedNodes.snapshotItem(i);
        unwanted && unwanted.parentNode?.removeChild(unwanted);
    }
    return doc;
}, preprocessNotion = (html, doc)=>{
    const NOTION_REGEX = /<!-- notionvc:.*?-->/g;
    if (html.match(NOTION_REGEX)) {
        const childNodes = doc.evaluate("//*", doc, null, _XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);
        for(let i = childNodes.snapshotLength - 1; i >= 0; i--)childNodes.snapshotItem(i)?.setAttribute("data-is-notion", "true");
        return doc;
    }
    return doc;
}, preprocessWhitespace = (_2, doc)=>{
    function processNode(node) {
        if (node.nodeType === _XPathResult.BOOLEAN_TYPE && !PRESERVE_WHITESPACE_TAGS.includes(node.parentElement?.tagName.toLowerCase() || "")) node.textContent = node.textContent?.replace(/\s\s+/g, " ").replace(/[\r\n]+/g, " ") || "";
        else for(let i = 0; i < node.childNodes.length; i++)processNode(node.childNodes[i]);
    }
    return processNode(doc.body), doc;
};
const WORD_HTML_REGEX = /(class="?Mso|style=(?:"|')[^"]*?\bmso-|w:WordDocument|<o:\w+>|<\/font>)/, unwantedPaths = [
    "//o:p",
    "//span[@style='mso-list:Ignore']",
    "//span[@style='mso-list: Ignore']"
], mappedPaths = [
    "//p[@class='MsoTocHeading']",
    "//p[@class='MsoTitle']",
    "//p[@class='MsoToaHeading']",
    "//p[@class='MsoSubtitle']",
    "//span[@class='MsoSubtleEmphasis']",
    "//span[@class='MsoIntenseEmphasis']"
], elementMap = {
    MsoTocHeading: [
        "h3"
    ],
    MsoTitle: [
        "h1"
    ],
    MsoToaHeading: [
        "h2"
    ],
    MsoSubtitle: [
        "h5"
    ],
    MsoSubtleEmphasis: [
        "span",
        "em"
    ],
    MsoIntenseEmphasis: [
        "span",
        "em",
        "strong"
    ]
};
function isWordHtml(html) {
    return WORD_HTML_REGEX.test(html);
}
var preprocessWord = (html, doc)=>{
    if (!isWordHtml(html)) return doc;
    const unwantedNodes = doc.evaluate(unwantedPaths.join("|"), doc, (prefix)=>prefix === "o" ? "urn:schemas-microsoft-com:office:office" : null, _XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);
    for(let i = unwantedNodes.snapshotLength - 1; i >= 0; i--){
        const unwanted = unwantedNodes.snapshotItem(i);
        unwanted?.parentNode && unwanted.parentNode.removeChild(unwanted);
    }
    const mappedElements = doc.evaluate(mappedPaths.join("|"), doc, null, _XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);
    for(let i = mappedElements.snapshotLength - 1; i >= 0; i--){
        const mappedElm = mappedElements.snapshotItem(i), tags = elementMap[mappedElm.className], text = doc.createTextNode(mappedElm.textContent || "");
        if (!tags) continue;
        const parentElement = doc.createElement(tags[0]);
        let parent = parentElement, child = parentElement;
        tags.slice(1).forEach((tag)=>{
            child = doc.createElement(tag), parent.appendChild(child), parent = child;
        }), child.appendChild(text), mappedElm?.parentNode?.replaceChild(parentElement, mappedElm);
    }
    return doc;
}, preprocessors = [
    preprocessWhitespace,
    preprocessNotion,
    preprocessWord,
    preprocessGDocs,
    preprocessHTML
];
function tagName(el) {
    if (el && "tagName" in el) return el.tagName.toLowerCase();
}
function preprocess(html, parseHtml, options) {
    const cleanHTML = O(html), doc = parseHtml(normalizeHtmlBeforePreprocess(cleanHTML));
    return preprocessors.forEach((processor)=>{
        processor(cleanHTML, doc, options);
    }), doc;
}
function normalizeHtmlBeforePreprocess(html) {
    return html.trim();
}
function defaultParseHtml() {
    if (resolveJsType(DOMParser) === "undefined") throw new Error("The native `DOMParser` global which the `Html` deserializer uses by default is not present in this environment. You must supply the `options.parseHtml` function instead.");
    return (html)=>new DOMParser().parseFromString(html, "text/html");
}
function nextSpan(block, index) {
    const next = block.children[index + 1];
    return next && next._type === "span" ? next : null;
}
function prevSpan(block, index) {
    const prev = block.children[index - 1];
    return prev && prev._type === "span" ? prev : null;
}
function isWhiteSpaceChar(text) {
    return [
        "\xA0",
        " "
    ].includes(text);
}
function trimWhitespace(schema, blocks) {
    return blocks.forEach((block)=>{
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$schema$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isTextBlock"])({
            schema
        }, block) && block.children.forEach((child, index)=>{
            if (!isMinimalSpan(child)) return;
            const nextChild = nextSpan(block, index), prevChild = prevSpan(block, index);
            index === 0 && (child.text = child.text.replace(/^[^\S\n]+/g, "")), index === block.children.length - 1 && (child.text = child.text.replace(/[^\S\n]+$/g, "")), /\s/.test(child.text.slice(Math.max(0, child.text.length - 1))) && nextChild && isMinimalSpan(nextChild) && /\s/.test(nextChild.text.slice(0, 1)) && (child.text = child.text.replace(/[^\S\n]+$/g, "")), /\s/.test(child.text.slice(0, 1)) && prevChild && isMinimalSpan(prevChild) && /\s/.test(prevChild.text.slice(Math.max(0, prevChild.text.length - 1))) && (child.text = child.text.replace(/^[^\S\n]+/g, "")), child.text || block.children.splice(index, 1), prevChild && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2f$isEqual$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"])(prevChild.marks, child.marks) && isWhiteSpaceChar(child.text) ? (prevChild.text += " ", block.children.splice(index, 1)) : nextChild && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2f$isEqual$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"])(nextChild.marks, child.marks) && isWhiteSpaceChar(child.text) && (nextChild.text = ` ${nextChild.text}`, block.children.splice(index, 1));
        });
    }), blocks;
}
function ensureRootIsBlocks(schema, objects) {
    return objects.reduce((blocks, node, i, original)=>{
        if (node._type === "block") return blocks.push(node), blocks;
        if (node._type === "__block") return blocks.push(node.block), blocks;
        const lastBlock = blocks[blocks.length - 1];
        if (i > 0 && !(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$schema$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isTextBlock"])({
            schema
        }, original[i - 1]) && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$schema$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isTextBlock"])({
            schema
        }, lastBlock)) return lastBlock.children.push(node), blocks;
        const block = {
            ...DEFAULT_BLOCK,
            children: [
                node
            ]
        };
        return blocks.push(block), blocks;
    }, []);
}
function isNodeList(node) {
    return Object.prototype.toString.call(node) === "[object NodeList]";
}
function isMinimalSpan(node) {
    return node._type === "span";
}
function isMinimalBlock(node) {
    return node._type === "block";
}
function isPlaceholderDecorator(node) {
    return node._type === "__decorator";
}
function isPlaceholderAnnotation(node) {
    return node._type === "__annotation";
}
function isElement(node) {
    return node.nodeType === 1;
}
function normalizeWhitespace(rootNode) {
    let emptyBlockCount = 0, lastParent = null;
    const nodesToRemove = [];
    for(let child = rootNode.firstChild; child; child = child.nextSibling){
        if (!isElement(child)) {
            normalizeWhitespace(child), emptyBlockCount = 0;
            continue;
        }
        const elm = child;
        isWhitespaceBlock(elm) ? (lastParent && elm.parentElement === lastParent ? (emptyBlockCount++, emptyBlockCount > 1 && nodesToRemove.push(elm)) : emptyBlockCount = 1, lastParent = elm.parentElement) : (normalizeWhitespace(child), emptyBlockCount = 0);
    }
    nodesToRemove.forEach((node)=>{
        node.parentElement?.removeChild(node);
    });
}
function removeAllWhitespace(rootNode) {
    const nodesToRemove = [];
    function collectNodesToRemove(currentNode) {
        if (isElement(currentNode)) {
            const elm = currentNode;
            if (tagName(elm) === "br" && (tagName(elm.nextElementSibling) === "p" || tagName(elm.previousElementSibling) === "p")) {
                nodesToRemove.push(elm);
                return;
            }
            if ((tagName(elm) === "p" || tagName(elm) === "br") && elm?.firstChild?.textContent?.trim() === "") {
                nodesToRemove.push(elm);
                return;
            }
            for(let child = elm.firstChild; child; child = child.nextSibling)collectNodesToRemove(child);
        }
    }
    collectNodesToRemove(rootNode), nodesToRemove.forEach((node)=>{
        node.parentElement?.removeChild(node);
    });
}
function isWhitespaceBlock(elm) {
    return [
        "p",
        "br"
    ].includes(tagName(elm) || "") && !elm.textContent?.trim();
}
;
 //# sourceMappingURL=helpers.js.map
}}),
"[project]/node_modules/@portabletext/block-tools/lib/index.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "htmlToBlocks": (()=>htmlToBlocks),
    "normalizeBlock": (()=>normalizeBlock),
    "randomKey": (()=>randomKey)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$sanity$2d$bridge$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@portabletext/sanity-bridge/dist/index.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$schema$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@portabletext/schema/dist/index.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2f$flatten$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/lodash/flatten.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$get$2d$random$2d$values$2d$esm$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/get-random-values-esm/index.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$block$2d$tools$2f$lib$2f$_chunks$2d$es$2f$helpers$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@portabletext/block-tools/lib/_chunks-es/helpers.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2f$isEqual$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/lodash/isEqual.js [app-ssr] (ecmascript)");
;
;
;
;
;
;
function keyGenerator() {
    return randomKey(12);
}
function whatwgRNG(length = 16) {
    const rnds8 = new Uint8Array(length);
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$get$2d$random$2d$values$2d$esm$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"])(rnds8), rnds8;
}
const byteToHex = [];
for(let i = 0; i < 256; ++i)byteToHex[i] = (i + 256).toString(16).slice(1);
function randomKey(length) {
    return whatwgRNG(length).reduce((str, n)=>str + byteToHex[n], "").slice(0, length);
}
const LIST_CONTAINER_TAGS = Object.keys(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$block$2d$tools$2f$lib$2f$_chunks$2d$es$2f$helpers$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["HTML_LIST_CONTAINER_TAGS"]);
function isEmphasis$1(el) {
    const style = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$block$2d$tools$2f$lib$2f$_chunks$2d$es$2f$helpers$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isElement"])(el) && el.getAttribute("style");
    return /font-style\s*:\s*italic/.test(style || "");
}
function isStrong$1(el) {
    const style = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$block$2d$tools$2f$lib$2f$_chunks$2d$es$2f$helpers$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isElement"])(el) && el.getAttribute("style");
    return /font-weight\s*:\s*700/.test(style || "");
}
function isUnderline$1(el) {
    if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$block$2d$tools$2f$lib$2f$_chunks$2d$es$2f$helpers$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isElement"])(el) || (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$block$2d$tools$2f$lib$2f$_chunks$2d$es$2f$helpers$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["tagName"])(el.parentNode) === "a") return !1;
    const style = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$block$2d$tools$2f$lib$2f$_chunks$2d$es$2f$helpers$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isElement"])(el) && el.getAttribute("style");
    return /text-decoration\s*:\s*underline/.test(style || "");
}
function isStrikethrough(el) {
    const style = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$block$2d$tools$2f$lib$2f$_chunks$2d$es$2f$helpers$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isElement"])(el) && el.getAttribute("style");
    return /text-decoration\s*:\s*(?:.*line-through.*;)/.test(style || "");
}
function isGoogleDocs(el) {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$block$2d$tools$2f$lib$2f$_chunks$2d$es$2f$helpers$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isElement"])(el) && !!el.getAttribute("data-is-google-docs");
}
function isRootNode(el) {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$block$2d$tools$2f$lib$2f$_chunks$2d$es$2f$helpers$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isElement"])(el) && !!el.getAttribute("data-is-root-node");
}
function getListItemStyle$1(el) {
    const parentTag = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$block$2d$tools$2f$lib$2f$_chunks$2d$es$2f$helpers$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["tagName"])(el.parentNode);
    if (!(parentTag && !LIST_CONTAINER_TAGS.includes(parentTag))) return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$block$2d$tools$2f$lib$2f$_chunks$2d$es$2f$helpers$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["tagName"])(el.parentNode) === "ul" ? "bullet" : "number";
}
function getListItemLevel$1(el) {
    let level = 0;
    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$block$2d$tools$2f$lib$2f$_chunks$2d$es$2f$helpers$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["tagName"])(el) === "li") {
        let parentNode = el.parentNode;
        for(; parentNode;){
            const parentTag = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$block$2d$tools$2f$lib$2f$_chunks$2d$es$2f$helpers$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["tagName"])(parentNode);
            parentTag && LIST_CONTAINER_TAGS.includes(parentTag) && level++, parentNode = parentNode.parentNode;
        }
    } else level = 1;
    return level;
}
const blocks = {
    ...__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$block$2d$tools$2f$lib$2f$_chunks$2d$es$2f$helpers$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["HTML_BLOCK_TAGS"],
    ...__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$block$2d$tools$2f$lib$2f$_chunks$2d$es$2f$helpers$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["HTML_HEADER_TAGS"]
};
function getBlockStyle(schema, el) {
    const childTag = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$block$2d$tools$2f$lib$2f$_chunks$2d$es$2f$helpers$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["tagName"])(el.firstChild), block = childTag && blocks[childTag];
    return block ? schema.styles.some((style)=>style.name === block.style) ? block.style : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$block$2d$tools$2f$lib$2f$_chunks$2d$es$2f$helpers$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["BLOCK_DEFAULT_STYLE"] : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$block$2d$tools$2f$lib$2f$_chunks$2d$es$2f$helpers$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["BLOCK_DEFAULT_STYLE"];
}
function createGDocsRules(schema) {
    return [
        {
            deserialize (el, next) {
                if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$block$2d$tools$2f$lib$2f$_chunks$2d$es$2f$helpers$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isElement"])(el) && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$block$2d$tools$2f$lib$2f$_chunks$2d$es$2f$helpers$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["tagName"])(el) === "span" && isGoogleDocs(el)) {
                    if (!el.textContent) return !el.previousSibling && !el.nextSibling && el.setAttribute("data-lonely-child", "true"), next(el.childNodes);
                    const span = {
                        ...__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$block$2d$tools$2f$lib$2f$_chunks$2d$es$2f$helpers$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["DEFAULT_SPAN"],
                        marks: [],
                        text: el.textContent
                    };
                    return isStrong$1(el) && span.marks.push("strong"), isUnderline$1(el) && span.marks.push("underline"), isStrikethrough(el) && span.marks.push("strike-through"), isEmphasis$1(el) && span.marks.push("em"), span;
                }
            }
        },
        {
            deserialize (el, next) {
                if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$block$2d$tools$2f$lib$2f$_chunks$2d$es$2f$helpers$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["tagName"])(el) === "li" && isGoogleDocs(el)) return {
                    ...__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$block$2d$tools$2f$lib$2f$_chunks$2d$es$2f$helpers$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["DEFAULT_BLOCK"],
                    listItem: getListItemStyle$1(el),
                    level: getListItemLevel$1(el),
                    style: getBlockStyle(schema, el),
                    children: next(el.firstChild?.childNodes || [])
                };
            }
        },
        {
            deserialize (el) {
                if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$block$2d$tools$2f$lib$2f$_chunks$2d$es$2f$helpers$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["tagName"])(el) === "br" && isGoogleDocs(el) && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$block$2d$tools$2f$lib$2f$_chunks$2d$es$2f$helpers$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isElement"])(el) && el.classList.contains("apple-interchange-newline")) return {
                    ...__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$block$2d$tools$2f$lib$2f$_chunks$2d$es$2f$helpers$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["DEFAULT_SPAN"],
                    text: ""
                };
                if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$block$2d$tools$2f$lib$2f$_chunks$2d$es$2f$helpers$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["tagName"])(el) === "br" && isGoogleDocs(el) && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$block$2d$tools$2f$lib$2f$_chunks$2d$es$2f$helpers$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isElement"])(el) && el?.parentNode?.textContent === "") return {
                    ...__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$block$2d$tools$2f$lib$2f$_chunks$2d$es$2f$helpers$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["DEFAULT_SPAN"],
                    text: ""
                };
                if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$block$2d$tools$2f$lib$2f$_chunks$2d$es$2f$helpers$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["tagName"])(el) === "br" && isGoogleDocs(el) && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$block$2d$tools$2f$lib$2f$_chunks$2d$es$2f$helpers$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isElement"])(el) && isRootNode(el)) return {
                    ...__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$block$2d$tools$2f$lib$2f$_chunks$2d$es$2f$helpers$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["DEFAULT_SPAN"],
                    text: ""
                };
            }
        }
    ];
}
const whitespaceTextNodeRule = {
    deserialize (node) {
        return node.nodeName === "#text" && isWhitespaceTextNode(node) ? {
            ...__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$block$2d$tools$2f$lib$2f$_chunks$2d$es$2f$helpers$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["DEFAULT_SPAN"],
            marks: [],
            text: (node.textContent ?? "").replace(/\s\s+/g, " ")
        } : void 0;
    }
};
function isWhitespaceTextNode(node) {
    return (node.nodeType === 3 && (node.textContent || "").replace(/[\r\n]/g, " ").replace(/\s\s+/g, " ") === " " && node.nextSibling && node.nextSibling.nodeType !== 3 && node.previousSibling && node.previousSibling.nodeType !== 3 || node.textContent !== " ") && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$block$2d$tools$2f$lib$2f$_chunks$2d$es$2f$helpers$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["tagName"])(node.parentNode) !== "body";
}
function resolveListItem(schema, listNodeTagName) {
    if (listNodeTagName === "ul" && schema.lists.some((list)=>list.name === "bullet")) return "bullet";
    if (listNodeTagName === "ol" && schema.lists.some((list)=>list.name === "number")) return "number";
}
function createHTMLRules(schema, options) {
    return [
        whitespaceTextNodeRule,
        {
            // Pre element
            deserialize (el) {
                if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$block$2d$tools$2f$lib$2f$_chunks$2d$es$2f$helpers$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["tagName"])(el) !== "pre") return;
                const isCodeEnabled = schema.styles.some((style)=>style.name === "code");
                return {
                    _type: "block",
                    style: "normal",
                    markDefs: [],
                    children: [
                        {
                            ...__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$block$2d$tools$2f$lib$2f$_chunks$2d$es$2f$helpers$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["DEFAULT_SPAN"],
                            marks: isCodeEnabled ? [
                                "code"
                            ] : [],
                            text: el.textContent || ""
                        }
                    ]
                };
            }
        },
        // Blockquote element
        {
            deserialize (el, next) {
                if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$block$2d$tools$2f$lib$2f$_chunks$2d$es$2f$helpers$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["tagName"])(el) !== "blockquote") return;
                const blocks2 = {
                    ...__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$block$2d$tools$2f$lib$2f$_chunks$2d$es$2f$helpers$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["HTML_BLOCK_TAGS"],
                    ...__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$block$2d$tools$2f$lib$2f$_chunks$2d$es$2f$helpers$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["HTML_HEADER_TAGS"]
                };
                delete blocks2.blockquote;
                const nonBlockquoteBlocks = Object.keys(blocks2), children = [];
                return el.childNodes.forEach((node, index)=>{
                    if (el.ownerDocument) if (node.nodeType === 1 && nonBlockquoteBlocks.includes(node.localName.toLowerCase())) {
                        const span = el.ownerDocument.createElement("span"), previousChild = children[children.length - 1];
                        previousChild && previousChild.nodeType === 3 && previousChild.textContent?.trim() && span.appendChild(el.ownerDocument.createTextNode("\r")), node.childNodes.forEach((cn)=>{
                            span.appendChild(cn.cloneNode(!0));
                        }), index !== el.childNodes.length && span.appendChild(el.ownerDocument.createTextNode("\r")), children.push(span);
                    } else children.push(node);
                }), {
                    _type: "block",
                    style: "blockquote",
                    markDefs: [],
                    children: next(children)
                };
            }
        },
        // Block elements
        {
            deserialize (el, next) {
                const blocks2 = {
                    ...__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$block$2d$tools$2f$lib$2f$_chunks$2d$es$2f$helpers$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["HTML_BLOCK_TAGS"],
                    ...__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$block$2d$tools$2f$lib$2f$_chunks$2d$es$2f$helpers$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["HTML_HEADER_TAGS"]
                }, tag = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$block$2d$tools$2f$lib$2f$_chunks$2d$es$2f$helpers$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["tagName"])(el);
                let block = tag ? blocks2[tag] : void 0;
                if (!block) return;
                if (el.parentNode && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$block$2d$tools$2f$lib$2f$_chunks$2d$es$2f$helpers$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["tagName"])(el.parentNode) === "li") return next(el.childNodes);
                const blockStyle = block.style;
                return schema.styles.some((style)=>style.name === blockStyle) || (block = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$block$2d$tools$2f$lib$2f$_chunks$2d$es$2f$helpers$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["DEFAULT_BLOCK"]), {
                    ...block,
                    children: next(el.childNodes)
                };
            }
        },
        // Ignore span tags
        {
            deserialize (el, next) {
                const tag = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$block$2d$tools$2f$lib$2f$_chunks$2d$es$2f$helpers$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["tagName"])(el);
                if (!(!tag || !(tag in __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$block$2d$tools$2f$lib$2f$_chunks$2d$es$2f$helpers$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["HTML_SPAN_TAGS"]))) return next(el.childNodes);
            }
        },
        // Ignore div tags
        {
            deserialize (el, next) {
                if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$block$2d$tools$2f$lib$2f$_chunks$2d$es$2f$helpers$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["tagName"])(el) === "div") return next(el.childNodes);
            }
        },
        // Ignore list containers
        {
            deserialize (el, next) {
                const tag = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$block$2d$tools$2f$lib$2f$_chunks$2d$es$2f$helpers$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["tagName"])(el);
                if (!(!tag || !(tag in __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$block$2d$tools$2f$lib$2f$_chunks$2d$es$2f$helpers$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["HTML_LIST_CONTAINER_TAGS"]))) return next(el.childNodes);
            }
        },
        // Deal with br's
        {
            deserialize (el) {
                if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$block$2d$tools$2f$lib$2f$_chunks$2d$es$2f$helpers$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["tagName"])(el) === "br") return {
                    ...__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$block$2d$tools$2f$lib$2f$_chunks$2d$es$2f$helpers$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["DEFAULT_SPAN"],
                    text: `
`
                };
            }
        },
        // Deal with list items
        {
            deserialize (el, next, block) {
                const tag = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$block$2d$tools$2f$lib$2f$_chunks$2d$es$2f$helpers$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["tagName"])(el), listItem = tag ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$block$2d$tools$2f$lib$2f$_chunks$2d$es$2f$helpers$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["HTML_LIST_ITEM_TAGS"][tag] : void 0, parentTag = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$block$2d$tools$2f$lib$2f$_chunks$2d$es$2f$helpers$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["tagName"])(el.parentNode) || "";
                if (!listItem || !el.parentNode || !__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$block$2d$tools$2f$lib$2f$_chunks$2d$es$2f$helpers$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["HTML_LIST_CONTAINER_TAGS"][parentTag]) return;
                const enabledListItem = resolveListItem(schema, parentTag);
                return enabledListItem ? (listItem.listItem = enabledListItem, {
                    ...listItem,
                    children: next(el.childNodes)
                }) : block({
                    _type: "block",
                    children: next(el.childNodes)
                });
            }
        },
        // Deal with decorators - this is a limited set of known html elements that we know how to deserialize
        {
            deserialize (el, next) {
                const decorator = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$block$2d$tools$2f$lib$2f$_chunks$2d$es$2f$helpers$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["HTML_DECORATOR_TAGS"][(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$block$2d$tools$2f$lib$2f$_chunks$2d$es$2f$helpers$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["tagName"])(el) || ""];
                if (!(!decorator || !schema.decorators.some((decoratorType)=>decoratorType.name === decorator))) return {
                    _type: "__decorator",
                    name: decorator,
                    children: next(el.childNodes)
                };
            }
        },
        // Special case for hyperlinks, add annotation (if allowed by schema),
        // If not supported just write out the link text and href in plain text.
        {
            deserialize (el, next) {
                if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$block$2d$tools$2f$lib$2f$_chunks$2d$es$2f$helpers$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["tagName"])(el) !== "a") return;
                const linkEnabled = schema.annotations.some((annotation)=>annotation.name === "link"), href = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$block$2d$tools$2f$lib$2f$_chunks$2d$es$2f$helpers$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isElement"])(el) && el.getAttribute("href");
                return href ? linkEnabled ? {
                    _type: "__annotation",
                    markDef: {
                        _key: options.keyGenerator ? options.keyGenerator() : keyGenerator(),
                        _type: "link",
                        href
                    },
                    children: next(el.childNodes)
                } : el.appendChild(el.ownerDocument.createTextNode(` (${href})`)) && next(el.childNodes) : next(el.childNodes);
            }
        },
        {
            deserialize (el, next) {
                if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$block$2d$tools$2f$lib$2f$_chunks$2d$es$2f$helpers$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isElement"])(el) && ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$block$2d$tools$2f$lib$2f$_chunks$2d$es$2f$helpers$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["tagName"])(el) === "td" || (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$block$2d$tools$2f$lib$2f$_chunks$2d$es$2f$helpers$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["tagName"])(el) === "th")) return {
                    ...__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$block$2d$tools$2f$lib$2f$_chunks$2d$es$2f$helpers$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["DEFAULT_BLOCK"],
                    children: next(el.childNodes)
                };
            }
        },
        {
            deserialize (el) {
                if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$block$2d$tools$2f$lib$2f$_chunks$2d$es$2f$helpers$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isElement"])(el) && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$block$2d$tools$2f$lib$2f$_chunks$2d$es$2f$helpers$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["tagName"])(el) === "img") {
                    const src = el.getAttribute("src") ?? void 0, alt = el.getAttribute("alt") ?? void 0, props = Object.fromEntries(Array.from(el.attributes).map((attr)=>[
                            attr.name,
                            attr.value
                        ])), ancestorOfLonelyChild = el?.parentElement?.parentElement?.getAttribute("data-lonely-child"), ancestorOfListItem = el.closest("li") !== null;
                    if (ancestorOfLonelyChild && !ancestorOfListItem) {
                        const image2 = options.matchers?.image?.({
                            context: {
                                schema,
                                keyGenerator: options.keyGenerator ?? keyGenerator
                            },
                            props: {
                                ...props,
                                ...src ? {
                                    src
                                } : {},
                                ...alt ? {
                                    alt
                                } : {}
                            }
                        });
                        if (image2) return {
                            _type: "__block",
                            block: image2
                        };
                    }
                    const inlineImage = options.matchers?.inlineImage?.({
                        context: {
                            schema,
                            keyGenerator: options.keyGenerator ?? keyGenerator
                        },
                        props: {
                            ...props,
                            ...src ? {
                                src
                            } : {},
                            ...alt ? {
                                alt
                            } : {}
                        }
                    });
                    if (inlineImage) return inlineImage;
                    const image = options.matchers?.image?.({
                        context: {
                            schema,
                            keyGenerator: options.keyGenerator ?? keyGenerator
                        },
                        props: {
                            ...props,
                            ...src ? {
                                src
                            } : {},
                            ...alt ? {
                                alt
                            } : {}
                        }
                    });
                    if (image) return {
                        _type: "__block",
                        block: image
                    };
                }
            }
        }
    ];
}
function isEmphasis(el) {
    const style = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$block$2d$tools$2f$lib$2f$_chunks$2d$es$2f$helpers$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isElement"])(el) && el.getAttribute("style");
    return /font-style:italic/.test(style || "");
}
function isStrong(el) {
    const style = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$block$2d$tools$2f$lib$2f$_chunks$2d$es$2f$helpers$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isElement"])(el) && el.getAttribute("style");
    return /font-weight:700/.test(style || "") || /font-weight:600/.test(style || "");
}
function isUnderline(el) {
    const style = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$block$2d$tools$2f$lib$2f$_chunks$2d$es$2f$helpers$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isElement"])(el) && el.getAttribute("style");
    return /text-decoration:underline/.test(style || "");
}
function isNotion(el) {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$block$2d$tools$2f$lib$2f$_chunks$2d$es$2f$helpers$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isElement"])(el) && !!el.getAttribute("data-is-notion");
}
function createNotionRules() {
    return [
        {
            deserialize (el) {
                if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$block$2d$tools$2f$lib$2f$_chunks$2d$es$2f$helpers$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isElement"])(el) && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$block$2d$tools$2f$lib$2f$_chunks$2d$es$2f$helpers$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["tagName"])(el) === "span" && isNotion(el)) {
                    const span = {
                        ...__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$block$2d$tools$2f$lib$2f$_chunks$2d$es$2f$helpers$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["DEFAULT_SPAN"],
                        marks: [],
                        text: el.textContent
                    };
                    return isStrong(el) && span.marks.push("strong"), isUnderline(el) && span.marks.push("underline"), isEmphasis(el) && span.marks.push("em"), span;
                }
            }
        }
    ];
}
function getListItemStyle(el) {
    const style = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$block$2d$tools$2f$lib$2f$_chunks$2d$es$2f$helpers$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isElement"])(el) && el.getAttribute("style");
    if (style && style.match(/lfo\d+/)) return style.match("lfo1") ? "bullet" : "number";
}
function getListItemLevel(el) {
    const style = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$block$2d$tools$2f$lib$2f$_chunks$2d$es$2f$helpers$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isElement"])(el) && el.getAttribute("style");
    if (!style) return;
    const levelMatch = style.match(/level\d+/);
    if (!levelMatch) return;
    const [level] = levelMatch[0].match(/\d/) || [];
    return (level ? Number.parseInt(level, 10) : 1) || 1;
}
function isWordListElement(el) {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$block$2d$tools$2f$lib$2f$_chunks$2d$es$2f$helpers$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isElement"])(el) && el.className ? el.className === "MsoListParagraphCxSpFirst" || el.className === "MsoListParagraphCxSpMiddle" || el.className === "MsoListParagraphCxSpLast" : !1;
}
function createWordRules() {
    return [
        {
            deserialize (el, next) {
                if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$block$2d$tools$2f$lib$2f$_chunks$2d$es$2f$helpers$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["tagName"])(el) === "p" && isWordListElement(el)) return {
                    ...__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$block$2d$tools$2f$lib$2f$_chunks$2d$es$2f$helpers$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["DEFAULT_BLOCK"],
                    listItem: getListItemStyle(el),
                    level: getListItemLevel(el),
                    style: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$block$2d$tools$2f$lib$2f$_chunks$2d$es$2f$helpers$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["BLOCK_DEFAULT_STYLE"],
                    children: next(el.childNodes)
                };
            }
        }
    ];
}
function createRules(schema, options) {
    return [
        ...createWordRules(),
        ...createNotionRules(),
        ...createGDocsRules(schema),
        ...createHTMLRules(schema, options)
    ];
}
class HtmlDeserializer {
    keyGenerator;
    schema;
    rules;
    parseHtml;
    _markDefs = [];
    /**
   * Create a new serializer respecting a Sanity block content type's schema
   *
   * @param blockContentType - Schema type for array containing _at least_ a block child type
   * @param options - Options for the deserialization process
   */ constructor(schema, options = {}){
        const { rules = [], unstable_whitespaceOnPasteMode = "preserve" } = options, standardRules = createRules(schema, {
            keyGenerator: options.keyGenerator,
            matchers: options.matchers
        });
        this.schema = schema, this.keyGenerator = options.keyGenerator ?? keyGenerator, this.rules = [
            ...rules,
            ...standardRules
        ];
        const parseHtml = options.parseHtml || (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$block$2d$tools$2f$lib$2f$_chunks$2d$es$2f$helpers$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["defaultParseHtml"])();
        this.parseHtml = (html)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$block$2d$tools$2f$lib$2f$_chunks$2d$es$2f$helpers$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["preprocess"])(html, parseHtml, {
                unstable_whitespaceOnPasteMode
            }).body;
    }
    /**
   * Deserialize HTML.
   *
   * @param html - The HTML to deserialize, as a string
   * @returns Array of blocks - either portable text blocks or other allowed blocks
   */ deserialize = (html)=>{
        this._markDefs = [];
        const { parseHtml } = this, fragment = parseHtml(html), children = Array.from(fragment.childNodes), blocks2 = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$block$2d$tools$2f$lib$2f$_chunks$2d$es$2f$helpers$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["trimWhitespace"])(this.schema, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$block$2d$tools$2f$lib$2f$_chunks$2d$es$2f$helpers$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["flattenNestedBlocks"])({
            schema: this.schema
        }, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$block$2d$tools$2f$lib$2f$_chunks$2d$es$2f$helpers$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ensureRootIsBlocks"])(this.schema, this.deserializeElements(children))));
        return this._markDefs.length > 0 && blocks2.filter((block)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$schema$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isTextBlock"])({
                schema: this.schema
            }, block)).forEach((block)=>{
            block.markDefs = block.markDefs || [], block.markDefs = block.markDefs.concat(this._markDefs.filter((def)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2f$flatten$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"])(block.children.map((child)=>child.marks || [])).includes(def._key)));
        }), blocks2.map((block)=>(block._type === "block" && (block._type = this.schema.block.name), block));
    };
    /**
   * Deserialize an array of DOM elements.
   *
   * @param elements - Array of DOM elements to deserialize
   * @returns
   */ deserializeElements = (elements = [])=>{
        let nodes = [];
        return elements.forEach((element)=>{
            nodes = nodes.concat(this.deserializeElement(element));
        }), nodes;
    };
    /**
   * Deserialize a DOM element
   *
   * @param element - Deserialize a DOM element
   * @returns
   */ deserializeElement = (element)=>{
        const next = (elements)=>{
            if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$block$2d$tools$2f$lib$2f$_chunks$2d$es$2f$helpers$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isNodeList"])(elements)) return this.deserializeElements(Array.from(elements));
            if (Array.isArray(elements)) return this.deserializeElements(elements);
            if (elements) return this.deserializeElement(elements);
        }, block = (props)=>({
                _type: "__block",
                block: props
            });
        let node;
        for(let i = 0; i < this.rules.length; i++){
            const rule = this.rules[i];
            if (!rule.deserialize) continue;
            const ret = rule.deserialize(element, next, block), type = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$block$2d$tools$2f$lib$2f$_chunks$2d$es$2f$helpers$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["resolveJsType"])(ret);
            if (type !== "array" && type !== "object" && type !== "null" && type !== "undefined") throw new Error(`A rule returned an invalid deserialized representation: "${node}".`);
            if (ret !== void 0) {
                {
                    if (ret === null) throw new Error("Deserializer rule returned `null`");
                    Array.isArray(ret) ? node = ret : (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$block$2d$tools$2f$lib$2f$_chunks$2d$es$2f$helpers$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isPlaceholderDecorator"])(ret) ? node = this.deserializeDecorator(ret) : (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$block$2d$tools$2f$lib$2f$_chunks$2d$es$2f$helpers$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isPlaceholderAnnotation"])(ret) ? node = this.deserializeAnnotation(ret) : node = ret;
                }
                if (ret && !Array.isArray(ret) && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$block$2d$tools$2f$lib$2f$_chunks$2d$es$2f$helpers$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isMinimalBlock"])(ret) && "listItem" in ret) {
                    let parent = element.parentNode?.parentNode;
                    for(; parent && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$block$2d$tools$2f$lib$2f$_chunks$2d$es$2f$helpers$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["tagName"])(parent) === "li";)parent = parent.parentNode?.parentNode, ret.level = ret.level ? ret.level + 1 : 1;
                }
                ret && !Array.isArray(ret) && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$block$2d$tools$2f$lib$2f$_chunks$2d$es$2f$helpers$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isMinimalBlock"])(ret) && ret.style === "blockquote" && ret.children.forEach((child, index)=>{
                    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$block$2d$tools$2f$lib$2f$_chunks$2d$es$2f$helpers$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isMinimalSpan"])(child) && child.text === "\r" && (child.text = `
`, (index === 0 || index === ret.children.length - 1) && ret.children.splice(index, 1));
                });
                break;
            }
        }
        return node || next(element.childNodes) || [];
    };
    /**
   * Deserialize a `__decorator` type
   * (an internal made up type to process decorators exclusively)
   *
   * @param decorator -
   * @returns array of ...
   */ deserializeDecorator = (decorator)=>{
        const { name } = decorator, applyDecorator = (node)=>{
            if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$block$2d$tools$2f$lib$2f$_chunks$2d$es$2f$helpers$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isPlaceholderDecorator"])(node)) return this.deserializeDecorator(node);
            if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$block$2d$tools$2f$lib$2f$_chunks$2d$es$2f$helpers$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isMinimalSpan"])(node)) node.marks = node.marks || [], node.text.trim() && node.marks.unshift(name);
            else if ("children" in node && Array.isArray(node.children)) {
                const block = node;
                block.children = block.children.map(applyDecorator);
            }
            return node;
        };
        return decorator.children.reduce((children, node)=>{
            const ret = applyDecorator(node);
            return Array.isArray(ret) ? children.concat(ret) : (children.push(ret), children);
        }, []);
    };
    /**
   * Deserialize a `__annotation` object.
   * (an internal made up type to process annotations exclusively)
   *
   * @param annotation -
   * @returns Array of...
   */ deserializeAnnotation = (annotation)=>{
        const { markDef } = annotation;
        this._markDefs.push(markDef);
        const applyAnnotation = (node)=>{
            if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$block$2d$tools$2f$lib$2f$_chunks$2d$es$2f$helpers$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isPlaceholderAnnotation"])(node)) return this.deserializeAnnotation(node);
            if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$block$2d$tools$2f$lib$2f$_chunks$2d$es$2f$helpers$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isMinimalSpan"])(node)) node.marks = node.marks || [], node.text.trim() && node.marks.unshift(markDef._key);
            else if ("children" in node && Array.isArray(node.children)) {
                const block = node;
                block.children = block.children.map(applyAnnotation);
            }
            return node;
        };
        return annotation.children.reduce((children, node)=>{
            const ret = applyAnnotation(node);
            return Array.isArray(ret) ? children.concat(ret) : (children.push(ret), children);
        }, []);
    };
}
function normalizeBlock(node, options = {}) {
    const schema = {
        block: {
            name: options.blockTypeName || "block"
        },
        span: {
            name: "span"
        },
        styles: [],
        lists: [],
        decorators: [],
        annotations: [],
        blockObjects: [],
        inlineObjects: []
    };
    if (node._type !== (options.blockTypeName || "block")) return "_key" in node ? node : {
        ...node,
        _key: options.keyGenerator ? options.keyGenerator() : keyGenerator()
    };
    const block = {
        _key: options.keyGenerator ? options.keyGenerator() : keyGenerator(),
        children: [],
        markDefs: [],
        ...node
    }, lastChild = block.children[block.children.length - 1];
    if (!lastChild) return block.children = [
        {
            _type: "span",
            _key: options.keyGenerator ? options.keyGenerator() : keyGenerator(),
            text: "",
            marks: []
        }
    ], block;
    const usedMarkDefs = [], allowedDecorators = options.allowedDecorators && Array.isArray(options.allowedDecorators) ? options.allowedDecorators : !1;
    return block.children = block.children.reduce((acc, child)=>{
        const previousChild = acc[acc.length - 1];
        return previousChild && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$schema$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isSpan"])({
            schema
        }, child) && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$schema$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isSpan"])({
            schema
        }, previousChild) && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2f$isEqual$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"])(previousChild.marks, child.marks) ? (lastChild && lastChild === child && child.text === "" && block.children.length > 1 || (previousChild.text += child.text), acc) : (acc.push(child), acc);
    }, []).map((child)=>{
        if (!child) throw new Error("missing child");
        return child._key = options.keyGenerator ? options.keyGenerator() : keyGenerator(), (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$schema$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isSpan"])({
            schema
        }, child) && (child.marks ? allowedDecorators && (child.marks = child.marks.filter((mark)=>{
            const isAllowed = allowedDecorators.includes(mark), isUsed = block.markDefs?.some((def)=>def._key === mark);
            return isAllowed || isUsed;
        })) : child.marks = [], usedMarkDefs.push(...child.marks)), child;
    }), block.markDefs = (block.markDefs || []).filter((markDef)=>usedMarkDefs.includes(markDef._key)), block;
}
function htmlToBlocks(html, schemaType, options = {}) {
    const schema = isSanitySchema(schemaType) ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$sanity$2d$bridge$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["sanitySchemaToPortableTextSchema"])(schemaType) : schemaType;
    return new HtmlDeserializer(schema, options).deserialize(html).map((block)=>normalizeBlock(block, {
            keyGenerator: options.keyGenerator
        }));
}
function isSanitySchema(schema) {
    return schema.hasOwnProperty("jsonType");
}
;
 //# sourceMappingURL=index.js.map
}}),
"[project]/node_modules/@portabletext/to-html/dist/pt-to-html.mjs [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "defaultComponents": (()=>defaultComponents),
    "escapeHTML": (()=>escapeHTML),
    "mergeComponents": (()=>mergeComponents),
    "toHTML": (()=>toHTML),
    "uriLooksSafe": (()=>uriLooksSafe)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$toolkit$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@portabletext/toolkit/dist/index.js [app-ssr] (ecmascript)");
;
const allowedProtocols = [
    "http",
    "https",
    "mailto",
    "tel"
], charMap = {
    "&": "amp",
    "<": "lt",
    ">": "gt",
    '"': "quot",
    "'": "#x27"
};
function escapeHTML(str) {
    return replaceMultipleSpaces(str.replace(/[&<>"']/g, (s)=>`&${charMap[s]};`));
}
function replaceMultipleSpaces(str) {
    return str.replace(/ {2,}/g, (match)=>`${"&nbsp;".repeat(match.length - 1)} `);
}
function uriLooksSafe(uri) {
    const url = (uri || "").trim(), first = url.charAt(0);
    if (first === "#" || first === "/") return !0;
    const colonIndex = url.indexOf(":");
    if (colonIndex === -1) return !0;
    const proto = url.slice(0, colonIndex).toLowerCase();
    if (allowedProtocols.indexOf(proto) !== -1) return !0;
    const queryIndex = url.indexOf("?");
    if (queryIndex !== -1 && colonIndex > queryIndex) return !0;
    const hashIndex = url.indexOf("#");
    return hashIndex !== -1 && colonIndex > hashIndex;
}
const defaultLists = {
    number: ({ children })=>`<ol>${children}</ol>`,
    bullet: ({ children })=>`<ul>${children}</ul>`
}, DefaultListItem = ({ children })=>`<li>${children}</li>`, link = ({ children, value })=>{
    const href = (value == null ? void 0 : value.href) || "";
    return uriLooksSafe(href) ? `<a href="${escapeHTML(href)}">${children}</a>` : children;
}, defaultMarks = {
    em: ({ children })=>`<em>${children}</em>`,
    strong: ({ children })=>`<strong>${children}</strong>`,
    code: ({ children })=>`<code>${children}</code>`,
    underline: ({ children })=>`<span style="text-decoration:underline">${children}</span>`,
    "strike-through": ({ children })=>`<del>${children}</del>`,
    link
}, getTemplate = (type, prop)=>`Unknown ${type}, specify a component for it in the \`components.${prop}\` option`, unknownTypeWarning = (typeName)=>getTemplate(`block type "${typeName}"`, "types"), unknownMarkWarning = (markType)=>getTemplate(`mark type "${markType}"`, "marks"), unknownBlockStyleWarning = (blockStyle)=>getTemplate(`block style "${blockStyle}"`, "block"), unknownListStyleWarning = (listStyle)=>getTemplate(`list style "${listStyle}"`, "list"), unknownListItemStyleWarning = (listStyle)=>getTemplate(`list item style "${listStyle}"`, "listItem");
function printWarning(message) {
    console.warn(message);
}
const DefaultUnknownType = ({ value, isInline })=>{
    const warning = unknownTypeWarning(value._type);
    return isInline ? `<span style="display:none">${warning}</span>` : `<div style="display:none">${warning}</div>`;
}, DefaultUnknownMark = ({ markType, children })=>`<span class="unknown__pt__mark__${markType}">${children}</span>`, DefaultUnknownBlockStyle = ({ children })=>`<p>${children}</p>`, DefaultUnknownList = ({ children })=>`<ul>${children}</ul>`, DefaultUnknownListItem = ({ children })=>`<li>${children}</li>`, DefaultHardBreak = ()=>"<br/>", defaultPortableTextBlockStyles = {
    normal: ({ children })=>`<p>${children}</p>`,
    blockquote: ({ children })=>`<blockquote>${children}</blockquote>`,
    h1: ({ children })=>`<h1>${children}</h1>`,
    h2: ({ children })=>`<h2>${children}</h2>`,
    h3: ({ children })=>`<h3>${children}</h3>`,
    h4: ({ children })=>`<h4>${children}</h4>`,
    h5: ({ children })=>`<h5>${children}</h5>`,
    h6: ({ children })=>`<h6>${children}</h6>`
}, defaultComponents = {
    types: {},
    block: defaultPortableTextBlockStyles,
    marks: defaultMarks,
    list: defaultLists,
    listItem: DefaultListItem,
    hardBreak: DefaultHardBreak,
    escapeHTML,
    unknownType: DefaultUnknownType,
    unknownMark: DefaultUnknownMark,
    unknownList: DefaultUnknownList,
    unknownListItem: DefaultUnknownListItem,
    unknownBlockStyle: DefaultUnknownBlockStyle
};
function mergeComponents(parent, overrides) {
    const { block, list, listItem, marks, types, ...rest } = overrides;
    return {
        ...parent,
        block: mergeDeeply(parent, overrides, "block"),
        list: mergeDeeply(parent, overrides, "list"),
        listItem: mergeDeeply(parent, overrides, "listItem"),
        marks: mergeDeeply(parent, overrides, "marks"),
        types: mergeDeeply(parent, overrides, "types"),
        ...rest
    };
}
function mergeDeeply(parent, overrides, key) {
    const override = overrides[key], parentVal = parent[key];
    return typeof override == "function" || override && typeof parentVal == "function" ? override : override ? {
        ...parentVal,
        ...override
    } : parentVal;
}
function toHTML(value, options = {}) {
    const { components: componentOverrides, onMissingComponent: missingComponentHandler = printWarning } = options, handleMissingComponent = missingComponentHandler || noop, blocks = Array.isArray(value) ? value : [
        value
    ], nested = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$toolkit$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["nestLists"])(blocks, "html"), components = componentOverrides ? mergeComponents(defaultComponents, componentOverrides) : defaultComponents, renderNode = getNodeRenderer(components, handleMissingComponent);
    return nested.map((node, index)=>renderNode({
            node,
            index,
            isInline: !1,
            renderNode
        })).join("");
}
const getNodeRenderer = (components, handleMissingComponent)=>{
    function renderNode(options) {
        const { node, index, isInline } = options;
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$toolkit$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isPortableTextToolkitList"])(node) ? renderList(node, index) : (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$toolkit$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isPortableTextListItemBlock"])(node) ? renderListItem(node, index) : (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$toolkit$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isPortableTextToolkitSpan"])(node) ? renderSpan(node) : (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$toolkit$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isPortableTextBlock"])(node) ? renderBlock(node, index, isInline) : (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$toolkit$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isPortableTextToolkitTextNode"])(node) ? renderText(node) : renderCustomBlock(node, index, isInline);
    }
    function renderListItem(node, index) {
        const tree = serializeBlock({
            node,
            index,
            isInline: !1,
            renderNode
        }), renderer = components.listItem, itemHandler = (typeof renderer == "function" ? renderer : renderer[node.listItem]) || components.unknownListItem;
        if (itemHandler === components.unknownListItem) {
            const style = node.listItem || "bullet";
            handleMissingComponent(unknownListItemStyleWarning(style), {
                type: style,
                nodeType: "listItemStyle"
            });
        }
        let children = tree.children;
        if (node.style && node.style !== "normal") {
            const { listItem, ...blockNode } = node;
            children = renderNode({
                node: blockNode,
                index,
                isInline: !1
            });
        }
        return itemHandler({
            value: node,
            index,
            isInline: !1,
            renderNode,
            children
        });
    }
    function renderList(node, index) {
        const children = node.children.map((child, childIndex)=>renderNode({
                node: child._key ? child : {
                    ...child,
                    _key: `li-${index}-${childIndex}`
                },
                index: childIndex,
                isInline: !1
            })), component = components.list, list = (typeof component == "function" ? component : component[node.listItem]) || components.unknownList;
        if (list === components.unknownList) {
            const style = node.listItem || "bullet";
            handleMissingComponent(unknownListStyleWarning(style), {
                nodeType: "listStyle",
                type: style
            });
        }
        return list({
            value: node,
            index,
            isInline: !1,
            renderNode,
            children: children.join("")
        });
    }
    function renderSpan(node) {
        const { markDef, markType, markKey } = node, span = components.marks[markType] || components.unknownMark, children = node.children.map((child, childIndex)=>renderNode({
                node: child,
                index: childIndex,
                isInline: !0
            }));
        return span === components.unknownMark && handleMissingComponent(unknownMarkWarning(markType), {
            nodeType: "mark",
            type: markType
        }), span({
            text: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$toolkit$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["spanToPlainText"])(node),
            value: markDef,
            markType,
            markKey,
            renderNode,
            children: children.join("")
        });
    }
    function renderBlock(node, index, isInline) {
        const { _key, ...props } = serializeBlock({
            node,
            index,
            isInline,
            renderNode
        }), style = props.node.style || "normal", block = (typeof components.block == "function" ? components.block : components.block[style]) || components.unknownBlockStyle;
        return block === components.unknownBlockStyle && handleMissingComponent(unknownBlockStyleWarning(style), {
            nodeType: "blockStyle",
            type: style
        }), block({
            ...props,
            value: props.node,
            renderNode
        });
    }
    function renderText(node) {
        if (node.text === `
`) {
            const hardBreak = components.hardBreak;
            return hardBreak ? hardBreak() : `
`;
        }
        return components.escapeHTML(node.text);
    }
    function renderCustomBlock(value, index, isInline) {
        const node = components.types[value._type];
        return node || handleMissingComponent(unknownTypeWarning(value._type), {
            nodeType: "block",
            type: value._type
        }), (node || components.unknownType)({
            value,
            isInline,
            index,
            renderNode
        });
    }
    return renderNode;
};
function serializeBlock(options) {
    const { node, index, isInline, renderNode } = options, children = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$toolkit$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["buildMarksTree"])(node).map((child, i)=>renderNode({
            node: child,
            isInline: !0,
            index: i,
            renderNode
        }));
    return {
        _key: node._key || `block-${index}`,
        children: children.join(""),
        index,
        isInline,
        node
    };
}
function noop() {}
;
 //# sourceMappingURL=pt-to-html.mjs.map
}}),
"[project]/node_modules/@portabletext/patches/dist/index.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "applyAll": (()=>applyAll),
    "diffMatchPatch": (()=>diffMatchPatch),
    "insert": (()=>insert),
    "prefixPath": (()=>prefixPath),
    "set": (()=>set),
    "setIfMissing": (()=>setIfMissing),
    "unset": (()=>unset)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2f$findIndex$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/lodash/findIndex.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2f$clone$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/lodash/clone.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2f$omit$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/lodash/omit.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$sanity$2f$diff$2d$match$2d$patch$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@sanity/diff-match-patch/dist/index.js [app-ssr] (ecmascript)");
;
;
;
;
const BEFORE = "before", AFTER = "after";
function insert$1(array, position, index, ...args) {
    if (position !== BEFORE && position !== AFTER) throw new Error(`Invalid position "${position}", must be either ${BEFORE} or ${AFTER}`);
    const items = flatten(...args);
    if (array.length === 0) return items;
    const len = array.length, idx = Math.abs((len + index) % len) % len, normalizedIdx = position === "after" ? idx + 1 : idx, copy = array.slice();
    return copy.splice(normalizedIdx, 0, ...flatten(items)), copy;
}
function flatten(...values) {
    return values.reduce((prev, item)=>prev.concat(item), []);
}
function findTargetIndex(array, pathSegment) {
    if (typeof pathSegment == "number") return pathSegment;
    const index = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2f$findIndex$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"])(array, pathSegment);
    return index === -1 ? !1 : index;
}
function applyPatchToArray(value, patch) {
    const nextValue = value.slice();
    if (patch.path.length === 0) {
        if (patch.type === "setIfMissing") {
            if (!Array.isArray(patch.value)) throw new Error("Cannot set value of an array to a non-array");
            return value === void 0 ? patch.value : value;
        }
        if (patch.type === "set") {
            if (!Array.isArray(patch.value)) throw new Error("Cannot set value of an array to a non-array");
            return patch.value;
        }
        if (patch.type === "unset") return;
        throw new Error(`Invalid array operation: ${patch.type}`);
    }
    const [head, ...tail] = patch.path, index = findTargetIndex(value, head);
    if (index === !1) return nextValue;
    if (tail.length === 0) {
        if (patch.type === "insert") {
            const { position, items } = patch;
            return insert$1(value, position, index, items);
        } else if (patch.type === "unset") {
            if (typeof index != "number") throw new Error(`Expected array index to be a number, instead got "${index}"`);
            return nextValue.splice(index, 1), nextValue;
        }
    }
    return nextValue[index] = applyPatch(nextValue[index], {
        ...patch,
        path: tail
    }), nextValue;
}
function applyPatchToNumber(value, patch) {
    if (patch.path.length > 0) throw new Error(`Cannot apply deep operations on primitive values. Received patch with type "${patch.type}" and path "${patch.path.map((path)=>JSON.stringify(path)).join(".")} that targeted the value "${JSON.stringify(value)}"`);
    if (patch.type === "set") return patch.value;
    if (patch.type === "setIfMissing") return value === void 0 ? patch.value : value;
    if (patch.type !== "unset") {
        if (patch.type === "inc") {
            if (typeof patch.value != "number") throw new Error("Cannot increment with a non-number");
            return value + patch.value;
        }
        if (patch.type === "dec") {
            if (typeof patch.value != "number") throw new Error("Cannot decrement with a non-number");
            return value - patch.value;
        }
        throw new Error(`Received patch of unsupported type: "${JSON.stringify(patch.type)}" for number. This is most likely a bug.`);
    }
}
function applyPatchToObject(value, patch) {
    const nextValue = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2f$clone$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"])(value);
    if (patch.path.length === 0) {
        if (patch.type === "set") {
            if (typeof patch.value == "object" && patch.value !== null && !Array.isArray(patch.value)) return patch.value;
            throw new Error("Cannot set value of an object to a non-object");
        }
        if (patch.type === "unset") return;
        throw new Error(`Invalid object operation: ${patch.type}`);
    }
    const [head, ...tail] = patch.path;
    if (typeof head != "string") throw new Error(`Expected field name to be a string, instead got: ${head}`);
    return tail.length === 0 && patch.type === "unset" ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2f$omit$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"])(nextValue, head) : (!(head in nextValue) && tail.length > 0 || (nextValue[head] = applyPatch(nextValue[head], {
        ...patch,
        path: tail
    })), nextValue);
}
function applyPatchToUnknown(value, patch) {
    if (patch.path.length > 0) throw new Error(`Cannot apply deep operations on primitive values. Received patch with type "${patch.type}" and path "${patch.path.map((path)=>JSON.stringify(path)).join(".")} that targeted the value "${JSON.stringify(value)}"`);
    if (patch.type === "set") return patch.value;
    if (patch.type === "setIfMissing") return value === void 0 ? patch.value : value;
    if (patch.type !== "unset") throw new Error(`Received patch of unsupported type: "${JSON.stringify(patch.type)}" for primitives. This is most likely a bug.`);
}
function applyPatchToString(value, patch) {
    if (patch.path.length > 0) throw new Error(`Cannot apply deep operations on string values. Received patch with type "${patch.type}" and path "${patch.path.join(".")} that targeted the value "${JSON.stringify(value)}"`);
    if (patch.type === "diffMatchPatch") {
        const [result] = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$sanity$2f$diff$2d$match$2d$patch$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["applyPatches"])((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$sanity$2f$diff$2d$match$2d$patch$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["parsePatch"])(patch.value), value, {
            allowExceedingIndices: !0
        });
        return result;
    }
    if (patch.type === "setIfMissing") return value === void 0 ? patch.value : value;
    if (patch.type === "set") return patch.value;
    if (patch.type !== "unset") throw new Error(`Received patch of unsupported type: "${JSON.stringify(patch.type)}" for string. This is most likely a bug.`);
}
function applyAll(value, patches) {
    return patches.reduce(applyPatch, value);
}
function applyPatch(value, patch) {
    return Array.isArray(value) ? applyPatchToArray(value, patch) : typeof value == "string" ? applyPatchToString(value, patch) : isObject(value) ? applyPatchToObject(value, patch) : typeof value == "number" ? applyPatchToNumber(value, patch) : applyPatchToUnknown(value, patch);
}
function isObject(value) {
    return typeof value == "object" && value !== null && !Array.isArray(value);
}
function setIfMissing(value, path = []) {
    return {
        type: "setIfMissing",
        path,
        value
    };
}
function diffMatchPatch(currentValue, nextValue, path = []) {
    const patches = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$sanity$2f$diff$2d$match$2d$patch$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["makePatches"])(currentValue, nextValue), patch = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$sanity$2f$diff$2d$match$2d$patch$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["stringifyPatches"])(patches);
    return {
        type: "diffMatchPatch",
        path,
        value: patch
    };
}
function insert(items, position, path = []) {
    return {
        type: "insert",
        path,
        position,
        items
    };
}
function set(value, path = []) {
    return {
        type: "set",
        path,
        value
    };
}
function unset(path = []) {
    return {
        type: "unset",
        path
    };
}
function prefixPath(patch, segment) {
    return {
        ...patch,
        path: [
            segment,
            ...patch.path
        ]
    };
}
;
 //# sourceMappingURL=index.js.map
}}),
"[project]/node_modules/@portabletext/keyboard-shortcuts/dist/index.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "blockquote": (()=>blockquote),
    "bold": (()=>bold),
    "code": (()=>code),
    "createKeyboardShortcut": (()=>createKeyboardShortcut),
    "h1": (()=>h1),
    "h2": (()=>h2),
    "h3": (()=>h3),
    "h4": (()=>h4),
    "h5": (()=>h5),
    "h6": (()=>h6),
    "italic": (()=>italic),
    "link": (()=>link),
    "normal": (()=>normal),
    "redo": (()=>redo),
    "strikeThrough": (()=>strikeThrough),
    "underline": (()=>underline),
    "undo": (()=>undo)
});
const IS_APPLE = typeof window < "u" && /Mac|iPod|iPhone|iPad/.test(window.navigator.userAgent);
function isKeyboardShortcut(definition, event) {
    return isCorrectModifiers(definition, event) ? definition.code !== void 0 && definition.code.toLowerCase() === event.code.toLowerCase() ? !0 : definition.key !== void 0 && definition.key.toLowerCase() === event.key.toLowerCase() : !1;
}
function isCorrectModifiers(definition, event) {
    return (definition.ctrl === event.ctrlKey || definition.ctrl === void 0) && (definition.meta === event.metaKey || definition.meta === void 0) && (definition.shift === event.shiftKey || definition.shift === void 0) && (definition.alt === event.altKey || definition.alt === void 0);
}
function createKeyboardShortcut(definition) {
    if (IS_APPLE) {
        const appleDefinition = definition.apple ?? definition.default, firstDefinition2 = appleDefinition.at(0);
        return {
            guard: (event)=>appleDefinition.some((definition2)=>isKeyboardShortcut(definition2, event)),
            keys: [
                ...firstDefinition2?.meta ? [
                    "\u2318"
                ] : [],
                ...firstDefinition2?.ctrl ? [
                    "Ctrl"
                ] : [],
                ...firstDefinition2?.alt ? [
                    "Option"
                ] : [],
                ...firstDefinition2?.shift ? [
                    "Shift"
                ] : [],
                ...firstDefinition2?.key !== void 0 ? [
                    firstDefinition2.key
                ] : firstDefinition2?.code !== void 0 ? [
                    firstDefinition2.code
                ] : []
            ]
        };
    }
    const firstDefinition = definition.default.at(0);
    return {
        guard: (event)=>definition.default.some((definition2)=>isKeyboardShortcut(definition2, event)),
        keys: [
            ...firstDefinition?.meta ? [
                "Meta"
            ] : [],
            ...firstDefinition?.ctrl ? [
                "Ctrl"
            ] : [],
            ...firstDefinition?.alt ? [
                "Alt"
            ] : [],
            ...firstDefinition?.shift ? [
                "Shift"
            ] : [],
            ...firstDefinition?.key !== void 0 ? [
                firstDefinition.key
            ] : firstDefinition?.code !== void 0 ? [
                firstDefinition.code
            ] : []
        ]
    };
}
const bold = createKeyboardShortcut({
    default: [
        {
            key: "B",
            alt: !1,
            ctrl: !0,
            meta: !1,
            shift: !1
        }
    ],
    apple: [
        {
            key: "B",
            alt: !1,
            ctrl: !1,
            meta: !0,
            shift: !1
        }
    ]
}), italic = createKeyboardShortcut({
    default: [
        {
            key: "I",
            alt: !1,
            ctrl: !0,
            meta: !1,
            shift: !1
        }
    ],
    apple: [
        {
            key: "I",
            alt: !1,
            ctrl: !1,
            meta: !0,
            shift: !1
        }
    ]
}), code = createKeyboardShortcut({
    default: [
        {
            key: "'",
            alt: !1,
            ctrl: !0,
            meta: !1,
            shift: !1
        }
    ],
    apple: [
        {
            key: "'",
            alt: !1,
            ctrl: !1,
            meta: !0,
            shift: !1
        }
    ]
}), underline = createKeyboardShortcut({
    default: [
        {
            key: "U",
            alt: !1,
            ctrl: !0,
            meta: !1,
            shift: !1
        }
    ],
    apple: [
        {
            key: "U",
            alt: !1,
            ctrl: !1,
            meta: !0,
            shift: !1
        }
    ]
}), strikeThrough = createKeyboardShortcut({
    default: [
        {
            key: "X",
            alt: !1,
            ctrl: !0,
            meta: !1,
            shift: !0
        }
    ],
    apple: [
        {
            key: "X",
            alt: !1,
            ctrl: !1,
            meta: !0,
            shift: !0
        }
    ]
}), link = createKeyboardShortcut({
    default: [
        {
            key: "K",
            alt: !1,
            ctrl: !0,
            meta: !1,
            shift: !1
        }
    ],
    apple: [
        {
            key: "K",
            alt: !1,
            ctrl: !1,
            meta: !0,
            shift: !1
        }
    ]
}), normal = createKeyboardShortcut({
    default: [
        {
            key: "0",
            code: "Digit0",
            alt: !0,
            ctrl: !0,
            meta: !1,
            shift: !1
        },
        {
            key: "0",
            code: "Numpad0",
            alt: !0,
            ctrl: !0,
            meta: !1,
            shift: !1
        }
    ],
    apple: [
        {
            key: "0",
            code: "Digit0",
            alt: !0,
            ctrl: !1,
            meta: !0,
            shift: !1
        },
        {
            key: "0",
            code: "Numpad0",
            alt: !0,
            ctrl: !1,
            meta: !0,
            shift: !1
        }
    ]
}), h1 = createKeyboardShortcut({
    default: [
        {
            key: "1",
            code: "Digit1",
            alt: !0,
            ctrl: !0,
            meta: !1,
            shift: !1
        },
        {
            key: "1",
            code: "Numpad1",
            alt: !0,
            ctrl: !0,
            meta: !1,
            shift: !1
        }
    ],
    apple: [
        {
            key: "1",
            code: "Digit1",
            alt: !0,
            ctrl: !1,
            meta: !0,
            shift: !1
        },
        {
            key: "1",
            code: "Numpad1",
            alt: !0,
            ctrl: !1,
            meta: !0,
            shift: !1
        }
    ]
}), h2 = createKeyboardShortcut({
    default: [
        {
            key: "2",
            code: "Digit2",
            alt: !0,
            ctrl: !0,
            meta: !1,
            shift: !1
        },
        {
            key: "2",
            code: "Numpad2",
            alt: !0,
            ctrl: !0,
            meta: !1,
            shift: !1
        }
    ],
    apple: [
        {
            key: "2",
            code: "Digit2",
            alt: !0,
            ctrl: !1,
            meta: !0,
            shift: !1
        },
        {
            key: "2",
            code: "Numpad2",
            alt: !0,
            ctrl: !1,
            meta: !0,
            shift: !1
        }
    ]
}), h3 = createKeyboardShortcut({
    default: [
        {
            key: "3",
            code: "Digit3",
            alt: !0,
            ctrl: !0,
            meta: !1,
            shift: !1
        },
        {
            key: "3",
            code: "Numpad3",
            alt: !0,
            ctrl: !0,
            meta: !1,
            shift: !1
        }
    ],
    apple: [
        {
            key: "3",
            code: "Digit3",
            alt: !0,
            ctrl: !1,
            meta: !0,
            shift: !1
        },
        {
            key: "3",
            code: "Numpad3",
            alt: !0,
            ctrl: !1,
            meta: !0,
            shift: !1
        }
    ]
}), h4 = createKeyboardShortcut({
    default: [
        {
            key: "4",
            code: "Digit4",
            alt: !0,
            ctrl: !0,
            meta: !1,
            shift: !1
        },
        {
            key: "4",
            code: "Numpad4",
            alt: !0,
            ctrl: !0,
            meta: !1,
            shift: !1
        }
    ],
    apple: [
        {
            key: "4",
            code: "Digit4",
            alt: !0,
            ctrl: !1,
            meta: !0,
            shift: !1
        },
        {
            key: "4",
            code: "Numpad4",
            alt: !0,
            ctrl: !1,
            meta: !0,
            shift: !1
        }
    ]
}), h5 = createKeyboardShortcut({
    default: [
        {
            key: "5",
            code: "Digit5",
            alt: !0,
            ctrl: !0,
            meta: !1,
            shift: !1
        },
        {
            key: "5",
            code: "Numpad5",
            alt: !0,
            ctrl: !0,
            meta: !1,
            shift: !1
        }
    ],
    apple: [
        {
            key: "5",
            code: "Digit5",
            alt: !0,
            ctrl: !1,
            meta: !0,
            shift: !1
        },
        {
            key: "5",
            code: "Numpad5",
            alt: !0,
            ctrl: !1,
            meta: !0,
            shift: !1
        }
    ]
}), h6 = createKeyboardShortcut({
    default: [
        {
            key: "6",
            code: "Digit6",
            alt: !0,
            ctrl: !0,
            meta: !1,
            shift: !1
        },
        {
            key: "6",
            code: "Numpad6",
            alt: !0,
            ctrl: !0,
            meta: !1,
            shift: !1
        }
    ],
    apple: [
        {
            key: "6",
            code: "Digit6",
            alt: !0,
            ctrl: !1,
            meta: !0,
            shift: !1
        },
        {
            key: "6",
            code: "Numpad6",
            alt: !0,
            ctrl: !1,
            meta: !0,
            shift: !1
        }
    ]
}), blockquote = createKeyboardShortcut({
    default: [
        {
            key: "Q",
            alt: !1,
            ctrl: !0,
            meta: !1,
            shift: !0
        }
    ]
}), undo = createKeyboardShortcut({
    default: [
        {
            key: "Z",
            alt: !1,
            ctrl: !0,
            meta: !1,
            shift: !1
        }
    ],
    apple: [
        {
            key: "Z",
            alt: !1,
            ctrl: !1,
            meta: !0,
            shift: !1
        }
    ]
}), redo = createKeyboardShortcut({
    default: [
        {
            key: "Y",
            alt: !1,
            ctrl: !0,
            meta: !1,
            shift: !1
        },
        {
            key: "Z",
            alt: !1,
            ctrl: !0,
            meta: !1,
            shift: !0
        }
    ],
    apple: [
        {
            key: "Z",
            alt: !1,
            ctrl: !1,
            meta: !0,
            shift: !0
        }
    ]
});
;
 //# sourceMappingURL=index.js.map
}}),

};

//# sourceMappingURL=node_modules_%40portabletext_3c04aa0b._.js.map