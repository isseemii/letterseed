{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"file":"version.mjs","sources":["file:///Users/isseemii/app/letterseed/node_modules/sanity/src/core/version.ts"],"sourcesContent":["import {version} from '../../package.json'\n/**\n * This version is provided by `@sanity/pkg-utils` at build time\n * @hidden\n * @beta\n */\nexport const SANITY_VERSION = process.env.PKG_VERSION || `${version}-dev`\n"],"names":["SANITY_VERSION"],"mappings":";;;AAMO,MAAMA,iBAAiB","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 19, "column": 0}, "map": {"version":3,"file":"generate-help-url.esm.mjs","sources":["file:///Users/isseemii/app/letterseed/node_modules/sanity/src/ui-components/conditionalWrapper/ConditionalWrapper.tsx","file:///Users/isseemii/app/letterseed/node_modules/sanity/src/ui-components/button/Button.tsx","file:///Users/isseemii/app/letterseed/node_modules/sanity/src/ui-components/dialog/Dialog.tsx","file:///Users/isseemii/app/letterseed/node_modules/sanity/src/ui-components/errorBoundary/ErrorBoundary.tsx","file:///Users/isseemii/app/letterseed/node_modules/sanity/src/ui-components/menuButton/MenuButton.tsx","file:///Users/isseemii/app/letterseed/node_modules/sanity/src/core/components/Hotkeys.tsx","file:///Users/isseemii/app/letterseed/node_modules/sanity/src/ui-components/tooltip/constants.ts","file:///Users/isseemii/app/letterseed/node_modules/sanity/src/ui-components/tooltip/Tooltip.tsx","file:///Users/isseemii/app/letterseed/node_modules/sanity/src/ui-components/menuItem/MenuItem.tsx","file:///Users/isseemii/app/letterseed/node_modules/sanity/src/ui-components/popover/Popover.tsx","file:///Users/isseemii/app/letterseed/node_modules/sanity/src/ui-components/tab/Tab.tsx","file:///Users/isseemii/app/letterseed/node_modules/sanity/src/ui-components/tooltipDelayGroupProvider/TooltipDelayGroupProvider.tsx","file:///Users/isseemii/app/letterseed/node_modules/.pnpm/%40sanity%2Bgenerate-help-url%403.0.0/node_modules/%40sanity/generate-help-url/dist/generate-help-url.esm.js"],"sourcesContent":["export type ConditionalWrapperRenderWrapperCallback = (children: React.ReactNode) => React.ReactNode\n\n/**\n * A helper component that conditionally wraps its children in a wrapper component.\n *\n * @internal\n */\nexport function ConditionalWrapper({\n  children,\n  condition,\n  wrapper,\n}: {\n  children: React.ReactNode\n  condition: boolean\n  wrapper: ConditionalWrapperRenderWrapperCallback\n}): React.ReactNode {\n  if (!condition) {\n    return children\n  }\n\n  return wrapper(children)\n}\n","/* eslint-disable no-restricted-imports */\n\nimport {Button as UIButton, type ButtonProps as UIButtonProps} from '@sanity/ui'\nimport {type ForwardedRef, forwardRef, type HTMLProps, useCallback} from 'react'\nimport {styled} from 'styled-components'\n\nimport {Tooltip, type TooltipProps} from '..'\nimport {\n  ConditionalWrapper,\n  type ConditionalWrapperRenderWrapperCallback,\n} from '../conditionalWrapper'\n\ntype BaseButtonProps = Pick<\n  UIButtonProps,\n  | 'as'\n  | 'icon'\n  | 'iconRight'\n  | 'justify'\n  | 'loading'\n  | 'mode'\n  | 'paddingY'\n  | 'selected'\n  | 'tone'\n  | 'type'\n  | 'width'\n> & {\n  size?: 'default' | 'large'\n  radius?: 'full'\n}\n\ntype ButtonWithText = {\n  text: string\n  tooltipProps?: TooltipProps | null\n  icon?: UIButtonProps['icon']\n}\n\ntype IconButton = {\n  text?: undefined\n  icon?: UIButtonProps['icon']\n  /**\n   * When using a button with an icon, tooltipProps are required to enforce consistency in UI.\n   */\n  tooltipProps: TooltipProps | null\n}\n\n/** @internal */\nexport type ButtonProps = BaseButtonProps & (ButtonWithText | IconButton)\n\nconst LARGE_BUTTON_PROPS = {\n  space: 3,\n  padding: 3,\n}\nconst DEFAULT_BUTTON_PROPS = {\n  space: 2,\n  padding: 2,\n}\n\nconst TooltipButtonWrapper = styled.span`\n  display: inline-flex;\n`\n/**\n * Customized Sanity UI <Button> with pre-defined layout options.\n *\n * @internal\n */\nexport const Button = forwardRef(function Button(\n  {\n    size = 'default',\n    mode = 'default',\n    paddingY,\n    tone = 'default',\n    tooltipProps,\n    ...rest\n  }: ButtonProps & Omit<HTMLProps<HTMLButtonElement>, 'as' | 'size' | 'title'>,\n  ref: ForwardedRef<HTMLButtonElement>,\n) {\n  const renderWrapper = useCallback<ConditionalWrapperRenderWrapperCallback>(\n    (children) => {\n      return (\n        <Tooltip content={tooltipProps?.content} portal {...tooltipProps}>\n          {/* This span is needed to make the tooltip work in disabled buttons */}\n          <TooltipButtonWrapper>{children}</TooltipButtonWrapper>\n        </Tooltip>\n      )\n    },\n    [tooltipProps],\n  )\n\n  const sizeProps = size === 'default' ? DEFAULT_BUTTON_PROPS : LARGE_BUTTON_PROPS\n\n  return (\n    <ConditionalWrapper condition={!!tooltipProps} wrapper={renderWrapper}>\n      <UIButton {...rest} {...sizeProps} paddingY={paddingY} ref={ref} mode={mode} tone={tone} />\n    </ConditionalWrapper>\n  )\n})\n","/* eslint-disable no-restricted-imports */\nimport {\n  Box,\n  type BoxHeight,\n  Button as UIButton,\n  Dialog as UIDialog,\n  type DialogProps as UIDialogProps,\n  Flex,\n  Text,\n} from '@sanity/ui'\nimport {type ComponentProps, forwardRef, type HTMLProps, type ReactNode, type Ref} from 'react'\nimport {useTranslation} from 'react-i18next'\n\n/** @internal */\nexport type DialogProps = Pick<\n  UIDialogProps,\n  | '__unstable_autoFocus'\n  | '__unstable_hideCloseButton'\n  | 'contentRef'\n  | 'header'\n  | 'id'\n  | 'onActivate'\n  | 'onClickOutside'\n  | 'onClose'\n  | 'portal'\n  | 'position'\n  | 'scheme'\n  | 'width'\n> & {\n  /**\n   * Dialog body height.\n   * Set this to 'fill' (i.e. 100%) if you want overflow body content to be contained\n   * and not trigger dynamic border visibility.\n   */\n  bodyHeight?: BoxHeight\n  children?: ReactNode\n  zOffset?: number\n  footer?: {\n    cancelButton?: Omit<ComponentProps<typeof UIButton>, 'fontSize' | 'padding'>\n    confirmButton?: Omit<ComponentProps<typeof UIButton>, 'fontSize' | 'padding'>\n    /**\n     * Description to be displayed side by side with the buttons.\n     */\n    description?: string\n  }\n  /**\n   * If enabled, removes all default padding from dialog content.\n   */\n  padding?: boolean\n}\n\n/**\n * Customized Sanity UI <Dialog> that enforces an opinionated footer layout with a max of two buttons (confirm and cancel).\n *\n * @internal\n */\nexport const Dialog = forwardRef(function Dialog(\n  {\n    bodyHeight,\n    children,\n    footer,\n    padding = true,\n    zOffset,\n    ...props\n  }: DialogProps & Pick<HTMLProps<HTMLDivElement>, 'onDragEnter' | 'onDrop'>,\n  ref: Ref<HTMLDivElement>,\n) {\n  const {t} = useTranslation()\n\n  return (\n    <UIDialog\n      {...props}\n      animate\n      zOffset={zOffset}\n      ref={ref}\n      footer={\n        (footer?.confirmButton || footer?.cancelButton) && (\n          <Flex width=\"full\" gap={3} justify=\"flex-end\" padding={3} align=\"center\">\n            {footer?.description && (\n              <Box flex={1} paddingLeft={1}>\n                <Text size={1} muted>\n                  {footer.description}\n                </Text>\n              </Box>\n            )}\n            {props.onClose && (\n              <UIButton\n                mode=\"bleed\"\n                padding={2}\n                text={t('common.dialog.cancel-button.text')}\n                tone=\"default\"\n                onClick={props.onClose}\n                data-testid=\"cancel-button\"\n                {...footer.cancelButton}\n              />\n            )}\n            {footer.confirmButton && (\n              <UIButton\n                mode=\"default\"\n                padding={2}\n                text={t('common.dialog.confirm-button.text')}\n                tone=\"critical\"\n                data-testid=\"confirm-button\"\n                {...footer.confirmButton}\n              />\n            )}\n          </Flex>\n        )\n      }\n    >\n      <Box height={bodyHeight} padding={padding ? 4 : 0}>\n        {children}\n      </Box>\n    </UIDialog>\n  )\n})\n","import {\n  // eslint-disable-next-line no-restricted-imports\n  ErrorBoundary as UIErrorBoundary,\n  type ErrorBoundaryProps as UIErrorBoundaryProps,\n} from '@sanity/ui'\nimport {useCallback, useContext} from 'react'\n\nimport {SourceContext} from '../../_singletons'\n\nexport type ErrorBoundaryProps = UIErrorBoundaryProps\n\n/**\n * ErrorBoundary component that catches errors and uses onUncaughtError config property\n * It also calls the onCatch prop if it exists.\n */\nexport function ErrorBoundary({onCatch, ...rest}: ErrorBoundaryProps): React.JSX.Element {\n  // Use context, because source could be undefined and we don't want to throw in that case\n  const source = useContext(SourceContext)\n\n  const handleCatch = useCallback(\n    ({error: caughtError, info: caughtInfo}: {error: Error; info: React.ErrorInfo}) => {\n      // Send the error to the source if it has an onUncaughtError method\n      try {\n        source?.onUncaughtError?.(caughtError, caughtInfo)\n      } catch (e) {\n        e.message = `Encountered an additional error when calling custom \"onUncaughtError()\": ${e.message}`\n        console.error(e)\n      }\n\n      // Call the onCatch prop if it exists\n      onCatch?.({error: caughtError, info: caughtInfo})\n    },\n    [source, onCatch],\n  )\n\n  return <UIErrorBoundary {...rest} onCatch={handleCatch} />\n}\n","/* eslint-disable no-restricted-imports */\nimport {\n  MenuButton as UIMenuButton,\n  type MenuButtonProps as UIMenuButtonProps,\n  type PopoverProps,\n} from '@sanity/ui'\nimport {type ForwardedRef, forwardRef} from 'react'\n\n/** @internal */\nexport type MenuButtonProps = Omit<UIMenuButtonProps, 'popover'> & {\n  popover?: Omit<PopoverProps, 'animate' | 'content' | 'open'>\n}\n\n/**\n * Customized Sanity UI <MenuButton> that enforces popover animation.\n *\n * @internal\n */\nexport const MenuButton = forwardRef(function MenuButton(\n  props: MenuButtonProps,\n  ref: ForwardedRef<HTMLButtonElement>,\n) {\n  return (\n    <UIMenuButton\n      {...props}\n      ref={ref}\n      popover={{\n        ...props.popover,\n        animate: true,\n      }}\n    />\n  )\n})\n","import {Hotkeys as UIHotkeys, type HotkeysProps as UIHotkeysProps} from '@sanity/ui'\nimport {type HTMLProps, type RefAttributes} from 'react'\n\n/**\n * Properties for the `Hotkeys` component.\n *\n * @public\n */\nexport type HotkeysProps = UIHotkeysProps & {\n  /**\n   * Whether to make the keys platform-aware (eg `alt` to `option` on Apple devices).\n   *\n   * @defaultValue true\n   */\n  makePlatformAware?: boolean\n} & Omit<HTMLProps<HTMLElement>, 'ref' | 'size' | 'as'> &\n  RefAttributes<HTMLElement>\n\n/**\n * Renders given `keys` as \"keycaps\" visually.\n *\n * This is a wrapper around `@sanity/ui`'s `Hotkeys` component, which allows for altering keys\n * (eg `alt` to `option`) on Apple devices unless `makePlatformAware` is set to `false`.\n *\n * @param props - Properties to render with\n * @returns React element\n * @public\n */\nexport function Hotkeys({makePlatformAware = true, keys: hotKeys = [], ...props}: HotkeysProps) {\n  const keys = makePlatformAware ? hotKeys.map(platformifyKey) : hotKeys\n  return <UIHotkeys {...props} keys={keys} />\n}\n\n/**\n * @internal\n */\nconst IS_APPLE_DEVICE =\n  typeof navigator === 'undefined' || typeof navigator.platform !== 'string'\n    ? false\n    : /Mac|iPod|iPhone|iPad/.test(navigator.platform || '')\n\n/**\n * Given key 'Alt', or 'Option' (case-insensitive), return the platform-appropriate key name\n * (eg 'Alt' on non-Apple devices, 'Option' on Apple devices).\n *\n * @param key - Key to platformify\n * @returns Platform-appropriate key name\n * @internal\n */\nfunction platformifyKey(key: string): string {\n  const lowerKey = key.toLowerCase()\n\n  if (lowerKey === 'alt' && IS_APPLE_DEVICE) {\n    return matchCase(key, 'option')\n  }\n\n  if (lowerKey === 'option' && !IS_APPLE_DEVICE) {\n    return matchCase(key, 'alt')\n  }\n\n  return key\n}\n\n/**\n * Apply the case (lowercase/uppercase) of `original` to `target`, character by character,\n * eg matching ALL CAPS, all lowercase or Mixed Case.\n *\n * @param original - The original string to match case of\n * @param target - The target string to apply case to\n * @returns Target string with case applied from original\n * @internal\n */\nfunction matchCase(original: string, target: string): string {\n  const orgLength = original.length\n\n  return target.replace(/./g, (char, i) => {\n    // Replace character by character matching case of original\n    // If running out of original, just return the target case as-is\n    return i < orgLength && original[i] === original[i].toUpperCase() ? char.toUpperCase() : char\n  })\n}\n","export const TOOLTIP_DELAY_PROPS = {\n  open: 400,\n}\n","import {\n  Box,\n  Flex,\n  type HotkeysProps,\n  Text,\n  // eslint-disable-next-line no-restricted-imports\n  Tooltip as UITooltip,\n  // eslint-disable-next-line no-restricted-imports\n  type TooltipProps as UITooltipProps,\n} from '@sanity/ui'\nimport {type ForwardedRef, forwardRef} from 'react'\n\nimport {Hotkeys} from '../../core/components/Hotkeys'\nimport {TOOLTIP_DELAY_PROPS} from './constants'\n\n/** @internal */\n\nexport type TooltipProps = Omit<UITooltipProps, 'arrow' | 'padding' | 'shadow'> & {\n  hotkeys?: HotkeysProps['keys']\n}\n\nconst TOOLTIP_SHARED_PROPS: UITooltipProps = {\n  animate: true,\n  arrow: false,\n  boundaryElement: null,\n  delay: TOOLTIP_DELAY_PROPS,\n  fallbackPlacements: ['bottom-start', 'bottom-end', 'top-start', 'top-end'],\n  placement: 'bottom',\n  portal: true,\n}\n\n/**\n * Customized Sanity UI <Tooltip> with limited layout options and support for showing hotkeys.\n *\n * In just about all cases, its strongly recommended that you pass a string to the `content` prop.\n * This helps simplify i18n and encourages short and concise.\n *\n * Passing ReactNode values to `content` is supported, but discouraged.\n *\n * @internal\n */\nexport const Tooltip = forwardRef(function Tooltip(\n  props: TooltipProps,\n  ref: ForwardedRef<HTMLDivElement>,\n) {\n  const {content, hotkeys, ...rest} = props\n\n  if (typeof content === 'string') {\n    return (\n      <UITooltip\n        {...TOOLTIP_SHARED_PROPS}\n        content={\n          <Flex align=\"center\">\n            {content && (\n              <Box flex={1} padding={1}>\n                <Text size={1}>{content}</Text>\n              </Box>\n            )}\n            {hotkeys && (\n              <Box flex=\"none\">\n                <Hotkeys keys={hotkeys} />\n              </Box>\n            )}\n          </Flex>\n        }\n        padding={1}\n        ref={ref}\n        {...rest}\n      />\n    )\n  }\n\n  return <UITooltip {...TOOLTIP_SHARED_PROPS} content={content} ref={ref} {...rest} />\n})\n","/* eslint-disable no-restricted-imports */\nimport {\n  Badge,\n  Box,\n  Flex,\n  MenuItem as UIMenuItem,\n  type MenuItemProps as UIMenuItemProps,\n  Stack,\n  Text,\n} from '@sanity/ui'\nimport {\n  forwardRef,\n  type HTMLProps,\n  isValidElement,\n  type ReactNode,\n  type Ref,\n  useCallback,\n  useMemo,\n} from 'react'\nimport {isValidElementType} from 'react-is'\nimport {styled} from 'styled-components'\n\nimport {Hotkeys} from '../../core/components/Hotkeys'\nimport {Tooltip, type TooltipProps} from '..'\nimport {\n  ConditionalWrapper,\n  type ConditionalWrapperRenderWrapperCallback,\n} from '../conditionalWrapper'\n\nconst FONT_SIZE = 1\nconst SUBTITLE_FONT_SIZE = 0\n\n/* Using px value here to make title/subtitles align with icon */\nconst SubtitleText = styled(Text)`\n  margin-top: 2px;\n`\n\n/** @internal */\nexport type MenuItemProps = Pick<\n  UIMenuItemProps,\n  'as' | 'icon' | 'iconRight' | 'pressed' | 'selected' | 'tone' | 'hotkeys'\n> & {\n  badgeText?: string\n  /**\n   * Usage of `children` is not supported, import `MenuItem` from `@sanity/ui` instead.\n   */\n  children?: undefined\n  /**\n   * Previews should be 25x25.\n   */\n  preview?: ReactNode\n  /**\n   * Optional render callback which receives menu item content.\n   */\n  renderMenuItem?: (menuItemContent: React.JSX.Element) => ReactNode\n  text?: string\n  tooltipProps?: TooltipProps | null\n  /**\n   * Optional subtitle prop for the menu item.\n   * While not recommended, it is utilized for the workspace menu button.\n   */\n  __unstable_subtitle?: string\n  /**\n   * An optional property to adjust spacing in the preview between the icon and the text.\n   * Not recommended, but is applied to the workspace menu button..\n   */\n  __unstable_space?: number\n}\n\nconst PreviewWrapper = styled(Box)`\n  height: 25px;\n  width: 25px;\n  overflow: hidden;\n`\n\n/**\n * Customized Sanity UI <MenuItem> that restricts usage of `children` to encourage simple,\n * single line menu items.\n *\n * The workspace menu button needed a subtitle - hence, the StudioUI MenuIten now takes a subtitle prop.\n * This is only an escape hatch for the workspace menu button and is not recommended for general use.\n *\n * It also accepts a prop to attach tooltips as well as custom badges too.\n *\n * @internal\n */\nexport const MenuItem = forwardRef(function MenuItem(\n  {\n    badgeText,\n    children: childrenProp,\n    disabled,\n    hotkeys,\n    icon: Icon,\n    iconRight: IconRight,\n    preview = null,\n    renderMenuItem,\n    text,\n    tooltipProps,\n    __unstable_subtitle,\n    __unstable_space,\n    ...rest\n  }: MenuItemProps &\n    Omit<HTMLProps<HTMLDivElement>, 'as' | 'height' | 'ref' | 'selected' | 'tabIndex' | 'size'>,\n  ref: Ref<HTMLDivElement>,\n) {\n  const menuItemContent = useMemo(() => {\n    return (\n      <Flex align=\"center\" gap={2}>\n        {preview && (\n          <PreviewWrapper\n            style={{opacity: disabled ? 0.25 : undefined}}\n            paddingRight={__unstable_space ? 1 : 0}\n          >\n            <Flex align=\"center\" height=\"fill\" justify=\"center\">\n              {preview}\n            </Flex>\n          </PreviewWrapper>\n        )}\n        {Icon && (\n          <Box paddingRight={1}>\n            <Text size={FONT_SIZE}>\n              {isValidElement(Icon) && Icon}\n              {isValidElementType(Icon) && <Icon />}\n            </Text>\n          </Box>\n        )}\n        {text && (\n          <Stack flex={1} space={__unstable_subtitle ? 1 : 2}>\n            <Text size={FONT_SIZE} textOverflow=\"ellipsis\" weight=\"medium\">\n              {text}\n            </Text>\n            {__unstable_subtitle && (\n              <SubtitleText size={SUBTITLE_FONT_SIZE} textOverflow=\"ellipsis\" weight=\"medium\" muted>\n                {__unstable_subtitle}\n              </SubtitleText>\n            )}\n          </Stack>\n        )}\n        {(badgeText || hotkeys || IconRight) && (\n          <Flex align=\"center\" gap={3} marginLeft={3}>\n            {hotkeys && <Hotkeys keys={hotkeys} style={{marginTop: -4, marginBottom: -4}} />}\n\n            {badgeText && (\n              <Badge fontSize={0} style={{marginTop: -4, marginBottom: -4}}>\n                {badgeText}\n              </Badge>\n            )}\n\n            {IconRight && (\n              <Text size={FONT_SIZE}>\n                {isValidElement(IconRight) && IconRight}\n                {isValidElementType(IconRight) && <IconRight />}\n              </Text>\n            )}\n          </Flex>\n        )}\n      </Flex>\n    )\n  }, [\n    preview,\n    disabled,\n    __unstable_space,\n    Icon,\n    text,\n    __unstable_subtitle,\n    badgeText,\n    hotkeys,\n    IconRight,\n  ])\n\n  const renderWrapper = useCallback<ConditionalWrapperRenderWrapperCallback>(\n    (children) => {\n      return (\n        <Tooltip content={tooltipProps?.content} portal {...tooltipProps}>\n          {/* This div is needed to make the tooltip work in disabled menu items */}\n          <div>{children}</div>\n        </Tooltip>\n      )\n    },\n    [tooltipProps],\n  )\n\n  return (\n    <ConditionalWrapper condition={!!tooltipProps} wrapper={renderWrapper}>\n      <UIMenuItem\n        disabled={disabled}\n        paddingLeft={preview ? 1 : 3}\n        paddingRight={3}\n        paddingY={preview ? 1 : 3}\n        ref={ref}\n        {...rest}\n      >\n        {typeof childrenProp === 'undefined' && typeof renderMenuItem === 'function'\n          ? renderMenuItem(menuItemContent)\n          : menuItemContent}\n      </UIMenuItem>\n    </ConditionalWrapper>\n  )\n})\n","/* eslint-disable no-restricted-imports */\nimport {Popover as UIPopover, type PopoverProps as UIPopoverProps} from '@sanity/ui'\nimport {type ForwardedRef, forwardRef, type HTMLProps} from 'react'\n\n/** @internal */\nexport type PopoverProps = Omit<UIPopoverProps, 'animate'>\n\n/**\n * Customized Sanity UI <Popover> that forces `animate=true`\n *\n * All Popovers in the studio should be animated.\n *\n * @internal\n */\nexport const Popover = forwardRef(function Popover(\n  props: PopoverProps & Omit<HTMLProps<HTMLDivElement>, 'as' | 'children' | 'content' | 'width'>,\n  ref: ForwardedRef<HTMLDivElement>,\n) {\n  return <UIPopover {...props} animate ref={ref} />\n})\n","/* eslint-disable no-restricted-imports */\nimport {Tab as UITab, type TabProps as UITabProps} from '@sanity/ui'\nimport {type ForwardedRef, forwardRef, type HTMLProps} from 'react'\n\n/**\n * @internal\n *\n * Padding and font sizes are fixed in Studio UI <Tab> components.\n */\nexport type TabProps = Pick<\n  UITabProps,\n  'aria-controls' | 'focused' | 'icon' | 'id' | 'label' | 'selected' | 'tone'\n>\n\n/**\n * Customized Sanity UI <Tab> with limited layout options.\n *\n * @internal\n */\nexport const Tab = forwardRef(function Tab(\n  {tone = 'default', ...props}: TabProps & Omit<HTMLProps<HTMLButtonElement>, 'as' | 'size'>,\n  ref: ForwardedRef<HTMLButtonElement>,\n) {\n  return <UITab {...props} muted padding={2} ref={ref} tone={tone} />\n})\n","/* eslint-disable no-restricted-imports */\nimport {\n  TooltipDelayGroupProvider as UITooltipDelayGroupProvider,\n  type TooltipDelayGroupProviderProps as UITooltipDelayGroupProviderProps,\n} from '@sanity/ui'\n\nimport {TOOLTIP_DELAY_PROPS} from '../tooltip/constants'\n\n/** @internal */\nexport type TooltipDelayGroupProviderProps = Omit<UITooltipDelayGroupProviderProps, 'delay'>\n\n/**\n * Opinionated Sanity UI <TooltipDelayGroupProvider> which forces the same delay to all tooltips.\n *\n * @internal\n */\nexport const TooltipDelayGroupProvider = (props: TooltipDelayGroupProviderProps) => {\n  return (\n    <UITooltipDelayGroupProvider delay={TOOLTIP_DELAY_PROPS}>\n      {props.children}\n    </UITooltipDelayGroupProvider>\n  )\n}\n","const BASE_URL = \"https://docs.sanity.io/help/\";\nfunction generateHelpUrl(slug) {\n  return BASE_URL + slug;\n}\nexport { generateHelpUrl };\n//# sourceMappingURL=generate-help-url.esm.js.map\n"],"names":["ConditionalWrapper","children","condition","wrapper","LARGE_BUTTON_PROPS","space","padding","DEFAULT_BUTTON_PROPS","TooltipButtonWrapper","styled","span","Button","forwardRef","t0","ref","$","_c","paddingY","rest","t1","t2","t3","tooltipProps","size","mode","tone","undefined","t4","content","renderWrapper","sizeProps","t5","t6","UIButton","t7","Dialog","bodyHeight","footer","props","zOffset","t","useTranslation","confirmButton","cancelButton","description","onClose","UIDialog","ErrorBoundary","onCatch","source","useContext","SourceContext","handleCatch","useCallback","error","caughtError","info","caughtInfo","onUncaughtError","e","message","console","UIErrorBoundary","MenuButton","popover","animate","UIMenuButton","Hotkeys","makePlatformAware","keys","hotKeys","map","platformifyKey","UIHotkeys","IS_APPLE_DEVICE","navigator","platform","test","key","lowerKey","toLowerCase","matchCase","original","target","orgLength","length","replace","char","i","toUpperCase","TOOLTIP_DELAY_PROPS","open","TOOLTIP_SHARED_PROPS","arrow","boundaryElement","delay","fallbackPlacements","placement","portal","Tooltip","hotkeys","UITooltip","FONT_SIZE","SUBTITLE_FONT_SIZE","SubtitleText","Text","PreviewWrapper","Box","MenuItem","Icon","IconRight","__unstable_space","__unstable_subtitle","badgeText","childrenProp","disabled","renderMenuItem","text","icon","iconRight","preview","opacity","isValidElement","isValidElementType","marginTop","marginBottom","menuItemContent","t8","t9","t10","t11","t12","UIMenuItem","t13","Popover","UIPopover","Tab","UITab","TooltipDelayGroupProvider","UITooltipDelayGroupProvider","BASE_URL","slug"],"mappings":"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","ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12],"debugId":null}},
    {"offset": {"line": 434, "column": 0}, "map": {"version":3,"file":"MenuGroup.mjs","sources":["file:///Users/isseemii/app/letterseed/node_modules/sanity/src/ui-components/confirmPopover/ConfirmPopover.tsx","file:///Users/isseemii/app/letterseed/node_modules/sanity/src/ui-components/menuGroup/MenuGroup.tsx"],"sourcesContent":["/* eslint-disable no-restricted-imports, @sanity/i18n/no-i18next-import */\nimport {\n  Box,\n  Button as UIButton,\n  Flex,\n  Grid,\n  Popover as UIPopover,\n  type PopoverProps as UIPopoverProps,\n  Text,\n  useClickOutsideEvent,\n  useGlobalKeyDown,\n  useLayer,\n} from '@sanity/ui'\nimport {type ComponentType, type ReactNode, useCallback, useRef} from 'react'\nimport {useTranslation} from 'react-i18next'\n\nexport interface ConfirmPopoverProps {\n  cancelButtonIcon?: ReactNode | ComponentType\n  cancelButtonText?: string\n  confirmButtonIcon?: ReactNode | ComponentType\n  confirmButtonText?: string\n  message: ReactNode\n  onCancel: () => void\n  onConfirm: () => void\n  open: boolean\n  referenceElement: HTMLElement | null\n  tone?: 'default' | 'primary' | 'positive' | 'caution' | 'critical' | 'neutral' | 'suggest'\n  placement?: UIPopoverProps['placement']\n  fallbackPlacements?: UIPopoverProps['fallbackPlacements']\n}\n\n/**\n * A popover component for inline confirmation dialogs.\n * Follows the same pattern as document action confirm dialogs.\n *\n * @internal\n */\nexport function ConfirmPopover({\n  cancelButtonIcon,\n  cancelButtonText,\n  confirmButtonIcon,\n  confirmButtonText,\n  message,\n  onCancel,\n  onConfirm,\n  open,\n  referenceElement,\n  tone = 'critical',\n  placement = 'top',\n  fallbackPlacements = ['left', 'bottom'],\n}: ConfirmPopoverProps) {\n  if (!open) return null\n\n  return (\n    <UIPopover\n      content={\n        <ConfirmPopoverContent\n          cancelButtonIcon={cancelButtonIcon}\n          cancelButtonText={cancelButtonText}\n          confirmButtonIcon={confirmButtonIcon}\n          confirmButtonText={confirmButtonText}\n          message={message}\n          onCancel={onCancel}\n          onConfirm={onConfirm}\n          tone={tone}\n        />\n      }\n      constrainSize\n      fallbackPlacements={fallbackPlacements}\n      open\n      placement={placement}\n      portal\n      preventOverflow\n      referenceElement={referenceElement}\n    />\n  )\n}\n\nfunction ConfirmPopoverContent({\n  cancelButtonIcon,\n  cancelButtonText,\n  confirmButtonIcon,\n  confirmButtonText,\n  message,\n  onCancel,\n  onConfirm,\n  tone,\n}: Omit<ConfirmPopoverProps, 'open' | 'referenceElement' | 'placement' | 'fallbackPlacements'>) {\n  const {t} = useTranslation()\n  const {isTopLayer} = useLayer()\n  const ref = useRef<HTMLDivElement | null>(null)\n\n  const handleGlobalKeyDown = useCallback(\n    (event: KeyboardEvent) => {\n      if (event.key === 'Escape' && isTopLayer) onCancel()\n    },\n    [isTopLayer, onCancel],\n  )\n\n  useGlobalKeyDown(handleGlobalKeyDown)\n  useClickOutsideEvent(isTopLayer && onCancel, () => [ref.current])\n\n  return (\n    <Flex direction=\"column\" ref={ref} style={{minWidth: 280, maxWidth: 350}}>\n      <Box flex={1} overflow=\"auto\" padding={4}>\n        <Text size={1}>{message}</Text>\n      </Box>\n      <Box paddingX={4} paddingY={3} style={{borderTop: '1px solid var(--card-border-color)'}}>\n        <Grid columns={2} gap={2}>\n          <UIButton\n            data-testid=\"confirm-popover-cancel-button\"\n            icon={cancelButtonIcon}\n            onClick={onCancel}\n            mode=\"ghost\"\n            padding={2}\n            text={cancelButtonText || t('common.dialog.cancel-button.text')}\n            size={1}\n          />\n          <UIButton\n            data-testid=\"confirm-popover-confirm-button\"\n            icon={confirmButtonIcon}\n            onClick={onConfirm}\n            padding={2}\n            text={confirmButtonText || t('common.dialog.confirm-button.text')}\n            tone={tone}\n            size={1}\n          />\n        </Grid>\n      </Box>\n    </Flex>\n  )\n}\n","/* eslint-disable no-restricted-imports */\nimport {MenuGroup as UIMenuGroup, type MenuGroupProps as UIMenuGroupProps} from '@sanity/ui'\nimport {type HTMLProps, useCallback} from 'react'\n\nimport {\n  ConditionalWrapper,\n  type ConditionalWrapperRenderWrapperCallback,\n} from '../conditionalWrapper/ConditionalWrapper'\nimport {Tooltip, type TooltipProps} from '../tooltip/Tooltip'\n\n/** @internal */\nexport type MenuGroupProps = Pick<UIMenuGroupProps, 'icon' | 'popover' | 'text' | 'tone'>\n\n/**\n * Customized Sanity UI <MenuGroup> component with pre-defined layout options.\n *\n * @internal\n */\nexport const MenuGroup = (\n  props: MenuGroupProps &\n    Omit<HTMLProps<HTMLDivElement>, 'as' | 'height' | 'ref' | 'tabIndex' | 'popover'> & {\n      tooltipProps?: TooltipProps | null\n    },\n) => {\n  const {tooltipProps} = props\n\n  const renderWrapper = useCallback<ConditionalWrapperRenderWrapperCallback>(\n    (children) => {\n      return (\n        <Tooltip content={tooltipProps?.content} portal {...tooltipProps}>\n          {/* This div is needed to make the tooltip work in disabled menu items */}\n          <div>{children}</div>\n        </Tooltip>\n      )\n    },\n    [tooltipProps],\n  )\n\n  return (\n    <ConditionalWrapper condition={!!tooltipProps} wrapper={renderWrapper}>\n      <UIMenuGroup {...props} fontSize={1} padding={3} />\n    </ConditionalWrapper>\n  )\n}\n"],"names":["ConfirmPopover","t0","$","_c","cancelButtonIcon","cancelButtonText","confirmButtonIcon","confirmButtonText","message","onCancel","onConfirm","open","referenceElement","tone","t1","placement","t2","fallbackPlacements","t3","undefined","t4","t5","t6","UIPopover","ConfirmPopoverContent","t","useTranslation","isTopLayer","useLayer","ref","useRef","event","key","useGlobalKeyDown","Symbol","for","current","useClickOutsideEvent","minWidth","maxWidth","borderTop","t7","UIButton","t8","t9","t10","t11","MenuGroup","props","tooltipProps","children","content","renderWrapper","UIMenuGroup"],"mappings":";;;;;;;;;;;;;;;;;AAqCO,SAAAA,eAAAC,EAAAA,EAAA;IAAA,MAAAC,KAAAC,qKAAAA,EAAA,EAAA,GAAwB,EAAAC,gBAAAA,EAAAC,gBAAAA,EAAAC,iBAAAA,EAAAC,iBAAAA,EAAAC,OAAAA,EAAAC,QAAAA,EAAAC,SAAAA,EAAAC,IAAAA,EAAAC,gBAAAA,EAAAC,MAAAC,EAAAA,EAAAC,WAAAC,EAAAA,EAAAC,oBAAAC,EAAAA,EAAAA,GAAAjB,IAU7BY,OAAAC,OAAiBK,KAAAA,IAAV,aAAPL,IACAC,YAAAC,OAAiBG,KAAAA,IAAL,QAAZH;IAAiB,IAAAI;IAAAlB,CAAAA,CAAAA,EAAAA,KAAAgB,KAAAA,CACjBE,KAAAF,OAAuCC,KAAAA,IAAAA;QAAjB;QAAQ,QAAQ;KAAA,GAAtCD,IAAuChB,CAAAA,CAAAA,EAAAA,GAAAgB,IAAAhB,CAAAA,CAAAA,EAAAA,GAAAkB,EAAAA,IAAAA,KAAAlB,CAAAA,CAAA,CAAA,CAAA;IAAvC,MAAAe,qBAAAG;IAAuC,IAAA,CAElCT,MAAI,OAAA;IAAA,IAAAU;IAAAnB,CAAAA,CAAA,CAAA,CAAA,KAAAE,oBAAAF,CAAAA,CAAA,CAAA,CAAA,KAAAG,oBAAAH,CAAAA,CAAA,CAAA,CAAA,KAAAI,qBAAAJ,CAAAA,CAAA,CAAA,CAAA,KAAAK,qBAAAL,CAAAA,CAAA,CAAA,CAAA,KAAAM,WAAAN,CAAAA,CAAA,CAAA,CAAA,KAAAO,YAAAP,CAAAA,CAAA,CAAA,CAAA,KAAAQ,aAAAR,CAAAA,CAAAA,EAAAA,KAAAW,OAAAA,CAKHQ,KAAAA,aAAAA,GAAAA,CAAAA,GAAAA,uNAAAA,CAAAA,MAAAA,EAAC,uBAAA;QACmBjB;QACAC;QACCC;QACAC;QACVC;QACCC;QACCC;QACLG;IAAAA,CAAI,GACVX,CAAAA,CAAAA,EAAAA,GAAAE,kBAAAF,CAAAA,CAAAA,EAAAA,GAAAG,kBAAAH,CAAAA,CAAAA,EAAAA,GAAAI,mBAAAJ,CAAAA,CAAAA,EAAAA,GAAAK,mBAAAL,CAAAA,CAAAA,EAAAA,GAAAM,SAAAN,CAAAA,CAAAA,EAAAA,GAAAO,UAAAP,CAAAA,CAAAA,EAAAA,GAAAQ,WAAAR,CAAAA,CAAAA,EAAAA,GAAAW,MAAAX,CAAAA,CAAAA,GAAAA,GAAAmB,EAAAA,IAAAA,KAAAnB,CAAAA,CAAA,EAAA,CAAA;IAAA,IAAAoB;IAAA,OAAApB,CAAAA,CAAA,EAAA,CAAA,KAAAe,sBAAAf,CAAAA,CAAA,EAAA,CAAA,KAAAa,aAAAb,CAAAA,CAAA,EAAA,CAAA,KAAAU,oBAAAV,CAAAA,CAAAA,GAAAA,KAAAmB,KAAAA,CAXNC,KAAAA,aAAAA,GAAAA,CAAAA,GAAAA,uNAAAA,CAAAA,MAAAA,iLAACC,UAAAA,EAAA;QAEG,SAAAF;QAWF,eAAA,CAAA;QACoBJ;QACpB,MAAA,CAAA;QACWF;QACX,QAAA,CAAA;QACA,iBAAA,CAAA;QACkBH;IAAAA,CAAgB,GAClCV,CAAAA,CAAAA,GAAAA,GAAAe,oBAAAf,CAAAA,CAAAA,GAAAA,GAAAa,WAAAb,CAAAA,CAAAA,GAAAA,GAAAU,kBAAAV,CAAAA,CAAAA,GAAAA,GAAAmB,IAAAnB,CAAAA,CAAAA,GAAAA,GAAAoB,EAAAA,IAAAA,KAAApB,CAAAA,CAAA,EAAA,CAAA,EApBFoB;AAoBE;AAIN,SAAAE,sBAAAvB,EAAAA,EAAA;IAAA,MAAAC,0KAAAC,EAAA,EAAA,GAA+B,EAAAC,gBAAAA,EAAAC,gBAAAA,EAAAC,iBAAAA,EAAAC,iBAAAA,EAAAC,OAAAA,EAAAC,QAAAA,EAAAC,SAAAA,EAAAG,IAAAA,EAAAA,GAAAZ,IAU7B,EAAAwB,CAAAA,EAAAA,GAAYC,sLAAAA,KACZ,EAAAC,UAAAA,EAAAA,sLAAqBC,WAAAA,CAAAA,IACrBC,gNAAYC,SAAAA,EAAA,IAAkC;IAAC,IAAAhB;IAAAZ,CAAAA,CAAA,CAAA,CAAA,KAAAyB,cAAAzB,CAAAA,CAAAA,EAAAA,KAAAO,WAAAA,CAG7CK,KAAAiB,CAAAA,UAAA;QACMA,MAAKC,GAAAA,KAAS,YAAYL,cAAYlB,SAAAA;IAAU,GACrDP,CAAAA,CAAAA,EAAAA,GAAAyB,YAAAzB,CAAAA,CAAAA,EAAAA,GAAAO,UAAAP,CAAAA,CAAAA,EAAAA,GAAAY,EAAAA,IAAAA,KAAAZ,CAAAA,CAAA,CAAA,CAAA,qLAIH+B,mBAAAA,EAP4BnB,EAOQ;IAAC,IAAAE;IAAAd,CAAAA,CAAA,CAAA,CAAA,KAAAgC,OAAAC,GAAAA,CAAA,2BAAA,IAAA,CACQnB,KAAAA,IAAA;YAAOa,IAAGO,OAAA;SAAA,EAASlC,CAAAA,CAAAA,EAAAA,GAAAc,EAAAA,IAAAA,KAAAd,CAAAA,CAAA,CAAA,CAAA,qLAAhEmC,uBAAAA,EAAqBV,cAAclB,UAAUO,EAAmB;IAAC,IAAAE;IAAAhB,CAAAA,CAAA,CAAA,CAAA,KAAAgC,OAAAC,GAAAA,CAAA,2BAAA,IAAA,CAGrBjB,KAAA;QAAAoB,UAAA;QAAAC,UAAA;IAAA,GAA8BrC,CAAAA,CAAAA,EAAAA,GAAAgB,EAAAA,IAAAA,KAAAhB,CAAAA,CAAA,CAAA,CAAA;IAAA,IAAAkB;IAAAlB,CAAAA,CAAAA,EAAAA,KAAAM,UAAAA,CACtEY,KAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,iLAAC,MAAA,EAAA;QAAU,MAAA;QAAY,UAAA;QAAgB,SAAA;QACrC,UAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,iLAAC,OAAA,EAAA;YAAW,MAAA;YAAIZ,UAAAA;QAAAA,CAAQ;IAAA,CAC1B,GAAMN,CAAAA,CAAAA,EAAAA,GAAAM,SAAAN,CAAAA,CAAAA,EAAAA,GAAAkB,EAAAA,IAAAA,KAAAlB,CAAAA,CAAA,CAAA,CAAA;IAAA,IAAAmB;IAAAnB,CAAAA,CAAA,CAAA,CAAA,KAAAgC,OAAAC,GAAAA,CAAA,2BAAA,IAAA,CACgCd,KAAA;QAAAmB,WAAY;IAAA,GAAqCtC,CAAAA,CAAAA,EAAAA,GAAAmB,EAAAA,IAAAA,KAAAnB,CAAAA,CAAA,CAAA,CAAA;IAAA,IAAAoB;IAAApB,CAAAA,CAAA,CAAA,CAAA,KAAAG,oBAAAH,CAAAA,CAAAA,EAAAA,KAAAuB,IAAAA,CAQ3EH,KAAAjB,oBAAoBoB,EAAE,kCAAkC,GAACvB,CAAAA,CAAAA,EAAAA,GAAAG,kBAAAH,CAAAA,CAAAA,EAAAA,GAAAuB,GAAAvB,CAAAA,CAAAA,GAAAA,GAAAoB,EAAAA,IAAAA,KAAApB,CAAAA,CAAA,EAAA,CAAA;IAAA,IAAAuC;IAAAvC,CAAAA,CAAA,EAAA,CAAA,KAAAE,oBAAAF,CAAAA,CAAAA,GAAAA,KAAAO,YAAAP,CAAAA,CAAA,EAAA,CAAA,KAAAoB,KAAAA,CANjEmB,KAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,iLAACC,SAAAA,EAAAA;QACa,eAAA;QACNtC,MAAAA;QACGK,SAAAA;QACJ,MAAA;QACI,SAAA;QACH,MAAAa;QACA,MAAA;IAAA,CAAC,GACPpB,CAAAA,CAAAA,GAAAA,GAAAE,kBAAAF,CAAAA,CAAAA,GAAAA,GAAAO,UAAAP,CAAAA,CAAAA,GAAAA,GAAAoB,IAAApB,CAAAA,CAAAA,GAAAA,GAAAuC,EAAAA,IAAAA,KAAAvC,CAAAA,CAAA,EAAA,CAAA;IAAA,IAAAyC;IAAAzC,CAAAA,CAAA,EAAA,CAAA,KAAAK,qBAAAL,CAAAA,CAAAA,GAAAA,KAAAuB,IAAAA,CAMMkB,KAAApC,qBAAqBkB,EAAE,mCAAmC,GAACvB,CAAAA,CAAAA,GAAAA,GAAAK,mBAAAL,CAAAA,CAAAA,GAAAA,GAAAuB,GAAAvB,CAAAA,CAAAA,GAAAA,GAAAyC,EAAAA,IAAAA,KAAAzC,CAAAA,CAAA,EAAA,CAAA;IAAA,IAAA0C;IAAA1C,CAAAA,CAAA,EAAA,CAAA,KAAAI,qBAAAJ,CAAAA,CAAA,EAAA,CAAA,KAAAQ,aAAAR,CAAAA,CAAA,EAAA,CAAA,KAAAyC,MAAAzC,CAAAA,CAAAA,GAAAA,KAAAW,OAAAA,CALnE+B,KAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAACF,wLAAAA,EAAA;QACa,eAAA;QACNpC,MAAAA;QACGI,SAAAA;QACA,SAAA;QACH,MAAAiC;QACA9B;QACA,MAAA;IAAA,CAAC,GACPX,CAAAA,CAAAA,GAAAA,GAAAI,mBAAAJ,CAAAA,CAAAA,GAAAA,GAAAQ,WAAAR,CAAAA,CAAAA,GAAAA,GAAAyC,IAAAzC,CAAAA,CAAAA,GAAAA,GAAAW,MAAAX,CAAAA,CAAAA,GAAAA,GAAA0C,EAAAA,IAAAA,KAAA1C,CAAAA,CAAA,EAAA,CAAA;IAAA,IAAA2C;IAAA3C,CAAAA,CAAA,EAAA,CAAA,KAAAuC,MAAAvC,CAAAA,CAAAA,GAAAA,KAAA0C,KAAAA,CAnBNC,MAAAA,aAAAA,GAAAA,CAAAA,GAAAA,uNAAAA,CAAAA,MAAAA,iLAAC,MAAA,EAAA;QAAc,UAAA;QAAa,UAAA;QAAU,OAAAxB;QACpC,UAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,OAAA,gLAAC,QAAA,EAAA;YAAc,SAAA;YAAQ,KAAA;YACrBoB,UAAAA;gBAAAA;gBASAG;aAAAA;QAAAA,CASF;IAAA,CACF,GAAM1C,CAAAA,CAAAA,GAAAA,GAAAuC,IAAAvC,CAAAA,CAAAA,GAAAA,GAAA0C,IAAA1C,CAAAA,CAAAA,GAAAA,GAAA2C,GAAAA,IAAAA,MAAA3C,CAAAA,CAAA,EAAA,CAAA;IAAA,IAAA4C;IAAA,OAAA5C,CAAAA,CAAA,EAAA,CAAA,KAAA2C,OAAA3C,CAAAA,CAAAA,GAAAA,KAAAkB,KAAAA,CAzBR0B,MAAAA,aAAAA,GAAAA,CAAAA,GAAAA,uNAAAA,CAAAA,OAAAA,iLAAC,OAAA,EAAA;QAAe,WAAA;QAAcjB;QAAY,OAAAX;QACxCE,UAAAA;YAAAA;YAGAyB;SAAAA;IAAAA,CAsBF,GAAO3C,CAAAA,CAAAA,GAAAA,GAAA2C,KAAA3C,CAAAA,CAAAA,GAAAA,GAAAkB,IAAAlB,CAAAA,CAAAA,GAAAA,GAAA4C,GAAAA,IAAAA,MAAA5C,CAAAA,CAAA,EAAA,CAAA,EA1BP4C;AA0BO;AC/GJ,MAAMC,YAAYC,CAAAA,UAAA;IAAA,MAAA9C,0KAAAC,EAAA,CAAA,GAMvB,EAAA8C,YAAAA,EAAAA,GAAuBD;IAAK,IAAA/C;IAAAC,CAAAA,CAAAA,EAAAA,KAAA+C,eAAAA,CAG1BhD,KAAAiD,CAAAA,WAEI,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,oLAAC,UAAA,EAAA;YAAiB,SAAAD,cAAYE;YAAW,QAAA,CAAA;YAAM,GAAKF,YAAAA;YAElD,UAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAA,OAAA;gBAAMC;YAAAA,CAAS;QAAA,CACjB,GAEHhD,CAAAA,CAAAA,EAAAA,GAAA+C,cAAA/C,CAAAA,CAAAA,EAAAA,GAAAD,EAAAA,IAAAA,KAAAC,CAAAA,CAAA,CAAA,CAAA;IARH,MAAAkD,gBAAsBnD,IAaWa,KAAAA,CAAAA,CAAEmC;IAAY,IAAAjC;IAAAd,CAAAA,CAAAA,EAAAA,KAAA8C,QAAAA,CAC3ChC,KAAAA,aAAAA,GAAAA,CAAAA,GAAAA,uNAAAA,CAAAA,MAAAA,EAACqC,2LAAAA,EAAA;QAAW,GAAKL,KAAAA;QAAiB,UAAA;QAAY,SAAA;IAAA,CAAC,GAAI9C,CAAAA,CAAAA,EAAAA,GAAA8C,OAAA9C,CAAAA,CAAAA,EAAAA,GAAAc,EAAAA,IAAAA,KAAAd,CAAAA,CAAA,CAAA,CAAA;IAAA,IAAAgB;IAAA,OAAAhB,CAAAA,CAAA,CAAA,CAAA,KAAAkD,iBAAAlD,CAAAA,CAAAA,EAAAA,KAAAY,MAAAZ,CAAAA,CAAA,CAAA,CAAA,KAAAc,KAAAA,CADrDE,KAAAA,aAAAA,GAAAA,CAAAA,GAAAA,uNAAAA,CAAAA,MAAAA,oLAAC,qBAAA,EAAA;QAA8B,WAAAJ;QAAyBsC,SAAAA;QACtDpC,UAAAA;IAAAA,CACF,GAAqBd,CAAAA,CAAAA,EAAAA,GAAAkD,eAAAlD,CAAAA,CAAAA,EAAAA,GAAAY,IAAAZ,CAAAA,CAAAA,EAAAA,GAAAc,IAAAd,CAAAA,CAAAA,EAAAA,GAAAgB,EAAAA,IAAAA,KAAAhB,CAAAA,CAAA,CAAA,CAAA,EAFrBgB;AAEqB","ignoreList":[0,1],"debugId":null}},
    {"offset": {"line": 594, "column": 0}, "map": {"version":3,"file":"StructureToolProvider.mjs","sources":["file:///Users/isseemii/app/letterseed/node_modules/sanity/src/structure/i18n/index.ts","file:///Users/isseemii/app/letterseed/node_modules/sanity/src/structure/structureBuilder/util/getExtendedProjection.ts","file:///Users/isseemii/app/letterseed/node_modules/sanity/src/structure/structureBuilder/SerializeError.ts","file:///Users/isseemii/app/letterseed/node_modules/sanity/src/structure/structureBuilder/Sort.ts","file:///Users/isseemii/app/letterseed/node_modules/sanity/src/structure/structureBuilder/MenuItem.ts","file:///Users/isseemii/app/letterseed/node_modules/sanity/src/structure/structureBuilder/MenuItemGroup.ts","file:///Users/isseemii/app/letterseed/node_modules/sanity/src/structure/structureBuilder/util/validateId.ts","file:///Users/isseemii/app/letterseed/node_modules/sanity/src/structure/structureBuilder/util/getStructureNodeId.ts","file:///Users/isseemii/app/letterseed/node_modules/sanity/src/structure/structureBuilder/Component.ts","file:///Users/isseemii/app/letterseed/node_modules/sanity/src/structure/structureBuilder/Divider.ts","file:///Users/isseemii/app/letterseed/node_modules/sanity/src/structure/structureBuilder/util/resolveTypeForDocument.ts","file:///Users/isseemii/app/letterseed/node_modules/sanity/src/structure/structureBuilder/views/View.ts","file:///Users/isseemii/app/letterseed/node_modules/sanity/src/structure/structureBuilder/views/ComponentView.ts","file:///Users/isseemii/app/letterseed/node_modules/sanity/src/structure/structureBuilder/views/FormView.ts","file:///Users/isseemii/app/letterseed/node_modules/sanity/src/structure/structureBuilder/views/index.ts","file:///Users/isseemii/app/letterseed/node_modules/sanity/src/structure/structureBuilder/Document.ts","file:///Users/isseemii/app/letterseed/node_modules/sanity/src/structure/structureBuilder/InitialValueTemplateItem.ts","file:///Users/isseemii/app/letterseed/node_modules/sanity/src/structure/structureBuilder/Intent.ts","file:///Users/isseemii/app/letterseed/node_modules/sanity/src/structure/structureBuilder/Layout.ts","file:///Users/isseemii/app/letterseed/node_modules/sanity/src/structure/structureBuilder/GenericList.ts","file:///Users/isseemii/app/letterseed/node_modules/sanity/src/structure/structureBuilder/DocumentList.ts","file:///Users/isseemii/app/letterseed/node_modules/sanity/src/structure/structureBuilder/List.ts","file:///Users/isseemii/app/letterseed/node_modules/sanity/src/structure/structureBuilder/ListItem.ts","file:///Users/isseemii/app/letterseed/node_modules/sanity/src/structure/structureBuilder/DocumentListItem.ts","file:///Users/isseemii/app/letterseed/node_modules/sanity/src/structure/structureBuilder/DocumentTypeList.ts","file:///Users/isseemii/app/letterseed/node_modules/sanity/src/structure/structureBuilder/documentTypeListItems.ts","file:///Users/isseemii/app/letterseed/node_modules/sanity/src/structure/structureBuilder/createStructureBuilder.ts","file:///Users/isseemii/app/letterseed/node_modules/sanity/src/structure/StructureToolProvider.tsx"],"sourcesContent":["import {defineLocaleResourceBundle} from 'sanity'\n\n/**\n * The locale namespace for the structure tool\n *\n * @public\n */\nexport const structureLocaleNamespace = 'structure' as const\n\n/**\n * The default locale bundle for the structure tool, which is US English.\n *\n * @internal\n */\nexport const structureUsEnglishLocaleBundle = defineLocaleResourceBundle({\n  locale: 'en-US',\n  namespace: structureLocaleNamespace,\n  resources: () => import('./resources'),\n})\n\n/**\n * The locale resource keys for the structure tool.\n *\n * @alpha\n * @hidden\n */\nexport type {StructureLocaleResourceKeys} from './resources'\n","import {type SchemaType, type SortOrderingItem} from '@sanity/types'\n\nconst IMPLICIT_SCHEMA_TYPE_FIELDS = ['_id', '_type', '_createdAt', '_updatedAt', '_rev']\n\n// Takes a path array and a schema type and builds a GROQ join every time it enters a reference field\nfunction joinReferences(schemaType: SchemaType, path: string[], strict: boolean = false): string {\n  const [head, ...tail] = path\n\n  if (!('fields' in schemaType)) {\n    return ''\n  }\n\n  const schemaField = schemaType.fields.find((field) => field.name === head)\n  if (!schemaField) {\n    if (!IMPLICIT_SCHEMA_TYPE_FIELDS.includes(head)) {\n      const errorMessage = `The current ordering config targeted the nonexistent field \"${head}\" on schema type \"${schemaType.name}\". It should be one of ${schemaType.fields.map((field) => field.name).join(', ')}`\n      if (strict) {\n        throw new Error(errorMessage)\n      } else {\n        console.warn(errorMessage)\n      }\n    }\n    return ''\n  }\n\n  if ('to' in schemaField.type && schemaField.type.name === 'reference') {\n    const refTypes = schemaField.type.to\n    return `${head}->{${refTypes.map((refType) => joinReferences(refType, tail)).join(',')}}`\n  }\n\n  const tailFields = tail.length > 0 && joinReferences(schemaField.type, tail)\n  const tailWrapper = tailFields ? `{${tailFields}}` : ''\n  return tail.length > 0 ? `${head}${tailWrapper}` : head\n}\n\nexport function getExtendedProjection(\n  schemaType: SchemaType,\n  orderBy: SortOrderingItem[],\n  strict: boolean = false,\n): string {\n  return orderBy\n    .map((ordering) => joinReferences(schemaType, ordering.field.split('.'), strict))\n    .join(', ')\n}\n","import {type SerializePath} from './StructureNodes'\n\n/** @internal */\nexport class SerializeError extends Error {\n  public readonly path: SerializePath\n  public helpId?: (typeof HELP_URL)[keyof typeof HELP_URL]\n\n  constructor(\n    message: string,\n    parentPath: SerializePath,\n    pathSegment: string | number | undefined,\n    hint?: string,\n  ) {\n    super(message)\n    this.name = 'SerializeError'\n    const segment = typeof pathSegment === 'undefined' ? '<unknown>' : `${pathSegment}`\n    this.path = (parentPath || []).concat(hint ? `${segment} (${hint})` : segment)\n  }\n\n  withHelpUrl(id: (typeof HELP_URL)[keyof typeof HELP_URL]): SerializeError {\n    this.helpId = id\n    return this\n  }\n}\n\n/** @internal */\nexport const HELP_URL = {\n  ID_REQUIRED: 'structure-node-id-required' as const,\n  TITLE_REQUIRED: 'structure-title-required' as const,\n  FILTER_REQUIRED: 'structure-filter-required' as const,\n  INVALID_LIST_ITEM: 'structure-invalid-list-item' as const,\n  COMPONENT_REQUIRED: 'structure-view-component-required' as const,\n  DOCUMENT_ID_REQUIRED: 'structure-document-id-required' as const,\n  DOCUMENT_TYPE_REQUIRED: 'structure-document-type-required' as const,\n  SCHEMA_TYPE_REQUIRED: 'structure-schema-type-required' as const,\n  SCHEMA_TYPE_NOT_FOUND: 'structure-schema-type-not-found' as const,\n  LIST_ITEMS_MUST_BE_ARRAY: 'structure-list-items-must-be-array' as const,\n  QUERY_PROVIDED_FOR_FILTER: 'structure-query-provided-for-filter' as const,\n  ACTION_OR_INTENT_REQUIRED: 'structure-action-or-intent-required' as const,\n  LIST_ITEM_IDS_MUST_BE_UNIQUE: 'structure-list-item-ids-must-be-unique' as const,\n  ACTION_AND_INTENT_MUTUALLY_EXCLUSIVE: 'structure-action-and-intent-mutually-exclusive' as const,\n  API_VERSION_REQUIRED_FOR_CUSTOM_FILTER:\n    'structure-api-version-required-for-custom-filter' as const,\n}\n","import {type SortOrdering} from '@sanity/types'\n\nimport {structureLocaleNamespace} from '../i18n'\n\nexport const ORDER_BY_UPDATED_AT: SortOrdering = {\n  title: 'Last edited',\n  i18n: {\n    title: {\n      key: 'menu-items.sort-by.last-edited',\n      ns: structureLocaleNamespace,\n    },\n  },\n  name: 'lastEditedDesc',\n  by: [{field: '_updatedAt', direction: 'desc'}],\n}\n\nexport const ORDER_BY_CREATED_AT: SortOrdering = {\n  title: 'Created',\n  i18n: {\n    title: {\n      key: 'menu-items.sort-by.created',\n      ns: structureLocaleNamespace,\n    },\n  },\n  name: 'lastCreatedDesc',\n  by: [{field: '_createdAt', direction: 'desc'}],\n}\n\nexport const DEFAULT_SELECTED_ORDERING_OPTION = ORDER_BY_UPDATED_AT\n\nexport const DEFAULT_ORDERING_OPTIONS: SortOrdering[] = [\n  ORDER_BY_UPDATED_AT, // _updatedAt\n  ORDER_BY_CREATED_AT, // _createdAt\n]\n","import {SortIcon} from '@sanity/icons'\nimport {type SchemaType, type SortOrdering, type SortOrderingItem} from '@sanity/types'\nimport {type I18nTextRecord} from 'sanity'\n\nimport {type Intent} from './Intent'\nimport {HELP_URL, SerializeError} from './SerializeError'\nimport {DEFAULT_ORDERING_OPTIONS} from './Sort'\nimport {type Serializable, type SerializeOptions, type SerializePath} from './StructureNodes'\nimport {type StructureContext} from './types'\nimport {getExtendedProjection} from './util/getExtendedProjection'\n\n/** @internal */\nexport function maybeSerializeMenuItem(\n  item: MenuItem | MenuItemBuilder,\n  index: number,\n  path: SerializePath,\n): MenuItem {\n  return item instanceof MenuItemBuilder ? item.serialize({path, index}) : item\n}\n\n/**\n * Menu item action type\n * @public */\nexport type MenuItemActionType =\n  | string\n  | ((params: Record<string, string> | undefined, scope?: any) => void)\n\n/**\n * Menu items parameters\n *\n * @public */\nexport type MenuItemParamsType = Record<string, string | unknown | undefined>\n\n/**\n * Interface for menu items\n *\n * @public */\nexport interface MenuItem {\n  /**\n   * The i18n key and namespace used to populate the localized title. This is\n   * the recommend way to set the title if you are localizing your studio.\n   */\n  i18n?: I18nTextRecord<'title'>\n  /**\n   * Menu Item title. Note that the `i18n` configuration will take\n   * precedence and this title is left here as a fallback if no i18n key is\n   * provided and compatibility with older plugins\n   */\n  title: string\n  /** Menu Item action */\n  action?: MenuItemActionType\n  /** Menu Item intent */\n  intent?: Intent\n  /** Menu Item group */\n  group?: string\n  // TODO: align these with TemplateItem['icon']\n  /** Menu Item icon */\n  icon?: React.ComponentType | React.ReactNode\n  /** Menu Item parameters. See {@link MenuItemParamsType} */\n  params?: MenuItemParamsType\n  /** Determine if it will show the MenuItem as action */\n  showAsAction?: boolean\n}\n\n/**\n * Partial menu items\n * @public\n */\nexport type PartialMenuItem = Partial<MenuItem>\n\n/**\n * Class for building menu items.\n *\n * @public */\nexport class MenuItemBuilder implements Serializable<MenuItem> {\n  /** menu item option object. See {@link PartialMenuItem} */\n  protected spec: PartialMenuItem\n\n  protected _context: StructureContext\n\n  constructor(\n    /**\n     * Structure context. See {@link StructureContext}\n     */\n    _context: StructureContext,\n    spec?: MenuItem,\n  ) {\n    this._context = _context\n    this.spec = spec ? spec : {}\n  }\n\n  /**\n   * Set menu item action\n   * @param action - menu item action. See {@link MenuItemActionType}\n   * @returns menu item builder based on action provided. See {@link MenuItemBuilder}\n   */\n  action(action: MenuItemActionType): MenuItemBuilder {\n    return this.clone({action})\n  }\n\n  /**\n   * Get menu item action\n   * @returns menu item builder action. See {@link PartialMenuItem}\n   */\n  getAction(): PartialMenuItem['action'] {\n    return this.spec.action\n  }\n\n  /**\n   * Set menu item intent\n   * @param intent - menu item intent. See {@link Intent}\n   * @returns menu item builder based on intent provided. See {@link MenuItemBuilder}\n   */\n  intent(intent: Intent): MenuItemBuilder {\n    return this.clone({intent})\n  }\n\n  /**\n   * Get menu item intent\n   * @returns menu item intent. See {@link PartialMenuItem}\n   */\n  getIntent(): PartialMenuItem['intent'] {\n    return this.spec.intent\n  }\n\n  /**\n   * Set menu item title\n   * @param title - menu item title\n   * @returns menu item builder based on title provided. See {@link MenuItemBuilder}\n   */\n  title(title: string): MenuItemBuilder {\n    return this.clone({title})\n  }\n\n  /**\n   * Get menu item title. Note that the `i18n` configuration will take\n   * precedence and this title is left here for compatibility.\n   * @returns menu item title\n   */\n  getTitle(): string | undefined {\n    return this.spec.title\n  }\n\n  /**\n   * Set the i18n key and namespace used to populate the localized title.\n   * @param i18n - object with i18n key and related namespace\n   * @returns menu item builder based on i18n config provided. See {@link MenuItemBuilder}\n   */\n  i18n(i18n: I18nTextRecord<'title'>): MenuItemBuilder {\n    return this.clone({i18n})\n  }\n\n  /**\n   * Get the i18n key and namespace used to populate the localized title.\n   * @returns the i18n key and namespace used to populate the localized title.\n   */\n  getI18n(): I18nTextRecord<'title'> | undefined {\n    return this.spec.i18n\n  }\n\n  /**\n   * Set menu item group\n   * @param group - menu item group\n   * @returns menu item builder based on group provided. See {@link MenuItemBuilder}\n   */\n  group(group: string): MenuItemBuilder {\n    return this.clone({group})\n  }\n\n  /**\n   * Get menu item group\n   * @returns menu item group. See {@link PartialMenuItem}\n   */\n  getGroup(): PartialMenuItem['group'] {\n    return this.spec.group\n  }\n\n  /**\n   * Set menu item icon\n   * @param icon - menu item icon\n   * @returns menu item builder based on icon provided. See {@link MenuItemBuilder}\n   */\n  icon(icon: React.ComponentType | React.ReactNode): MenuItemBuilder {\n    return this.clone({icon})\n  }\n\n  /**\n   * Get menu item icon\n   * @returns menu item icon. See {@link PartialMenuItem}\n   */\n  getIcon(): PartialMenuItem['icon'] {\n    return this.spec.icon\n  }\n\n  /**\n   * Set menu item parameters\n   * @param params - menu item parameters. See {@link MenuItemParamsType}\n   * @returns menu item builder based on parameters provided. See {@link MenuItemBuilder}\n   */\n  params(params: MenuItemParamsType): MenuItemBuilder {\n    return this.clone({params})\n  }\n\n  /**\n   * Get meny item parameters\n   * @returns menu item parameters. See {@link PartialMenuItem}\n   */\n  getParams(): PartialMenuItem['params'] {\n    return this.spec.params\n  }\n\n  /**\n   * Set menu item to show as action\n   * @param showAsAction - determine if menu item should show as action\n   * @returns menu item builder based on if it should show as action. See {@link MenuItemBuilder}\n   */\n  showAsAction(showAsAction = true): MenuItemBuilder {\n    return this.clone({showAsAction: Boolean(showAsAction)})\n  }\n\n  /**\n   * Check if menu item should show as action\n   * @returns true if menu item should show as action, false if not. See {@link PartialMenuItem}\n   */\n  getShowAsAction(): PartialMenuItem['showAsAction'] {\n    return this.spec.showAsAction\n  }\n\n  /** Serialize menu item builder\n   * @param options - serialization options. See {@link SerializeOptions}\n   * @returns menu item node based on path provided in options. See {@link MenuItem}\n   */\n  serialize(options: SerializeOptions = {path: []}): MenuItem {\n    const {title, action, intent} = this.spec\n    if (!title) {\n      const hint = typeof action === 'string' ? `action: \"${action}\"` : undefined\n      throw new SerializeError(\n        '`title` is required for menu item',\n        options.path,\n        options.index,\n        hint,\n      ).withHelpUrl(HELP_URL.TITLE_REQUIRED)\n    }\n\n    if (!action && !intent) {\n      throw new SerializeError(\n        `\\`action\\` or \\`intent\\` required for menu item with title ${this.spec.title}`,\n        options.path,\n        options.index,\n        `\"${title}\"`,\n      ).withHelpUrl(HELP_URL.ACTION_OR_INTENT_REQUIRED)\n    }\n\n    if (intent && action) {\n      throw new SerializeError(\n        'cannot set both `action` AND `intent`',\n        options.path,\n        options.index,\n        `\"${title}\"`,\n      ).withHelpUrl(HELP_URL.ACTION_AND_INTENT_MUTUALLY_EXCLUSIVE)\n    }\n\n    return {...this.spec, title}\n  }\n\n  /** Clone menu item builder\n   * @param withSpec - menu item options. See {@link PartialMenuItem}\n   * @returns menu item builder based on context and spec provided. See {@link MenuItemBuilder}\n   */\n  clone(withSpec?: PartialMenuItem): MenuItemBuilder {\n    const builder = new MenuItemBuilder(this._context)\n    builder.spec = {...this.spec, ...withSpec}\n    return builder\n  }\n}\n\n/** @internal */\nexport interface SortMenuItem extends MenuItem {\n  params: {\n    by: SortOrderingItem[]\n  }\n}\n\n/** @internal */\nexport function getOrderingMenuItem(\n  context: StructureContext,\n  {by, title, i18n}: SortOrdering,\n  extendedProjection?: string,\n): MenuItemBuilder {\n  let builder = new MenuItemBuilder(context)\n    .group('sorting')\n    .title(\n      context.i18n.t('default-menu-item.fallback-title', {\n        // note this lives in the `studio` bundle because that one is loaded by default\n        ns: 'studio',\n        replace: {title}, // replaces the `{{title}}` option\n      }),\n    ) // fallback title\n    .icon(SortIcon)\n    .action('setSortOrder')\n    .params({by, extendedProjection})\n\n  if (i18n) {\n    builder = builder.i18n(i18n)\n  }\n\n  return builder\n}\n\n/** @internal */\nexport function getOrderingMenuItemsForSchemaType(\n  context: StructureContext,\n  typeName: SchemaType | string,\n): MenuItemBuilder[] {\n  const {schema} = context\n  const type = typeof typeName === 'string' ? schema.get(typeName) : typeName\n  if (!type || !('orderings' in type)) {\n    return []\n  }\n\n  return (\n    type.orderings ? type.orderings.concat(DEFAULT_ORDERING_OPTIONS) : DEFAULT_ORDERING_OPTIONS\n  ).map((ordering: SortOrdering) =>\n    getOrderingMenuItem(context, ordering, getExtendedProjection(type, ordering.by)),\n  )\n}\n","import {type I18nTextRecord} from 'sanity'\n\nimport {HELP_URL, SerializeError} from './SerializeError'\nimport {type Serializable, type SerializeOptions, type SerializePath} from './StructureNodes'\nimport {type StructureContext} from './types'\n\n/** @internal */\nexport function maybeSerializeMenuItemGroup(\n  item: MenuItemGroup | MenuItemGroupBuilder,\n  index: number,\n  path: SerializePath,\n): MenuItemGroup {\n  return item instanceof MenuItemGroupBuilder ? item.serialize({path, index}) : item\n}\n\n/**\n * Interface for menu item groups\n * @public\n */\nexport interface MenuItemGroup {\n  /** Menu group Id */\n  id: string\n  /** Menu group title */\n  title: string\n  i18n?: I18nTextRecord<'title'>\n}\n\n/**\n * Class for building menu item groups.\n *\n * @public\n */\nexport class MenuItemGroupBuilder implements Serializable<MenuItemGroup> {\n  /** Menu item group ID */\n  protected _id: string\n  /** Menu item group title */\n  protected _title: string\n\n  protected _i18n?: I18nTextRecord<'title'>\n\n  protected _context: StructureContext\n\n  constructor(\n    /**\n     * Structure context. See {@link StructureContext}\n     */\n    _context: StructureContext,\n    spec?: MenuItemGroup,\n  ) {\n    this._context = _context\n    this._id = spec ? spec.id : ''\n    this._title = spec ? spec.title : ''\n    this._i18n = spec ? spec.i18n : undefined\n  }\n\n  /**\n   * Set menu item group ID\n   * @param id - menu item group ID\n   * @returns menu item group builder based on ID provided. See {@link MenuItemGroupBuilder}\n   */\n  id(id: string): MenuItemGroupBuilder {\n    return new MenuItemGroupBuilder(this._context, {id, title: this._title, i18n: this._i18n})\n  }\n\n  /**\n   * Get menu item group ID\n   * @returns menu item group ID\n   */\n  getId(): string {\n    return this._id\n  }\n\n  /**\n   * Set menu item group title\n   * @param title - menu item group title\n   * @returns menu item group builder based on title provided. See {@link MenuItemGroupBuilder}\n   */\n  title(title: string): MenuItemGroupBuilder {\n    return new MenuItemGroupBuilder(this._context, {title, id: this._id, i18n: this._i18n})\n  }\n\n  /**\n   * Get menu item group title\n   * @returns menu item group title\n   */\n  getTitle(): string {\n    return this._title\n  }\n\n  /**\n   * Set the i18n key and namespace used to populate the localized title.\n   * @param i18n - object with i18n key and related namespace\n   * @returns menu item group builder based on i18n info provided. See {@link MenuItemGroupBuilder}\n   */\n  i18n(i18n: I18nTextRecord<'title'>): MenuItemGroupBuilder {\n    return new MenuItemGroupBuilder(this._context, {i18n, id: this._id, title: this._title})\n  }\n\n  /**\n   * Get the i18n key and namespace used to populate the localized title.\n   * @returns the i18n key and namespace used to populate the localized title.\n   */\n  getI18n(): I18nTextRecord<'title'> | undefined {\n    return this._i18n\n  }\n\n  /**\n   * Serialize menu item group builder\n   * @param options - serialization options (path). See {@link SerializeOptions}\n   * @returns menu item group based on path provided in options. See {@link MenuItemGroup}\n   */\n  serialize(options: SerializeOptions = {path: []}): MenuItemGroup {\n    if (!this._id) {\n      throw new SerializeError(\n        '`id` is required for a menu item group',\n        options.path,\n        options.index,\n        this._title,\n      ).withHelpUrl(HELP_URL.ID_REQUIRED)\n    }\n\n    if (!this._title) {\n      throw new SerializeError(\n        '`title` is required for a menu item group',\n        options.path,\n        this._id,\n      ).withHelpUrl(HELP_URL.TITLE_REQUIRED)\n    }\n\n    return {\n      id: this._id,\n      title: this._title,\n      i18n: this._i18n,\n    }\n  }\n}\n","import {SerializeError} from '../SerializeError'\nimport {type SerializePath} from '../StructureNodes'\n\nexport const disallowedPattern = /([^A-Za-z0-9-_.])/\n\nexport function validateId(\n  id: string,\n  parentPath: SerializePath,\n  pathSegment: string | number | undefined,\n): string {\n  if (typeof id !== 'string') {\n    throw new SerializeError(\n      `Structure node id must be of type string, got ${typeof id}`,\n      parentPath,\n      pathSegment,\n    )\n  }\n\n  const [disallowedChar] = id.match(disallowedPattern) || []\n  if (disallowedChar) {\n    throw new SerializeError(\n      `Structure node id cannot contain character \"${disallowedChar}\"`,\n      parentPath,\n      pathSegment,\n    )\n  }\n\n  if (id.startsWith('__edit__')) {\n    throw new SerializeError(\n      `Structure node id cannot start with __edit__`,\n      parentPath,\n      pathSegment,\n    )\n  }\n\n  return id\n}\n","import {camelCase} from 'lodash'\nimport getSlug from 'speakingurl'\n\nimport {disallowedPattern} from './validateId'\n\nexport function getStructureNodeId(title: string, id?: string): string {\n  if (id) {\n    return id\n  }\n\n  const camelCased = camelCase(title)\n\n  return disallowedPattern.test(camelCased) ? camelCase(getSlug(title)) : camelCased\n}\n","import {type I18nTextRecord} from 'sanity'\n\nimport {type IntentChecker} from './Intent'\nimport {maybeSerializeMenuItem, type MenuItem, type MenuItemBuilder} from './MenuItem'\nimport {\n  maybeSerializeMenuItemGroup,\n  type MenuItemGroup,\n  type MenuItemGroupBuilder,\n} from './MenuItemGroup'\nimport {HELP_URL, SerializeError} from './SerializeError'\nimport {\n  type Child,\n  type Serializable,\n  type SerializeOptions,\n  type StructureNode,\n} from './StructureNodes'\nimport {type UserComponent} from './types'\nimport {getStructureNodeId} from './util/getStructureNodeId'\nimport {validateId} from './util/validateId'\n\n/**\n * Interface for component\n *\n * @public\n */\n// TODO: rename to `StructureComponent` since it clashes with React?\nexport interface Component extends StructureNode {\n  /** Component of type {@link UserComponent} */\n  component: UserComponent\n  /** Component child of type {@link Child} */\n  child?: Child\n  /** Component menu items, array of type {@link MenuItem} */\n  menuItems: MenuItem[]\n  /** Component menu item group, array of type {@link MenuItemGroup} */\n  menuItemGroups: MenuItemGroup[]\n  /** Component options */\n  options: {[key: string]: unknown}\n  canHandleIntent?: IntentChecker\n}\n\n/**\n * Interface for component input\n *\n * @public\n */\nexport interface ComponentInput extends StructureNode {\n  /** Component of type {@link UserComponent} */\n  component: UserComponent\n  /** Component child of type {@link Child} */\n  child?: Child\n  /** Component options */\n  options?: {[key: string]: unknown}\n  /** Component menu items. See {@link MenuItem} and {@link MenuItemBuilder}  */\n  menuItems?: (MenuItem | MenuItemBuilder)[]\n  /** Component menu item groups. See {@link MenuItemGroup} and {@link MenuItemGroupBuilder} */\n  menuItemGroups?: (MenuItemGroup | MenuItemGroupBuilder)[]\n}\n\n/**\n * Interface for buildable component\n *\n * @public\n */\nexport interface BuildableComponent extends Partial<StructureNode> {\n  /** Component of type {@link UserComponent} */\n  component?: UserComponent\n  /** Component child of type {@link Child} */\n  child?: Child\n  /** Component options */\n  options?: {[key: string]: unknown}\n  /** Component menu items. See {@link MenuItem} and {@link MenuItemBuilder}  */\n  menuItems?: (MenuItem | MenuItemBuilder)[]\n  /** Component menu item groups. See {@link MenuItemGroup} and {@link MenuItemGroupBuilder} */\n  menuItemGroups?: (MenuItemGroup | MenuItemGroupBuilder)[]\n  canHandleIntent?: IntentChecker\n}\n\n/**\n * Class for building components\n *\n * @public\n */\nexport class ComponentBuilder implements Serializable<Component> {\n  /** component builder option object */\n  protected spec: BuildableComponent\n\n  constructor(spec?: ComponentInput) {\n    this.spec = {options: {}, ...(spec ? spec : {})}\n  }\n\n  /** Set Component ID\n   * @param id - component ID\n   * @returns component builder based on ID provided\n   */\n  id(id: string): ComponentBuilder {\n    return this.clone({id})\n  }\n\n  /** Get ID\n   * @returns ID\n   */\n  getId(): BuildableComponent['id'] {\n    return this.spec.id\n  }\n\n  /** Set Component title\n   * @param title - component title\n   * @returns component builder based on title provided (and ID)\n   */\n  title(title: string): ComponentBuilder {\n    return this.clone({title, id: getStructureNodeId(title, this.spec.id)})\n  }\n\n  /** Get Component title\n   * @returns title\n   */\n  getTitle(): BuildableComponent['title'] {\n    return this.spec.title\n  }\n\n  /** Set the i18n key and namespace used to populate the localized title.\n   * @param i18n - the key and namespaced used to populate the localized title.\n   * @returns component builder based on i18n key and ns provided\n   */\n  i18n(i18n: I18nTextRecord<'title'>): ComponentBuilder {\n    return this.clone({i18n})\n  }\n\n  /** Get i18n key and namespace used to populate the localized title\n   * @returns the i18n key and namespace used to populate the localized title\n   */\n  getI18n(): I18nTextRecord<'title'> | undefined {\n    return this.spec.i18n\n  }\n\n  /** Set Component child\n   * @param child - child component\n   * @returns component builder based on child component provided\n   */\n  child(child: Child): ComponentBuilder {\n    return this.clone({child})\n  }\n\n  /** Get Component child\n   * @returns child component\n   */\n  getChild(): BuildableComponent['child'] {\n    return this.spec.child\n  }\n\n  /** Set component\n   * @param component - user built component\n   * @returns component builder based on component provided\n   */\n  component(component: UserComponent): ComponentBuilder {\n    return this.clone({component})\n  }\n\n  /** Get Component\n   * @returns component\n   */\n  getComponent(): BuildableComponent['component'] {\n    return this.spec.component\n  }\n\n  /** Set Component options\n   * @param options - component options\n   * @returns component builder based on options provided\n   */\n  options(options: {[key: string]: unknown}): ComponentBuilder {\n    return this.clone({options})\n  }\n\n  /** Get Component options\n   * @returns component options\n   */\n  getOptions(): NonNullable<BuildableComponent['options']> {\n    return this.spec.options || {}\n  }\n\n  /** Set Component menu items\n   * @param menuItems - component menu items\n   * @returns component builder based on menuItems provided\n   */\n  menuItems(menuItems: (MenuItem | MenuItemBuilder)[]): ComponentBuilder {\n    return this.clone({menuItems})\n  }\n\n  /** Get Component menu items\n   * @returns menu items\n   */\n  getMenuItems(): BuildableComponent['menuItems'] {\n    return this.spec.menuItems\n  }\n\n  /** Set Component menu item groups\n   * @param menuItemGroups - component menu item groups\n   * @returns component builder based on menuItemGroups provided\n   */\n  menuItemGroups(menuItemGroups: (MenuItemGroup | MenuItemGroupBuilder)[]): ComponentBuilder {\n    return this.clone({menuItemGroups})\n  }\n\n  /** Get Component menu item groups\n   * @returns menu item groups\n   */\n  getMenuItemGroups(): BuildableComponent['menuItemGroups'] {\n    return this.spec.menuItemGroups\n  }\n\n  canHandleIntent(canHandleIntent: IntentChecker): ComponentBuilder {\n    return this.clone({canHandleIntent})\n  }\n\n  /** Serialize component\n   * @param options - serialization options\n   * @returns component object based on path provided in options\n   *\n   */\n  serialize(options: SerializeOptions = {path: []}): Component {\n    const {id, title, child, options: componentOptions, component} = this.spec\n    if (!id) {\n      throw new SerializeError(\n        '`id` is required for `component` structure item',\n        options.path,\n        options.index,\n      ).withHelpUrl(HELP_URL.ID_REQUIRED)\n    }\n\n    if (!component) {\n      throw new SerializeError(\n        '`component` is required for `component` structure item',\n        options.path,\n        options.index,\n      ).withHelpUrl(HELP_URL.ID_REQUIRED)\n    }\n\n    return {\n      id: validateId(id, options.path, options.index),\n      title,\n      type: 'component',\n      child,\n      component,\n      canHandleIntent: this.spec.canHandleIntent,\n      options: componentOptions || {},\n      menuItems: (this.spec.menuItems || []).map((item, i) =>\n        maybeSerializeMenuItem(item, i, options.path),\n      ),\n      menuItemGroups: (this.spec.menuItemGroups || []).map((item, i) =>\n        maybeSerializeMenuItemGroup(item, i, options.path),\n      ),\n    }\n  }\n\n  /** Clone component builder (allows for options overriding)\n   * @param withSpec - component builder options\n   * @returns cloned builder\n   */\n  clone(withSpec?: BuildableComponent): ComponentBuilder {\n    const builder = new ComponentBuilder()\n    builder.spec = {...this.spec, ...withSpec}\n    return builder\n  }\n}\n","import {uniqueId} from 'lodash'\nimport {type I18nTextRecord} from 'sanity'\n\nimport {type Divider, type Serializable} from './StructureNodes'\n\nexport class DividerBuilder implements Serializable<Divider> {\n  protected spec: Divider\n\n  constructor(spec?: Divider) {\n    this.spec = {\n      id: uniqueId('__divider__'),\n      type: 'divider',\n      ...spec,\n    }\n  }\n\n  /** Set the title of the divider\n   * @param title - the title of the divider\n   * @returns divider builder based on title provided\n   */\n  title(title: string): DividerBuilder {\n    return this.clone({\n      title,\n    })\n  }\n\n  /** Get the title of the divider\n   * @returns the title of the divider\n   */\n  getTitle(): Divider['title'] {\n    return this.spec.title\n  }\n\n  /** Set the i18n key and namespace used to populate the localized title.\n   * @param i18n - the key and namespaced used to populate the localized title.\n   * @returns divider builder based on i18n key and ns provided\n   */\n  i18n(i18n: I18nTextRecord<'title'>): DividerBuilder {\n    return this.clone({\n      i18n,\n    })\n  }\n\n  /** Get i18n key and namespace used to populate the localized title\n   * @returns the i18n key and namespace used to populate the localized title\n   */\n  getI18n(): I18nTextRecord<'title'> | undefined {\n    return this.spec.i18n\n  }\n\n  /** Serialize the divider\n   * @returns the serialized divider\n   */\n  serialize(): Divider {\n    return {...this.spec}\n  }\n\n  /** Clone divider builder (allows for options overriding)\n   * @param withSpec - divider builder options\n   * @returns cloned builder\n   */\n  clone(withSpec?: Partial<Divider>): DividerBuilder {\n    const builder = new DividerBuilder()\n    builder.spec = {...this.spec, ...withSpec}\n    return builder\n  }\n}\n","import {type SanityClient} from '@sanity/client'\nimport {DEFAULT_STUDIO_CLIENT_OPTIONS, getPublishedId, type SourceClientOptions} from 'sanity'\n\nexport async function resolveTypeForDocument(\n  getClient: (options: SourceClientOptions) => SanityClient,\n  id: string,\n): Promise<string | undefined> {\n  const query = '*[sanity::versionOf($publishedId)][0]._type'\n\n  const type = await getClient(DEFAULT_STUDIO_CLIENT_OPTIONS).fetch(\n    query,\n    {publishedId: getPublishedId(id)},\n    {tag: 'structure.resolve-type'},\n  )\n\n  return type\n}\n","import {kebabCase} from 'lodash'\n\nimport {HELP_URL, SerializeError} from '../SerializeError'\nimport {type Serializable, type SerializeOptions, type SerializePath} from '../StructureNodes'\nimport {type View} from '../types'\nimport {validateId} from '../util/validateId'\nimport {type ComponentViewBuilder} from './ComponentView'\nimport {type FormViewBuilder} from './FormView'\n\n/**\n * Interface for base view\n *\n * @public */\nexport interface BaseView {\n  /** View id */\n  id: string\n  /** View Title */\n  title: string\n  /** View Icon */\n  icon?: React.ComponentType | React.ReactNode\n}\n\n/**\n * Class for building generic views.\n *\n * @public\n */\nexport abstract class GenericViewBuilder<TView extends Partial<BaseView>, ConcreteImpl>\n  implements Serializable<BaseView>\n{\n  /** Generic view option object */\n  protected spec: TView = {} as TView\n\n  /** Set generic view ID\n   * @param id - generic view ID\n   * @returns generic view builder based on ID provided.\n   */\n  id(id: string): ConcreteImpl {\n    return this.clone({id})\n  }\n  /** Get generic view ID\n   * @returns generic view ID\n   */\n  getId(): TView['id'] {\n    return this.spec.id\n  }\n\n  /** Set generic view title\n   * @param title - generic view title\n   * @returns generic view builder based on title provided and (if provided) its ID.\n   */\n  title(title: string): ConcreteImpl {\n    return this.clone({title, id: this.spec.id || kebabCase(title)})\n  }\n\n  /** Get generic view title\n   * @returns generic view title\n   */\n  getTitle(): TView['title'] {\n    return this.spec.title\n  }\n\n  /** Set generic view icon\n   * @param icon - generic view icon\n   * @returns generic view builder based on icon provided.\n   */\n  icon(icon: React.ComponentType | React.ReactNode): ConcreteImpl {\n    return this.clone({icon})\n  }\n\n  /** Get generic view icon\n   * @returns generic view icon\n   */\n  getIcon(): TView['icon'] {\n    return this.spec.icon\n  }\n\n  /** Serialize generic view\n   * @param options - serialization options. See {@link SerializeOptions}\n   * @returns generic view object based on path provided in options. See {@link BaseView}\n   */\n  serialize(options: SerializeOptions = {path: []}): BaseView {\n    const {id, title, icon} = this.spec\n    if (!id) {\n      throw new SerializeError(\n        '`id` is required for view item',\n        options.path,\n        options.index,\n      ).withHelpUrl(HELP_URL.ID_REQUIRED)\n    }\n\n    if (!title) {\n      throw new SerializeError(\n        '`title` is required for view item',\n        options.path,\n        options.index,\n      ).withHelpUrl(HELP_URL.TITLE_REQUIRED)\n    }\n\n    return {\n      id: validateId(id, options.path, options.index),\n      title,\n      icon,\n    }\n  }\n\n  /** Clone generic view builder (allows for options overriding)\n   * @param withSpec - Partial generic view builder options. See {@link BaseView}\n   * @returns Generic view builder.\n   */\n  abstract clone(withSpec?: Partial<BaseView>): ConcreteImpl\n}\n\nfunction isSerializable(view: BaseView | Serializable<BaseView>): view is Serializable<BaseView> {\n  return typeof (view as Serializable<BaseView>).serialize === 'function'\n}\n\n/** @internal */\nexport function maybeSerializeView(\n  item: View | Serializable<View>,\n  index: number,\n  path: SerializePath,\n): View {\n  return isSerializable(item) ? item.serialize({path, index}) : item\n}\n\n/**\n * View builder. See {@link ComponentViewBuilder} and {@link FormViewBuilder}\n *\n * @public\n */\nexport type ViewBuilder = ComponentViewBuilder | FormViewBuilder\n","import {isRecord} from 'sanity'\n\nimport {HELP_URL, SerializeError} from '../SerializeError'\nimport {type SerializeOptions} from '../StructureNodes'\nimport {type UserViewComponent} from '../types'\nimport {type BaseView, GenericViewBuilder} from './View'\n\n/**\n * Interface for component views.\n *\n * @public */\nexport interface ComponentView<TOptions = Record<string, any>> extends BaseView {\n  type: 'component'\n  /** Component view components. See {@link UserViewComponent} */\n  component: UserViewComponent\n  /** Component view options */\n  options: TOptions\n}\n\nconst isComponentSpec = (spec: unknown): spec is ComponentView =>\n  isRecord(spec) && spec.type === 'component'\n\n/**\n * Class for building a component view.\n *\n * @public */\nexport class ComponentViewBuilder extends GenericViewBuilder<\n  Partial<ComponentView>,\n  ComponentViewBuilder\n> {\n  /** Partial Component view option object. See {@link ComponentView} */\n  protected spec: Partial<ComponentView>\n\n  constructor(\n    /**\n     * Component view component or spec\n     * @param componentOrSpec - user view component or partial component view. See {@link UserViewComponent} and {@link ComponentView}\n     */\n    componentOrSpec?: UserViewComponent | Partial<ComponentView>,\n  ) {\n    const spec = isComponentSpec(componentOrSpec) ? {...componentOrSpec} : {options: {}}\n\n    super()\n    this.spec = spec\n\n    const userComponent =\n      typeof componentOrSpec === 'function' ? componentOrSpec : this.spec.component\n\n    if (userComponent) {\n      // Because we're cloning, this'll return a new instance, so grab the spec from it\n      this.spec = this.component(userComponent).spec\n    }\n  }\n\n  /** Set view Component\n   * @param component - component view component. See {@link UserViewComponent}\n   * @returns component view builder based on component view provided. See {@link ComponentViewBuilder}\n   */\n  component(component: UserViewComponent): ComponentViewBuilder {\n    return this.clone({component})\n  }\n\n  /** Get view Component\n   * @returns Partial component view. See {@link ComponentView}\n   */\n  getComponent(): Partial<ComponentView>['component'] {\n    return this.spec.component\n  }\n\n  /** Set view Component options\n   * @param options - component view options\n   * @returns component view builder based on options provided. See {@link ComponentViewBuilder}\n   */\n  options(options: {[key: string]: any}): ComponentViewBuilder {\n    return this.clone({options})\n  }\n\n  /** Get view Component options\n   * @returns component view options. See {@link ComponentView}\n   */\n  getOptions(): ComponentView['options'] {\n    return this.spec.options || {}\n  }\n\n  /** Serialize view Component\n   * @param options - serialization options. See {@link SerializeOptions}\n   * @returns component view based on path provided in options. See {@link ComponentView}\n   *\n   */\n  serialize(options: SerializeOptions = {path: []}): ComponentView {\n    const base = super.serialize(options)\n\n    const component = this.spec.component\n    if (typeof component !== 'function') {\n      throw new SerializeError(\n        '`component` is required and must be a function for `component()` view item',\n        options.path,\n        options.index,\n      ).withHelpUrl(HELP_URL.COMPONENT_REQUIRED)\n    }\n\n    return {\n      ...base,\n      component,\n      options: this.spec.options || {},\n      type: 'component',\n    }\n  }\n\n  /** Clone Component view builder (allows for options overriding)\n   * @param withSpec - partial for component view option. See {@link ComponentView}\n   * @returns component view builder. See {@link ComponentViewBuilder}\n   */\n  clone(withSpec?: Partial<ComponentView>): ComponentViewBuilder {\n    const builder = new ComponentViewBuilder()\n    builder.spec = {...this.spec, ...withSpec}\n    return builder\n  }\n}\n","import {type SerializeOptions} from '../StructureNodes'\nimport {type BaseView, GenericViewBuilder} from './View'\n\n/**\n * Interface for form views.\n *\n * @public */\nexport interface FormView extends BaseView {\n  type: 'form'\n}\n\n/**\n * Class for building a form view.\n *\n * @public */\nexport class FormViewBuilder extends GenericViewBuilder<Partial<BaseView>, FormViewBuilder> {\n  /** Document list options. See {@link FormView} */\n  protected spec: Partial<FormView>\n\n  constructor(spec?: Partial<FormView>) {\n    super()\n    this.spec = {id: 'editor', title: 'Editor', ...(spec ? spec : {})}\n  }\n\n  /**\n   * Serialize Form view builder\n   * @param options - Serialize options. See {@link SerializeOptions}\n   * @returns form view builder based on path provided in options. See {@link FormView}\n   */\n  serialize(options: SerializeOptions = {path: []}): FormView {\n    return {\n      ...super.serialize(options),\n      type: 'form',\n    }\n  }\n\n  /**\n   * Clone Form view builder (allows for options overriding)\n   * @param withSpec - Partial form view builder options. See {@link FormView}\n   * @returns form view builder. See {@link FormViewBuilder}\n   */\n  clone(withSpec?: Partial<FormView>): FormViewBuilder {\n    const builder = new FormViewBuilder()\n    builder.spec = {...this.spec, ...withSpec}\n    return builder\n  }\n}\n","import {type UserViewComponent} from '../types'\nimport {type ComponentView, ComponentViewBuilder} from './ComponentView'\nimport {type FormView, FormViewBuilder} from './FormView'\n\nexport * from './ComponentView'\nexport * from './FormView'\nexport * from './View'\n\n/** @internal */\nexport const form = (spec?: Partial<FormView>): FormViewBuilder => new FormViewBuilder(spec)\n\n/** @internal */\nexport const component = (\n  componentOrSpec?: UserViewComponent | Partial<ComponentView>,\n): ComponentViewBuilder => new ComponentViewBuilder(componentOrSpec)\n","import {type SchemaType} from '@sanity/types'\nimport {uniq} from 'lodash'\nimport {type I18nTextRecord} from 'sanity'\n\nimport {type ChildResolver} from './ChildResolver'\nimport {HELP_URL, SerializeError} from './SerializeError'\nimport {\n  type Child,\n  type DocumentNode,\n  type EditorNode,\n  type Serializable,\n  type SerializeOptions,\n} from './StructureNodes'\nimport {type StructureContext, type View} from './types'\nimport {getStructureNodeId} from './util/getStructureNodeId'\nimport {resolveTypeForDocument} from './util/resolveTypeForDocument'\nimport {validateId} from './util/validateId'\nimport {form} from './views'\nimport {maybeSerializeView, type ViewBuilder} from './views/View'\n\nconst createDocumentChildResolver =\n  ({resolveDocumentNode, getClient}: StructureContext): ChildResolver =>\n  async (itemId, {params, path}) => {\n    let type = params.type\n\n    const parentPath = path.slice(0, path.length - 1)\n    const currentSegment = path[path.length - 1]\n\n    if (!type) {\n      type = await resolveTypeForDocument(getClient, itemId)\n    }\n\n    if (!type) {\n      throw new SerializeError(\n        `Failed to resolve document, and no type provided in parameters.`,\n        parentPath,\n        currentSegment,\n      )\n    }\n\n    return resolveDocumentNode({documentId: itemId, schemaType: type})\n  }\n\n/**\n * Interface for options of Partial Documents. See {@link PartialDocumentNode}\n *\n * @public */\nexport interface DocumentOptions {\n  /** Document Id */\n  id: string\n  /** Document Type */\n  type: string\n  /** Document Template */\n  template?: string\n  /** Template parameters */\n  templateParameters?: Record<string, unknown>\n}\n\n/**\n * Interface for partial document (focused on the document pane)\n *\n * @public */\nexport interface PartialDocumentNode {\n  /** Document Id */\n  id?: string\n  /** Document title */\n  title?: string\n  /** I18n key and namespace used to populate the localized title */\n  i18n?: I18nTextRecord<'title'>\n  /** Document children of type {@link Child} */\n  child?: Child\n  /**\n   * Views for the document pane. See {@link ViewBuilder} and {@link View}\n   */\n  views?: (View | ViewBuilder)[]\n  /**\n   * Document options. See {@link DocumentOptions}\n   */\n  options?: Partial<DocumentOptions>\n}\n\n/**\n * A `DocumentBuilder` is used to build a document node.\n *\n * @public */\nexport class DocumentBuilder implements Serializable<DocumentNode> {\n  /** Component builder option object See {@link PartialDocumentNode} */\n  protected spec: PartialDocumentNode\n\n  protected _context: StructureContext\n\n  constructor(\n    /**\n     * Structure context. See {@link StructureContext}\n     */\n    _context: StructureContext,\n    spec?: PartialDocumentNode,\n  ) {\n    this._context = _context\n    this.spec = spec ? spec : {}\n  }\n\n  /** Set Document Builder ID\n   * @param id - document builder ID\n   * @returns document builder based on ID provided. See {@link DocumentBuilder}\n   */\n  id(id: string): DocumentBuilder {\n    return this.clone({id})\n  }\n\n  /** Get Document Builder ID\n   * @returns document ID. See {@link PartialDocumentNode}\n   */\n  getId(): PartialDocumentNode['id'] {\n    return this.spec.id\n  }\n\n  /** Set Document title\n   * @param title - document title\n   * @returns document builder based on title provided (and ID). See {@link DocumentBuilder}\n   */\n  title(title: string): DocumentBuilder {\n    return this.clone({title, id: getStructureNodeId(title, this.spec.id)})\n  }\n\n  /** Get Document title\n   * @returns document title. See {@link PartialDocumentNode}\n   */\n  getTitle(): PartialDocumentNode['title'] {\n    return this.spec.title\n  }\n\n  /** Set the i18n key and namespace used to populate the localized title.\n   * @param i18n - the key and namespaced used to populate the localized title.\n   * @returns component builder based on i18n key and ns provided\n   */\n  i18n(i18n: I18nTextRecord<'title'>): DocumentBuilder {\n    return this.clone({i18n})\n  }\n\n  /** Get i18n key and namespace used to populate the localized title\n   * @returns the i18n key and namespace used to populate the localized title\n   */\n  getI18n(): I18nTextRecord<'title'> | undefined {\n    return this.spec.i18n\n  }\n\n  /** Set Document child\n   * @param child - document child\n   * @returns document builder based on child provided. See {@link DocumentBuilder}\n   */\n  child(child: Child): DocumentBuilder {\n    return this.clone({child})\n  }\n\n  /** Get Document child\n   * @returns document child. See {@link PartialDocumentNode}\n   */\n  getChild(): PartialDocumentNode['child'] {\n    return this.spec.child\n  }\n\n  /** Set Document ID\n   * @param documentId - document ID\n   * @returns document builder with document based on ID provided. See {@link DocumentBuilder}\n   */\n  documentId(documentId: string): DocumentBuilder {\n    // Let's try to be a bit helpful and assign an ID from document ID if none is specified\n    const paneId = this.spec.id || documentId\n    return this.clone({\n      id: paneId,\n      options: {\n        ...this.spec.options,\n        id: documentId,\n      },\n    })\n  }\n\n  /** Get Document ID\n   * @returns document ID. See {@link DocumentOptions}\n   */\n  getDocumentId(): Partial<DocumentOptions>['id'] {\n    return this.spec.options?.id\n  }\n\n  /** Set Document Type\n   * @param documentType - document type\n   * @returns document builder with document based on type provided. See {@link DocumentBuilder}\n   */\n  schemaType(documentType: SchemaType | string): DocumentBuilder {\n    return this.clone({\n      options: {\n        ...this.spec.options,\n        type: typeof documentType === 'string' ? documentType : documentType.name,\n      },\n    })\n  }\n\n  /** Get Document Type\n   * @returns document type. See {@link DocumentOptions}\n   */\n  getSchemaType(): Partial<DocumentOptions>['type'] {\n    return this.spec.options?.type\n  }\n\n  /** Set Document Template\n   * @param templateId - document template ID\n   * @param parameters - document template parameters\n   * @returns document builder with document based on template provided. See {@link DocumentBuilder}\n   */\n  initialValueTemplate(templateId: string, parameters?: Record<string, unknown>): DocumentBuilder {\n    return this.clone({\n      options: {\n        ...this.spec.options,\n        template: templateId,\n        templateParameters: parameters,\n      },\n    })\n  }\n\n  /** Get Document Template\n   * @returns document template. See {@link DocumentOptions}\n   */\n  getInitialValueTemplate(): Partial<DocumentOptions>['template'] {\n    return this.spec.options?.template\n  }\n\n  /** Get Document's initial value Template parameters\n   * @returns document template parameters. See {@link DocumentOptions}\n   */\n  getInitialValueTemplateParameters(): Partial<DocumentOptions>['templateParameters'] {\n    return this.spec.options?.templateParameters\n  }\n\n  /** Set Document views\n   * @param views - document views. See {@link ViewBuilder} and {@link View}\n   * @returns document builder with document based on views provided. See {@link DocumentBuilder}\n   */\n  views(views: (View | ViewBuilder)[]): DocumentBuilder {\n    return this.clone({views})\n  }\n\n  /** Get Document views\n   * @returns document views. See {@link ViewBuilder} and {@link View}\n   */\n  getViews(): (View | ViewBuilder)[] {\n    return this.spec.views || []\n  }\n\n  /** Serialize Document builder\n   * @param options - serialization options. See {@link SerializeOptions}\n   * @returns document node based on path, index and hint provided in options. See {@link DocumentNode}\n   */\n  serialize({path = [], index, hint}: SerializeOptions = {path: []}): DocumentNode {\n    const urlId = path[index || path.length - 1]\n\n    // Try to grab document ID / editor ID from URL if not defined\n    const id = this.spec.id || (urlId && `${urlId}`) || ''\n    const options: Partial<DocumentOptions> = {\n      id,\n      type: undefined,\n      template: undefined,\n      templateParameters: undefined,\n      ...this.spec.options,\n    }\n\n    if (typeof id !== 'string' || !id) {\n      throw new SerializeError(\n        '`id` is required for document nodes',\n        path,\n        index,\n        hint,\n      ).withHelpUrl(HELP_URL.ID_REQUIRED)\n    }\n\n    if (!options || !options.id) {\n      throw new SerializeError(\n        'document id (`id`) is required for document nodes',\n        path,\n        id,\n        hint,\n      ).withHelpUrl(HELP_URL.DOCUMENT_ID_REQUIRED)\n    }\n\n    if (!options || !options.type) {\n      throw new SerializeError(\n        'document type (`schemaType`) is required for document nodes',\n        path,\n        id,\n        hint,\n      )\n    }\n\n    const views = (this.spec.views && this.spec.views.length > 0 ? this.spec.views : [form()]).map(\n      (item, i) => maybeSerializeView(item, i, path),\n    )\n\n    const viewIds = views.map((view) => view.id)\n    const dupes = uniq(viewIds.filter((viewId, i) => viewIds.includes(viewId, i + 1)))\n    if (dupes.length > 0) {\n      throw new SerializeError(\n        `document node has views with duplicate IDs: ${dupes.join(',  ')}`,\n        path,\n        id,\n        hint,\n      )\n    }\n\n    return {\n      ...this.spec,\n      child: this.spec.child || createDocumentChildResolver(this._context),\n      id: validateId(id, path, index),\n      type: 'document',\n      options: getDocumentOptions(options),\n      views,\n    }\n  }\n\n  /** Clone Document builder\n   * @param withSpec - partial document node specification used to extend the cloned builder. See {@link PartialDocumentNode}\n   * @returns document builder based on context and spec provided. See {@link DocumentBuilder}\n   */\n  clone(withSpec: PartialDocumentNode = {}): DocumentBuilder {\n    const builder = new DocumentBuilder(this._context)\n    const options = {...this.spec.options, ...withSpec.options}\n    builder.spec = {...this.spec, ...withSpec, options}\n    return builder\n  }\n}\n\nfunction getDocumentOptions(spec: Partial<DocumentOptions>): DocumentOptions {\n  const opts: DocumentOptions = {\n    id: spec.id || '',\n    type: spec.type || '*',\n  }\n\n  if (spec.template) {\n    opts.template = spec.template\n  }\n\n  if (spec.templateParameters) {\n    opts.templateParameters = spec.templateParameters\n  }\n\n  return opts\n}\n\n/** @internal */\nexport function documentFromEditor(context: StructureContext, spec?: EditorNode): DocumentBuilder {\n  let doc = spec?.type\n    ? // Use user-defined document fragment as base if possible\n      context.resolveDocumentNode({schemaType: spec.type})\n    : // Fall back to plain old document builder\n      new DocumentBuilder(context)\n\n  if (!spec) return doc\n\n  const {id, type, template, templateParameters} = spec.options\n  doc = doc.id(spec.id).documentId(id)\n\n  if (type) {\n    doc = doc.schemaType(type)\n  }\n  if (template) {\n    doc = doc.initialValueTemplate(template, templateParameters)\n  }\n  if (spec.child) {\n    doc = doc.child(spec.child)\n  }\n\n  return doc\n}\n\n/** @internal */\nexport function documentFromEditorWithInitialValue(\n  {resolveDocumentNode, templates}: StructureContext,\n  templateId: string,\n  parameters?: Record<string, unknown>,\n): DocumentBuilder {\n  const template = templates.find((t) => t.id === templateId)\n\n  if (!template) {\n    throw new Error(`Template with ID \"${templateId}\" not defined`)\n  }\n\n  return resolveDocumentNode({schemaType: template.schemaType}).initialValueTemplate(\n    templateId,\n    parameters,\n  )\n}\n","import {AddIcon} from '@sanity/icons'\nimport {type InitialValueTemplateItem} from 'sanity'\n\nimport {type BaseIntentParams, type IntentParams} from './Intent'\nimport {type MenuItem, MenuItemBuilder} from './MenuItem'\nimport {HELP_URL, SerializeError} from './SerializeError'\nimport {type Serializable, type SerializeOptions, type SerializePath} from './StructureNodes'\nimport {type StructureContext} from './types'\n\n/**\n * A `InitialValueTemplateItemBuilder` is used to build a document node with an initial value set.\n *\n * @public\n */\nexport class InitialValueTemplateItemBuilder implements Serializable<InitialValueTemplateItem> {\n  /** Initial Value template item option object. See {@link InitialValueTemplateItem} */\n  protected spec: Partial<InitialValueTemplateItem>\n\n  protected _context: StructureContext\n\n  constructor(\n    /**\n     * Structure context. See {@link StructureContext}\n     */\n    _context: StructureContext,\n    spec?: Partial<InitialValueTemplateItem>,\n  ) {\n    this._context = _context\n    this.spec = spec ? spec : {}\n  }\n\n  /** Set initial value template item builder ID\n   * @param id - initial value template item ID\n   * @returns initial value template item based on ID provided. See {@link InitialValueTemplateItemBuilder}\n   */\n  id(id: string): InitialValueTemplateItemBuilder {\n    return this.clone({id})\n  }\n\n  /** Get initial value template item builder ID\n   * @returns initial value template item ID. See {@link InitialValueTemplateItem}\n   */\n  getId(): Partial<InitialValueTemplateItem>['id'] {\n    return this.spec.id\n  }\n\n  /** Set initial value template item title\n   * @param title - initial value template item title\n   * @returns initial value template item based on title provided. See {@link InitialValueTemplateItemBuilder}\n   */\n  title(title: string): InitialValueTemplateItemBuilder {\n    return this.clone({title})\n  }\n\n  /** Get initial value template item title\n   * @returns initial value template item title. See {@link InitialValueTemplateItem}\n   */\n  getTitle(): Partial<InitialValueTemplateItem>['title'] {\n    return this.spec.title\n  }\n\n  /** Set initial value template item description\n   * @param description - initial value template item description\n   * @returns initial value template item builder based on description provided. See {@link InitialValueTemplateItemBuilder}\n   */\n  description(description: string): InitialValueTemplateItemBuilder {\n    return this.clone({description})\n  }\n\n  /** Get initial value template item description\n   * @returns initial value template item description. See {@link InitialValueTemplateItem}\n   */\n  getDescription(): Partial<InitialValueTemplateItem>['description'] {\n    return this.spec.description\n  }\n\n  /** Set initial value template ID\n   * @param templateId - initial value template item template ID\n   * @returns initial value template item based builder on template ID provided. See {@link InitialValueTemplateItemBuilder}\n   */\n  templateId(templateId: string): InitialValueTemplateItemBuilder {\n    // Let's try to be a bit helpful and assign an ID from template ID if none is specified\n    const paneId = this.spec.id || templateId\n    return this.clone({\n      id: paneId,\n      templateId,\n    })\n  }\n\n  /** Get initial value template item template ID\n   * @returns initial value template item ID. See {@link InitialValueTemplateItem}\n   */\n  getTemplateId(): Partial<InitialValueTemplateItem>['templateId'] {\n    return this.spec.templateId\n  }\n\n  /** Get initial value template item template parameters\n   * @param parameters - initial value template item parameters\n   * @returns initial value template item builder based on parameters provided. See {@link InitialValueTemplateItemBuilder}\n   */\n  parameters(parameters: {[key: string]: any}): InitialValueTemplateItemBuilder {\n    return this.clone({parameters})\n  }\n\n  /** Get initial value template item template parameters\n   * @returns initial value template item parameters. See {@link InitialValueTemplateItem}\n   */\n  getParameters(): Partial<InitialValueTemplateItem>['parameters'] {\n    return this.spec.parameters\n  }\n\n  /** Serialize initial value template item\n   * @param options - serialization options. See {@link SerializeOptions}\n   * @returns initial value template item object based on the path, index and hint provided in options. See {@link InitialValueTemplateItem}\n   */\n  serialize({path = [], index, hint}: SerializeOptions = {path: []}): InitialValueTemplateItem {\n    if (typeof this.spec.id !== 'string' || !this.spec.id) {\n      throw new SerializeError(\n        '`id` is required for initial value template item nodes',\n        path,\n        index,\n        hint,\n      ).withHelpUrl(HELP_URL.ID_REQUIRED)\n    }\n\n    if (!this.spec.templateId) {\n      throw new SerializeError(\n        'template id (`templateId`) is required for initial value template item nodes',\n        path,\n        this.spec.id,\n        hint,\n      ).withHelpUrl(HELP_URL.ID_REQUIRED)\n    }\n\n    const template = this._context.templates.find((t) => t.id === this.spec.templateId)\n\n    if (!template) {\n      throw new SerializeError(\n        'template id (`templateId`) is required for initial value template item nodes',\n        path,\n        this.spec.id,\n        hint,\n      ).withHelpUrl(HELP_URL.ID_REQUIRED)\n    }\n\n    return {\n      id: this.spec.id,\n      templateId: this.spec.id,\n      schemaType: template.schemaType,\n      type: 'initialValueTemplateItem',\n      description: this.spec.description || template.description,\n      title: this.spec.title || template.title,\n      subtitle: this.spec.subtitle,\n      icon: this.spec.icon || template.icon,\n      initialDocumentId: this.spec.initialDocumentId,\n      parameters: this.spec.parameters,\n    }\n  }\n\n  /** Clone generic view builder (allows for options overriding)\n   * @param withSpec - initial value template item builder options. See {@link InitialValueTemplateItemBuilder}\n   * @returns initial value template item builder based on the context and options provided. See {@link InitialValueTemplateItemBuilder}\n   */\n  clone(withSpec: Partial<InitialValueTemplateItem> = {}): InitialValueTemplateItemBuilder {\n    const builder = new InitialValueTemplateItemBuilder(this._context)\n    builder.spec = {...this.spec, ...withSpec}\n    return builder\n  }\n}\n\n/** @internal */\nexport function defaultInitialValueTemplateItems(\n  context: StructureContext,\n): InitialValueTemplateItemBuilder[] {\n  const {schema, getStructureBuilder, templates} = context\n\n  // Sort templates by their schema type, in order or definition\n  const typeNames = schema.getTypeNames()\n  const ordered = templates\n    // Don't list templates that require parameters\n    // TODO: this should use the new-document template items instead maybe?\n    .filter((tpl) => !tpl.parameters?.length)\n    .sort((a, b) => typeNames.indexOf(a.schemaType) - typeNames.indexOf(b.schemaType))\n\n  // Create actual template items out of the templates\n  return ordered.map((tpl) => getStructureBuilder().initialValueTemplateItem(tpl.id))\n}\n\n/** @internal */\nexport function maybeSerializeInitialValueTemplateItem(\n  item: InitialValueTemplateItem | InitialValueTemplateItemBuilder,\n  index: number,\n  path: SerializePath,\n): InitialValueTemplateItem {\n  return item instanceof InitialValueTemplateItemBuilder ? item.serialize({path, index}) : item\n}\n\n/** @internal */\nexport function menuItemsFromInitialValueTemplateItems(\n  context: StructureContext,\n  templateItems: InitialValueTemplateItem[],\n): MenuItem[] {\n  const {schema, templates} = context\n  return templateItems.map((item) => {\n    const template = templates.find((t) => t.id === item.templateId)\n    const title = item.title || template?.title || 'Create'\n\n    const params: BaseIntentParams = {}\n    if (template && template.schemaType) {\n      params.type = template.schemaType\n    }\n\n    if (item.templateId) {\n      params.template = item.templateId\n    }\n\n    const intentParams: IntentParams = item.parameters ? [params, item.parameters] : params\n    const schemaType = template && schema.get(template.schemaType)\n\n    const i18n = item.i18n || template?.i18n\n\n    let builder = new MenuItemBuilder(context)\n      .title(title)\n      .icon((template && template.icon) || schemaType?.icon || AddIcon)\n      .intent({type: 'create', params: intentParams})\n\n    if (i18n) {\n      builder = builder.i18n(i18n)\n    }\n\n    return builder.serialize()\n  })\n}\n","import {type SearchParam} from 'sanity/router'\n\nimport {getTypeNamesFromFilter, type PartialDocumentList} from './DocumentList'\nimport {type StructureNode} from './StructureNodes'\n\n/**\n * Intent parameters (json)\n *\n * @public\n */\nexport type IntentJsonParams = {[key: string]: any}\n\n/**\n * Base intent parameters\n *\n * @public\n * @todo dedupe with core\n */\nexport interface BaseIntentParams {\n  /**\n   * Document schema type name to create/edit.\n   * Required for `create` intents, optional for `edit` (but encouraged, safer and faster)\n   */\n  type?: string\n\n  /**\n   * ID of the document to create/edit.\n   * Required for `edit` intents, optional for `create`.\n   */\n  id?: string\n\n  /**\n   * Name (ID) of initial value template to use for `create` intent. Optional.\n   */\n  template?: string\n\n  /**\n   * Experimental field path\n   *\n   * @beta\n   * @experimental\n   * @hidden\n   */\n  path?: string\n\n  /**\n   * Optional \"mode\" to use for edit intent.\n   * Known modes are `structure` and `presentation`.\n   */\n  mode?: string\n\n  /**\n   * Arbitrary/custom parameters are generally discouraged - try to keep them to a minimum,\n   * or use `payload` (arbitrary JSON-serializable object) instead.\n   */\n  [key: string]: string | undefined\n}\n\n/** @internal */\nexport const DEFAULT_INTENT_HANDLER = Symbol('Document type list canHandleIntent')\n\n/**\n * Intent parameters\n * See {@link structure.BaseIntentParams} and {@link structure.IntentJsonParams}\n *\n * @public\n */\nexport type IntentParams = BaseIntentParams | [BaseIntentParams, IntentJsonParams]\n\n/**\n * Interface for intents\n * @public */\n// TODO: intents should be unified somewhere\nexport interface Intent {\n  /** Intent type */\n  type: string\n  /** Intent parameters. See {@link IntentParams}\n   */\n  params?: IntentParams\n\n  searchParams?: SearchParam[]\n}\n\n/**\n * Interface for intent checker\n *\n * @public\n */\nexport interface IntentChecker {\n  (\n    /** Intent name */\n    intentName: string,\n    /** Intent checker parameter */\n    params: {[key: string]: any},\n    /** Structure context. See {@link StructureNode} */\n    context: {pane: StructureNode; index: number},\n  ): boolean\n  /** intent checker identify */\n  identity?: symbol\n}\n\n/** @internal */\nexport const defaultIntentChecker: IntentChecker = (intentName, params, {pane}): boolean => {\n  const isEdit = intentName === 'edit'\n  const isCreate = intentName === 'create'\n  const typedSpec = pane as PartialDocumentList\n  const paneFilter = typedSpec.options?.filter || ''\n  const paneParams = typedSpec.options?.params || {}\n  const typeNames = typedSpec.schemaTypeName\n    ? [typedSpec.schemaTypeName]\n    : getTypeNamesFromFilter(paneFilter, paneParams)\n\n  const initialValueTemplates = typedSpec.initialValueTemplates || []\n\n  if (isCreate && params.template) {\n    return initialValueTemplates.some((tpl) => tpl.templateId === params.template)\n  }\n\n  return (\n    (isEdit && params.id && typeNames.includes(params.type)) ||\n    (isCreate && typeNames.includes(params.type))\n  )\n}\n\ndefaultIntentChecker.identity = DEFAULT_INTENT_HANDLER\n","export const layoutOptions = ['default', 'card', 'media', 'detail', 'block']\n","import {type I18nTextRecord, type InitialValueTemplateItem, type PreviewLayoutKey} from 'sanity'\n\nimport {\n  type InitialValueTemplateItemBuilder,\n  maybeSerializeInitialValueTemplateItem,\n} from './InitialValueTemplateItem'\nimport {defaultIntentChecker, type IntentChecker} from './Intent'\nimport {layoutOptions} from './Layout'\nimport {maybeSerializeMenuItem, type MenuItem, type MenuItemBuilder} from './MenuItem'\nimport {\n  maybeSerializeMenuItemGroup,\n  type MenuItemGroup,\n  type MenuItemGroupBuilder,\n} from './MenuItemGroup'\nimport {SerializeError} from './SerializeError'\nimport {\n  type Child,\n  type Serializable,\n  type SerializeOptions,\n  type StructureNode,\n} from './StructureNodes'\nimport {getStructureNodeId} from './util/getStructureNodeId'\nimport {validateId} from './util/validateId'\n\nfunction noChildResolver() {\n  return undefined\n}\n\n/** @internal */\nexport const shallowIntentChecker: IntentChecker = (intentName, params, {pane, index}): boolean => {\n  return index <= 1 && defaultIntentChecker(intentName, params, {pane, index})\n}\n\n/**\n * Interface for list display options\n *\n * @public */\nexport interface ListDisplayOptions {\n  /** Check if list display should show icons */\n  showIcons?: boolean\n}\n\n/**\n * Interface for base generic list\n *\n * @public\n */\nexport interface BaseGenericList extends StructureNode {\n  /** List layout key. */\n  defaultLayout?: PreviewLayoutKey\n  /** Can handle intent. See {@link IntentChecker} */\n  canHandleIntent?: IntentChecker\n  /** List display options. See {@link ListDisplayOptions} */\n  displayOptions?: ListDisplayOptions\n  /** List child. See {@link Child} */\n  child: Child\n  /** List initial values array. See {@link InitialValueTemplateItem} and {@link InitialValueTemplateItemBuilder} */\n  initialValueTemplates?: (InitialValueTemplateItem | InitialValueTemplateItemBuilder)[]\n}\n\n/**\n * Interface for generic list\n *\n * @public\n */\n// \"POJO\"/verbatim-version - end result\nexport interface GenericList extends BaseGenericList {\n  /** List type */\n  type: string\n  /** List menu items array. See {@link MenuItem} */\n  menuItems: MenuItem[]\n  /** List menu item groups array. See {@link MenuItemGroup} */\n  menuItemGroups: MenuItemGroup[]\n}\n\n/**\n * Interface for buildable generic list\n *\n * @public\n */\n// Used internally in builder classes to make everything optional\nexport interface BuildableGenericList extends Partial<BaseGenericList> {\n  /** List menu items array. See {@link MenuItem} and {@link MenuItemBuilder} */\n  menuItems?: (MenuItem | MenuItemBuilder)[]\n  /** List menu items groups array. See {@link MenuItemGroup} and {@link MenuItemGroupBuilder} */\n  menuItemGroups?: (MenuItemGroup | MenuItemGroupBuilder)[]\n}\n\n/**\n * Interface for generic list input\n * Allows builders and only requires things not inferrable\n *\n * @public */\n// Input version, allows builders and only requires things not inferrable\nexport interface GenericListInput extends StructureNode {\n  /** Input id */\n  id: string\n  /** Input title */\n  title: string\n  /** Input menu items groups. See {@link MenuItem} and {@link MenuItemBuilder} */\n  menuItems?: (MenuItem | MenuItemBuilder)[]\n  /** Input menu items groups. See {@link MenuItemGroup} and {@link MenuItemGroupBuilder} */\n  menuItemGroups?: (MenuItemGroup | MenuItemGroupBuilder)[]\n  /** Input initial value array. See {@link InitialValueTemplateItem} and {@link InitialValueTemplateItemBuilder} */\n  initialValueTemplates?: (InitialValueTemplateItem | InitialValueTemplateItemBuilder)[]\n  /** Input default layout. */\n  defaultLayout?: PreviewLayoutKey\n  /** If input can handle intent. See {@link IntentChecker} */\n  canHandleIntent?: IntentChecker\n  /** Input child of type {@link Child} */\n  child?: Child\n}\n\n/**\n * Class for building generic lists\n *\n * @public\n */\nexport abstract class GenericListBuilder<TList extends BuildableGenericList, ConcreteImpl>\n  implements Serializable<GenericList>\n{\n  /** Check if initial value templates are set */\n  protected initialValueTemplatesSpecified = false\n  /** Generic list option object */\n  protected spec: TList = {} as TList\n\n  /** Set generic list ID\n   * @param id - generic list ID\n   * @returns generic list builder based on ID provided.\n   */\n  id(id: string): ConcreteImpl {\n    return this.clone({id})\n  }\n\n  /** Get generic list ID\n   * @returns generic list ID\n   */\n  getId(): TList['id'] {\n    return this.spec.id\n  }\n\n  /** Set generic list title\n   * @param title - generic list title\n   * @returns generic list builder based on title and ID provided.\n   */\n  title(title: string): ConcreteImpl {\n    return this.clone({title, id: getStructureNodeId(title, this.spec.id)})\n  }\n\n  /** Get generic list title\n   * @returns generic list title\n   */\n  getTitle(): TList['title'] {\n    return this.spec.title\n  }\n\n  /** Set the i18n key and namespace used to populate the localized title.\n   * @param i18n - the key and namespaced used to populate the localized title.\n   * @returns component builder based on i18n key and ns provided\n   */\n  i18n(i18n: I18nTextRecord<'title'>): ConcreteImpl {\n    return this.clone({i18n})\n  }\n\n  /** Get i18n key and namespace used to populate the localized title\n   * @returns the i18n key and namespace used to populate the localized title\n   */\n  getI18n(): TList['i18n'] {\n    return this.spec.i18n\n  }\n\n  /** Set generic list layout\n   * @param defaultLayout - generic list layout key.\n   * @returns generic list builder based on layout provided.\n   */\n  defaultLayout(defaultLayout: PreviewLayoutKey): ConcreteImpl {\n    return this.clone({defaultLayout})\n  }\n\n  /** Get generic list layout\n   * @returns generic list layout\n   */\n  getDefaultLayout(): TList['defaultLayout'] {\n    return this.spec.defaultLayout\n  }\n\n  /** Set generic list menu items\n   * @param menuItems - generic list menu items. See {@link MenuItem} and {@link MenuItemBuilder}\n   * @returns generic list builder based on menu items provided.\n   */\n  menuItems(menuItems: (MenuItem | MenuItemBuilder)[] | undefined): ConcreteImpl {\n    return this.clone({menuItems})\n  }\n\n  /** Get generic list menu items\n   * @returns generic list menu items\n   */\n  getMenuItems(): TList['menuItems'] {\n    return this.spec.menuItems\n  }\n\n  /** Set generic list menu item groups\n   * @param menuItemGroups - generic list menu item groups. See {@link MenuItemGroup} and {@link MenuItemGroupBuilder}\n   * @returns generic list builder based on menu item groups provided.\n   */\n  menuItemGroups(menuItemGroups: (MenuItemGroup | MenuItemGroupBuilder)[]): ConcreteImpl {\n    return this.clone({menuItemGroups})\n  }\n\n  /** Get generic list menu item groups\n   * @returns generic list menu item groups\n   */\n  getMenuItemGroups(): TList['menuItemGroups'] {\n    return this.spec.menuItemGroups\n  }\n\n  /** Set generic list child\n   * @param child - generic list child. See {@link Child}\n   * @returns generic list builder based on child provided (clone).\n   */\n  child(child: Child): ConcreteImpl {\n    return this.clone({child})\n  }\n\n  /** Get generic list child\n   * @returns generic list child\n   */\n  getChild(): TList['child'] {\n    return this.spec.child\n  }\n\n  /** Set generic list can handle intent\n   * @param canHandleIntent - generic list intent checker. See {@link IntentChecker}\n   * @returns generic list builder based on can handle intent provided.\n   */\n  canHandleIntent(canHandleIntent?: IntentChecker): ConcreteImpl {\n    return this.clone({canHandleIntent})\n  }\n\n  /** Get generic list can handle intent\n   * @returns generic list can handle intent\n   */\n  getCanHandleIntent(): TList['canHandleIntent'] {\n    return this.spec.canHandleIntent\n  }\n\n  /** Set generic list display options\n   * @param enabled - allow / disallow for showing icons\n   * @returns generic list builder based on display options (showIcons) provided.\n   */\n  showIcons(enabled = true): ConcreteImpl {\n    return this.clone({\n      displayOptions: {...this.spec.displayOptions, showIcons: enabled},\n    })\n  }\n\n  /** Get generic list display options\n   * @returns generic list display options (specifically showIcons)\n   */\n  getShowIcons(): boolean | undefined {\n    return this.spec.displayOptions ? this.spec.displayOptions.showIcons : undefined\n  }\n\n  /** Set generic list initial value templates\n   * @param templates - generic list initial value templates. See {@link InitialValueTemplateItemBuilder}\n   * @returns generic list builder based on templates provided.\n   */\n  initialValueTemplates(\n    templates:\n      | InitialValueTemplateItem\n      | InitialValueTemplateItemBuilder\n      | Array<InitialValueTemplateItem | InitialValueTemplateItemBuilder>,\n  ): ConcreteImpl {\n    this.initialValueTemplatesSpecified = true\n    return this.clone({initialValueTemplates: Array.isArray(templates) ? templates : [templates]})\n  }\n\n  /** Get generic list initial value templates\n   * @returns generic list initial value templates\n   */\n  getInitialValueTemplates(): TList['initialValueTemplates'] {\n    return this.spec.initialValueTemplates\n  }\n\n  /** Serialize generic list\n   * @param options - serialization options. See {@link SerializeOptions}\n   * @returns generic list object based on path provided in options. See {@link GenericList}\n   */\n  serialize(options: SerializeOptions = {path: []}): GenericList {\n    const id = this.spec.id || ''\n    const path = options.path\n\n    const defaultLayout = this.spec.defaultLayout\n    if (defaultLayout && !layoutOptions.includes(defaultLayout)) {\n      throw new SerializeError(\n        `\\`layout\\` must be one of ${layoutOptions.map((item) => `\"${item}\"`).join(', ')}`,\n        path,\n        id || options.index,\n        this.spec.title,\n      )\n    }\n\n    const initialValueTemplates = (this.spec.initialValueTemplates || []).map((item, i) =>\n      maybeSerializeInitialValueTemplateItem(item, i, path),\n    )\n\n    return {\n      id: validateId(id, options.path, id || options.index),\n      title: this.spec.title,\n      i18n: this.spec.i18n,\n      type: 'genericList',\n      defaultLayout,\n      child: this.spec.child || noChildResolver,\n      canHandleIntent: this.spec.canHandleIntent || shallowIntentChecker,\n      displayOptions: this.spec.displayOptions,\n      initialValueTemplates,\n      menuItems: (this.spec.menuItems || []).map((item, i) =>\n        maybeSerializeMenuItem(item, i, path),\n      ),\n      menuItemGroups: (this.spec.menuItemGroups || []).map((item, i) =>\n        maybeSerializeMenuItemGroup(item, i, path),\n      ),\n    }\n  }\n\n  /** Clone generic list builder (allows for options overriding)\n   * @param _withSpec - generic list options.\n   * @returns generic list builder.\n   */\n  abstract clone(_withSpec?: object): ConcreteImpl\n}\n","import {generateHelpUrl} from '@sanity/generate-help-url'\nimport {AddIcon} from '@sanity/icons'\nimport {type SchemaType, type SortOrderingItem} from '@sanity/types'\nimport {DEFAULT_STUDIO_CLIENT_OPTIONS, type InitialValueTemplateItem} from 'sanity'\n\nimport {type ChildResolver, type ChildResolverOptions, type ItemChild} from './ChildResolver'\nimport {DocumentBuilder} from './Document'\nimport {\n  type BuildableGenericList,\n  type GenericList,\n  GenericListBuilder,\n  type GenericListInput,\n} from './GenericList'\nimport {HELP_URL, SerializeError} from './SerializeError'\nimport {type Child, type SerializeOptions} from './StructureNodes'\nimport {type StructureContext} from './types'\nimport {resolveTypeForDocument} from './util/resolveTypeForDocument'\n\nconst validateFilter = (spec: PartialDocumentList, options: SerializeOptions) => {\n  const filter = spec.options?.filter.trim() || ''\n\n  if (['*', '{'].includes(filter[0])) {\n    throw new SerializeError(\n      `\\`filter\\` cannot start with \\`${filter[0]}\\` - looks like you are providing a query, not a filter`,\n      options.path,\n      spec.id,\n      spec.title,\n    ).withHelpUrl(HELP_URL.QUERY_PROVIDED_FOR_FILTER)\n  }\n\n  return filter\n}\n\nconst createDocumentChildResolverForItem =\n  (context: StructureContext): ChildResolver =>\n  (itemId: string, options: ChildResolverOptions): ItemChild | Promise<ItemChild> | undefined => {\n    const parentItem = options.parent as DocumentList\n    const template = options.params?.template\n      ? context.templates.find((tpl) => tpl.id === options.params.template)\n      : undefined\n    const type = template\n      ? template.schemaType\n      : parentItem.schemaTypeName || resolveTypeForDocument(context.getClient, itemId)\n\n    return Promise.resolve(type).then((schemaType) =>\n      schemaType\n        ? context.resolveDocumentNode({schemaType, documentId: itemId})\n        : new DocumentBuilder(context).id('editor').documentId(itemId).schemaType(''),\n    )\n  }\n\n/**\n * Partial document list\n *\n * @public\n */\nexport interface PartialDocumentList extends BuildableGenericList {\n  /** Document list options. See {@link DocumentListOptions} */\n  options?: DocumentListOptions\n  /** Schema type name */\n  schemaTypeName?: string\n}\n\n/**\n * Interface for document list input\n *\n * @public\n */\nexport interface DocumentListInput extends GenericListInput {\n  /** Document list options. See {@link DocumentListOptions} */\n  options: DocumentListOptions\n}\n\n/**\n * Interface for document list\n *\n * @public\n */\nexport interface DocumentList extends GenericList {\n  type: 'documentList'\n  /** Document list options. See {@link DocumentListOptions} */\n  options: DocumentListOptions\n  /** Document list child. See {@link Child} */\n  child: Child\n  /** Document schema type name */\n  schemaTypeName?: string\n}\n\n/**\n * Interface for document List options\n *\n * @public\n */\nexport interface DocumentListOptions {\n  /** Document list filter */\n  filter: string\n  /** Document list parameters */\n  params?: Record<string, unknown>\n  /** Document list API version */\n  apiVersion?: string\n  /** Document list API default ordering array. */\n  defaultOrdering?: SortOrderingItem[]\n}\n\n/**\n * Class for building document list\n *\n * @public\n */\nexport class DocumentListBuilder extends GenericListBuilder<\n  PartialDocumentList,\n  DocumentListBuilder\n> {\n  /** Document list options. See {@link PartialDocumentList} */\n  protected spec: PartialDocumentList\n\n  protected _context: StructureContext\n\n  constructor(\n    /**\n     * Structure context. See {@link StructureContext}\n     */\n    _context: StructureContext,\n    spec?: DocumentListInput,\n  ) {\n    super()\n    this._context = _context\n    this.spec = spec || {}\n    this.initialValueTemplatesSpecified = Boolean(spec?.initialValueTemplates)\n  }\n\n  /** Set API version\n   * @param apiVersion - API version\n   * @returns document list builder based on the options and API version provided. See {@link DocumentListBuilder}\n   */\n  apiVersion(apiVersion: string): DocumentListBuilder {\n    return this.clone({options: {...(this.spec.options || {filter: ''}), apiVersion}})\n  }\n\n  /** Get API version\n   * @returns API version\n   */\n  getApiVersion(): string | undefined {\n    return this.spec.options?.apiVersion\n  }\n\n  /** Set Document list filter\n   * @param filter - GROQ-filter used to determine which documents to display. Do not support joins, since they operate on individual documents, and will ignore order-clauses and projections. See {@link https://www.sanity.io/docs/realtime-updates}\n   * @returns document list builder based on the options and filter provided. See {@link DocumentListBuilder}\n   */\n  filter(filter: string): DocumentListBuilder {\n    return this.clone({options: {...this.spec.options, filter}})\n  }\n\n  /** Get Document list filter\n   * @returns filter\n   */\n  getFilter(): string | undefined {\n    return this.spec.options?.filter\n  }\n\n  /** Set Document list schema type name\n   * @param type - schema type name.\n   * @returns document list builder based on the schema type name provided. See {@link DocumentListBuilder}\n   */\n  schemaType(type: SchemaType | string): DocumentListBuilder {\n    const schemaTypeName = typeof type === 'string' ? type : type.name\n    return this.clone({schemaTypeName})\n  }\n\n  /** Get Document list schema type name\n   * @returns schema type name\n   */\n  getSchemaType(): string | undefined {\n    return this.spec.schemaTypeName\n  }\n\n  /** Set Document list options' parameters\n   * @param params - parameters\n   * @returns document list builder based on the options provided. See {@link DocumentListBuilder}\n   */\n  params(params: Record<string, unknown>): DocumentListBuilder {\n    return this.clone({\n      options: {...(this.spec.options || {filter: ''}), params},\n    })\n  }\n\n  /** Get Document list options' parameters\n   * @returns options\n   */\n  getParams(): Record<string, unknown> | undefined {\n    return this.spec.options?.params\n  }\n\n  /** Set Document list default ordering\n   * @param ordering - default sort ordering array. See {@link SortOrderingItem}\n   * @returns document list builder based on ordering provided. See {@link DocumentListBuilder}\n   */\n  defaultOrdering(ordering: SortOrderingItem[]): DocumentListBuilder {\n    if (!Array.isArray(ordering)) {\n      throw new Error('`defaultOrdering` must be an array of order clauses')\n    }\n\n    return this.clone({\n      options: {...(this.spec.options || {filter: ''}), defaultOrdering: ordering},\n    })\n  }\n\n  /** Get Document list default ordering\n   * @returns default ordering. See {@link SortOrderingItem}\n   */\n  getDefaultOrdering(): SortOrderingItem[] | undefined {\n    return this.spec.options?.defaultOrdering\n  }\n\n  /** Serialize Document list\n   * @param options - serialization options. See {@link SerializeOptions}\n   * @returns document list object based on path provided in options. See {@link DocumentList}\n   */\n  serialize(options: SerializeOptions = {path: []}): DocumentList {\n    if (typeof this.spec.id !== 'string' || !this.spec.id) {\n      throw new SerializeError(\n        '`id` is required for document lists',\n        options.path,\n        options.index,\n        this.spec.title,\n      ).withHelpUrl(HELP_URL.ID_REQUIRED)\n    }\n\n    if (!this.spec.options || !this.spec.options.filter) {\n      throw new SerializeError(\n        '`filter` is required for document lists',\n        options.path,\n        this.spec.id,\n        this.spec.title,\n      ).withHelpUrl(HELP_URL.FILTER_REQUIRED)\n    }\n\n    const hasSimpleFilter = this.spec.options?.filter === '_type == $type'\n    if (!hasSimpleFilter && this.spec.options.filter && !this.spec.options.apiVersion) {\n      console.warn(\n        `No apiVersion specified for document type list with custom filter: \\`${this.spec.options.filter}\\`. This will be required in the future. See %s for more info.`,\n        generateHelpUrl(HELP_URL.API_VERSION_REQUIRED_FOR_CUSTOM_FILTER),\n      )\n    }\n    return {\n      ...super.serialize(options),\n      type: 'documentList',\n      schemaTypeName: this.spec.schemaTypeName,\n      child: this.spec.child || createDocumentChildResolverForItem(this._context),\n      options: {\n        ...this.spec.options,\n        // @todo: make specifying .apiVersion required when using custom (non-simple) filters in v4\n        apiVersion: this.spec.options.apiVersion || DEFAULT_STUDIO_CLIENT_OPTIONS.apiVersion,\n        filter: validateFilter(this.spec, options),\n      },\n    }\n  }\n\n  /** Clone Document list builder (allows for options overriding)\n   * @param withSpec - override document list spec. See {@link PartialDocumentList}\n   * @returns document list builder. See {@link DocumentListBuilder}\n   */\n  clone(withSpec?: PartialDocumentList): DocumentListBuilder {\n    const builder = new DocumentListBuilder(this._context)\n    builder.spec = {...this.spec, ...withSpec}\n\n    if (!this.initialValueTemplatesSpecified) {\n      builder.spec.initialValueTemplates = inferInitialValueTemplates(this._context, builder.spec)\n    }\n\n    if (!builder.spec.schemaTypeName) {\n      builder.spec.schemaTypeName = inferTypeName(builder.spec)\n    }\n\n    return builder\n  }\n\n  /** Get Document list spec\n   * @returns document list spec. See {@link PartialDocumentList}\n   */\n  getSpec(): PartialDocumentList {\n    return this.spec\n  }\n}\n\nfunction inferInitialValueTemplates(\n  context: StructureContext,\n  spec: PartialDocumentList,\n): InitialValueTemplateItem[] | undefined {\n  const {document} = context\n  const {schemaTypeName, options} = spec\n  const {filter, params} = options || {filter: '', params: {}}\n  const typeNames = schemaTypeName\n    ? [schemaTypeName]\n    : Array.from(new Set(getTypeNamesFromFilter(filter, params)))\n\n  if (typeNames.length === 0) {\n    return undefined\n  }\n\n  return typeNames\n    .flatMap((schemaType) =>\n      document.resolveNewDocumentOptions({\n        type: 'structure',\n        schemaType,\n      }),\n    )\n    .map((option) => ({...option, icon: AddIcon}))\n}\n\nfunction inferTypeName(spec: PartialDocumentList): string | undefined {\n  const {options} = spec\n  const {filter, params} = options || {filter: '', params: {}}\n  const typeNames = getTypeNamesFromFilter(filter, params)\n  return typeNames.length === 1 ? typeNames[0] : undefined\n}\n\n/** @internal */\nexport function getTypeNamesFromFilter(\n  filter: string,\n  params: Record<string, unknown> = {},\n): string[] {\n  let typeNames = getTypeNamesFromEqualityFilter(filter, params)\n\n  if (typeNames.length === 0) {\n    typeNames = getTypeNamesFromInTypesFilter(filter, params)\n  }\n\n  return typeNames\n}\n\n// From _type == \"movie\" || _type == $otherType\nfunction getTypeNamesFromEqualityFilter(\n  filter: string,\n  params: Record<string, unknown> = {},\n): string[] {\n  const pattern =\n    /\\b_type\\s*==\\s*(['\"].*?['\"]|\\$.*?(?:\\s|$))|\\B(['\"].*?['\"]|\\$.*?(?:\\s|$))\\s*==\\s*_type/g\n  const matches: string[] = []\n  let match\n  while ((match = pattern.exec(filter)) !== null) {\n    matches.push(match[1] || match[2])\n  }\n\n  return matches\n    .map((candidate) => {\n      const typeName = candidate[0] === '$' ? params[candidate.slice(1)] : candidate\n      const normalized = ((typeName as string) || '').trim().replace(/^[\"']|[\"']$/g, '')\n      return normalized\n    })\n    .filter(Boolean)\n}\n\n// From _type in [\"dog\", \"cat\", $otherSpecies]\nfunction getTypeNamesFromInTypesFilter(\n  filter: string,\n  params: Record<string, unknown> = {},\n): string[] {\n  const pattern = /\\b_type\\s+in\\s+\\[(.*?)\\]/\n  const matches = filter.match(pattern)\n  if (!matches) {\n    return []\n  }\n\n  return matches[1]\n    .split(/,\\s*/)\n    .map((match) => match.trim().replace(/^[\"']+|[\"']+$/g, ''))\n    .map((item) => (item[0] === '$' ? params[item.slice(1)] : item))\n    .filter(Boolean) as string[]\n}\n","import {find} from 'lodash'\nimport {isRecord} from 'sanity'\n\nimport {type ChildResolver, type ChildResolverOptions} from './ChildResolver'\nimport {DividerBuilder} from './Divider'\nimport {isDocumentListItem} from './DocumentListItem'\nimport {\n  type BuildableGenericList,\n  type GenericList,\n  GenericListBuilder,\n  type GenericListInput,\n  shallowIntentChecker,\n} from './GenericList'\nimport {type IntentChecker} from './Intent'\nimport {type ListItem, ListItemBuilder} from './ListItem'\nimport {HELP_URL, SerializeError} from './SerializeError'\nimport {type Divider, type SerializeOptions, type SerializePath} from './StructureNodes'\nimport {type StructureContext} from './types'\n\nconst getArgType = (thing: ListItem) => {\n  if (thing instanceof ListBuilder) {\n    return 'ListBuilder'\n  }\n\n  if (isPromise<ListItem>(thing)) {\n    return 'Promise'\n  }\n\n  return Array.isArray(thing) ? 'array' : typeof thing\n}\n\nconst isListItem = (item: ListItem | Divider): item is ListItem => {\n  return item.type === 'listItem'\n}\n\nconst defaultCanHandleIntent: IntentChecker = (intentName: string, params, context) => {\n  const pane = context.pane as List\n  const items = pane.items || []\n  return (\n    items\n      .filter(isDocumentListItem)\n      .some((item) => item.schemaType.name === params.type && item._id === params.id) ||\n    shallowIntentChecker(intentName, params, context)\n  )\n}\n\nconst resolveChildForItem: ChildResolver = (itemId: string, options: ChildResolverOptions) => {\n  const parentItem = options.parent as List\n  const items = parentItem.items.filter(isListItem)\n  const target = (items.find((item) => item.id === itemId) || {child: undefined}).child\n\n  if (!target || typeof target !== 'function') {\n    return target\n  }\n\n  return typeof target === 'function' ? target(itemId, options) : target\n}\n\nfunction maybeSerializeListItem(\n  item: ListItem | ListItemBuilder | Divider | DividerBuilder,\n  index: number,\n  path: SerializePath,\n): ListItem | Divider {\n  if (item instanceof ListItemBuilder) {\n    return item.serialize({path, index})\n  }\n\n  if (item instanceof DividerBuilder) {\n    return item.serialize()\n  }\n\n  const listItem = item as ListItem\n  if (listItem && listItem.type === 'divider') {\n    return item as Divider\n  }\n\n  if (!listItem || listItem.type !== 'listItem') {\n    const gotWhat = (listItem && listItem.type) || getArgType(listItem)\n    const helpText = gotWhat === 'array' ? ' - did you forget to spread (...moreItems)?' : ''\n    throw new SerializeError(\n      `List items must be of type \"listItem\", got \"${gotWhat}\"${helpText}`,\n      path,\n      index,\n    ).withHelpUrl(HELP_URL.INVALID_LIST_ITEM)\n  }\n\n  return item\n}\n\nfunction isPromise<T>(thing: unknown): thing is PromiseLike<T> {\n  return isRecord(thing) && typeof thing.then === 'function'\n}\n\n/**\n * Interface for List\n *\n * @public\n */\nexport interface List extends GenericList {\n  type: 'list'\n  /** List items. See {@link ListItem} and {@link Divider} */\n  items: (ListItem | Divider)[]\n}\n\n/**\n * Interface for list input\n *\n * @public\n */\nexport interface ListInput extends GenericListInput {\n  /** List input items array. See {@link ListItem}, {@link ListItemBuilder} and {@link Divider} */\n  items?: (ListItem | ListItemBuilder | Divider | DividerBuilder)[]\n}\n\n/**\n * Interface for buildable list\n *\n * @public\n */\nexport interface BuildableList extends BuildableGenericList {\n  /** List items. See {@link ListItem}, {@link ListItemBuilder} and {@link Divider} */\n  items?: (ListItem | ListItemBuilder | Divider | DividerBuilder)[]\n}\n\n/**\n * A `ListBuilder` is used to build a list of items in the structure tool.\n *\n * @public */\nexport class ListBuilder extends GenericListBuilder<BuildableList, ListBuilder> {\n  /** buildable list option object. See {@link BuildableList} */\n  protected spec: BuildableList\n\n  protected _context: StructureContext\n\n  constructor(\n    /**\n     * Structure context. See {@link StructureContext}\n     */\n    _context: StructureContext,\n    spec?: ListInput,\n  ) {\n    super()\n    this._context = _context\n    this.spec = spec ? spec : {}\n    this.initialValueTemplatesSpecified = Boolean(spec && spec.initialValueTemplates)\n  }\n\n  /**\n   * Set list builder based on items provided\n   * @param items - list items. See {@link ListItemBuilder}, {@link ListItem} and {@link Divider}\n   * @returns list builder based on items provided. See {@link ListBuilder}\n   */\n  items(items: (ListItemBuilder | ListItem | Divider | DividerBuilder)[]): ListBuilder {\n    return this.clone({items})\n  }\n\n  /** Get list builder items\n   * @returns list items. See {@link BuildableList}\n   */\n  getItems(): BuildableList['items'] {\n    return this.spec.items\n  }\n\n  /** Serialize list builder\n   * @param options - serialization options. See {@link SerializeOptions}\n   * @returns list based on path in options. See {@link List}\n   */\n  serialize(options: SerializeOptions = {path: []}): List {\n    const id = this.spec.id\n    if (typeof id !== 'string' || !id) {\n      throw new SerializeError(\n        '`id` is required for lists',\n        options.path,\n        options.index,\n      ).withHelpUrl(HELP_URL.ID_REQUIRED)\n    }\n\n    const items = typeof this.spec.items === 'undefined' ? [] : this.spec.items\n    if (!Array.isArray(items)) {\n      throw new SerializeError(\n        '`items` must be an array of items',\n        options.path,\n        options.index,\n      ).withHelpUrl(HELP_URL.LIST_ITEMS_MUST_BE_ARRAY)\n    }\n\n    const path = (options.path || []).concat(id)\n    const serializedItems = items.map((item, index) => maybeSerializeListItem(item, index, path))\n    const dupes = serializedItems.filter((val, i) => find(serializedItems, {id: val.id}, i + 1))\n\n    if (dupes.length > 0) {\n      const dupeIds = dupes.map((item) => item.id).slice(0, 5)\n      const dupeDesc = dupes.length > 5 ? `${dupeIds.join(', ')}...` : dupeIds.join(', ')\n      throw new SerializeError(\n        `List items with same ID found (${dupeDesc})`,\n        options.path,\n        options.index,\n      ).withHelpUrl(HELP_URL.LIST_ITEM_IDS_MUST_BE_UNIQUE)\n    }\n\n    return {\n      ...super.serialize(options),\n      type: 'list',\n      canHandleIntent: this.spec.canHandleIntent || defaultCanHandleIntent,\n      child: this.spec.child || resolveChildForItem,\n      items: serializedItems,\n    }\n  }\n\n  /**\n   * Clone list builder and return new list builder based on context and spec provided\n   * @param withSpec - list options. See {@link BuildableList}\n   * @returns new list builder based on context and spec provided. See {@link ListBuilder}\n   */\n  clone(withSpec?: BuildableList): ListBuilder {\n    const builder = new ListBuilder(this._context)\n    builder.spec = {...this.spec, ...withSpec}\n    return builder\n  }\n}\n","import {type SchemaType} from '@sanity/types'\nimport {type Observable} from 'rxjs'\nimport {type I18nTextRecord} from 'sanity'\n\nimport {type ChildResolver, type ItemChild} from './ChildResolver'\nimport {ComponentBuilder} from './Component'\nimport {DocumentBuilder} from './Document'\nimport {DocumentListBuilder} from './DocumentList'\nimport {ListBuilder} from './List'\nimport {HELP_URL, SerializeError} from './SerializeError'\nimport {\n  type Collection,\n  type CollectionBuilder,\n  type Serializable,\n  type SerializeOptions,\n} from './StructureNodes'\nimport {type StructureContext} from './types'\nimport {getStructureNodeId} from './util/getStructureNodeId'\nimport {validateId} from './util/validateId'\n\n/**\n * Unserialized list item child.\n * See {@link Collection}, {@link CollectionBuilder}, {@link ChildResolver} and {@link ItemChild}\n *\n * @public\n */\nexport type UnserializedListItemChild =\n  | Collection\n  | CollectionBuilder\n  | ChildResolver\n  | Observable<ItemChild>\n\n/**\n * Child of List Item\n * See {@link Collection}, {@link ChildResolver}, {@link ItemChild}\n * @public\n */\nexport type ListItemChild = Collection | ChildResolver | Observable<ItemChild> | undefined\n\n/**\n * Interface for serialize list item options\n *\n * @public\n */\nexport interface ListItemSerializeOptions extends SerializeOptions {\n  /** Check if list item title is optional */\n  titleIsOptional?: boolean\n}\n\n/**\n * Interface for ist item display options\n *\n * @public */\nexport interface ListItemDisplayOptions {\n  /** Check if list item display should show icon */\n  showIcon?: boolean\n}\n\n/**\n * interface for list item input\n *\n * @public */\nexport interface ListItemInput {\n  /** List item id */\n  id: string\n  /** List item title */\n  title?: string\n  /** List item icon */\n  icon?: React.ComponentType | React.ReactNode\n  /** List item child. See {@link ListItemChild} */\n  child?: ListItemChild\n  /** List item display options. See {@link ListItemDisplayOptions} */\n  displayOptions?: ListItemDisplayOptions\n  /** List item schema type. See {@link SchemaType} */\n  schemaType?: SchemaType | string\n}\n\n/**\n * Interface for List Item\n *\n * @public */\nexport interface ListItem {\n  /** List item id */\n  id: string\n  /** List item type */\n  type: string\n  /**\n   * The i18n key and namespace used to populate the localized title. This is\n   * the recommend way to set the title if you are localizing your studio.\n   */\n  i18n?: I18nTextRecord<'title'>\n  /** List item title. Note that the `i18n` key and namespace will take precedence. */\n  title?: string\n  /** List item icon */\n  icon?: React.ComponentType | React.ReactNode\n  /** List item child. See {@link ListItemChild} */\n  child?: ListItemChild\n  /** List item display options. See {@link ListItemDisplayOptions} */\n  displayOptions?: ListItemDisplayOptions\n  /** List item schema type. See {@link SchemaType} */\n  schemaType?: SchemaType\n}\n\n/**\n * Interface for unserialized list items.\n *\n * @public\n */\nexport interface UnserializedListItem {\n  /** List item ID */\n  id: string\n  /** List item title */\n  title: string\n  /**\n   * The i18n key and namespace used to populate the localized title. This is\n   * the recommend way to set the title if you are localizing your studio.\n   */\n  i18n?: I18nTextRecord<'title'>\n  /** List item icon */\n  icon?: React.ComponentType | React.ReactNode\n  /** List item child. See {@link UnserializedListItemChild} */\n  child?: UnserializedListItemChild\n  /** List item display options. See {@link ListItemDisplayOptions} */\n  displayOptions?: ListItemDisplayOptions\n  /** List item schema. See {@link SchemaType} */\n  schemaType?: SchemaType | string\n}\n\n/**\n * Partial list item. See {@link UnserializedListItem}\n *\n * @public */\nexport type PartialListItem = Partial<UnserializedListItem>\n\n/**\n * Class for building list items\n *\n * @public */\nexport class ListItemBuilder implements Serializable<ListItem> {\n  /** List item option object. See {@link PartialListItem} */\n  protected spec: PartialListItem\n\n  protected _context: StructureContext\n\n  constructor(\n    /**\n     * Structure context. See {@link StructureContext}\n     */\n    _context: StructureContext,\n    spec?: ListItemInput,\n  ) {\n    this._context = _context\n    this.spec = spec ? spec : {}\n  }\n\n  /**\n   * Set list item ID\n   * @returns list item builder based on ID provided. See {@link ListItemBuilder}\n   */\n  id(id: string): ListItemBuilder {\n    return this.clone({id})\n  }\n\n  /**\n   * Get list item ID\n   * @returns list item ID. See {@link PartialListItem}\n   */\n  getId(): PartialListItem['id'] {\n    return this.spec.id\n  }\n\n  /**\n   * Set list item title\n   * @returns list item builder based on title provided. See {@link ListItemBuilder}\n   */\n  title(title: string): ListItemBuilder {\n    return this.clone({title, id: getStructureNodeId(title, this.spec.id)})\n  }\n\n  /**\n   * Get list item title\n   * @returns list item title. See {@link PartialListItem}\n   */\n  getTitle(): PartialListItem['title'] {\n    return this.spec.title\n  }\n\n  /** Set the i18n key and namespace used to populate the localized title.\n   * @param i18n - the key and namespaced used to populate the localized title.\n   * @returns component builder based on i18n key and ns provided\n   */\n  i18n(i18n: I18nTextRecord<'title'>): ListItemBuilder {\n    return this.clone({i18n})\n  }\n\n  /** Get i18n key and namespace used to populate the localized title\n   * @returns the i18n key and namespace used to populate the localized title\n   */\n  getI18n(): I18nTextRecord<'title'> | undefined {\n    return this.spec.i18n\n  }\n\n  /**\n   * Set list item icon\n   * @returns list item builder based on icon provided. See {@link ListItemBuilder}\n   */\n  icon(icon: React.ComponentType | React.ReactNode): ListItemBuilder {\n    return this.clone({icon})\n  }\n\n  /**\n   * Set if list item should show icon\n   * @returns list item builder based on showIcon provided. See {@link ListItemBuilder}\n   */\n  showIcon(enabled = true): ListItemBuilder {\n    return this.clone({\n      displayOptions: {...this.spec.displayOptions, showIcon: enabled},\n    })\n  }\n\n  /**\n   * Check if list item should show icon\n   * @returns true if it should show the icon, false if not, undefined if not set\n   */\n  getShowIcon(): boolean | undefined {\n    return this.spec.displayOptions ? this.spec.displayOptions.showIcon : undefined\n  }\n\n  /**\n   *Get list item icon\n   * @returns list item icon. See {@link PartialListItem}\n   */\n  getIcon(): PartialListItem['icon'] {\n    return this.spec.icon\n  }\n\n  /**\n   * Set list item child\n   * @param child - list item child. See {@link UnserializedListItemChild}\n   * @returns list item builder based on child provided. See {@link ListItemBuilder}\n   */\n  child(child: UnserializedListItemChild): ListItemBuilder {\n    return this.clone({child})\n  }\n\n  /**\n   * Get list item child\n   * @returns list item child. See {@link PartialListItem}\n   */\n  getChild(): PartialListItem['child'] {\n    return this.spec.child\n  }\n\n  /**\n   * Set list item schema type\n   * @param schemaType - list item schema type. See {@link SchemaType}\n   * @returns list item builder based on schema type provided. See {@link ListItemBuilder}\n   */\n  schemaType(schemaType: SchemaType | string): ListItemBuilder {\n    return this.clone({schemaType})\n  }\n\n  /**\n   * Get list item schema type\n   * @returns list item schema type. See {@link PartialListItem}\n   */\n  getSchemaType(): PartialListItem['schemaType'] {\n    const schemaType = this.spec.schemaType\n\n    if (typeof schemaType === 'string') {\n      return this._context.schema.get(schemaType)\n    }\n\n    return this.spec.schemaType\n  }\n\n  /** Serialize list item builder\n   * @param options - serialization options. See {@link ListItemSerializeOptions}\n   * @returns list item node based on path provided in options. See {@link ListItem}\n   */\n  serialize(options: ListItemSerializeOptions = {path: []}): ListItem {\n    const {id, title, child} = this.spec\n    if (typeof id !== 'string' || !id) {\n      throw new SerializeError(\n        '`id` is required for list items',\n        options.path,\n        options.index,\n      ).withHelpUrl(HELP_URL.ID_REQUIRED)\n    }\n\n    if (!options.titleIsOptional && (typeof title !== 'string' || !title)) {\n      throw new SerializeError('`title` is required for list items', options.path, id).withHelpUrl(\n        HELP_URL.TITLE_REQUIRED,\n      )\n    }\n\n    let schemaType = this.spec.schemaType\n    if (typeof schemaType === 'string') {\n      const type = this._context.schema.get(schemaType)\n      if (!type) {\n        throw new SerializeError(\n          `Could not find type \"${schemaType}\" in schema`,\n          options.path,\n          id,\n        ).withHelpUrl(HELP_URL.SCHEMA_TYPE_NOT_FOUND)\n      }\n\n      schemaType = type\n    }\n\n    const serializeOptions = {path: options.path.concat(id), hint: 'child'}\n    let listChild =\n      child instanceof ComponentBuilder ||\n      child instanceof DocumentListBuilder ||\n      child instanceof DocumentBuilder ||\n      child instanceof ListBuilder\n        ? child.serialize(serializeOptions)\n        : child\n\n    // In the case of a function, create a bound version that will pass the correct serialize\n    // context, so we may lazily resolve it at some point in the future without losing context\n    if (typeof listChild === 'function') {\n      const originalChild = listChild\n      listChild = (itemId, childOptions) => {\n        return originalChild(itemId, {...childOptions, serializeOptions})\n      }\n    }\n\n    return {\n      ...this.spec,\n      id: validateId(id, options.path, options.index),\n      schemaType,\n      child: listChild,\n      title,\n      type: 'listItem',\n    }\n  }\n\n  /** Clone list item builder\n   * @param withSpec - partial list item options. See {@link PartialListItem}\n   * @returns list item builder based on context and spec provided. See {@link ListItemBuilder}\n   */\n  clone(withSpec?: PartialListItem): ListItemBuilder {\n    const builder = new ListItemBuilder(this._context)\n    builder.spec = {...this.spec, ...withSpec}\n    return builder\n  }\n}\n","import {type SchemaType} from '@sanity/types'\nimport {isRecord} from 'sanity'\n\nimport {DocumentBuilder} from './Document'\nimport {\n  type ListItem,\n  ListItemBuilder,\n  type ListItemInput,\n  type UnserializedListItem,\n} from './ListItem'\nimport {HELP_URL, SerializeError} from './SerializeError'\nimport {type SerializeOptions} from './StructureNodes'\nimport {type StructureContext} from './types'\n\n/**\n * Interface for document list item input\n *\n * @public\n */\nexport interface DocumentListItemInput extends ListItemInput {\n  /** Document list item input schema type. See {@link SchemaType} */\n  schemaType: SchemaType | string\n}\n\n/**\n * Interface for document list item\n *\n * @public\n */\nexport interface DocumentListItem extends ListItem {\n  /** Document schema type. See {@link SchemaType} */\n  schemaType: SchemaType\n  /** Document ID */\n  _id: string\n}\n\n/**\n * Partial document list item\n *\n * @public\n */\nexport type PartialDocumentListItem = Partial<UnserializedListItem>\n\nconst createDefaultChildResolver =\n  (context: StructureContext, spec: PartialDocumentListItem) => (documentId: string) => {\n    const schemaType =\n      spec.schemaType &&\n      (typeof spec.schemaType === 'string' ? spec.schemaType : spec.schemaType.name)\n\n    return schemaType\n      ? context.resolveDocumentNode({schemaType, documentId})\n      : new DocumentBuilder(context).id('documentEditor').documentId(documentId)\n  }\n\n/**\n * Class for building a document list item\n *\n * @public\n */\nexport class DocumentListItemBuilder extends ListItemBuilder {\n  /** Document list options. See {@link PartialDocumentListItem} */\n  protected spec: PartialDocumentListItem\n\n  protected _context: StructureContext\n\n  constructor(\n    /**\n     * Structure context. See {@link StructureContext}\n     */\n    _context: StructureContext,\n    spec?: DocumentListItemInput,\n  ) {\n    super(_context, spec)\n    this._context = _context\n    this.spec = spec ? spec : {}\n  }\n\n  /**\n   * Serialize document list item\n   * @param options - serialization options. See {@link SerializeOptions}\n   * @returns document list item object based on path provided in options. See {@link DocumentListItem}\n   */\n  serialize(options: SerializeOptions = {path: []}): DocumentListItem {\n    const spec = super.serialize({...options, titleIsOptional: true})\n\n    if (!spec.schemaType) {\n      throw new SerializeError(\n        '`schemaType` is required for document list items',\n        options.path,\n        options.index,\n      ).withHelpUrl(HELP_URL.SCHEMA_TYPE_REQUIRED)\n    }\n\n    const child = spec.child || createDefaultChildResolver(this._context, spec)\n    return {...spec, child, schemaType: spec.schemaType, _id: spec.id}\n  }\n\n  /** Clone Document list item builder (allows for options overriding)\n   * @param withSpec - Document list item builder options. See {@link PartialDocumentListItem}\n   * @returns document list item builder. See {@link DocumentListItemBuilder}\n   */\n  clone(withSpec?: PartialDocumentListItem): DocumentListItemBuilder {\n    const builder = new DocumentListItemBuilder(this._context)\n    builder.spec = {...this.spec, ...withSpec}\n    return builder\n  }\n}\n\n/** @internal */\nexport function isDocumentListItem(item: unknown): item is DocumentListItem {\n  return isRecord(item) && typeof item.schemaType !== 'undefined' && typeof item._id === 'string'\n}\n","import {type SchemaType} from '@sanity/types'\n\nimport {DocumentListBuilder, type DocumentListInput, type PartialDocumentList} from './DocumentList'\nimport {type GenericListInput} from './GenericList'\nimport {DEFAULT_INTENT_HANDLER} from './Intent'\nimport {type Child} from './StructureNodes'\nimport {type StructureContext} from './types'\n\n/**\n * Interface for document type list input\n *\n * @public\n */\nexport interface DocumentTypeListInput extends Partial<GenericListInput> {\n  /** Document type list input schema type. See {@link SchemaType} */\n  schemaType: SchemaType | string\n}\n\n/**\n * Class for building a document type list\n *\n * @public\n */\nexport class DocumentTypeListBuilder extends DocumentListBuilder {\n  /** Document list options. See {@link PartialDocumentList} */\n  protected spec: PartialDocumentList\n\n  protected _context: StructureContext\n\n  constructor(\n    /**\n     * Structure context. See {@link StructureContext}\n     */\n    _context: StructureContext,\n    spec?: DocumentListInput,\n  ) {\n    super(_context)\n    this._context = _context\n    this.spec = spec ? spec : {}\n  }\n\n  /**\n   * Set Document type list child\n   * @param child - Child component. See {@link Child}\n   * @returns document type list builder based on child component provided without default intent handler. See {@link DocumentTypeListBuilder}\n   */\n  child(child: Child): DocumentTypeListBuilder {\n    return this.cloneWithoutDefaultIntentHandler({child})\n  }\n\n  /** Clone Document type list builder (allows for options overriding)\n   * @param withSpec - Document type list builder options. See {@link PartialDocumentList}\n   * @returns document type list builder. See {@link DocumentTypeListBuilder}\n   */\n  clone(withSpec?: PartialDocumentList): DocumentTypeListBuilder {\n    const parent = super.clone(withSpec)\n    const builder = new DocumentTypeListBuilder(this._context)\n    builder.spec = {...this.spec, ...parent.getSpec(), ...withSpec}\n    return builder\n  }\n\n  /** Clone Document type list builder (allows for options overriding) and remove default intent handler\n   * @param withSpec - Document type list builder options. See {@link PartialDocumentList}\n   * @returns document type list builder without default intent handler. See {@link DocumentTypeListBuilder}\n   */\n  cloneWithoutDefaultIntentHandler(withSpec?: PartialDocumentList): DocumentTypeListBuilder {\n    const parent = super.clone(withSpec)\n    const builder = new DocumentTypeListBuilder(this._context)\n    const canHandleIntent = this.spec.canHandleIntent\n    const shouldOverride = canHandleIntent && canHandleIntent.identity === DEFAULT_INTENT_HANDLER\n    const override = shouldOverride ? {canHandleIntent: undefined} : {}\n    builder.spec = {\n      ...parent.getSpec(),\n      ...this.spec,\n      ...withSpec,\n      ...override,\n    }\n    return builder\n  }\n}\n","import {StackCompactIcon, StackIcon} from '@sanity/icons'\nimport {type SchemaType} from '@sanity/types'\nimport {startCase} from 'lodash'\n\nimport {structureLocaleNamespace} from '../i18n'\nimport {type DocumentListBuilder} from './DocumentList'\nimport {DocumentTypeListBuilder, type DocumentTypeListInput} from './DocumentTypeList'\nimport {defaultIntentChecker} from './Intent'\nimport {type List} from './List'\nimport {type ListItem, ListItemBuilder} from './ListItem'\nimport {getOrderingMenuItemsForSchemaType, MenuItemBuilder} from './MenuItem'\nimport {DEFAULT_SELECTED_ORDERING_OPTION} from './Sort'\nimport {type Collection} from './StructureNodes'\nimport {type StructureContext} from './types'\n\nconst BUNDLED_DOC_TYPES = ['sanity.imageAsset', 'sanity.fileAsset']\n\nfunction isBundledDocType(typeName: string) {\n  return BUNDLED_DOC_TYPES.includes(typeName)\n}\n\nfunction isDocumentType(schemaType: SchemaType) {\n  return schemaType.type?.name === 'document'\n}\n\nfunction isList(collection: Collection): collection is List {\n  return collection.type === 'list'\n}\n\nexport function getDocumentTypes({schema}: StructureContext): string[] {\n  return schema\n    .getTypeNames()\n    .filter((n) => {\n      const schemaType = schema.get(n)\n      return schemaType && isDocumentType(schemaType)\n    })\n    .filter((n) => !isBundledDocType(n))\n}\n\nexport function getDocumentTypeListItems(context: StructureContext): ListItemBuilder[] {\n  const types = getDocumentTypes(context)\n  return types.map((typeName) => getDocumentTypeListItem(context, typeName))\n}\n\nexport function getDocumentTypeListItem(\n  context: StructureContext,\n  typeName: string,\n): ListItemBuilder {\n  const {schema} = context\n\n  const type = schema.get(typeName)\n  if (!type) {\n    throw new Error(`Schema type with name \"${typeName}\" not found`)\n  }\n\n  const title = type.title || startCase(typeName)\n\n  return new ListItemBuilder(context)\n    .id(typeName)\n    .title(title)\n    .schemaType(type)\n    .child((id, childContext) => {\n      const parent = childContext.parent as Collection\n      const parentItem = isList(parent)\n        ? (parent.items.find((item) => item.id === id) as ListItem)\n        : null\n\n      let list = getDocumentTypeList(context, typeName)\n      if (parentItem && parentItem.title) {\n        list = list.title(parentItem.title)\n      }\n\n      return list\n    })\n}\n\nexport function getDocumentTypeList(\n  context: StructureContext,\n  typeNameOrSpec: string | DocumentTypeListInput,\n): DocumentListBuilder {\n  const {schema, resolveDocumentNode} = context\n\n  const schemaType = typeof typeNameOrSpec === 'string' ? typeNameOrSpec : typeNameOrSpec.schemaType\n  const typeName = typeof schemaType === 'string' ? schemaType : schemaType.name\n  const spec: DocumentTypeListInput =\n    typeof typeNameOrSpec === 'string' ? {schemaType} : typeNameOrSpec\n\n  const type = schema.get(typeName)\n  if (!type) {\n    throw new Error(`Schema type with name \"${typeName}\" not found`)\n  }\n\n  const title = type.title || startCase(typeName)\n\n  return new DocumentTypeListBuilder(context)\n    .id(spec.id || typeName)\n    .title(spec.title || title)\n    .filter('_type == $type')\n    .params({type: typeName})\n    .schemaType(type)\n    .defaultOrdering(DEFAULT_SELECTED_ORDERING_OPTION.by)\n    .menuItemGroups(\n      spec.menuItemGroups || [\n        {\n          id: 'sorting',\n          title: 'Sort',\n          i18n: {title: {key: 'menu-item-groups.actions-group', ns: structureLocaleNamespace}},\n        },\n        {\n          id: 'layout',\n          title: 'Layout',\n          i18n: {title: {key: 'menu-item-groups.layout-group', ns: structureLocaleNamespace}},\n        },\n        {\n          id: 'actions',\n          title: 'Actions',\n          i18n: {title: {key: 'menu-item-groups.sorting-group', ns: structureLocaleNamespace}},\n        },\n      ],\n    )\n    .child(\n      spec.child ||\n        ((documentId: string) => resolveDocumentNode({schemaType: typeName, documentId})),\n    )\n    .canHandleIntent(spec.canHandleIntent || defaultIntentChecker)\n    .menuItems(\n      spec.menuItems || [\n        // Create new (from action button) will be added in serialization step of GenericList\n\n        // Sort by <Y>\n        ...getOrderingMenuItemsForSchemaType(context, type),\n\n        // Display as <Z>\n        new MenuItemBuilder(context)\n          .group('layout')\n          .i18n({title: {key: 'menu-items.layout.compact-view', ns: structureLocaleNamespace}})\n          .title('Compact view') // fallback title\n          .icon(StackCompactIcon)\n          .action('setLayout')\n          .params({layout: 'default'}),\n\n        new MenuItemBuilder(context)\n          .group('layout')\n          .i18n({title: {key: 'menu-items.layout.detailed-view', ns: structureLocaleNamespace}})\n          .title('Detailed view') // fallback title\n          .icon(StackIcon)\n          .action('setLayout')\n          .params({layout: 'detail'}),\n\n        // Create new (from menu) will be added in serialization step of GenericList\n      ],\n    )\n}\n","import {type SchemaType} from '@sanity/types'\nimport {isValidElementType} from 'react-is'\nimport {\n  getConfigContextFromSource,\n  getPublishedId,\n  type PerspectiveStack,\n  type Source,\n} from 'sanity'\n\nimport {structureLocaleNamespace} from '../i18n'\nimport {ComponentBuilder, type ComponentInput} from './Component'\nimport {DividerBuilder} from './Divider'\nimport {DocumentBuilder, documentFromEditor, documentFromEditorWithInitialValue} from './Document'\nimport {DocumentListBuilder} from './DocumentList'\nimport {DocumentListItemBuilder} from './DocumentListItem'\nimport {\n  getDocumentTypeList,\n  getDocumentTypeListItem,\n  getDocumentTypeListItems,\n} from './documentTypeListItems'\nimport {\n  defaultInitialValueTemplateItems,\n  InitialValueTemplateItemBuilder,\n  menuItemsFromInitialValueTemplateItems,\n} from './InitialValueTemplateItem'\nimport {ListBuilder} from './List'\nimport {ListItemBuilder} from './ListItem'\nimport {getOrderingMenuItem, getOrderingMenuItemsForSchemaType, MenuItemBuilder} from './MenuItem'\nimport {MenuItemGroupBuilder} from './MenuItemGroup'\nimport {type Divider} from './StructureNodes'\nimport {\n  type DefaultDocumentNodeResolver,\n  type StructureBuilder,\n  type StructureContext,\n  type UserComponent,\n} from './types'\nimport * as views from './views'\n\n/** @internal */\nexport interface StructureBuilderOptions {\n  source: Source\n  defaultDocumentNode?: DefaultDocumentNodeResolver\n  perspectiveStack: PerspectiveStack\n}\n\nfunction hasIcon(schemaType?: SchemaType | string): boolean {\n  if (!schemaType || typeof schemaType === 'string') {\n    return false\n  }\n\n  return Boolean(schemaType.icon)\n}\n\nfunction getDefaultStructure(context: StructureContext): ListBuilder {\n  const items = getDocumentTypeListItems(context)\n  return new ListBuilder(context)\n    .id('__root__')\n    .title('Content')\n    .i18n({title: {key: 'default-definition.content-title', ns: structureLocaleNamespace}})\n    .items(items)\n    .showIcons(items.some((item) => hasIcon(item.getSchemaType())))\n}\n\n/** @internal */\nexport function createStructureBuilder({\n  defaultDocumentNode,\n  source,\n  perspectiveStack,\n}: StructureBuilderOptions): StructureBuilder {\n  const configContext = getConfigContextFromSource(source)\n  const context: StructureContext = {\n    ...source,\n    getStructureBuilder: () => structureBuilder,\n    resolveDocumentNode: (options) => {\n      let builder =\n        defaultDocumentNode?.(structureBuilder, {...options, ...configContext}) ||\n        new DocumentBuilder(context)\n\n      if (!builder.getId()) {\n        builder = builder.id('documentEditor')\n      }\n\n      if (options.documentId) {\n        builder = builder.documentId(getPublishedId(options.documentId))\n      }\n\n      return builder.schemaType(options.schemaType)\n    },\n    perspectiveStack,\n  }\n\n  const structureBuilder: StructureBuilder = {\n    defaults: () => getDefaultStructure(context),\n    documentTypeList: (...args) => getDocumentTypeList(context, ...args),\n    documentTypeListItem: (...args) => getDocumentTypeListItem(context, ...args),\n    documentTypeListItems: (...args) => getDocumentTypeListItems(context, ...args),\n    document: (...args) => new DocumentBuilder(context, ...args),\n    documentWithInitialValueTemplate: (...args) =>\n      documentFromEditorWithInitialValue(context, ...args),\n    defaultDocument: context.resolveDocumentNode,\n\n    list: (...args) => new ListBuilder(context, ...args),\n    listItem: (...args) => new ListItemBuilder(context, ...args),\n\n    menuItem: (...args) => new MenuItemBuilder(context, ...args),\n    menuItemGroup: (...args) => new MenuItemGroupBuilder(context, ...args),\n    menuItemsFromInitialValueTemplateItems: (...args) =>\n      menuItemsFromInitialValueTemplateItems(context, ...args),\n\n    documentList: (...args) => new DocumentListBuilder(context, ...args),\n    documentListItem: (...args) => new DocumentListItemBuilder(context, ...args),\n\n    orderingMenuItem: (...args) => getOrderingMenuItem(context, ...args),\n    orderingMenuItemsForType: (...args) => getOrderingMenuItemsForSchemaType(context, ...args),\n\n    editor: (...args) => documentFromEditor(context, ...args),\n\n    defaultInitialValueTemplateItems: (...args) =>\n      defaultInitialValueTemplateItems(context, ...args),\n\n    initialValueTemplateItem: (\n      templateId: string,\n      parameters?: Record<string, unknown>,\n    ): InitialValueTemplateItemBuilder =>\n      new InitialValueTemplateItemBuilder(context, {\n        id: templateId,\n        parameters,\n        templateId,\n      }),\n\n    component: (spec?: ComponentInput | UserComponent) => {\n      return isValidElementType(spec)\n        ? new ComponentBuilder().component(spec as UserComponent)\n        : new ComponentBuilder(spec as ComponentInput)\n    },\n\n    divider: (spec?: Divider) => new DividerBuilder(spec),\n\n    view: views,\n    context,\n  }\n\n  return structureBuilder\n}\n","import {type ReactNode, useMemo, useState} from 'react'\nimport {useConfigContextFromSource, useDocumentStore, usePerspective, useSource} from 'sanity'\nimport {StructureToolContext} from 'sanity/_singletons'\n\nimport {createStructureBuilder, type DefaultDocumentNodeResolver} from './structureBuilder'\nimport {\n  type StructureResolver,\n  type StructureToolContextValue,\n  type UnresolvedPaneNode,\n} from './types'\n\n/** @internal */\nexport interface StructureToolProviderProps {\n  structure?: StructureResolver\n  defaultDocumentNode?: DefaultDocumentNodeResolver\n  children: ReactNode\n}\n\n/** @internal */\nexport function StructureToolProvider({\n  defaultDocumentNode,\n  structure: resolveStructure,\n  children,\n}: StructureToolProviderProps): React.JSX.Element {\n  const [layoutCollapsed, setLayoutCollapsed] = useState(false)\n  const source = useSource()\n  const configContext = useConfigContextFromSource(source)\n  const documentStore = useDocumentStore()\n\n  const {perspectiveStack} = usePerspective()\n\n  const S = useMemo(() => {\n    return createStructureBuilder({\n      defaultDocumentNode,\n      source,\n      perspectiveStack,\n    })\n  }, [defaultDocumentNode, source, perspectiveStack])\n\n  const rootPaneNode = useMemo(() => {\n    // TODO: unify types and remove cast\n    if (resolveStructure)\n      return resolveStructure(S, {\n        ...configContext,\n        documentStore,\n\n        perspectiveStack,\n      }) as UnresolvedPaneNode\n    return S.defaults() as UnresolvedPaneNode\n  }, [resolveStructure, S, configContext, documentStore, perspectiveStack])\n\n  const features: StructureToolContextValue['features'] = useMemo(\n    () => ({\n      backButton: layoutCollapsed,\n      resizablePanes: !layoutCollapsed,\n      reviewChanges: !layoutCollapsed,\n      splitPanes: !layoutCollapsed,\n      splitViews: !layoutCollapsed,\n    }),\n    [layoutCollapsed],\n  )\n\n  const structureTool: StructureToolContextValue = useMemo(() => {\n    return {\n      features,\n      layoutCollapsed,\n      setLayoutCollapsed,\n      rootPaneNode,\n      structureContext: S.context,\n    }\n  }, [features, layoutCollapsed, rootPaneNode, S.context])\n\n  return (\n    <StructureToolContext.Provider value={structureTool}>{children}</StructureToolContext.Provider>\n  )\n}\n"],"names":["structureLocaleNamespace","structureUsEnglishLocaleBundle","defineLocaleResourceBundle","locale","namespace","resources","IMPLICIT_SCHEMA_TYPE_FIELDS","joinReferences","schemaType","path","strict","head","tail","schemaField","fields","find","field","name","includes","errorMessage","map","join","Error","console","warn","type","refTypes","to","refType","tailFields","length","tailWrapper","getExtendedProjection","orderBy","ordering","split","SerializeError","constructor","message","parentPath","pathSegment","hint","segment","concat","withHelpUrl","id","helpId","HELP_URL","ID_REQUIRED","TITLE_REQUIRED","FILTER_REQUIRED","INVALID_LIST_ITEM","COMPONENT_REQUIRED","DOCUMENT_ID_REQUIRED","DOCUMENT_TYPE_REQUIRED","SCHEMA_TYPE_REQUIRED","SCHEMA_TYPE_NOT_FOUND","LIST_ITEMS_MUST_BE_ARRAY","QUERY_PROVIDED_FOR_FILTER","ACTION_OR_INTENT_REQUIRED","LIST_ITEM_IDS_MUST_BE_UNIQUE","ACTION_AND_INTENT_MUTUALLY_EXCLUSIVE","API_VERSION_REQUIRED_FOR_CUSTOM_FILTER","ORDER_BY_UPDATED_AT","title","i18n","key","ns","by","direction","ORDER_BY_CREATED_AT","DEFAULT_SELECTED_ORDERING_OPTION","DEFAULT_ORDERING_OPTIONS","maybeSerializeMenuItem","item","index","MenuItemBuilder","serialize","_context","spec","action","clone","getAction","intent","getIntent","getTitle","getI18n","group","getGroup","icon","getIcon","params","getParams","showAsAction","Boolean","getShowAsAction","options","undefined","withSpec","builder","getOrderingMenuItem","context","extendedProjection","t","replace","SortIcon","getOrderingMenuItemsForSchemaType","typeName","schema","get","orderings","maybeSerializeMenuItemGroup","MenuItemGroupBuilder","_id","_title","_i18n","getId","disallowedPattern","validateId","disallowedChar","match","startsWith","getStructureNodeId","camelCased","camelCase","test","getSlug","ComponentBuilder","child","getChild","component","getComponent","getOptions","menuItems","getMenuItems","menuItemGroups","getMenuItemGroups","canHandleIntent","componentOptions","i","DividerBuilder","uniqueId","resolveTypeForDocument","getClient","DEFAULT_STUDIO_CLIENT_OPTIONS","fetch","publishedId","getPublishedId","tag","GenericViewBuilder","kebabCase","isSerializable","view","maybeSerializeView","isComponentSpec","isRecord","ComponentViewBuilder","componentOrSpec","userComponent","base","FormViewBuilder","form","createDocumentChildResolver","resolveDocumentNode","itemId","slice","currentSegment","documentId","DocumentBuilder","paneId","getDocumentId","documentType","getSchemaType","initialValueTemplate","templateId","parameters","template","templateParameters","getInitialValueTemplate","getInitialValueTemplateParameters","views","getViews","urlId","viewIds","dupes","uniq","filter","viewId","getDocumentOptions","opts","documentFromEditor","doc","documentFromEditorWithInitialValue","templates","InitialValueTemplateItemBuilder","description","getDescription","getTemplateId","getParameters","subtitle","initialDocumentId","defaultInitialValueTemplateItems","getStructureBuilder","typeNames","getTypeNames","tpl","sort","a","b","indexOf","initialValueTemplateItem","maybeSerializeInitialValueTemplateItem","menuItemsFromInitialValueTemplateItems","templateItems","intentParams","AddIcon","DEFAULT_INTENT_HANDLER","Symbol","defaultIntentChecker","intentName","pane","isEdit","isCreate","typedSpec","paneFilter","paneParams","schemaTypeName","getTypeNamesFromFilter","initialValueTemplates","some","identity","layoutOptions","noChildResolver","shallowIntentChecker","GenericListBuilder","initialValueTemplatesSpecified","defaultLayout","getDefaultLayout","getCanHandleIntent","showIcons","enabled","displayOptions","getShowIcons","Array","isArray","getInitialValueTemplates","validateFilter","trim","createDocumentChildResolverForItem","parentItem","parent","Promise","resolve","then","DocumentListBuilder","apiVersion","getApiVersion","getFilter","defaultOrdering","getDefaultOrdering","generateHelpUrl","inferInitialValueTemplates","inferTypeName","getSpec","document","from","Set","flatMap","resolveNewDocumentOptions","option","getTypeNamesFromEqualityFilter","getTypeNamesFromInTypesFilter","pattern","matches","exec","push","candidate","getArgType","thing","ListBuilder","isPromise","isListItem","defaultCanHandleIntent","items","isDocumentListItem","resolveChildForItem","target","maybeSerializeListItem","ListItemBuilder","listItem","gotWhat","helpText","getItems","serializedItems","val","dupeIds","dupeDesc","showIcon","getShowIcon","titleIsOptional","serializeOptions","listChild","originalChild","childOptions","createDefaultChildResolver","DocumentListItemBuilder","DocumentTypeListBuilder","cloneWithoutDefaultIntentHandler","override","BUNDLED_DOC_TYPES","isBundledDocType","isDocumentType","isList","collection","getDocumentTypes","n","getDocumentTypeListItems","getDocumentTypeListItem","startCase","childContext","list","getDocumentTypeList","typeNameOrSpec","StackCompactIcon","layout","StackIcon","hasIcon","getDefaultStructure","createStructureBuilder","defaultDocumentNode","source","perspectiveStack","configContext","getConfigContextFromSource","structureBuilder","defaults","documentTypeList","args","documentTypeListItem","documentTypeListItems","documentWithInitialValueTemplate","defaultDocument","menuItem","menuItemGroup","documentList","documentListItem","orderingMenuItem","orderingMenuItemsForType","editor","isValidElementType","divider","StructureToolProvider","structure","resolveStructure","children","layoutCollapsed","setLayoutCollapsed","useState","useSource","useConfigContextFromSource","documentStore","useDocumentStore","usePerspective","S","useMemo","rootPaneNode","features","backButton","resizablePanes","reviewChanges","splitPanes","splitViews","structureTool","structureContext"],"mappings":"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","ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27],"debugId":null}}]
}